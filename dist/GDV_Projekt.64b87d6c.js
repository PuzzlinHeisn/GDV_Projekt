// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (
  modules,
  entry,
  mainEntry,
  parcelRequireName,
  externals,
  distDir,
  publicUrl,
  devServer
) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var importMap = previousRequire.i || {};
  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        if (externals[name]) {
          return externals[name];
        }
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.require = nodeRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.distDir = distDir;
  newRequire.publicUrl = publicUrl;
  newRequire.devServer = devServer;
  newRequire.i = importMap;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  // Only insert newRequire.load when it is actually used.
  // The code in this file is linted against ES5, so dynamic import is not allowed.
  // INSERT_LOAD_HERE

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });
    }
  }
})({"3wBHn":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SERVER_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "439701173a9199ea";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "912b0df064b87d6c";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_SERVER_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ , bundleNotFound = false;
function getHostname() {
    return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);
}
// eslint-disable-next-line no-redeclare
let WebSocket = globalThis.WebSocket;
if (!WebSocket && typeof module.bundle.root === 'function') try {
    // eslint-disable-next-line no-global-assign
    WebSocket = module.bundle.root('ws');
} catch  {
// ignore.
}
var hostname = getHostname();
var port = getPort();
var protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && ![
    'localhost',
    '127.0.0.1',
    '0.0.0.0'
].includes(hostname) ? 'wss' : 'ws';
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if (!parent || !parent.isParcelRequire) {
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        // If we're running in the dev server's node runner, listen for messages on the parent port.
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) {
            parentPort.on('message', async (message)=>{
                try {
                    await handleMessage(message);
                    parentPort.postMessage('updated');
                } catch  {
                    parentPort.postMessage('restart');
                }
            });
            // After the bundle has finished running, notify the dev server that the HMR update is complete.
            queueMicrotask(()=>parentPort.postMessage('ready'));
        }
    } catch  {
        if (typeof WebSocket !== 'undefined') try {
            ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
        } catch (err) {
            // Ignore cloudflare workers error.
            if (err.message && !err.message.includes('Disallowed operation called within global scope')) console.error(err.message);
        }
    }
    if (ws) {
        // $FlowFixMe
        ws.onmessage = async function(event /*: {data: string, ...} */ ) {
            var data /*: HMRMessage */  = JSON.parse(event.data);
            await handleMessage(data);
        };
        if (ws instanceof WebSocket) {
            ws.onerror = function(e) {
                if (e.message) console.error(e.message);
            };
            ws.onclose = function() {
                console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
            };
        }
    }
}
async function handleMessage(data /*: HMRMessage */ ) {
    checkedAssets = {} /*: {|[string]: boolean|} */ ;
    disposedAssets = {} /*: {|[string]: boolean|} */ ;
    assetsToAccept = [];
    assetsToDispose = [];
    bundleNotFound = false;
    if (data.type === 'reload') fullReload();
    else if (data.type === 'update') {
        // Remove error overlay if there is one
        if (typeof document !== 'undefined') removeErrorOverlay();
        let assets = data.assets;
        // Handle HMR Update
        let handled = assets.every((asset)=>{
            return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        });
        // Dispatch a custom event in case a bundle was not found. This might mean
        // an asset on the server changed and we should reload the page. This event
        // gives the client an opportunity to refresh without losing state
        // (e.g. via React Server Components). If e.preventDefault() is not called,
        // we will trigger a full page reload.
        if (handled && bundleNotFound && assets.some((a)=>a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {
            cancelable: true
        }));
        if (handled) {
            console.clear();
            // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
            if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
            await hmrApplyUpdates(assets);
            hmrDisposeQueue();
            // Run accept callbacks. This will also re-execute other disposed assets in topological order.
            let processedAssets = {};
            for(let i = 0; i < assetsToAccept.length; i++){
                let id = assetsToAccept[i][1];
                if (!processedAssets[id]) {
                    hmrAccept(assetsToAccept[i][0], id);
                    processedAssets[id] = true;
                }
            }
        } else fullReload();
    }
    if (data.type === 'error') {
        // Log parcel errors to console
        for (let ansiDiagnostic of data.diagnostics.ansi){
            let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
            console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
        }
        if (typeof document !== 'undefined') {
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if (typeof location !== 'undefined' && 'reload' in location) location.reload();
    else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
    else try {
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) parentPort.postMessage('restart');
    } catch (err) {
        console.error("[parcel] \u26A0\uFE0F An HMR update was not accepted. Please restart the process.");
    }
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout || typeof document === 'undefined') return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    checkedAssets = {};
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else if (a !== null) {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) {
            bundleNotFound = true;
            return true;
        }
        return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return null;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    if (!cached) return true;
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
    return false;
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"eM1fv":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$97be = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
$parcel$ReactRefreshHelpers$97be.init();
var prevRefreshReg = globalThis.$RefreshReg$;
var prevRefreshSig = globalThis.$RefreshSig$;
$parcel$ReactRefreshHelpers$97be.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _client = require("react-dom/client");
var _clientDefault = parcelHelpers.interopDefault(_client);
var _appJsx = require("./App.jsx");
var _appJsxDefault = parcelHelpers.interopDefault(_appJsx);
(0, _clientDefault.default).createRoot(document.getElementById('root')).render(/*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _reactDefault.default).StrictMode, {
    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _appJsxDefault.default), {}, void 0, false, {
        fileName: "src/main.jsx",
        lineNumber: 7,
        columnNumber: 5
    }, undefined)
}, void 0, false, {
    fileName: "src/main.jsx",
    lineNumber: 6,
    columnNumber: 3
}, undefined));

  $parcel$ReactRefreshHelpers$97be.postlude(module);
} finally {
  globalThis.$RefreshReg$ = prevRefreshReg;
  globalThis.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"dVPUn","react":"jMk1U","react-dom/client":"hrvwu","./App.jsx":"f8V2Q","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"l2xjn"}],"dVPUn":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("ee51401569654d91");

},{"ee51401569654d91":"gnlQf"}],"gnlQf":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    'use strict';
    var React = require("58362d9d82be395f");
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = '' + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = '' + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    var didWarnAboutKeySpread = {};
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (hasOwnProperty.call(props, 'key')) {
            var componentName = getComponentNameFromType(type);
            var keys = Object.keys(props).filter(function(k) {
                return k !== 'key';
            });
            var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';
            if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';
                error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                didWarnAboutKeySpread[componentName + beforeExample] = true;
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    var jsxDEV$1 = jsxWithValidation;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = jsxDEV$1;
})();

},{"58362d9d82be395f":"jMk1U"}],"jMk1U":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("a569817e6ea559f6");

},{"a569817e6ea559f6":"ghslp"}],"ghslp":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    'use strict';
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var ReactVersion = '18.3.1';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: null
    };
    var ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var assign = Object.assign;
    var emptyObject = {};
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = '' + config.key;
            }
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (element === null || element === undefined) throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = assign({}, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = '' + config.key;
            } // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) {
            checkKeyStringCoercion(element.key);
            return escape('' + element.key);
        } // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                    // The `if` statement here prevents auto-disabling of the safe
                    // coercion ESLint rule, so we must manually disable it below.
                    // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) checkKeyStringCoercion(mappedChild.key);
                    mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                }
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                // eslint-disable-next-line react-internal/safe-string-coercion
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw new Error('React.Children.only expected to receive a single React element child.');
        return children;
    }
    function createContext(defaultValue) {
        // TODO: Second argument used to be an optional `calculateChangedBits`
        // function. Warn to reserve for future use?
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            // This might throw either because it's missing or throws. If so, we treat it
            // as still uninitialized and try again next time. Which is the same as what
            // happens if the ctor or any wrappers processing the ctor throws. This might
            // end up fixing it if the resolution was a concurrency bug.
            thenable.then(function(moduleObject) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject;
                }
            }, function(error) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
            if (payload._status === Uninitialized) {
                // In case, we're still uninitialized, then we're waiting for the thenable
                // to resolve. Set it as pending in the meantime.
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
            }
        }
        if (payload._status === Resolved) {
            var moduleObject = payload._result;
            if (moduleObject === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            if (!('default' in moduleObject)) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            return moduleObject.default;
        } else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.forwardRef((props, ref) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!render.name && !render.displayName) render.displayName = name;
            }
        });
        return elementType;
    }
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.memo((props) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!type.name && !type.displayName) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (dispatcher === null) error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        // intentionally don't throw our own error because this is in a hot path.
        // Also helps ensure this is inlined.
        return dispatcher;
    }
    function useContext(Context) {
        var dispatcher = resolveDispatcher();
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
    }
    function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        try {
            scope();
        } finally{
            ReactCurrentBatchConfig.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
        if (enqueueTaskImpl === null) try {
            // read require off the module object to get around the bundlers.
            // we don't want them to detect a require and bundle a Node polyfill.
            var requireString = ('require' + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
            // version of setImmediate, bypassing fake timers if any.
            enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
        } catch (_err) {
            // we're in a browser
            // we can't use regular timers because they may still be faked
            // so we try MessageChannel+postMessage instead
            enqueueTaskImpl = function(callback) {
                if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === 'undefined') error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(undefined);
            };
        }
        return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
        // `act` calls can be nested, so we track the depth. This represents the
        // number of `act` scopes on the stack.
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) // This is the outermost `act` scope. Initialize the queue. The reconciler
        // will detect the queue and use it instead of Scheduler.
        ReactCurrentActQueue.current = [];
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
            // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
            // set to `true` while the given callback is executed, not for updates
            // triggered during an async event, because this is how the legacy
            // implementation of `act` behaved.
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
            // which flushed updates immediately after the scope function exits, even
            // if it's an async function.
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                }
            }
        } catch (error) {
            popActScope(prevActScopeDepth);
            throw error;
        } finally{
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
            var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
            // for it to resolve before exiting the current scope.
            var wasAwaited = false;
            var thenable = {
                then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue) {
                        popActScope(prevActScopeDepth);
                        if (actScopeDepth === 0) // We've exited the outermost act scope. Recursively flush the
                        // queue until there's no remaining work.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        else resolve(returnValue);
                    }, function(error) {
                        // The callback threw an error.
                        popActScope(prevActScopeDepth);
                        reject(error);
                    });
                }
            };
            if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') // eslint-disable-next-line no-undef
            Promise.resolve().then(function() {}).then(function() {
                if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
            });
            return thenable;
        } else {
            var returnValue = result; // The callback is not an async function. Exit the current scope
            // immediately, without awaiting.
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
                // Exiting the outermost act scope. Flush the queue.
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                } // Return a thenable. If the user awaits it, we'll flush again in
                // case additional work was scheduled by a microtask.
                var _thenable = {
                    then: function(resolve, reject) {
                        // Confirm we haven't re-entered another `act` scope, in case
                        // the user does something weird like await the thenable
                        // multiple times.
                        if (ReactCurrentActQueue.current === null) {
                            // Recursively flush the queue until there's no remaining work.
                            ReactCurrentActQueue.current = [];
                            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        } else resolve(returnValue);
                    }
                };
                return _thenable;
            } else {
                // Since we're inside a nested `act` scope, the returned thenable
                // immediately resolves. The outer scope will flush the queue.
                var _thenable2 = {
                    then: function(resolve, reject) {
                        resolve(returnValue);
                    }
                };
                return _thenable2;
            }
        }
    }
    function popActScope(prevActScopeDepth) {
        if (prevActScopeDepth !== actScopeDepth - 1) error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) try {
            flushActQueue(queue);
            enqueueTask(function() {
                if (queue.length === 0) {
                    // No additional work was scheduled. Finish.
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                } else // Keep flushing work until there's none left.
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
        } catch (error) {
            reject(error);
        }
        else resolve(returnValue);
    }
    var isFlushing = false;
    function flushActQueue(queue) {
        if (!isFlushing) {
            // Prevent re-entrance.
            isFlushing = true;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(true);
                    while (callback !== null);
                }
                queue.length = 0;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                queue = queue.slice(i + 1);
                throw error;
            } finally{
                isFlushing = false;
            }
        }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.act = act;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"hrvwu":[function(require,module,exports,__globalThis) {
'use strict';
var m = require("aaccff5d309d9239");
var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
exports.createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.createRoot(c, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};
exports.hydrateRoot = function(c, h, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.hydrateRoot(c, h, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};

},{"aaccff5d309d9239":"i4X7T"}],"i4X7T":[function(require,module,exports,__globalThis) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require("b0f0e6b9e8349dac");

},{"b0f0e6b9e8349dac":"cLd8p"}],"cLd8p":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    'use strict';
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = require("6f0162e9ab224cd4");
    var Scheduler = require("8ad4ca65319d28a7");
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
    } // In DEV, calls to console.warn and console.error get replaced
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        if (!suppressWarning) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            printWarning('warn', format, args);
        }
    }
    function error(format) {
        if (!suppressWarning) {
            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
            printWarning('error', format, args);
        }
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    // -----------------------------------------------------------------------------
    var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
    // the react-reconciler package.
    var enableNewReconciler = false; // Support legacy Primer support on internal FB www
    var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
    // React DOM Chopping Block
    //
    // Similar to main Chopping Block but only flags related to React DOM. These are
    // grouped because we will likely batch all of them into a single major release.
    // -----------------------------------------------------------------------------
    // Disable support for comment nodes as React DOM containers. Already disabled
    // in open source, but www codebase still relies on it. Need to remove.
    var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
    // and client rendering, mostly to allow JSX attributes to apply to the custom
    // element's object properties instead of only HTML attributes.
    // https://github.com/facebook/react/issues/11347
    var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
    var warnAboutStringRefs = true; // -----------------------------------------------------------------------------
    // Debugging and DevTools
    // -----------------------------------------------------------------------------
    // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
    // for an experimental timeline tool.
    var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {};
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            checkAttributeStringCoercion(expected, name);
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            // eslint-disable-next-line react-internal/safe-string-coercion
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                     // eslint-disable-next-line react-internal/safe-string-coercion
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        checkAttributeStringCoercion(expected, name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else {
                    checkAttributeStringCoercion(value, name);
                    node.setAttribute(_attributeName, '' + value);
                }
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                checkAttributeStringCoercion(value, attributeName);
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_SCOPE_TYPE = Symbol.for('react.scope');
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
    var REACT_CACHE_TYPE = Symbol.for('react.cache');
    var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node);
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    } // Keep in sync with shared/getComponentNameFromType
    function getContextName$1(type) {
        return type.displayName || 'Context';
    }
    function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch(tag){
            case CacheComponent:
                return 'Cache';
            case ContextConsumer:
                var context = type;
                return getContextName$1(context) + '.Consumer';
            case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + '.Provider';
            case DehydratedFragment:
                return 'DehydratedFragment';
            case ForwardRef:
                return getWrappedName$1(type, type.render, 'ForwardRef');
            case Fragment:
                return 'Fragment';
            case HostComponent:
                // Host component type is the display name (e.g. "div", "View")
                return type;
            case HostPortal:
                return 'Portal';
            case HostRoot:
                return 'Root';
            case HostText:
                return 'Text';
            case LazyComponent:
                // Name comes from the type in this case; we don't have a tag.
                return getComponentNameFromType(type);
            case Mode:
                if (type === REACT_STRICT_MODE_TYPE) // Don't be less specific than shared/getComponentNameFromType
                return 'StrictMode';
                return 'Mode';
            case OffscreenComponent:
                return 'Offscreen';
            case Profiler:
                return 'Profiler';
            case ScopeComponent:
                return 'Scope';
            case SuspenseComponent:
                return 'Suspense';
            case SuspenseListComponent:
                return 'SuspenseList';
            case TracingMarkerComponent:
                return 'TracingMarker';
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
                if (typeof type === 'function') return type.displayName || type.name || null;
                if (typeof type === 'string') return type;
                break;
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentNameFromFiber(owner);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function getCurrentFiber() {
        return current;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        // The coercion safety check is performed in getToStringValue().
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'string':
            case 'undefined':
                return value;
            case 'object':
                checkFormFieldValueStringCoercion(value);
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            checkAttributeStringCoercion(name, 'name');
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // If a value is not provided, then the children must be simple.
        if (props.value == null) {
            if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
                if (child == null) return;
                if (typeof child === 'string' || typeof child === 'number') return;
                if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
            });
            else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
            }
        } // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && propNameIsArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$1(element, props) {
        return assign({}, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (defaultValue != null) throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
                if (isArray(children)) {
                    if (children.length > 1) throw new Error('<textarea> can only have at most one child.');
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        checkCSSPropertyStringCoercion(value, name);
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {};
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {};
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
            if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (props.style != null && typeof props.style !== 'object') throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        imagesizes: 'imageSizes',
        imagesrcset: 'imageSrcSet',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-description': 0,
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    function validateProperty(tagName, name) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {};
    var warnedProperties$1 = {};
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            else error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    // This exists to avoid circular dependency between ReactDOMEventReplaying
    // and DOMPluginEventSystem.
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
        if (currentReplayingEvent !== null) error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
        if (currentReplayingEvent === null) error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
        return event === currentReplayingEvent;
    }
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (typeof restoreImpl !== 'function') throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var flushSyncImpl = function() {};
    var isInsideEventHandler = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            // TODO: Restore state in the microtask, after the discrete updates flush,
            // instead of early flushing them here.
            flushSyncImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, a, b);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    } // TODO: Replace with flushSync
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (listener && typeof listener !== 'function') throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebook/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (typeof document === 'undefined' || document === null) throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === 'object') try {
                        error._suppressLogging = true;
                    } catch (inner) {}
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var ChildDeletion = /*                */ 16;
    var ContentReset = /*                 */ 32;
    var Callback = /*                     */ 64;
    var DidCapture = /*                   */ 128;
    var ForceClientRender = /*            */ 256;
    var Ref = /*                          */ 512;
    var Snapshot = /*                     */ 1024;
    var Passive = /*                      */ 2048;
    var Hydrating = /*                    */ 4096;
    var Visibility = /*                   */ 8192;
    var StoreConsistency = /*             */ 16384;
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)
    var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 32768;
    var ShouldCapture = /*                */ 65536;
    var ForceUpdateForLegacySuspense = /* */ 131072;
    var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,
    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
    // This enables us to defer more work in the unmount case,
    // since we can defer traversing the tree during layout to look for Passive effects,
    // and instead rely on the static flag as a signal that there may be cleanup work.
    var RefStatic = /*                    */ 2097152;
    var LayoutStatic = /*                 */ 4194304;
    var PassiveStatic = /*                */ 8388608; // These flags allow us to traverse to fibers that have effects on mount
    // without traversing the entire tree after every commit for
    // double invoking
    var MountLayoutDev = /*               */ 16777216;
    var MountPassiveDev = /*              */ 33554432; // Groups of flags that are used in the commit phase to skip over trees that
    // don't contain effects, by checking subtreeFlags.
    var BeforeMutationMask = // flag logic (see #20043)
    Update | Snapshot | 0;
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask
    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
    // This allows certain concepts to persist without recalculating them,
    // e.g. whether a subtree contains passive effects or portals.
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode);
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw new Error('Unable to find node on an unmounted component.');
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) throw new Error('Unable to find node on an unmounted component.');
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                throw new Error('Unable to find node on an unmounted component.');
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (a.alternate !== b) throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (a.tag !== HostRoot) throw new Error('Unable to find node on an unmounted component.');
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) return match;
            child = child.sibling;
        }
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) return match;
            }
            child = child.sibling;
        }
        return null;
    }
    // This module only exists as an ESM wrapper around the external CommonJS
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    // this doesn't actually exist on the scheduler, but it *does*
    // on scheduler/unstable_mock, which we'll need for internal testing
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            if (enableSchedulingProfiler) // Conditionally inject these hooks only if Timeline profiler is supported by this build.
            // This gives DevTools a way to feature detect that isn't tied to version number
            // (since profiling and timeline are controlled by different feature flags).
            internals = assign({}, internals, {
                getLaneLabelMap: getLaneLabelMap,
                injectProfilingHooks: injectProfilingHooks
            });
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        }
        if (hook.checkDCE) // This is the real DevTools.
        return true;
        else // This is likely a hook installed by Fast Refresh runtime.
        return false;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
                var schedulerPriority;
                switch(eventPriority){
                    case DiscreteEventPriority:
                        schedulerPriority = ImmediatePriority;
                        break;
                    case ContinuousEventPriority:
                        schedulerPriority = UserBlockingPriority;
                        break;
                    case DefaultEventPriority:
                        schedulerPriority = NormalPriority;
                        break;
                    case IdleEventPriority:
                        schedulerPriority = IdlePriority;
                        break;
                    default:
                        schedulerPriority = NormalPriority;
                        break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
            } else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onPostCommitRoot(root) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') try {
            injectedHook.onPostCommitFiberRoot(rendererID, root);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue === 'function') {
            // We're in a test because Scheduler.unstable_yieldValue only exists
            // in SchedulerMock. To reduce the noise in strict mode tests,
            // suppress warnings and disable scheduler yielding during the double render
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === 'function') try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    } // Profiler API hooks
    function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
        var map = new Map();
        var lane = 1;
        for(var index = 0; index < TotalLanes; index++){
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
        }
        return map;
    }
    function markCommitStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') injectedProfilingHooks.markCommitStarted(lanes);
    }
    function markCommitStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentPassiveEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
    function markComponentPassiveEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
    function markComponentPassiveEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
    function markComponentLayoutEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
    function markComponentLayoutEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
    function markLayoutEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
    function markLayoutEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') injectedProfilingHooks.markLayoutEffectsStopped();
    }
    function markPassiveEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
    function markPassiveEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') injectedProfilingHooks.markPassiveEffectsStopped();
    }
    function markRenderStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderYielded() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') injectedProfilingHooks.markRenderYielded();
    }
    function markRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') injectedProfilingHooks.markRenderStopped();
    }
    function markRenderScheduled(lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') injectedProfilingHooks.markRenderScheduled(lane);
    }
    function markForceUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
    function markStateUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead
    var ConcurrentMode = /*                 */ 1;
    var ProfileMode = /*                    */ 2;
    var StrictLegacyMode = /*               */ 8;
    var StrictEffectsMode = /*              */ 16;
    // TODO: This is pretty well supported by browsers. Maybe we can drop it.
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) return 32;
        return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    // If those values are changed that package should be rebuilt and redeployed.
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var InputContinuousHydrationLane = /*    */ 2;
    var InputContinuousLane = /*             */ 4;
    var DefaultHydrationLane = /*            */ 8;
    var DefaultLane = /*                     */ 16;
    var TransitionHydrationLane = /*                */ 32;
    var TransitionLanes = /*                       */ 4194240;
    var TransitionLane1 = /*                        */ 64;
    var TransitionLane2 = /*                        */ 128;
    var TransitionLane3 = /*                        */ 256;
    var TransitionLane4 = /*                        */ 512;
    var TransitionLane5 = /*                        */ 1024;
    var TransitionLane6 = /*                        */ 2048;
    var TransitionLane7 = /*                        */ 4096;
    var TransitionLane8 = /*                        */ 8192;
    var TransitionLane9 = /*                        */ 16384;
    var TransitionLane10 = /*                       */ 32768;
    var TransitionLane11 = /*                       */ 65536;
    var TransitionLane12 = /*                       */ 131072;
    var TransitionLane13 = /*                       */ 262144;
    var TransitionLane14 = /*                       */ 524288;
    var TransitionLane15 = /*                       */ 1048576;
    var TransitionLane16 = /*                       */ 2097152;
    var RetryLanes = /*                            */ 130023424;
    var RetryLane1 = /*                             */ 4194304;
    var RetryLane2 = /*                             */ 8388608;
    var RetryLane3 = /*                             */ 16777216;
    var RetryLane4 = /*                             */ 33554432;
    var RetryLane5 = /*                             */ 67108864;
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = /*          */ 134217728;
    var NonIdleLanes = /*                          */ 268435455;
    var IdleHydrationLane = /*               */ 268435456;
    var IdleLane = /*                        */ 536870912;
    var OffscreenLane = /*                   */ 1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
    // It should be kept in sync with the Lanes values above.
    function getLabelForLane(lane) {
        if (lane & SyncLane) return 'Sync';
        if (lane & InputContinuousHydrationLane) return 'InputContinuousHydration';
        if (lane & InputContinuousLane) return 'InputContinuous';
        if (lane & DefaultHydrationLane) return 'DefaultHydration';
        if (lane & DefaultLane) return 'Default';
        if (lane & TransitionHydrationLane) return 'TransitionHydration';
        if (lane & TransitionLanes) return 'Transition';
        if (lane & RetryLanes) return 'Retry';
        if (lane & SelectiveHydrationLane) return 'SelectiveHydration';
        if (lane & IdleHydrationLane) return 'IdleHydration';
        if (lane & IdleLane) return 'Idle';
        if (lane & OffscreenLane) return 'Offscreen';
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
        switch(getHighestPriorityLane(lanes)){
            case SyncLane:
                return SyncLane;
            case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
            case InputContinuousLane:
                return InputContinuousLane;
            case DefaultHydrationLane:
                return DefaultHydrationLane;
            case DefaultLane:
                return DefaultLane;
            case TransitionHydrationLane:
                return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                return lanes & RetryLanes;
            case SelectiveHydrationLane:
                return SelectiveHydrationLane;
            case IdleHydrationLane:
                return IdleHydrationLane;
            case IdleLane:
                return IdleLane;
            case OffscreenLane:
                return OffscreenLane;
            default:
                error('Should have found matching lanes. This is a bug in React.');
                return lanes;
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) return NoLanes;
        var nextLanes = NoLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
        // even if the work is suspended.
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
        } else {
            // The only remaining work is Idle.
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(unblockedLanes);
            else if (pingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(pingedLanes);
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
        // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (// one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
            // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) // Keep working on the existing in-progress tree. Do not interrupt.
            return wipLanes;
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) // When updates are sync by default, we entangle continuous priority updates
        // and default updates, so they render in the same batch. The only reason
        // they use separate lanes is because continuous updates should interrupt
        // transitions, but default updates should not.
        nextLanes |= pendingLanes & DefaultLane;
         // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        // TODO: Reconsider this. The counter-argument is that the partial work
        // represents an intermediate state, which we don't want to show to the user.
        // And by spending extra time finishing it, we're increasing the amount of
        // time it takes to show the final state, which is what they are actually
        // waiting for.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        switch(lane){
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
                // User interactions should expire slightly more quickly.
                //
                // NOTE: This is set to the corresponding constant as in Scheduler.js.
                // When we made it larger, a product metric in www regressed, suggesting
                // there's a user interaction that's being starved by a series of
                // synchronous updates. If that theory is correct, the proper solution is
                // to fix the starvation. However, this scenario supports the idea that
                // expiration times are an important safeguard when starvation
                // does happen.
                return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return currentTime + 5000;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                // TODO: Retries should be allowed to expire if they are CPU bound for
                // too long, but when I made this change it caused a spike in browser
                // crashes. There must be some other underlying bug; not super urgent but
                // ideally should figure out why and fix it. Unfortunately we don't have
                // a repro for the crashes, only detected via production metrics.
                return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
                // Anything idle priority or lower should never expire.
                return NoTimestamp;
            default:
                error('Should have found matching lanes. This is a bug in React.');
                return NoTimestamp;
        }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    // are suspended.
    function getHighestPriorityPendingLanes(root) {
        return getHighestPriorityLanes(root.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root, lanes) {
        // This is a separate check from includesBlockingLane because a lane can
        // expire after a render has already started.
        return (lanes & root.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
        // Cycle through the lanes, assigning each new transition to the next lane.
        // In most cases, this means every transition gets its own lane, until we
        // run out of lanes and cycle back to the beginning.
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) nextTransitionLane = TransitionLane1;
        return lane;
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) nextRetryLane = RetryLane1;
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    }
    function intersectLanes(a, b) {
        return a & b;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
        // could unblock them. Clear the suspended lanes so that we can try rendering
        // them again.
        //
        // TODO: We really only need to unsuspend only lanes that are in the
        // `subtreeLanes` of the updated fiber, or the update lanes of the return
        // path. This would exclude suspended updates in an unrelated sibling tree,
        // since there's no way for this update to unblock it.
        //
        // We don't do this if the incoming update is idle, because we never process
        // idle updates until after all the regular updates have finished; there's no
        // way it could unblock a transition.
        if (updateLane !== IdleLane) {
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
        }
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = NoLanes;
        root.pingedLanes = NoLanes;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        // In addition to entangling each of the given lanes with each other, we also
        // have to consider _transitive_ entanglements. For each lane that is already
        // entangled with *any* of the given lanes, that lane is now transitively
        // entangled with *all* the given lanes.
        //
        // Translated: If C is entangled with A, then entangling A with B also
        // entangles C with B.
        //
        // If this is hard to grasp, it might help to intentionally break this
        // function and look at the tests that fail in ReactTransition-test.js. Try
        // commenting out one of the conditions below.
        var rootEntangledLanes = root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = rootEntangledLanes;
        while(lanes){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            if (lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
            entanglements[index] & entangledLanes) entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    function getBumpedLaneForHydration(root, renderLanes) {
        var renderLane = getHighestPriorityLane(renderLanes);
        var lane;
        switch(renderLane){
            case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
            case DefaultLane:
                lane = DefaultHydrationLane;
                break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                lane = TransitionHydrationLane;
                break;
            case IdleLane:
                lane = IdleHydrationLane;
                break;
            default:
                // Everything else is already either a hydration lane, or shouldn't
                // be retried at a hydration lane.
                lane = NoLane;
                break;
        } // Check if the lane we chose is suspended. If so, that indicates that we
        // already attempted and failed to hydrate at that level. Also check if we're
        // already rendering that lane, which is rare but could happen.
        if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) // Give up trying to hydrate and fall back to client render.
        return NoLane;
        return lane;
    }
    function addFiberToLanesMap(root, fiber, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            updaters.add(fiber);
            lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        var memoizedUpdaters = root.memoizedUpdaters;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate === null || !memoizedUpdaters.has(alternate)) memoizedUpdaters.add(fiber);
                });
                updaters.clear();
            }
            lanes &= ~lane;
        }
    }
    function getTransitionsForLanes(root, lanes) {
        return null;
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
        return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = priority;
            return fn();
        } finally{
            currentUpdatePriority = previousPriority;
        }
    }
    function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) return DiscreteEventPriority;
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) return ContinuousEventPriority;
        if (includesNonIdleWork(lane)) return DefaultEventPriority;
        return IdleEventPriority;
    }
    // This is imported by the event replaying implementation in React DOM. It's
    // in a separate file to break a circular dependency between the renderer and
    // the reconciler.
    function isRootDehydrated(root) {
        var currentState = root.current.memoizedState;
        return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    // has this definition built-in.
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.priority, function() {
                            attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
        // TODO: This will read the priority if it's dispatched by the React
        // event system but not native events. Should read window.event.type, like
        // we do for updates (getCurrentEventPriority).
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
            blockedOn: null,
            target: target,
            priority: updatePriority
        };
        var i = 0;
        for(; i < queuedExplicitHydrationTargets.length; i++){
            // Stop once we hit the first target with lower priority than
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) break;
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) attemptExplicitHydrationTarget(queuedTarget);
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
            } else {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
            case DefaultEventPriority:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
        } // We need to clear only if we didn't queue because
        // queueing is accumulative.
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while(blockedOn !== null){
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) attemptSynchronousHydration(fiber);
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                if (nextBlockedOn === blockedOn) break;
                blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) nativeEvent.stopPropagation();
            return;
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
    // The return_targetInst field above is conceptually part of the return value.
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        return_targetInst = targetInst; // We're not blocked on anything.
        return null;
    }
    function getEventPriority(domEventName) {
        switch(domEventName){
            // Used by SimpleEventPlugin:
            case 'cancel':
            case 'click':
            case 'close':
            case 'contextmenu':
            case 'copy':
            case 'cut':
            case 'auxclick':
            case 'dblclick':
            case 'dragend':
            case 'dragstart':
            case 'drop':
            case 'focusin':
            case 'focusout':
            case 'input':
            case 'invalid':
            case 'keydown':
            case 'keypress':
            case 'keyup':
            case 'mousedown':
            case 'mouseup':
            case 'paste':
            case 'pause':
            case 'play':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointerup':
            case 'ratechange':
            case 'reset':
            case 'resize':
            case 'seeked':
            case 'submit':
            case 'touchcancel':
            case 'touchend':
            case 'touchstart':
            case 'volumechange':
            // eslint-disable-next-line no-fallthrough
            case 'change':
            case 'selectionchange':
            case 'textInput':
            case 'compositionstart':
            case 'compositionend':
            case 'compositionupdate':
            // eslint-disable-next-line no-fallthrough
            case 'beforeblur':
            case 'afterblur':
            // eslint-disable-next-line no-fallthrough
            case 'beforeinput':
            case 'blur':
            case 'fullscreenchange':
            case 'focus':
            case 'hashchange':
            case 'popstate':
            case 'select':
            case 'selectstart':
                return DiscreteEventPriority;
            case 'drag':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'mousemove':
            case 'mouseout':
            case 'mouseover':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'scroll':
            case 'toggle':
            case 'touchmove':
            case 'wheel':
            // eslint-disable-next-line no-fallthrough
            case 'mouseenter':
            case 'mouseleave':
            case 'pointerenter':
            case 'pointerleave':
                return ContinuousEventPriority;
            case 'message':
                // We might be in the Scheduler callback.
                // Eventually this mechanism will be replaced by a check
                // of the current priority on the native scheduler.
                var schedulerPriority = getCurrentPriorityLevel();
                switch(schedulerPriority){
                    case ImmediatePriority:
                        return DiscreteEventPriority;
                    case UserBlockingPriority:
                        return ContinuousEventPriority;
                    case NormalPriority:
                    case LowPriority:
                        // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                        return DefaultEventPriority;
                    case IdlePriority:
                        return IdleEventPriority;
                    default:
                        return DefaultEventPriority;
                }
            default:
                return DefaultEventPriority;
        }
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {},
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {};
    /**
 * Element to check for prefixes on.
 */ var style = {};
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
    //
    // E.g. it needs "pointerDown", not "pointerdown".
    // This is because we derive both React name ("onPointerDown")
    // and DOM name ("pointerdown") from the same list.
    //
    // Exceptions that don't match this convention are listed separately.
    //
    // prettier-ignore
    var simpleEventPluginEvents = [
        'abort',
        'auxClick',
        'cancel',
        'canPlay',
        'canPlayThrough',
        'click',
        'close',
        'contextMenu',
        'copy',
        'cut',
        'drag',
        'dragEnd',
        'dragEnter',
        'dragExit',
        'dragLeave',
        'dragOver',
        'dragStart',
        'drop',
        'durationChange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'gotPointerCapture',
        'input',
        'invalid',
        'keyDown',
        'keyPress',
        'keyUp',
        'load',
        'loadedData',
        'loadedMetadata',
        'loadStart',
        'lostPointerCapture',
        'mouseDown',
        'mouseMove',
        'mouseOut',
        'mouseOver',
        'mouseUp',
        'paste',
        'pause',
        'play',
        'playing',
        'pointerCancel',
        'pointerDown',
        'pointerMove',
        'pointerOut',
        'pointerOver',
        'pointerUp',
        'progress',
        'rateChange',
        'reset',
        'resize',
        'seeked',
        'seeking',
        'stalled',
        'submit',
        'suspend',
        'timeUpdate',
        'touchCancel',
        'touchEnd',
        'touchStart',
        'volumeChange',
        'scroll',
        'toggle',
        'touchMove',
        'waiting',
        'wheel'
    ];
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [
            domEventName
        ]);
    }
    function registerSimpleEvents() {
        for(var i = 0; i < simpleEventPluginEvents.length; i++){
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
        } // Special cases where event names don't match.
        registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
        registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
        registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
        registerSimpleEvent('dblclick', 'onDoubleClick');
        registerSimpleEvent('focusin', 'onFocus');
        registerSimpleEvent('focusout', 'onBlur');
        registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't foresee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'resize',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        if (!nonDelegatedEvents.has(domEventName)) error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    } // This is only used by createEventHandle when the
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
                // We handle selectionchange separately because it
                // doesn't bubble and needs to be on the document.
                if (domEventName !== 'selectionchange') {
                    if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement);
                    listenToNativeEvent(domEventName, true, rootContainerElement);
                }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) // The selectionchange event also needs deduplication
            // but it is attached to the document.
            {
                if (!ownerDocument[listeningMarker]) {
                    ownerDocument[listeningMarker] = true;
                    listenToNativeEvent('selectionchange', false, ownerDocument);
                }
            }
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        targetContainer;
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
             // If we are processing the onBeforeBlur event, then we need to take
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        if (shouldWarnDev) {
            if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) // In concurrent roots, we throw when there's a text mismatch and revert to
        // client rendering, up to the nearest Suspense boundary.
        throw new Error('Text content does not match server-rendered HTML.');
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {};
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) // $FlowFixMe - Should be inferred as not undefined.
            warnForExtraAttributes(extraAttributeNames);
        }
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {};
    var updatedAncestorInfo = function() {};
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {};
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
            case 'img':
                return true;
            default:
                return false;
        }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) return DefaultEventPriority;
        return getEventPriority(currentEvent.type);
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
    var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout; // TODO: Determine the best fallback here.
    function handleErrorInNextTick(error) {
        setTimeout(function() {
            throw error;
        });
    } // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                if (newProps.autoFocus) domElement.focus();
                return;
            case 'img':
                if (newProps.src) domElement.src = newProps.src;
                return;
        }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance; // Delete all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.
                        retryIfBlockedOn(suspenseInstance);
                        return;
                    } else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) depth++;
            }
            node = nextNode;
        }while (node); // TODO: Warn, we didn't find the end comment boundary.
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) clearSuspenseBoundary(container.parentNode, suspenseInstance);
        else if (container.nodeType === ELEMENT_NODE) clearSuspenseBoundary(container, suspenseInstance);
         // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
        // TODO: Does this work for all element types? What about MathML? Should we
        // pass host context to this method?
        instance;
        var style = instance.style;
        if (typeof style.setProperty === 'function') style.setProperty('display', 'none', 'important');
        else style.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) container.removeChild(container.documentElement);
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a suspense node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
            digest = dataset.dgst;
            message = dataset.msg;
            stack = dataset.stck;
        }
        return {
            message: message,
            digest: digest,
            stack: stack
        };
    // const nextSibling = instance.nextSibling;
    // if (nextSibling) {
    //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
    //   value.message = dataset.msg;
    //   value.hash = dataset.hash;
    //   if (true) {
    //     value.stack = dataset.stack;
    //   }
    // }
    // return value;
    }
    function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
            if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) break;
                if (nodeData === SUSPENSE_END_DATA) return null;
            }
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== 'head' && parentType !== 'body';
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentNode, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentNode, instance);
        }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function errorHydratingContainer(parentContainer) {
        // TODO: This gets logged by onRecoverableError, too, so we should be
        // able to remove it.
        error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
    var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
    function detachDeletedInstance(node) {
        // TODO: This function is only called on host components. I don't think all of
        // these fields are relevant.
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.
        throw new Error('getNodeFromInstance: Invalid argument.');
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {};
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (contextStackCursor.current !== emptyContextObject) throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentNameFromFiber(fiber) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentNameFromFiber(fiber) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return assign({}, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) syncQueue = [
            callback
        ];
        else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
        // Only flushes the queue if there's a legacy sync callback scheduled.
        // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
        // it might make more sense for the queue to be a list of roots instead of a
        // list of generic callbacks. Then we can have two: one for legacy roots, one
        // for concurrent roots. And this method would only flush the legacy ones.
        if (includesLegacySyncCallbacks) flushSyncCallbacks();
    }
    function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrance.
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
                var isSync = true;
                var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
                // queue is in the render or commit phases.
                setCurrentUpdatePriority(DiscreteEventPriority);
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(isSync);
                    while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error;
            } finally{
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
            }
        }
        return null;
    }
    // TODO: Use the unified fiber stack module instead of this local one?
    // Intentionally not using it yet to derisk the initial implementation, because
    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd
    // rather the ids be wrong than crash the whole reconciler.
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = '';
    function isForkedChild(workInProgress) {
        warnIfNotHydrating();
        return (workInProgress.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress) {
        warnIfNotHydrating();
        return treeForkCount;
    }
    function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress, totalChildren) {
        // This is called right after we reconcile an array (or iterator) of child
        // fibers, because that's the only place where we know how many children in
        // the whole set without doing extra work later, or storing addtional
        // information on the fiber.
        //
        // That's why this function is separate from pushTreeId — it's called during
        // the render phase of the fork parent, not the child, which is where we push
        // the other context values.
        //
        // In the Fizz implementation this is much simpler because the child is
        // rendered in the same callstack as the parent.
        //
        // It might be better to just add a `forks` field to the Fiber type. It would
        // make this module simpler.
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress;
        treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
        // of the id; we use it to account for leading 0s.
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index + 1;
        var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
        // consideration the leading 1 we use to mark the end of the sequence.
        if (length > 30) {
            // We overflowed the bitwise-safe range. Fall back to slower algorithm.
            // This branch assumes the length of the base id is greater than 5; it won't
            // work for smaller ids, because you need 5 bits per character.
            //
            // We encode the id in multiple steps: first the base id, then the
            // remaining digits.
            //
            // Each 5 bit sequence corresponds to a single base 32 character. So for
            // example, if the current id is 23 bits long, we can convert 20 of those
            // bits into a string of 4 characters, with 3 bits left over.
            //
            // First calculate how many bits in the base id represent a complete
            // sequence of characters.
            var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.
            var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.
            var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
            // we made more room, this time it won't overflow.
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
        } else {
            // Normal path
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
        }
    }
    function pushMaterializedTreeId(workInProgress) {
        warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
        // in its children.
        var returnFiber = workInProgress.return;
        if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress, numberOfForks);
            pushTreeId(workInProgress, numberOfForks, slotIndex);
        }
    }
    function getBitLength(number) {
        return 32 - clz32(number);
    }
    function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress) {
        // Restore the previous values.
        // This is a bit more complicated than other context-like modules in Fiber
        // because the same Fiber may appear on the stack multiple times and for
        // different reasons. We have to keep popping until the work-in-progress is
        // no longer at the top of the stack.
        while(workInProgress === treeForkProvider){
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
        }
        while(workInProgress === treeContextProvider){
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
        }
    }
    function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) return {
            id: treeContextId,
            overflow: treeContextOverflow
        };
        else return null;
    }
    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress;
    }
    function warnIfNotHydrating() {
        if (!getIsHydrating()) error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
    // due to earlier mismatches or a suspended fiber.
    var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary
    var hydrationErrors = null;
    function warnIfHydrating() {
        if (isHydrating) error('We should not be hydrating here. This is a bug in React. Please file a bug.');
    }
    function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = true;
    }
    function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
    }
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) restoreSuspendedTreeContext(fiber, treeContext);
        return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
        }
    }
    function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                childToDelete
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(childToDelete);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
        if (didSuspendOrErrorDEV) // Inside a boundary that already suspended. We're currently rendering the
        // siblings of a suspended node. The mismatch may be due to the missing
        // data, so it's probably a false positive.
        return;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                        break;
                }
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch(fiber.tag){
                    case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                    case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = getFirstHydratableChild(instance);
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            case SuspenseComponent:
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                    var suspenseState = {
                        dehydrated: suspenseInstance,
                        treeContext: getSuspendedTreeContext(),
                        retryLane: OffscreenLane
                    };
                    fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
                    // This simplifies the code for getHostSibling and deleting nodes,
                    // since it doesn't have to consider all Suspense boundaries and
                    // check if they're dehydrated ones or not.
                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                    dehydratedFragment.return = fiber;
                    fiber.child = dehydratedFragment;
                    hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
                    // it during the first pass. Instead, we'll reenter it later.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
    function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                    break;
            }
        }
        return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        } // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them. We also don't delete anything inside the root container.
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                    warnIfUnhydratedTailNodes(fiber);
                    throwOnHydrationMismatch();
                } else while(nextInstance){
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                }
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while(nextInstance){
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
        }
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
            // Successfully completed a forced client render. The errors that occurred
            // during the hydration attempt are now recovered. We will log them in
            // commit phase, once the entire tree has finished.
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
        }
    }
    function getIsHydrating() {
        return isHydrating;
    }
    function queueHydrationError(error) {
        if (hydrationErrors === null) hydrationErrors = [
            error
        ];
        else hydrationErrors.push(error);
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictLegacyMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedupe strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
        instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {};
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (typeof child._store !== 'object') throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
    };
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
            // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
            !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
            !(typeof element.type === 'function' && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
            element._owner) {
                var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (ownerFiber.tag !== ClassComponent) throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
                 // Assigning this to a const so Flow knows it won't change in the closure
                var resolvedInst = inst;
                checkPropStringCoercion(mixedRef, 'ref');
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) return current.ref;
                var ref = function(value) {
                    var refs = resolvedInst.refs;
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (typeof mixedRef !== 'string') throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
                if (!element._owner) throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    }
    function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
                returnFiber.deletions = [
                    childToDelete
                ];
                returnFiber.flags |= ChildDeletion;
            } else deletions.push(childToDelete);
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
                // During hydration, the useId algorithm needs to know which fibers are
                // part of a list of children (arrays, iterators).
                newFiber.flags |= Forked;
                return lastPlacedIndex;
            }
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags |= Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags |= Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags |= Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
            if (current !== null) {
                if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return createChild(returnFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) return updateElement(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                    var _numberOfForks = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== 'function') throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) throw new Error('An iterable object provided no iterator.');
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                    var _numberOfForks3 = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    var elementType = element.type;
                    if (elementType === REACT_FRAGMENT_TYPE) {
                        if (child.tag === Fragment) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.props.children);
                            existing.return = returnFiber;
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                            return existing;
                        }
                    } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing = useFiber(child, element.props);
                        _existing.ref = coerceRef(returnFiber, child, element);
                        _existing.return = returnFiber;
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                        return _existing;
                    }
                     // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_PORTAL_TYPE:
                        return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init; // TODO: This function is supposed to be non-recursive.
                        return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (current !== null && workInProgress.child !== current.child) throw new Error('Resuming work not yet implemented.');
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {};
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            if (node === propagationRoot) break;
            node = node.return;
        }
        if (node !== propagationRoot) error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChange(workInProgress, context, renderLanes) {
        propagateContextChange_eager(workInProgress, context, renderLanes);
    }
    function propagateContextChange_eager(workInProgress, context, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var lane = pickArbitraryLane(renderLanes);
                            var update = createUpdate(NoTimestamp, lane);
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            // Inlined `enqueueUpdate` to remove interleaved update check
                            var updateQueue = fiber.updateQueue;
                            if (updateQueue === null) ;
                            else {
                                var sharedQueue = updateQueue.shared;
                                var pending = sharedQueue.pending;
                                if (pending === null) // This is the first update. Create a circular list.
                                update.next = update;
                                else {
                                    update.next = pending.next;
                                    pending.next = update;
                                }
                                sharedQueue.pending = update;
                            }
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else if (fiber.tag === DehydratedFragment) {
                // If a dehydrated suspense boundary is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates.
                var parentSuspense = fiber.return;
                if (parentSuspense === null) throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                 // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childLanes on
                // this fiber to indicate that a context has changed.
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                nextFiber = fiber.sibling;
            } else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext === context) ;
        else {
            var contextItem = {
                context: context,
                memoizedValue: value,
                next: null
            };
            if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
    }
    // render. When this render exits, either because it finishes or because it is
    // interrupted, the interleaved updates will be transferred onto the main part
    // of the queue.
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) concurrentQueues = [
            queue
        ];
        else concurrentQueues.push(queue);
    }
    function finishQueueingConcurrentUpdates() {
        // Transfer the interleaved updates onto the main queue. Each queue has a
        // `pending` field and an `interleaved` field. When they are not null, they
        // point to the last node in a circular linked list. We need to append the
        // interleaved list to the end of the pending list by joining them into a
        // single, circular list.
        if (concurrentQueues !== null) {
            for(var i = 0; i < concurrentQueues.length; i++){
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                    queue.interleaved = null;
                    var firstInterleavedUpdate = lastInterleavedUpdate.next;
                    var lastPendingUpdate = queue.pending;
                    if (lastPendingUpdate !== null) {
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = firstInterleavedUpdate;
                        lastInterleavedUpdate.next = firstPendingUpdate;
                    }
                    queue.pending = lastInterleavedUpdate;
                }
            }
            concurrentQueues = null;
        }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    } // Calling this function outside this module should only be done for backwards
    // compatibility and should always be accompanied by a warning.
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
            // This is an unsafe render phase update. Add directly to the update
            // queue so we can process it immediately during the current render.
            var pending = sharedQueue.pending;
            if (pending === null) // This is the first update. Create a circular list.
            update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
            // this fiber. This is for backwards compatibility in the case where you
            // update a different component during render phase than the one that is
            // currently renderings (a pattern that is accompanied by a warning).
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
    }
    function entangleTransitions(root, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
            // have finished. We can remove them from the shared queue, which represents
            // a superset of the actually pending lanes. In some cases we may entangle
            // more than we need to, but that's OK. In fact it's worse if we *don't*
            // entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null); // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return assign({}, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current = workInProgress.alternate;
            if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null && // If the update was already committed, we should not queue its
                    // callback again.
                    update.lane !== NoLane) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true);
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
            // process them during this render, but we do need to track which lanes
            // are remaining.
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                    newLanes = mergeLanes(newLanes, interleaved.lane);
                    interleaved = interleaved.next;
                }while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) // `queue.lanes` is used for entangling transitions. We can set it back to
            // zero once the queue is empty.
            queue.shared.lanes = NoLanes;
             // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (typeof callback !== 'function') throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (c === NO_CONTEXT) throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // Regular boundaries always capture.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*   */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Insertion = /*  */ 2;
    var Layout = /*    */ 4;
    var Passive$1 = /*   */ 8;
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.
    var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
    // hydration). This counter is global, so client ids are not stable across
    // render attempts.
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass);
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
        // render. If this fires, it suggests that we incorrectly reset the static
        // flags in some other part of the codebase. This has happened before, for
        // example, in the SuspenseList implementation.
        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current.mode & ConcurrentMode) !== NoMode) error("Internal React error: Expected static flag was missing. Please notify the React team.");
        didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
        // localIdCounter = 0;
        if (didRenderTooFewHooks) throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function checkDidRenderIdHook() {
        // This should be called immediately after every renderWithHooks call.
        // Conceptually, it's part of the return value of renderWithHooks; it's only a
        // separate function to avoid using an array tuple.
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
        // complete phase (bubbleProperties).
        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        else workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (nextCurrentHook === null) throw new Error('Rendered more hooks than during the previous render.');
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null,
            stores: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer;
        var current = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            hasEagerState: update.hasEagerState,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.hasEagerState) // If this update is a state update (not a reducer) and was processed eagerly,
                    // we can use the eagerly computed state
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first);
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        } // Interleaved updates are stored on a separate queue. We aren't going to
        // process them during this render, but we do need to track which lanes
        // are remaining.
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
            }while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) // `queue.lanes` is used for entangling transitions. We can set it back to
        // zero once the queue is empty.
        queue.lanes = NoLanes;
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating = getIsHydrating();
        if (isHydrating) {
            if (getServerSnapshot === undefined) throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            nextSnapshot = getServerSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                    error('The result of getServerSnapshot should be cached to avoid an infinite loop');
                    didWarnUncachedGetSnapshot = true;
                }
            }
        } else {
            nextSnapshot = getSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error('The result of getSnapshot should be cached to avoid an infinite loop');
                    didWarnUncachedGetSnapshot = true;
                }
            }
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            //
            // We won't do this if we're hydrating server-rendered content, because if
            // the content is stale, it's already visible anyway. Instead we'll patch
            // it up in a passive effect.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        } // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst; // Schedule an effect to subscribe to the store.
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Schedule an effect to update the mutable instance fields. We will update
        // this whenever subscribe, getSnapshot, or value changes. Because there's no
        // clean-up function, and we track the deps correctly, we can call pushEffect
        // directly, without storing any additional state. For the same reason, we
        // don't need to set a static flag, either.
        // TODO: We can move this to the passive phase once we add a pre-commit
        // consistency check. See the next comment.
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        var nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error('The result of getSnapshot should be cached to avoid an infinite loop');
                didWarnUncachedGetSnapshot = true;
            }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Whenever getSnapshot or subscribe changes, we need to check in the
        // commit phase if there was an interleaved mutation. In concurrent mode
        // this can happen all the time, but even in synchronous mode, an earlier
        // effect may have mutated the store.
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
        // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
            getSnapshot: getSnapshot,
            value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [
                check
            ];
        } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) componentUpdateQueue.stores = [
                check
            ];
            else stores.push(check);
        }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        // These are updated in the passive phase
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
        // have been in an event that fired before the passive effects, or it could
        // have been in a layout effect. In that case, we would have used the old
        // snapsho and getSnapshot values to bail out. We need to check one more time.
        if (checkIfSnapshotChanged(inst)) // Force a re-render.
        forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
            // The store changed. Check if the snapshot changed since the last time we
            // read from the store.
            if (checkIfSnapshotChanged(inst)) // Force a re-render.
            forceStoreRerender(fiber);
        }; // Subscribe to the store and return a clean-up function.
        return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
        } catch (error) {
            return true;
        }
    }
    function forceStoreRerender(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var _ref2 = {
            current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        else return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
    }
    function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
            // This is a rerender during a mount.
            hook.memoizedState = value;
            return value;
        } else {
            // This is a rerender during an update.
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
        }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
            // This is an urgent update. If the value has changed, keep using the
            // previous value and spawn a deferred render to update it later.
            if (!objectIs(value, prevValue)) {
                // Schedule a deferred render
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
                // from the latest value. The name "baseState" doesn't really match how we
                // use it because we're reusing a state hook field instead of creating a
                // new one.
                hook.baseState = true;
            } // Reuse the previous value
            return prevValue;
        } else {
            // This is not an urgent update, so we can use the latest value regardless
            // of what it is. No need to defer it.
            // However, if we're currently inside a spawned render, then we need to mark
            // this as an update to prevent the fiber from bailing out.
            //
            // `baseState` is true when the current value is different from the rendered
            // value. The name doesn't really match how we use it because we're reusing
            // a state hook field instead of creating a new one.
            if (hook.baseState) {
                // Flip this back to false.
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
        }
    }
    function startTransition(setPending, callback, options) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
        try {
            setPending(false);
            callback();
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1]; // The `start` method never changes.
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [
            isPending,
            start
        ];
    }
    function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function mountId() {
        var hook = mountWorkInProgressHook();
        var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
        // should do this in Fiber, too? Deferring this decision for now because
        // there's no other place to store the prefix except for an internal field on
        // the public createRoot object, which the fiber tree does not currently have
        // a reference to.
        var identifierPrefix = root.identifierPrefix;
        var id;
        if (getIsHydrating()) {
            var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.
            id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
            // that represents the position of this useId hook among all the useId
            // hooks for this fiber.
            var localId = localIdCounter++;
            if (localId > 0) id += 'H' + localId.toString(32);
            id += ':';
        } else {
            // Use a lowercase r prefix for client-generated ids.
            var globalClientId = globalClientIdCounter++;
            id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
        }
        hook.memoizedState = id;
        return id;
    }
    function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.hasEagerState = true;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) {
                            // Fast path. We can bail out without scheduling React to re-render.
                            // It's still possible that we'll need to rebase this update later,
                            // if the component re-renders for a different reason and by that
                            // time the reducer has changed.
                            // TODO: Do we still need to entangle transitions in this case?
                            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                            return;
                        }
                    } catch (error) {} finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
    } // TODO: Move to ReactFiberConcurrentUpdates?
    function entangleTransitionUpdate(root, queue, lane) {
        if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
            // must have finished. We can remove them from the shared queue, which
            // represents a superset of the actually pending lanes. In some cases we
            // may entangle more than we need to, but that's OK. In fact it's worse if
            // we *don't* entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function markUpdateInDevTools(fiber, lane, action) {
        markStateUpdateScheduled(fiber, lane);
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    /**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */ var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
        return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
        nestedUpdateScheduled = true;
    }
    function resetNestedUpdateFlag() {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
    }
    function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
    }
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        root.effectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        if (root !== null) root.passiveEffectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        if (parentStateNode !== null) // Detached fibers have their state node cleared out.
                        // In this case, the return pointer is also cleared out,
                        // so we won't be able to report the time spent in this Profiler's subtree.
                        parentStateNode.passiveEffectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    var fakeInternalInstance = {};
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    var didWarnAboutLegacyContext$1;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    didWarnAboutLegacyContext$1 = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                // Invoke the function an extra time to help detect side-effects.
                partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markForceUpdateScheduled(fiber, lane);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentNameFromType(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
        // this one.
        (workInProgress.mode & StrictLegacyMode) === NoMode) {
            didWarnAboutLegacyContext$1.add(ctor);
            error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
        }
        if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
        // this one.
        (workInProgress.mode & StrictLegacyMode) === NoMode) {
            didWarnAboutLegacyContext$1.add(ctor);
            error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
        }
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                instance = new ctor(props, context); // eslint-disable-line no-new
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentNameFromType(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentNameFromFiber(workInProgress) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = {};
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
            workInProgress.flags |= fiberFlags;
        }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
                var fiberFlags = Update;
                fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
                workInProgress.flags |= fiberFlags;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') {
                var _fiberFlags = Update;
                _fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags;
            }
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
                var _fiberFlags2 = Update;
                _fiberFlags2 |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags2 |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags2;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
        // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    function createCapturedValueAtFiber(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
        };
    }
    function createCapturedValue(value, digest, stack) {
        return {
            value: value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== 'function') // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || 'Unknown');
            }
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        // Attach a ping listener
        //
        // The data might resolve before we have a chance to commit the fallback. Or,
        // in the case of a refresh, we'll never commit a fallback. So we need to
        // attach a listener now. When it resolves ("pings"), we can decide whether to
        // try rendering the tree again.
        //
        // Only attach a listener if one does not already exist for the lanes
        // we're currently rendering (which acts like a "thread ID" here).
        //
        // We only need to do this in concurrent mode. Legacy Suspense always
        // commits fallbacks synchronously, so there are no pings.
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            if (isDevToolsPresent) // If we have pending work still, restore the original updaters
            restorePendingUpdaters(root, lanes);
            wakeable.then(ping, ping);
        }
    }
    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
        // Retry listener
        //
        // If the fallback does commit, we need to attach a different type of
        // listener. This one schedules an update on the Suspense boundary to turn
        // the fallback state off.
        //
        // Stash the wakeable on the boundary fiber so we can access it in the
        // commit phase.
        //
        // When the wakeable resolves, we'll attempt to render the boundary
        // again ("retry").
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
        } else wakeables.add(wakeable);
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        // A legacy mode Suspense quirk, only relevant to hook components.
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
            } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
            }
        }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) return node;
             // This boundary already captured during this render. Continue to the next
            // boundary.
            node = node.return;
        }while (node !== null);
        return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
        // This marks a Suspense boundary so that when we're unwinding the stack,
        // it captures the suspended "exception" and does a second (fallback) pass.
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            // Legacy Mode Suspense
            //
            // If the boundary is in legacy mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. When the Suspense boundary completes,
            // we'll do a second pass to render the fallback.
            if (suspenseBoundary === returnFiber) // Special case where we suspended while reconciling the children of
            // a Suspense boundary's inner Offscreen wrapper fiber. This happens
            // when a React.lazy component is a direct child of a
            // Suspense boundary.
            //
            // Suspense boundaries are implemented as multiple fibers, but they
            // are a single conceptual unit. The legacy mode behavior where we
            // pretend the suspended fiber committed as `null` won't work,
            // because in this case the "suspended" fiber is the inner
            // Offscreen wrapper.
            //
            // Because the contents of the boundary haven't started rendering
            // yet (i.e. nothing in the tree has partially rendered) we can
            // switch to the regular, concurrent mode behavior: mark the
            // boundary with ShouldCapture and enter the unwind phase.
            suspenseBoundary.flags |= ShouldCapture;
            else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                // But we shouldn't call any lifecycle methods or callbacks. Remove
                // all lifecycle effect tags.
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                    // completed class component. For example, we should not call
                    // componentWillUnmount if it is deleted.
                    sourceFiber.tag = IncompleteClassComponent;
                    else {
                        // When we try rendering again, we should not reuse the current fiber,
                        // since it's known to be in an inconsistent state. Use a force update to
                        // prevent a bail out.
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update, SyncLane);
                    }
                } // The source fiber did not complete. Mark it with Sync priority to
                // indicate that it still has pending work.
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. Transitions apply
        // to this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.
        suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
        // the begin phase to prevent an early bailout.
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete;
        if (isDevToolsPresent) // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, rootRenderLanes);
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable. The component suspended.
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) markDidThrowWhileHydratingDEV();
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
                // commits fallbacks synchronously, so there are no pings.
                if (suspenseBoundary.mode & ConcurrentMode) attachPingListener(root, wakeable, rootRenderLanes);
                attachRetryListener(suspenseBoundary, root, wakeable);
                return;
            } else {
                // No boundary was found. Unless this is a sync update, this is OK.
                // We can suspend and wait for more data to arrive.
                if (!includesSyncLane(rootRenderLanes)) {
                    // This is not a sync update. Suspend. Since we're not activating a
                    // Suspense boundary, this will unwind all the way to the root without
                    // performing a second pass to render a fallback. (This is arguably how
                    // refresh transitions should work, too, since we're not going to commit
                    // the fallbacks anyway.)
                    //
                    // This case also applies to initial hydration.
                    attachPingListener(root, wakeable, rootRenderLanes);
                    renderDidSuspendDelayIfPossible();
                    return;
                } // This is a sync/discrete update. We treat this case like an error
                // because discrete renders are expected to produce a complete tree
                // synchronously to maintain consistency with external state.
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."); // If we're outside a transition, fall through to the regular error path.
                // The error will be caught by the nearest suspense boundary.
                value = uncaughtSuspenseError;
            }
        } else // This is a regular error, not a Suspense wakeable.
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
            // discarding the dehydrated content and switching to a client render.
            // Instead of surfacing the error, find the nearest Suspense boundary
            // and render it again without hydration.
            if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) // Set a flag to indicate that we should try rendering the normal
                // children again, not the fallback.
                _suspenseBoundary.flags |= ForceClientRender;
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
                // still log it so it can be fixed.
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
            }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null);
    }
    function getSuspendedCache() {
        return null;
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    var didWarnAboutDefaultPropsOnFunctionComponent;
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
    didWarnAboutDefaultPropsOnFunctionComponent = {};
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(type));
            if (Component.defaultProps !== undefined) {
                var componentName = getComponentNameFromType(type) || 'Unknown';
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentNameFromType(_type));
        var currentChild = current.child; // This is always exactly one child
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
        if (!hasScheduledUpdateOrContext) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentNameFromType(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
                // would during a normal fiber bailout.
                //
                // We don't have strong guarantees that the props object is referentially
                // equal during updates where we can't bail out anyway — like if the props
                // are shallowly equal, but there's a local state or context update in the
                // same batch.
                //
                // However, as a principle, we should aim to make the behavior consistent
                // across different ways of memoizing a component. For example, React.memo
                // has a different internal Fiber layout if you pass a normal function
                // component (SimpleMemoComponent) versus if you pass a different type
                // like forwardRef (MemoComponent). But this is an implementation detail.
                // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
                // affect whether the props object is reused during a bailout.
                workInProgress.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumulated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === 'hidden' || enableLegacyHidden) {
            // Rendering a hidden tree.
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Consider how Offscreen should work with transitions in the future
                var nextState = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
                // and resume this tree later.
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes,
                    cachePool: spawnedCachePool,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState;
                workInProgress.updateQueue = null;
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // This is the second render. The surrounding visible content has already
                // committed. Now we resume rendering the hidden tree.
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            // Rendering a visible tree.
            var _subtreeRenderLanes;
            if (prevState !== null) {
                // We're going from hidden -> visible.
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    function updateFragment(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update;
        // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.flags |= Ref;
            workInProgress.flags |= RefStatic;
        }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        // This is used by DevTools to force a boundary to error.
        switch(shouldError(workInProgress)){
            case false:
                var _instance = workInProgress.stateNode;
                var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
                // Is there a better way to do this?
                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
            case true:
                workInProgress.flags |= DidCapture;
                workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes
                var error$1 = new Error('Simulated error coming from DevTools');
                var lane = pickArbitraryLane(renderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state
                var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
                enqueueCapturedUpdate(workInProgress, update);
                break;
        }
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            markComponentRenderStarted(workInProgress);
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    instance.render();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            setIsRendering(false);
            markComponentRenderStopped();
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        if (current === null) throw new Error('Should have a current fiber. This is a bug in React.');
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var root = workInProgress.stateNode;
        // being called "element".
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
            // This is a hydration root whose shell has not yet hydrated. We should
            // attempt to hydrate.
            // Flip isDehydrated to false to indicate that when this render
            // finishes, the root will no longer be dehydrated.
            var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
            };
            var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
            // have reducer functions so it doesn't need rebasing.
            updateQueue.baseState = overrideState;
            workInProgress.memoizedState = overrideState;
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during a previous attempt to hydrate the shell, so we
                // forced a client render.
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
            } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
            } else {
                // The outermost shell has not hydrated yet. Start hydrating.
                enterHydrationState(workInProgress);
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while(node){
                    // Mark each child as hydrating. This is a fast path to know whether this
                    // tree is part of a hydrating tree. This is used to determine if a child
                    // node has fully mounted yet, and for scheduling event replaying.
                    // Conceptually this is similar to Placement in that a new subtree is
                    // inserted into the React tree here. It just happens to not need DOM
                    // mutations because it already exists.
                    node.flags = node.flags & ~Placement | Hydrating;
                    node = node.sibling;
                }
            }
        } else {
            // Root is not dehydrated. Either this is a client-only root, or it
            // already hydrated.
            resetHydrationState();
            if (nextChildren === prevChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }
        return workInProgress.child;
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
        // Revert to client rendering.
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress.flags |= ForceClientRender;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentNameFromType(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        // because the fact that it's a separate type of work is an
        // implementation detail.
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        var hasId;
        markComponentRenderStarted(workInProgress);
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    hasId = checkDidRenderIdHook();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (Component.defaultProps !== undefined) {
            var componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes,
            cachePool: getSuspendedCache(),
            transitions: null
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        var cachePool = null;
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
            cachePool: cachePool,
            transitions: prevOffscreenState.transitions
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallback
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else // Attempting the main content
        if (current === null || current.memoizedState !== null) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconciliation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current === null) {
            // Initial mount
            // Special path for hydration
            // If we're currently hydrating, try to hydrate this boundary.
            tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var suspenseState = workInProgress.memoizedState;
            if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
        } else {
            // This is an update.
            // Special path for hydration
            var prevState = current.memoizedState;
            if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
            }
            if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
                var _primaryChildFragment2 = workInProgress.child;
                var prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment3;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
        // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
        // this wrapper function to constrain it.
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & ConcurrentMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            var deletions = workInProgress.deletions;
            if (deletions === null) {
                workInProgress.deletions = [
                    currentFallbackChildFragment
                ];
                workInProgress.flags |= ChildDeletion;
            } else deletions.push(currentFallbackChildFragment);
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it.
            workInProgress.deletions = null;
        } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
            // (We don't do this in legacy mode, because in legacy mode we don't re-use
            // the current tree; see previous branch.)
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
        // Falling back to client rendering. Because this has performance
        // implications, it's considered a recoverable error, even though the user
        // likely won't observe anything wrong with the UI.
        //
        // The error is passed in as an argument to enforce that every caller provide
        // a custom message, or explicitly opt out (currently the only path that opts
        // out is legacy mode; every concurrent path provides an error).
        if (recoverableError !== null) queueHydrationError(recoverableError);
         // This will add the old fiber to the deletion list
        reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.
        var nextProps = workInProgress.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
        // mounted but this is a new fiber.
        primaryChildFragment.flags |= Placement;
        workInProgress.memoizedState = null;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var fiberMode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
        // boundary) already mounted but this is a new fiber.
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        if ((workInProgress.mode & ConcurrentMode) !== NoMode) // We will have dropped the effect list which contains the
        // deletion. We need to reconcile to delete the current child.
        reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            workInProgress.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) // This is a client-only boundary. Since we won't get any content from the server
        // for this, we need to schedule that at a higher priority based on when it would
        // have timed out. In theory we could render it in this pass but it would have the
        // wrong priority associated with it and will prevent hydration of parent path.
        // Instead, we'll leave work left on it to render it in a separate commit.
        // TODO This time should be the time at which the server rendered response that is
        // a parent to this boundary was displayed. However, since we currently don't have
        // a protocol to transfer that time, we'll just estimate it by using the current
        // time. This will mean that Suspense timeouts are slightly shifted to later than
        // they should be.
        // Schedule a normal pri update to render this content.
        workInProgress.lanes = laneToLanes(DefaultHydrationLane);
        else // We'll continue hydrating the rest at offscreen priority since we'll already
        // be showing the right content coming from the server, it is no rush.
        workInProgress.lanes = laneToLanes(OffscreenLane);
        return null;
    }
    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
        if (!didSuspend) {
            // This is the first render pass. Attempt to hydrate.
            // We should never be hydrating at this point because it is the first pass,
            // but after we've already committed once.
            warnIfHydrating();
            if ((workInProgress.mode & ConcurrentMode) === NoMode) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null);
            if (isSuspenseInstanceFallback(suspenseInstance)) {
                // This boundary is in a permanent fallback state. In this case, we'll never
                // get an update and we'll never be able to hydrate the final content. Let's just try the
                // client side render instead.
                var digest, message, stack;
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
                var error;
                if (message) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error(message);
                else error = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                var capturedValue = createCapturedValue(error, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
            }
            // any context has changed, we need to treat is as if the input might have changed.
            var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
            if (didReceiveUpdate || hasContextChanged) {
                // This boundary has changed since the first render. This means that we are now unable to
                // hydrate it. We might still be able to hydrate it using a higher priority lane.
                var root = getWorkInProgressRoot();
                if (root !== null) {
                    var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                    if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                        // Intentionally mutating since this render will get interrupted. This
                        // is one of the very rare times where we mutate the current tree
                        // during the render phase.
                        suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render
                        var eventTime = NoTimestamp;
                        enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
                        scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
                    }
                } // If we have scheduled higher pri work above, this will probably just abort the render
                // since we now have higher priority work, but in case it doesn't, we need to prepare to
                // render something, if we time out. Even if that requires us to delete everything and
                // skip hydration.
                // Delay having to do this as long as the suspense timeout allows us.
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
                // This component is still pending more data from the server, so we can't hydrate its
                // content. We treat it as if this component suspended itself. It might seem as if
                // we could just try to render it client-side instead. However, this will perform a
                // lot of unnecessary work and is unlikely to complete since it often will suspend
                // on missing data anyway. Additionally, the server might be able to render more
                // than we can on the client yet. In that case we'd end up with more fallback states
                // on the client than if we just leave it alone. If the server times out or errors
                // these should update this boundary to the permanent Fallback state instead.
                // Mark it as having captured (i.e. suspended).
                workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.
                workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.
                var retry = retryDehydratedSuspenseBoundary.bind(null, current);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
            } else {
                // This is the first attempt.
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
            }
        } else {
            // This is the second render pass. We already attempted to hydrated, but
            // something either suspended or errored.
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during hydration. Try again without hydrating.
                workInProgress.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
            } else if (workInProgress.memoizedState !== null) {
                // Something suspended and we should still be in dehydrated mode.
                // Leave the existing child in place.
                workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
                // but the normal suspense pass doesn't.
                workInProgress.flags |= DidCapture;
                return null;
            } else {
                // Suspended but we should no longer be in dehydrated mode.
                // Therefore we now have to render the fallback.
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var _primaryChildFragment4 = workInProgress.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            }
        }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
            }
            else error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';
        if (isAnArray || isIterable) {
            var type = isAnArray ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & ConcurrentMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, context, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            if (current !== null) {
                // A lazy component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            }
        }
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) return null;
         // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
            throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
                throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                current
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(current);
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
        // Before performing an early bailout, we must check if there are pending
        // updates or context.
        var updateLanes = current.lanes;
        if (includesSomeLane(updateLanes, renderLanes)) return true;
         // No pending update, but because context is propagated lazily, we need
        return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
        // This fiber does not have any pending work. Bailout without entering
        // the begin phase. There's still some bookkeeping we that needs to be done
        // in this optimized path, mostly pushing stuff onto the stack.
        switch(workInProgress.tag){
            case HostRoot:
                pushHostRootContext(workInProgress);
                var root = workInProgress.stateNode;
                resetHydrationState();
                break;
            case HostComponent:
                pushHostContext(workInProgress);
                break;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) pushContextProvider(workInProgress);
                break;
            case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            case ContextProvider:
                var newValue = workInProgress.memoizedProps.value;
                var context = workInProgress.type._context;
                pushProvider(workInProgress, context, newValue);
                break;
            case Profiler:
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) workInProgress.flags |= Update;
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
                break;
            case SuspenseComponent:
                var state = workInProgress.memoizedState;
                if (state !== null) {
                    if (state.dehydrated !== null) {
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                        // been unsuspended it has committed as a resolved Suspense component.
                        // If it needs to be retried, it should have work scheduled on it.
                        workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
                        // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
                        return null;
                    } // If this boundary is currently timed out, we need to decide
                    // whether to retry the primary children, or to skip over it and
                    // go straight to the fallback. Check the priority of the primary
                    // child fragment.
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes, primaryChildLanes)) // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                    else {
                        // The primary child fragment does not have pending work marked
                        // on it
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                        // priority. Bailout.
                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        if (child !== null) // The fallback children have pending work. Skip over the
                        // primary children and work on the fallback.
                        return child.sibling;
                        else // Note: We can return `null` here because we already checked
                        // whether there were nested context consumers, via the call to
                        // `bailoutOnAlreadyFinishedWork` above.
                        return null;
                    }
                } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                break;
            case SuspenseListComponent:
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                    if (_hasChildWork) // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                     // If none of the children had any work, that means that none of
                    // them got retried so they'll still be blocked in the same way
                    // as before. We can fast bail out.
                    workInProgress.flags |= DidCapture;
                } // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                    // Reset to the "together" mode in case we've started a different
                    // update in the past but didn't complete it.
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) break;
                else // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
        if (workInProgress._debugNeedsRemount && current !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else {
                // Neither props nor legacy context changes. Check if there's a pending
                // update or context change.
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress.flags & DidCapture) === NoFlags) {
                    // No pending updates or context. Bail out now.
                    didReceiveUpdate = false;
                    return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                }
                if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
                else // An update was scheduled on this fiber, but there are no new props
                // nor legacy context. Set this to false. If an update queue or context
                // consumer produces a changed value, it will set this to true. Otherwise,
                // the component will assume the children have not changed and bail out.
                didReceiveUpdate = false;
            }
        } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress)) {
                // Check if this child belongs to a list of muliple children in
                // its parent.
                //
                // In a true multi-threaded implementation, we would render children on
                // parallel threads. This would represent the beginning of a new render
                // thread for this subtree.
                //
                // We only use this for id generation during hydration, which is why the
                // logic is located in this special branch.
                var slotIndex = workInProgress.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress, numberOfForks, slotIndex);
            }
        } // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, renderLanes);
            case FunctionComponent:
                var Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentNameFromType(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case IncompleteClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case ScopeComponent:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
        workInProgress.flags |= RefStatic;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(current, workInProgress) {};
    updateHostComponent$1 = function(current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while(child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                    subtreeFlags |= child.subtreeFlags;
                    subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                    // When work is done, it should bubble to the parent's actualDuration. If
                    // the fiber has not been cloned though, (meaning no work was done), then
                    // this value will reflect the amount of time spent working on a previous
                    // render. In that case it should not bubble. We determine whether it was
                    // cloned by comparing the child pointer.
                    actualDuration += child.actualDuration;
                    treeBaseDuration += child.treeBaseDuration;
                    child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
            } else {
                var _child = completedWork.child;
                while(_child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                    subtreeFlags |= _child.subtreeFlags;
                    subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child.return = completedWork;
                    _child = _child.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        } else {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while(_child2 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child2.subtreeFlags & StaticMask;
                    subtreeFlags |= _child2.flags & StaticMask;
                    _treeBaseDuration += _child2.treeBaseDuration;
                    _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
                var _child3 = completedWork.child;
                while(_child3 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child3.subtreeFlags & StaticMask;
                    subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child3.return = completedWork;
                    _child3 = _child3.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress);
            resetHydrationState();
            workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
        }
        var wasHydrated = popHydrationState(workInProgress);
        if (nextState !== null && nextState.dehydrated !== null) {
            // We might be inside a hydration state the first time we're picking up this
            // Suspense boundary, and also after we've reentered it for further hydration.
            if (current === null) {
                if (!wasHydrated) throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                prepareToHydrateHostSuspenseInstance(workInProgress);
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            } else {
                // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
                // state since we're now exiting out of it. popHydrationState doesn't do that for us.
                resetHydrationState();
                if ((workInProgress.flags & DidCapture) === NoFlags) // This boundary did not suspend so it's now hydrated and unsuspended.
                workInProgress.memoizedState = null;
                 // If nothing suspended, we need to schedule an effect to mark this boundary
                // as having hydrated so events know that they're free to be invoked.
                // It's also a signal to replay events and the suspense callback.
                // If something suspended, schedule an effect to attach retry listeners.
                // So we might as well always mark this.
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var _primaryChildFragment = workInProgress.child;
                        if (_primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            }
        } else {
            // Successfully completed this tree. If this was a forced client render,
            // there may have been recoverable errors during first hydration
            // attempt. If so, add them to a queue so we can log them in the
            // commit phase.
            upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path
            return true;
        }
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                bubbleProperties(workInProgress);
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostRoot:
                var fiberRoot = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (current !== null) {
                        var prevState = current.memoizedState;
                        if (!prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress.flags & ForceClientRender) !== NoFlags) {
                            // Schedule an effect to clear this container at the start of the
                            // next commit. This handles the case of React rendering into a
                            // container with previous children. It's also safe to do for
                            // updates too, because current.child would only be null if the
                            // previous render was null (so the container would already
                            // be empty).
                            workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                            // recoverable errors during first hydration attempt. If so, add
                            // them to a queue so we can log them in the commit phase.
                            upgradeHydrationErrorsToRecoverable();
                        }
                    }
                }
                updateHostContainer(current, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
                // to its own fiber type so that we can add other kinds of hydration
                // boundaries that aren't associated with a Suspense tree. In anticipation
                // of such a refactor, all the hydration logic is contained in
                // this branch.
                if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
                    var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);
                    if (!fallthroughToNormalSuspensePath) {
                        if (workInProgress.flags & ShouldCapture) // Special case. There were remaining unhydrated nodes. We treat
                        // this as a mismatch. Revert to client rendering.
                        return workInProgress;
                        else // Did not finish hydrating, either because this is the initial
                        // render or because something suspended.
                        return null;
                    } // Continue with the normal Suspense path.
                }
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                     // Don't bubble properties in this case.
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current !== null && current.memoizedState !== null;
                // a passive effect, which is when we process the transitions
                if (nextDidTimeout !== prevDidTimeout) // an effect to toggle the subtree's visibility. When we switch from
                // fallback -> primary, the inner Offscreen fiber schedules this effect
                // as part of its normal complete phase. But when we switch from
                // primary -> fallback, the inner Offscreen fiber does not have a complete
                // phase. So we need to schedule its effect here.
                //
                // We also use this flag to connect/disconnect the effects, but the same
                // logic applies: when re-connecting, the Offscreen fiber's complete
                // phase will handle scheduling the effect. It's only when the fallback
                // is active that we have to do anything special.
                {
                    if (nextDidTimeout) {
                        var _offscreenFiber2 = workInProgress.child;
                        _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
                        // in the concurrent tree already suspended during this render.
                        // This is a known bug.
                        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                            // TODO: Move this back to throwException because this is too late
                            // if this is a large tree which is common for initial loads. We
                            // don't know if we should restart a render or not until we get
                            // this marker, and this is too late.
                            // If this render already had a ping or lower pri updates,
                            // and this is the first time we know we're going to suspend we
                            // should be able to immediately restart from within throwException.
                            var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                            // this boundary is ok.
                            renderDidSuspend();
                            else // Otherwise, we're going to have to hide content so we should
                            // suspend for longer if possible.
                            renderDidSuspendDelayIfPossible();
                        }
                    }
                }
                var wakeables = workInProgress.updateQueue;
                if (wakeables !== null) // Schedule an effect to attach a retry listener to the promise.
                // TODO: Move to passive phase
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(current, workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                bubbleProperties(workInProgress);
                return null;
            case ContextProvider:
                // Pop provider fiber
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) {
                    // We're running in the default, "independent" mode.
                    // We don't do anything in this mode.
                    bubbleProperties(workInProgress);
                    return null;
                }
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thenables. Instead, we'll transfer its thenables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThenables = suspended.updateQueue;
                                    if (newThenables !== null) {
                                        workInProgress.updateQueue = newThenables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect flags before doing the second pass since that's now invalid.
                                    // Reset the child fibers to their original state.
                                    workInProgress.subtreeFlags = NoFlags;
                                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThenables = _suspended.updateQueue;
                            if (_newThenables !== null) {
                                workInProgress.updateQueue = _newThenables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We're done.
                                bubbleProperties(workInProgress);
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    // Don't bubble properties in this case.
                    return next;
                }
                bubbleProperties(workInProgress);
                return null;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                var _nextState = workInProgress.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current !== null) {
                    var _prevState = current.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) workInProgress.flags |= Visibility;
                }
                if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) bubbleProperties(workInProgress);
                else // Don't bubble properties for hidden children unless we're rendering
                // at offscreen priority.
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress);
                    // Check if there was an insertion or update in the hidden subtree.
                    // If so, we need to hide those nodes in the commit phase, so
                    // schedule a visibility effect.
                    if (workInProgress.subtreeFlags & (Placement | Update)) workInProgress.flags |= Visibility;
                }
                return null;
            case CacheComponent:
                return null;
            case TracingMarkerComponent:
                return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
    }
    function unwindWork(current, workInProgress, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                var root = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                    // There was an error during render that wasn't captured by a suspense
                    // boundary. Do a second pass on the root to unmount the children.
                    workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                    return workInProgress;
                } // We unwound to the root without completing it. Exit.
                return null;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var suspenseState = workInProgress.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (workInProgress.alternate === null) throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    resetHydrationState();
                }
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            case CacheComponent:
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(current, interruptedWork, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(interruptedWork);
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                var root = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
    // Only used when enableSuspenseLayoutEffectSemantics is enabled.
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var nextEffect = null; // Used for Profiling builds to track updaters.
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error) {
        invokeGuardedCallback(null, function() {
            throw error;
        });
        clearCaughtError();
    }
    var callComponentWillUnmountWithTimer = function(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        if (current.mode & ProfileMode) try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
        } finally{
            recordLayoutEffectDuration(current);
        }
        else instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt mounting.
    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
        try {
            commitHookEffectListMount(Layout, current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        try {
            callComponentWillUnmountWithTimer(current, instance);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
        try {
            instance.componentDidMount();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            commitAttachRef(current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                var retVal;
                try {
                    if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        retVal = ref(null);
                    } finally{
                        recordLayoutEffectDuration(current);
                    }
                    else retVal = ref(null);
                } catch (error) {
                    captureCommitPhaseError(current, nearestMountedAncestor, error);
                }
                if (typeof retVal === 'function') error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current));
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
        try {
            destroy();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root, firstChild) {
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitBeforeMutationEffects_complete();
        }
    }
    function commitBeforeMutationEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch(finishedWork.tag){
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    break;
                case ClassComponent:
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                    break;
                case HostRoot:
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                    break;
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                    break;
                default:
                    throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            resetCurrentFiber();
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStarted(finishedWork);
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStarted(finishedWork);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                        safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStopped();
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStopped();
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect);
        }
    }
    function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStarted(finishedWork);
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStarted(finishedWork);
                    var create = effect.create;
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                    effect.destroy = create();
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStopped();
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStopped();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var hookName = void 0;
                        if ((effect.tag & Layout) !== NoFlags) hookName = 'useLayoutEffect';
                        else if ((effect.tag & Insertion) !== NoFlags) hookName = 'useInsertionEffect';
                        else hookName = 'useEffect';
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                        else addendum = ' You returned: ' + destroy;
                        error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect);
        }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        // Only Profilers with work in their subtree will have an Update effect scheduled.
        if ((finishedWork.flags & Update) !== NoFlags) switch(finishedWork.tag){
            case Profiler:
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
                // It does not get reset until the start of the next commit phase.
                var commitTime = getCommitTime();
                var phase = finishedWork.alternate === null ? 'mount' : 'update';
                if (isCurrentUpdateNested()) phase = 'nested-update';
                if (typeof onPostCommit === 'function') onPostCommit(id, phase, passiveEffectDuration, commitTime);
                 // Bubble times to the next nearest ancestor Profiler.
                // After we process that Profiler, we'll bubble further up.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
        }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    // At this point layout effects have already been destroyed (during mutation phase).
                    // This is done to prevent sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally{
                        recordLayoutEffectDuration(finishedWork);
                    }
                    else commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                break;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                        if (current === null) {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidMount();
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidMount();
                        } else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                            var prevState = current.memoizedState; // We could update instance props and state here,
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                break;
            case HostText:
                break;
            case HostPortal:
                break;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                var phase = current === null ? 'mount' : 'update';
                if (isCurrentUpdateNested()) phase = 'nested-update';
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
                if (typeof onCommit === 'function') onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                 // Schedule a passive effect for this Profiler to call onPostCommit hooks.
                // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
                // because the effect is also where times bubble to parent Profilers.
                enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
                // Do not reset these values until the next render so DevTools has a chance to read them first.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.effectDuration += effectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
                break;
            default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (!offscreenSubtreeWasHidden) {
            if (finishedWork.flags & Ref) commitAttachRef(finishedWork);
        }
    }
    function reappearLayoutEffectsOnFiber(node) {
        // Turn on layout effects in a tree that previously disappeared.
        // TODO (Offscreen) Check: flags & LayoutStatic
        switch(node.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (node.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally{
                    recordLayoutEffectDuration(node);
                }
                else safelyCallCommitHookLayoutEffectListMount(node, node.return);
                break;
            case ClassComponent:
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === 'function') safelyCallComponentDidMount(node, node.return, instance);
                safelyAttachRef(node, node.return);
                break;
            case HostComponent:
                safelyAttachRef(node, node.return);
                break;
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // Only hide or unhide the top-most host nodes.
        var hostSubtreeRoot = null;
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                        var instance = node.stateNode;
                        if (isHidden) hideInstance(instance);
                        else unhideInstance(node.stateNode, node.memoizedProps);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
            } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) try {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                if (hostSubtreeRoot === node) hostSubtreeRoot = null;
                node = node.return;
            }
            if (hostSubtreeRoot === node) hostSubtreeRoot = null;
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') {
                var retVal;
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else retVal = ref(instanceToUse);
                if (typeof retVal === 'function') error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            } else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointer to disconnect it from the tree.
        // This enables us to detect and warn against state updates on an unmounted component.
        // It also prevents events from bubbling from within disconnected components.
        //
        // Ideally, we should also clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child.
        // This child itself will be GC:ed when the parent updates the next time.
        //
        // Note that we can't clear child or sibling pointers yet.
        // They're needed for passive effects and for findDOMNode.
        // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
        //
        // Don't reset the alternate yet, either. We need that so we can detach the
        // alternate's fields in the passive phase. Clearing the return pointer is
        // sufficient for findDOMNode semantics.
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.return = null;
        fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
        } // Note: Defensively using negation instead of < in case
        // Clear cyclical Fiber fields. This level alone is designed to roughly
        // approximate the planned Fiber refactor. In that world, `setState` will be
        // bound to a special "instance" object instead of a Fiber. The Instance
        // object will not have any of these fields. It will only be connected to
        // the fiber tree via a single link at the root. So if this level alone is
        // sufficient to fix memory issues, that bodes well for our plans.
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
        // tree, which has its own pointers to children, parents, and siblings.
        // The other host nodes also point back to fibers, so we should detach that
        // one, too.
        if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) detachDeletedInstance(hostInstance);
        }
        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
        fiber._debugOwner = null;
        // Theoretically, nothing in here should be necessary, because we already
        // disconnected the fiber from the tree. So even if something leaks this
        // particular fiber, it won't leak anything else
        //
        // The purpose of this branch is to be super aggressive so we can measure
        // if there's any difference in memory impact. If there is, that could
        // indicate a React leak we don't know about.
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
        fiber.updateQueue = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        switch(parentFiber.tag){
            case HostComponent:
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent); // Clear ContentReset from the effect tag
                    parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                // children to find all the terminal nodes.
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
            case HostRoot:
            case HostPortal:
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
            // eslint-disable-next-line-no-fallthrough
            default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    } // These are tracked on the stack as we recursively traverse a
    // deleted subtree.
    // TODO: Update these during the whole mutation phase, not just during
    // a deletion.
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root, returnFiber, deletedFiber) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        // Recursively delete all host nodes from the parent, detach refs, clean
        // up mounted layout effects, and call componentWillUnmount.
        // We only need to remove the topmost host child in each branch. But then we
        // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
        // could split this into two separate traversals functions, where the second
        // one doesn't include any removeChild logic. This is maybe the same
        // function as "disappearLayoutEffects" (or whatever that turns into after
        // the layout phase is refactored to use recursion).
        // Before starting, find the nearest host parent on the stack so we know
        // which instance/container to remove the children from.
        // TODO: Instead of searching up the fiber return path on every deletion, we
        // can track the nearest host component on the JS stack as we traverse the
        // tree during the commit phase. This would make insertions faster, too.
        var parent = returnFiber;
        findParent: while(parent !== null){
            switch(parent.tag){
                case HostComponent:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                case HostRoot:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                case HostPortal:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
            }
            parent = parent.return;
        }
        if (hostParent === null) throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
        detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        // TODO: Use a static flag to skip trees that don't have unmount effects
        var child = parent.child;
        while(child !== null){
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
        }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
        // into their subtree. There are simpler cases in the inner switch
        // that don't modify the stack.
        switch(deletedFiber.tag){
            case HostComponent:
                if (!offscreenSubtreeWasHidden) safelyDetachRef(deletedFiber, nearestMountedAncestor);
                 // Intentional fallthrough to next branch
            // eslint-disable-next-line-no-fallthrough
            case HostText:
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                    // Now that all the child effects have unmounted, we can remove the
                    // node from the tree.
                    if (hostParentIsContainer) removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    else removeChild(hostParent, deletedFiber.stateNode);
                }
                return;
            case DehydratedFragment:
                if (hostParent !== null) {
                    if (hostParentIsContainer) clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    else clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
                return;
            case HostPortal:
                // When we go into a portal, it becomes the parent to remove from.
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
                return;
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    var updateQueue = deletedFiber.updateQueue;
                    if (updateQueue !== null) {
                        var lastEffect = updateQueue.lastEffect;
                        if (lastEffect !== null) {
                            var firstEffect = lastEffect.next;
                            var effect = firstEffect;
                            do {
                                var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                                if (destroy !== undefined) {
                                    if ((tag & Insertion) !== NoFlags$1) safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                    else if ((tag & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                                        if (deletedFiber.mode & ProfileMode) {
                                            startLayoutEffectTimer();
                                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                            recordLayoutEffectDuration(deletedFiber);
                                        } else safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                        markComponentLayoutEffectUnmountStopped();
                                    }
                                }
                                effect = effect.next;
                            }while (effect !== firstEffect);
                        }
                    }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ClassComponent:
                if (!offscreenSubtreeWasHidden) {
                    safelyDetachRef(deletedFiber, nearestMountedAncestor);
                    var instance = deletedFiber.stateNode;
                    if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ScopeComponent:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case OffscreenComponent:
                if (deletedFiber.mode & ConcurrentMode) {
                    // If this offscreen component is hidden, we already unmounted it. Before
                    // deleting the children, track that it's already unmounted so that we
                    // don't attempt to unmount the effects again.
                    // TODO: If the tree is hidden, in most cases we should be able to skip
                    // over the nested children entirely. An exception is we haven't yet found
                    // the topmost host node to delete, which we already track on the stack.
                    // But the other case is portals, which need to be detached no matter how
                    // deeply they are nested. We should use a subtree flag to track whether a
                    // subtree includes a nested portal.
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                break;
            default:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
        }
    }
    function commitSuspenseCallback(finishedWork) {
        // TODO: Move this to passive phase
        var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    retryCache.add(wakeable);
                    if (isDevToolsPresent) {
                        if (inProgressLanes !== null && inProgressRoot !== null) // If we have pending work still, associate the original updaters with it.
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                        else throw Error('Expected finished root and lanes to be set. This is a bug in React.');
                    }
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    function commitMutationEffects(root, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
        // Deletions effects can be scheduled on any fiber type. They need to happen
        // before the children effects hae fired.
        var deletions = parentFiber.deletions;
        if (deletions !== null) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            try {
                commitDeletionEffects(root, parentFiber, childToDelete);
            } catch (error) {
                captureCommitPhaseError(childToDelete, parentFiber, error);
            }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while(child !== null){
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root);
                child = child.sibling;
            }
        }
        setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
        // because the fiber tag is more specific. An exception is any flag related
        // to reconcilation, because those can be set on all fiber types.
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    try {
                        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                        commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    } // Layout effects are destroyed during the mutation phase so that all
                    // destroy functions for all fibers are called before any create functions.
                    // This prevents sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) {
                        try {
                            startLayoutEffectTimer();
                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                        recordLayoutEffectDuration(finishedWork);
                    } else try {
                        commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                return;
            case ClassComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                return;
            case HostComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                // TODO: ContentReset gets cleared by the children during the commit
                // phase. This is a refactor hazard because it means we must read
                // flags the flags after `commitReconciliationEffects` has already run;
                // the order matters. We should refactor so that ContentReset does not
                // rely on mutating the flag during commit. Like by setting a flag
                // during the render phase instead.
                if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                        resetTextContent(instance);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                        // Commit the work prepared earlier.
                        var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                        // as the newProps. The updatePayload will contain the real change in
                        // this case.
                        var oldProps = current !== null ? current.memoizedProps : newProps;
                        var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                        var updatePayload = finishedWork.updateQueue;
                        finishedWork.updateQueue = null;
                        if (updatePayload !== null) try {
                            commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                    }
                }
                return;
            case HostText:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (finishedWork.stateNode === null) throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldText = current !== null ? current.memoizedProps : newText;
                    try {
                        commitTextUpdate(textInstance, oldText, newText);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                return;
            case HostRoot:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (current !== null) {
                        var prevRootState = current.memoizedState;
                        if (prevRootState.isDehydrated) try {
                            commitHydratedContainer(root.containerInfo);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                    }
                }
                return;
            case HostPortal:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
            case SuspenseComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                    var offscreenInstance = offscreenFiber.stateNode;
                    var newState = offscreenFiber.memoizedState;
                    var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
                    // read it during an event
                    offscreenInstance.isHidden = isHidden;
                    if (isHidden) {
                        var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                        if (!wasHidden) // TODO: Move to passive phase
                        markCommitTimeOfFallback();
                    }
                }
                if (flags & Update) {
                    try {
                        commitSuspenseCallback(finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                    attachSuspenseRetryListeners(finishedWork);
                }
                return;
            case OffscreenComponent:
                var _wasHidden = current !== null && current.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                    // Before committing the children, track on the stack whether this
                    // offscreen subtree was already hidden, so that we don't unmount the
                    // effects again.
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                    recursivelyTraverseMutationEffects(root, finishedWork);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                    var _offscreenInstance = finishedWork.stateNode;
                    var _newState = finishedWork.memoizedState;
                    var _isHidden = _newState !== null;
                    var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
                    // read it during an event
                    _offscreenInstance.isHidden = _isHidden;
                    if (_isHidden) {
                        if (!_wasHidden) {
                            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                                nextEffect = offscreenBoundary;
                                var offscreenChild = offscreenBoundary.child;
                                while(offscreenChild !== null){
                                    nextEffect = offscreenChild;
                                    disappearLayoutEffects_begin(offscreenChild);
                                    offscreenChild = offscreenChild.sibling;
                                }
                            }
                        }
                    }
                    // TODO: This needs to run whenever there's an insertion or update
                    // inside a hidden Offscreen tree.
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
                return;
            case SuspenseListComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) attachSuspenseRetryListeners(finishedWork);
                return;
            case ScopeComponent:
                return;
            default:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
        }
    }
    function commitReconciliationEffects(finishedWork) {
        // Placement effects (insertions, reorders) can be scheduled on any fiber
        // type. They needs to happen after the children effects have fired, but
        // before the effects on this fiber have fired.
        var flags = finishedWork.flags;
        if (flags & Placement) {
            try {
                commitPlacement(finishedWork);
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            } // Clear the "placement" from effect tag so that we know that this is
            // inserted, before any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted does
            // and isMounted is deprecated anyway so we should be able to kill this.
            finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) finishedWork.flags &= ~Hydrating;
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
        // Suspense layout effects semantics don't change for legacy roots.
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
                // Keep track of the current Offscreen stack's state.
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                    // The Offscreen tree is hidden. Skip over its layout effects.
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                } else {
                    // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
                    var current = fiber.alternate;
                    var wasHidden = current !== null && current.memoizedState !== null;
                    var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.
                    offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                    if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                        // This is the root of a reappearing boundary. Turn its layout effects
                        // back on.
                        nextEffect = fiber;
                        reappearLayoutEffects_begin(fiber);
                    }
                    var child = firstChild;
                    while(child !== null){
                        nextEffect = child;
                        commitLayoutEffects_begin(child, root, committedLanes);
                        child = child.sibling;
                    } // Restore Offscreen state and resume in our-progress traversal.
                    nextEffect = fiber;
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                    commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
            switch(fiber.tag){
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    if (fiber.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally{
                        recordLayoutEffectDuration(fiber);
                    }
                    else commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    break;
                case ClassComponent:
                    // TODO (Offscreen) Check: flags & RefStatic
                    safelyDetachRef(fiber, fiber.return);
                    var instance = fiber.stateNode;
                    if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                    break;
                case HostComponent:
                    safelyDetachRef(fiber, fiber.return);
                    break;
                case OffscreenComponent:
                    // Check if this is a
                    var isHidden = fiber.memoizedState !== null;
                    if (isHidden) {
                        // Nested Offscreen tree is already hidden. Don't disappear
                        // its effects.
                        disappearLayoutEffects_complete(subtreeRoot);
                        continue;
                    }
                    break;
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else disappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                    // Nested Offscreen tree is still hidden. Don't re-appear its effects.
                    reappearLayoutEffects_complete(subtreeRoot);
                    continue;
                }
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else reappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic
            setCurrentFiber(fiber);
            try {
                reappearLayoutEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
        }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                    commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    try {
                        commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                    } finally{
                        recordPassiveEffectDuration(finishedWork);
                    }
                } else commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
        }
    }
    function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                    for(var i = 0; i < deletions.length; i++){
                        var fiberToDelete = deletions[i];
                        nextEffect = fiberToDelete;
                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                    }
                    // A fiber was deleted from this parent fiber, but it's still part of
                    // the previous (alternate) parent fiber's list of children. Because
                    // children are a linked list, an earlier sibling that's still alive
                    // will be connected to the deleted fiber via its `alternate`:
                    //
                    //   live fiber
                    //   --alternate--> previous live fiber
                    //   --sibling--> deleted fiber
                    //
                    // We can't disconnect `alternate` on nodes that haven't been deleted
                    // yet, but we can disconnect the `sibling` and `child` pointers.
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                        var detachedChild = previousFiber.child;
                        if (detachedChild !== null) {
                            previousFiber.child = null;
                            do {
                                var detachedSibling = detachedChild.sibling;
                                detachedChild.sibling = null;
                                detachedChild = detachedSibling;
                            }while (detachedChild !== null);
                        }
                    }
                    nextEffect = fiber;
                }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffects_complete();
        }
    }
    function commitPassiveUnmountEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                    recordPassiveEffectDuration(finishedWork);
                } else commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                break;
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while(nextEffect !== null){
            var fiber = nextEffect; // Deletion effects fire in parent -> child order
            // TODO: Check if fiber has a PassiveStatic flag
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
            // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
            if (child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            // Recursively traverse the entire deleted tree and clean up fiber fields.
            // This is more aggressive than ideal, and the long term goal is to only
            // have to detach the deleted tree at the root.
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
            }
            if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
            }
            nextEffect = returnFiber;
        }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (current.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                    recordPassiveEffectDuration(current);
                } else commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                break;
        }
    } // TODO: Reuse reappearLayoutEffects traversal here?
    function invokeLayoutEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                try {
                    instance.componentDidMount();
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokePassiveEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                break;
        }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
        }
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor('selector.role');
        TEST_NAME_TYPE = symbolFor('selector.test_id');
        TEXT_TYPE = symbolFor('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
        // Legacy mode. We preserve the behavior of React 17's act. It assumes an
        // act environment whenever `jest` is defined, but you can still turn off
        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
        // to false.
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest
        var jestIsDefined = typeof jest !== 'undefined';
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
    }
    function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) // TODO: Include link to relevant documentation page.
        error("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var RenderContext = /*                */ 2;
    var CommitContext = /*                */ 4;
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).
    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.
    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
    // We will log them once the tree commits.
    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) // This is a render phase update. These are not officially supported. The
        // old behavior is to give this the same "thread" (lanes) as
        // whatever is currently rendering. So if you call `setState` on a component
        // that happens later in the same render, it will flush. Ideally, we want to
        // remove the special case and treat them as if they came from an
        // interleaved event. Regardless, this pattern is not officially supported.
        // This behavior is only a fallback. The flag only exists until we can roll
        // out the setState warning, since existing code might accidentally rely on
        // the current behavior.
        return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) transition._updatedFibers = new Set();
                transition._updatedFibers.add(fiber);
            } // The algorithm for assigning an update to a lane should be stable for all
            // updates at the same priority within the same event. To do this, the
            // inputs to the algorithm must be the same.
            //
            // The trick we use is to cache the first of each of these inputs within an
            // event. Then reset the cached values once we can be sure the event is
            // over. Our heuristic for that is whenever we enter a concurrent work loop.
            if (currentEventTransitionLane === NoLane) // All transitions within the same event are assigned the same lane.
            currentEventTransitionLane = claimNextTransitionLane();
            return currentEventTransitionLane;
        } // Updates originating inside certain React methods, like flushSync, have
        // their priority set by tracking it with a context variable.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) return updateLane;
         // This update originated outside React. Ask the host environment for an
        // appropriate priority, based on the type of event.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var eventLane = getCurrentEventPriority();
        return eventLane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
        checkForNestedUpdates();
        if (isRunningInsertionEffect) error('useInsertionEffect must not schedule updates.');
        if (isFlushingPassiveEffects) didScheduleUpdateDuringPassiveEffects = true;
        markRootUpdated(root, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) // This update was dispatched during the render phase. This is a mistake
        // if the update originates from user space (with the exception of local
        // hook updates, which are handled differently and don't reach this
        // function), but there are some internal React features that use this as
        // an implementation detail, like selective hydration.
        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
        else {
            if (isDevToolsPresent) addFiberToLanesMap(root, fiber, lane);
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root === workInProgressRoot) {
                // Received an update to a tree that's in the middle of rendering. Mark
                // that there was an interleaved update work on this root. Unless the
                // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                // phase update. In that case, we don't treat render phase updates as if
                // they were interleaved, for backwards compat reasons.
                if ((executionContext & RenderContext) === NoContext) workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
                // definitely won't finish. Since we have a new update, let's mark it as
                // suspended now, right before marking the incoming update. This has the
                // effect of interrupting the current render and switching to the update.
                // TODO: Make sure this doesn't override pings that happen while we've
                // already started rendering.
                markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
            ensureRootIsScheduled(root, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
        // This is a special fork of scheduleUpdateOnFiber that is only used to
        // schedule the initial hydration of a root that has just been created. Most
        // of the stuff in scheduleUpdateOnFiber can be skipped.
        //
        // The main reason for this separate path, though, is to distinguish the
        // initial children from subsequent updates. In fully client-rendered roots
        // (createRoot instead of hydrateRoot), all top-level renders are modeled as
        // updates, but hydration roots are special because the initial render must
        // match what was rendered on the server.
        var current = root.current;
        current.lanes = lane;
        markRootUpdated(root, lane, eventTime);
        ensureRootIsScheduled(root, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
        // Check if this is a render phase update. Only called by class components,
        // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
        return(// decided not to enable it.
        (executionContext & RenderContext) !== NoContext);
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) cancelCallback$1(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLane;
            return;
        } // We use the highest priority lane to represent the priority of the callback.
        var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
        // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            // If we're going to re-use an existing task, it needs to exist.
            // Assume that discrete update microtasks are non-cancellable and null.
            // TODO: Temporary until we confirm this warning is not fired.
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
            return;
        }
        if (existingCallbackNode != null) // Cancel the existing callback. We'll schedule a new one below.
        cancelCallback$1(existingCallbackNode);
         // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
            // Special case: Sync React callbacks are scheduled on a special
            // internal queue
            if (root.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
            } else scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            // Flush the queue in a microtask.
            if (ReactCurrentActQueue$1.current !== null) // Inside `act`, use our internal `act` queue so that these get flushed
            // at the end of the current scope even when using the sync version
            // of `act`.
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            else scheduleMicrotask(function() {
                // In Safari, appending an iframe forces microtasks to run.
                // https://github.com/facebook/react/issues/22459
                // We don't support running callbacks in the middle of render
                // or commit so we need to check against that.
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) // Note that this would still prematurely flush the callbacks
                // if this happens outside render or commit phase (e.g. in an event).
                flushSyncCallbacks();
            });
            newCallbackNode = null;
        } else {
            var schedulerPriorityLevel;
            switch(lanesToEventPriority(nextLanes)){
                case DiscreteEventPriority:
                    schedulerPriorityLevel = ImmediatePriority;
                    break;
                case ContinuousEventPriority:
                    schedulerPriorityLevel = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    schedulerPriorityLevel = NormalPriority;
                    break;
                case IdleEventPriority:
                    schedulerPriorityLevel = IdlePriority;
                    break;
                default:
                    schedulerPriorityLevel = NormalPriority;
                    break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root, didTimeout) {
        resetNestedUpdateFlag();
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next lanes to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
         // We disable time-slicing in some cases: if the work has been CPU-bound
        // for too long ("expired" work, to prevent starvation), or we're in
        // sync-updates-by-default mode.
        // TODO: We only check `didTimeout` defensively, to account for a Scheduler
        // bug we're still investigating. Once the bug in Scheduler is fixed,
        // we can remove this, since we track expiration ourselves.
        var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
        if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
                // If something threw an error, try rendering one more time. We'll
                // render synchronously to block concurrent data mutations, and we'll
                // includes all pending updates are included. If it still fails after
                // the second attempt, we'll give up and commit the resulting tree.
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                if (errorRetryLanes !== NoLanes) {
                    lanes = errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                }
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) // The render unwound without completing the tree. This happens in special
            // cases where need to exit the current render without producing a
            // consistent tree or committing.
            //
            // This should only happen during a concurrent render, not a discrete or
            // synchronous update. We should have already checked for this when we
            // unwound the stack.
            markRootSuspended$1(root, lanes);
            else {
                // The render completed.
                // Check if this render may have yielded to a concurrent event, and if so,
                // confirm that any newly rendered stores are consistent.
                // TODO: It's possible that even a concurrent render may never have yielded
                // to the main thread, if it was fast enough, or if it expired. We could
                // skip the consistency check in that case, too.
                var renderWasConcurrent = !includesBlockingLane(root, lanes);
                var finishedWork = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                    // A store was mutated in an interleaved event. Render again,
                    // synchronously, to block further mutations.
                    exitStatus = renderRootSync(root, lanes); // We need to check again if something threw
                    if (exitStatus === RootErrored) {
                        var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                        if (_errorRetryLanes !== NoLanes) {
                            lanes = _errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
                        // concurrent events.
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var _fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root, NoLanes);
                        markRootSuspended$1(root, lanes);
                        ensureRootIsScheduled(root, now());
                        throw _fatalError;
                    }
                } // We now have a consistent tree. The next step is either to commit it,
                // or, if something suspended, wait to commit it after a timeout.
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
            }
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function recoverFromConcurrentError(root, errorRetryLanes) {
        // If an error occurred during hydration, discard server response and fall
        // back to client side render.
        // Before rendering again, save the errors from the previous attempt.
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root)) {
            // The shell failed to hydrate. Set a flag to force a client rendering
            // during the next attempt. To do this, we call prepareFreshStack now
            // to create the root work-in-progress fiber. This is a bit weird in terms
            // of factoring, because it relies on renderRootSync not calling
            // prepareFreshStack again in the call below, which happens because the
            // root and lanes haven't changed.
            //
            // TODO: I think what we should do is set ForceClientRender inside
            // throwException, like we do for nested Suspense boundaries. The reason
            // it's here instead is so we can switch to the synchronous work loop, too.
            // Something to consider for a future refactor.
            var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            errorHydratingContainer(root.containerInfo);
        }
        var exitStatus = renderRootSync(root, errorRetryLanes);
        if (exitStatus !== RootErrored) {
            // Successfully finished rendering on retry
            // The errors from the failed first attempt have been recovered. Add
            // them to the collection of recoverable errors. We'll log them in the
            // commit phase.
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
            // from the first attempt, to preserve the causal sequence.
            if (errorsFromSecondAttempt !== null) queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
    }
    function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) workInProgressRootRecoverableErrors = errors;
        else workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootInProgress:
            case RootFatalErrored:
                throw new Error('Root did not complete. This is a bug in React.');
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            default:
                throw new Error('Unknown root exit status.');
        }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        // Search the rendered tree for external store reads, and check whether the
        // stores were mutated in a concurrent event. Intentionally using an iterative
        // loop instead of recursion so we can exit early.
        var node = finishedWork;
        while(true){
            if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                    var checks = updateQueue.stores;
                    if (checks !== null) for(var i = 0; i < checks.length; i++){
                        var check = checks[i];
                        var getSnapshot = check.getSnapshot;
                        var renderedValue = check.value;
                        try {
                            if (!objectIs(getSnapshot(), renderedValue)) // Found an inconsistent store.
                            return false;
                        } catch (error) {
                            // If `getSnapshot` throws, return `false`. This will schedule
                            // a re-render, and the error will be rethrown during render.
                            return false;
                        }
                    }
                }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
            }
            if (node === finishedWork) return true;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return true;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow doesn't know this is unreachable, but eslint does
        // eslint-disable-next-line no-unreachable
        return true;
    }
    function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
        syncNestedUpdateFlag();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        flushPassiveEffects();
        var lanes = getNextLanes(root, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
            // There's no remaining sync work left.
            ensureRootIsScheduled(root, now());
            return null;
        }
        var exitStatus = renderRootSync(root, lanes);
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
            if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
            }
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) throw new Error('Root did not complete. This is a bug in React.');
         // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushRoot(root, lanes) {
        if (lanes !== NoLanes) {
            markRootEntangled(root, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
            }
        }
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
            // most batchedUpdates-like method.
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) resetRenderTimer();
        }
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync(fn) {
        // In legacy mode, we flush pending passive effects at the beginning of the
        // next event, not at the end of the previous one.
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) return fn();
            else return undefined;
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) flushSyncCallbacks();
        }
    }
    function isAlreadyRendering() {
        // Used by the renderer to print a warning if certain APIs are called from
        // the wrong context.
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                var current = interruptedWork.alternate;
                unwindInterruptedWork(current, interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        var rootWorkInProgress = createWorkInProgress(root.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return rootWorkInProgress;
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                if (enableSchedulingProfiler) {
                    markComponentRenderStopped();
                    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
                        var wakeable = thrownValue;
                        markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                    } else markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true);
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError(error) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) workInProgressRootExitStatus = RootErrored;
        if (workInProgressRootConcurrentErrors === null) workInProgressRootConcurrentErrors = [
            error
        ];
        else workInProgressRootConcurrentErrors.push(error);
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) // This is a sync render, so we should have finished the whole tree.
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
            markRenderYielded();
            return RootInProgress;
        } else {
            markRenderStopped();
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its subtree flags.
                    returnFiber.flags |= Incomplete;
                    returnFiber.subtreeFlags = NoFlags;
                    returnFiber.deletions = null;
                } else {
                    // We've unwound all the way to the root.
                    workInProgressRootExitStatus = RootDidNotComplete;
                    workInProgress = null;
                    return;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null); // We've reached the root.
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootCompleted;
    }
    function commitRoot(root, recoverableErrors, transitions) {
        // TODO: This no longer makes any sense. We already wrap the mutation and
        // layout phases. Should be able to remove.
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally{
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
    }
    function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        markCommitStarted(lanes);
        if (finishedWork === null) {
            markCommitStopped();
            return null;
        } else if (lanes === NoLanes) error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (finishedWork === root.current) throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root.callbackNode = null;
        root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);
        if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // If there are pending passive effects, schedule a callback to process them.
        // Do this as early as possible, so it is queued before anything else that
        // might get scheduled in the commit phase. (See #16714.)
        // TODO: Delete all other places that schedule the passive effect callback
        // They're redundant.
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                // to store it in pendingPassiveTransitions until they get processed
                // We need to pass this through as an argument to commitRoot
                // because workInProgressTransitions might have changed between
                // the previous render and commit if we throttle the commit
                // with setTimeout
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                    flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
                    // *after* passive effects fire to avoid freeing a cache pool that may
                    // be referenced by a node in the tree (HostRoot, Cache boundary etc)
                    return null;
                });
            }
        } // Check if there are any effects in the whole tree.
        // TODO: This is left over from the effect list implementation, where we had
        // to check for the existence of `firstEffect` to satisfy Flow. I think the
        // only other reason this optimization exists is because it affects profiling.
        // Reconsider whether this is necessary.
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext; // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            commitMutationEffects(root, finishedWork, lanes);
            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            markLayoutEffectsStarted(lanes);
            commitLayoutEffects(finishedWork, root, lanes);
            markLayoutEffectsStopped();
            // opportunity to paint.
            requestPaint();
            executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
        } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
        } // Read this again, since an effect might have updated it
        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
        // TODO: This is part of the `componentDidCatch` implementation. Its purpose
        // is to detect whether something might have called setState inside
        // `componentDidCatch`. The mechanism is known to be flawed because `setState`
        // inside `componentDidCatch` is itself flawed — that's why we recommend
        // `getDerivedStateFromError` instead. However, it could be improved by
        // checking if remainingLanes includes Sync work, instead of whether there's
        // any work remaining at all (which would also include stuff like Suspense
        // retries or transitions). It's been like this for a while, though, so fixing
        // it probably isn't that urgent.
        if (remainingLanes === NoLanes) // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) commitDoubleInvokeEffectsInDEV(root.current, false);
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        if (isDevToolsPresent) root.memoizedUpdaters.clear();
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root, now());
        if (recoverableErrors !== null) {
            // There were errors during this render, but recovered from them without
            // needing to surface it to the UI. We log them here.
            var onRecoverableError = root.onRecoverableError;
            for(var i = 0; i < recoverableErrors.length; i++){
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                    componentStack: componentStack,
                    digest: digest
                });
            }
        }
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
        } // If the passive effects are the result of a discrete render, flush them
        // synchronously at the end of the current task so that the result is
        // immediately observable. Otherwise, we assume that they are not
        // order-dependent and do not need to be observed by external systems, so we
        // can wait until after paint.
        // TODO: We can optimize this by not scheduling the callback earlier. Since we
        // currently schedule the callback in multiple places, will wait until those
        // are consolidated.
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) flushPassiveEffects();
         // Read this again, since a passive effect might have updated it
        remainingLanes = root.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
            markNestedUpdateScheduled();
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
         // If layout work was scheduled, flush it now.
        flushSyncCallbacks();
        markCommitStopped();
        return null;
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
        // probably just combine the two functions. I believe they were only separate
        // in the first place because we used to wrap it with
        // `Scheduler.runWithPriority`, which accepts a function. But now we track the
        // priority within React itself, so we can mutate the variable directly.
        if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
            } finally{
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
            }
        }
        return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
         // Cache and clear the transitions flag
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
        // Figure out why and fix it. It's not causing any known issues (probably
        // because it's only used for profiling), but it's a refactor hazard.
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Cannot flush passive effects while already rendering.');
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
        markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root.current);
        commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for(var i = 0; i < profilerEffects.length; i++){
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root, _fiber);
        }
        markPassiveEffectsStopped();
        commitDoubleInvokeEffectsInDEV(root.current, true);
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        if (didScheduleUpdateDuringPassiveEffects) {
            if (root === rootWithPassiveNestedUpdates) nestedPassiveUpdateCount++;
            else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root;
            }
        } else nestedPassiveUpdateCount = 0;
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
        onPostCommitRoot(root);
        var stateNode = root.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
        }
        var fiber = null;
        fiber = nearestMountedAncestor;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    var root = enqueueUpdate(fiber, update, SyncLane);
                    var eventTime = requestEventTime();
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
        // will fire for errors that are thrown by destroy functions inside deleted
        // trees. What it should instead do is propagate the error to the parent of
        // the deleted tree. In the meantime, do not add this warning to the
        // allowlist; this is only for our internal use.
        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new lanes.
        if (retryLane === NoLane) // TODO: Assign this to `suspenseState.retryLane`? to avoid
        // unnecessary entanglement?
        retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) retryLane = suspenseState.retryLane;
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        switch(boundaryFiber.tag){
            case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) retryLane = suspenseState.retryLane;
                break;
            case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
            default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
        // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
        // Maybe not a big deal since this is DEV only behavior.
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        resetCurrentFiber();
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        var current = firstChild;
        var subtreeRoot = null;
        while(current !== null){
            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) current = current.child;
            else {
                if ((current.flags & fiberFlags) !== NoFlags) invokeEffectFn(current);
                if (current.sibling !== null) current = current.sibling;
                else current = subtreeRoot = current.return;
            }
        }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & ConcurrentMode)) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises.
            // Don't replay errors if we are hydrating and have already suspended or handled an error
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
                originalError._suppressLogging = true;
            } // We always throw the original error in case the second render pass is not idempotent.
            // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    }
    function restorePendingUpdaters(root, lanes) {
        if (isDevToolsPresent) {
            var memoizedUpdaters = root.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
            }); // This function intentionally does not clear memoized updaters.
        // Those may still be relevant to the current commit
        // and a future one (e.g. Suspense).
        }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
        // If we're currently inside an `act` scope, bypass Scheduler and push to
        // the `act` queue instead.
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
        } else return scheduleCallback(priorityLevel, callback);
    }
    function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) return;
         // In production, always call Scheduler. This function will be stripped out.
        return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) // Not in an act environment. No need to warn.
            return;
        } else {
            // Legacy mode has additional cases where we suppress a warning.
            if (!isLegacyActEnvironment()) // Not in an act environment. No need to warn.
            return;
            if (executionContext !== NoContext) // Legacy mode doesn't warn if the update is batched, i.e.
            // batchedUpdates or flushSync.
            return;
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) // For backwards compatibility with pre-hooks code, legacy mode only
            // warns for updates that originate from a hook.
            return;
        }
        if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
    }
    function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
    }
    /* eslint-disable react-internal/prod-error-codes */ var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root, element) {
        if (root.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
        }
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            // DEV-only fields
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress.flags = NoFlags; // The effects are no longer valid.
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        } // Reset all effects except static ones.
        // Static effects are not specific to a render.
        workInProgress.flags = current.flags & StaticMask;
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect flags but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.
        var current = workInProgress.alternate;
        if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
            }
        } else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) // Strict effects should never run on legacy roots
                mode |= StrictEffectsMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_CACHE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_TRACING_MARKER_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_DEBUG_TRACING_MODE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
            isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = 'DELETED';
        return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        this.mutableSourceEagerHydrationData = null;
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
        this.memoizedUpdaters = new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for(var _i = 0; _i < TotalLanes; _i++)pendingUpdatersLaneMap.push(new Set());
        switch(tag){
            case ConcurrentRoot:
                this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = hydrate ? 'hydrate()' : 'render()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread
    // them through the root constructor. Perhaps we should put them all into a
    // single type, like a DynamicHostConfig that is defined by the renderer.
    identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    var ReactVersion = '18.3.1';
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        checkKeyStringCoercion(key);
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw new Error('Unable to find node on an unmounted component.');
            else {
                var keys = Object.keys(component).join(',');
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = true;
        var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor
        root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
        // a regular update because the initial render must match was was rendered
        // on the server.
        // NOTE: This update intentionally doesn't have a payload. We're only using
        // the update to schedule work on the root fiber (and, for legacy roots, to
        // enqueue the callback if one is provided).
        var current = root.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current, update, lane);
        scheduleInitialHydrationOnRoot(root, lane, eventTime);
        return root;
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        var root = enqueueUpdate(current$1, update, lane);
        if (root !== null) {
            scheduleUpdateOnFiber(root, current$1, lane, eventTime);
            entangleTransitions(root, current$1, lane);
        }
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function attemptSynchronousHydration$1(fiber) {
        switch(fiber.tag){
            case HostRoot:
                var root = fiber.stateNode;
                if (isRootDehydrated(root)) {
                    // Flush the first scheduled "update".
                    var lanes = getHighestPriorityPendingLanes(root);
                    flushRoot(root, lanes);
                }
                break;
            case SuspenseComponent:
                flushSync(function() {
                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                    if (root !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
                    }
                }); // If we're still blocked after this, we need to increase
                // the priority of any promises resolving within this
                // boundary so that they next attempt also has higher pri.
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thenables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var lane = SelectiveHydrationLane;
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var lane = requestUpdateLane(fiber);
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
        return null;
    };
    function shouldError(fiber) {
        return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length) {
            if (isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setErrorHandler: setErrorHandler,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
        });
    }
    /* global reportError */ var defaultOnRecoverableError = typeof reportError === 'function' ? // emulating an uncaught JavaScript error.
    reportError : function(error) {
        // In older browsers and test environments, fallback to console.error.
        // eslint-disable-next-line react-internal/no-production-logging
        console['error'](error);
    };
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (root === null) throw new Error('Cannot update an unmounted root.');
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        else if (isValidContainer(arguments[1])) error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        else if (typeof arguments[1] !== 'undefined') error("You passed a second argument to root.render(...) but it only accepts one argument.");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        if (root !== null) {
            this._internalRoot = null;
            var container = root.containerInfo;
            if (isAlreadyRendering()) error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            flushSync(function() {
                updateContainer(null, root, null, null);
            });
            unmarkContainerAsRoot(container);
        }
    };
    function createRoot(container, options) {
        if (!isValidContainer(container)) throw new Error('createRoot(...): Target container is not a DOM element.');
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = '';
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options !== null && options !== undefined) {
            if (options.hydrate) warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
            else if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
            if (options.transitionCallbacks !== undefined) transitionCallbacks = options.transitionCallbacks;
        }
        var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root);
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
        if (target) queueExplicitHydrationTarget(target);
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options) {
        if (!isValidContainer(container)) throw new Error('hydrateRoot(...): Target container is not a DOM element.');
        warnIfReactDOMContainerInDEV(container);
        if (initialChildren === undefined) error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        // the hydration callbacks.
        var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option
        var mutableSources = options != null && options.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = '';
        var onRecoverableError = defaultOnRecoverableError;
        if (options !== null && options !== undefined) {
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
        }
        var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.
        listenToAllSupportedEvents(container);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return new ReactDOMHydrationRoot(root);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    } // TODO: Remove this function which also includes comment nodes.
    // We only use it in places that are currently more relaxed.
    function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    function warnIfReactDOMContainerInDEV(container) {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            else error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
        }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function noopOnRecoverableError() {
    // legacy API.
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            }
            var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, '', noopOnRecoverableError);
            container._reactRootContainer = root;
            markContainerAsRoot(root.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root;
        } else {
            // First clear any existing content.
            var rootSibling;
            while(rootSibling = container.lastChild)container.removeChild(rootSibling);
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(_root);
                    _originalCallback.call(instance);
                };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, '', noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.
            flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
        }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        var maybeRoot = container._reactRootContainer;
        var root;
        if (!maybeRoot) // Initial mount
        root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
            root = maybeRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, root, parentComponent, callback);
        }
        return getPublicRootInstance(root);
    }
    var didWarnAboutFindDOMNode = false;
    function findDOMNode(componentOrElement) {
        if (!didWarnAboutFindDOMNode) {
            didWarnAboutFindDOMNode = true;
            error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
        }
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error('Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error('Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(containerNode)) throw new Error('Target container is not a DOM element.');
        if (parentComponent == null || !has(parentComponent)) throw new Error('parentComponent must be a valid React Component');
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    var didWarnAboutUnmountComponentAtNode = false;
    function unmountComponentAtNode(container) {
        if (!didWarnAboutUnmountComponentAtNode) {
            didWarnAboutUnmountComponentAtNode = true;
            error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw new Error('Target container is not a DOM element.');
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            batchedUpdates$1
        ]
    };
    function createRoot$1(container, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return createRoot(container, options);
    }
    function hydrateRoot$1(container, initialChildren, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return hydrateRoot(container, initialChildren, options);
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync$1(fn) {
        if (isAlreadyRendering()) error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.createRoot = createRoot$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync$1;
    exports.hydrate = hydrate;
    exports.hydrateRoot = hydrateRoot$1;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{"6f0162e9ab224cd4":"jMk1U","8ad4ca65319d28a7":"4OQ2m"}],"4OQ2m":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("ef03b89c8fe2794e");

},{"ef03b89c8fe2794e":"j5hep"}],"j5hep":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    'use strict';
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var frameYieldMs = 5;
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
        if (heap.length === 0) return null;
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
        }
        return first;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(index > 0){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while(index < halfLength){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
    var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom
    var isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
    // thread, like user events. By default, it yields multiple times per frame.
    // It does not attempt to align with frame boundaries, since most tasks don't
    // need to be frame aligned; for those that do, use requestAnimationFrame.
    var frameInterval = frameYieldMs;
    var startTime = -1;
    function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) // The main thread has only been blocked for a really short amount of time;
        // smaller than a single frame. Don't yield yet.
        return false;
         // The main thread has been blocked for a non-negligible amount of time. We
        return true;
    }
    function requestPaint() {}
    function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
            // Using console['error'] to evade Babel and ESLint
            console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
        }
        if (fps > 0) frameInterval = Math.floor(1000 / fps);
        else // reset the framerate
        frameInterval = frameYieldMs;
    }
    var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
            // has been blocked.
            startTime = currentTime;
            var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
            // error can be observed.
            //
            // Intentionally not using a try-catch, since that makes some debugging
            // techniques harder. Instead, if `scheduledHostCallback` errors, then
            // `hasMoreWork` will remain true, and we'll continue the work loop.
            var hasMoreWork = true;
            try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally{
                if (hasMoreWork) // If there's more work, schedule the next message event at the end
                // of the preceding one.
                schedulePerformWorkUntilDeadline();
                else {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                }
            }
        } else isMessageLoopRunning = false;
         // Yielding to the browser will give it a chance to paint, so we can
    };
    var schedulePerformWorkUntilDeadline;
    if (typeof localSetImmediate === 'function') // Node.js and old IE.
    // There's a few reasons for why we prefer setImmediate.
    //
    // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
    // (Even though this is a DOM fork of the Scheduler, you could get here
    // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
    // https://github.com/facebook/react/issues/20756
    //
    // But also, it runs earlier which is the semantic we want.
    // If other browsers ever implement it, it's better to use it.
    // Although both of these would be inferior to native scheduling.
    schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if (typeof MessageChannel !== 'undefined') {
        // DOM and Worker environments.
        // We prefer MessageChannel because of the 4ms setTimeout clamping.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else // We should only fallback here in non-browser environments.
    schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
        }
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_forceFrameRate = forceFrameRate;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"f8V2Q":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$be2d = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
$parcel$ReactRefreshHelpers$be2d.init();
var prevRefreshReg = globalThis.$RefreshReg$;
var prevRefreshSig = globalThis.$RefreshSig$;
$parcel$ReactRefreshHelpers$be2d.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _react1 = require("@deck.gl/react");
var _reactMapGl = require("react-map-gl");
var _layers = require("@deck.gl/layers");
var _material = require("@mui/material");
/*import bodenRichtwertMannheim from './mannheim-map.png'*/ var _wohnungenJson = require("./wohnungen.json");
var _wohnungenJsonDefault = parcelHelpers.interopDefault(_wohnungenJson);
var _stadtteileMannheimJson = require("./stadtteile_mannheim.json");
var _stadtteileMannheimJsonDefault = parcelHelpers.interopDefault(_stadtteileMannheimJson);
var _s = $RefreshSig$();
const MAPBOX_TOKEN = "pk.eyJ1IjoibGF1cmVudDE1NCIsImEiOiJjbWI4ZXRmYWowYnM3MmtzYnpxdnluNmlyIn0.5Y8kOPYR-F_Ac-bAJTPiog";
function stringToColor(name) {
    let hash = 0;
    for(let i = 0; i < name.length; i++)hash = name.charCodeAt(i) + ((hash << 5) - hash);
    const r = hash >> 0 & 255;
    const g = hash >> 8 & 255;
    const b = hash >> 16 & 255;
    return [
        r,
        g,
        b,
        80
    ];
}
const getCentroid = (feature)=>{
    const coords = feature.geometry.coordinates[0];
    const lons = coords.map((coord)=>coord[0]);
    const lats = coords.map((coord)=>coord[1]);
    const lon = (Math.min(...lons) + Math.max(...lons)) / 2;
    const lat = (Math.min(...lats) + Math.max(...lats)) / 2;
    return [
        lon,
        lat
    ];
};
const jitter = ()=>(Math.random() - 0.5) * 0.0016;
const INITIAL_VIEW_STATE = {
    longitude: 8.466,
    latitude: 49.4875,
    zoom: 12,
    pitch: 45,
    bearing: 0
};
const App = ()=>{
    _s();
    const [selectedObjectId, setSelectedObjectId] = (0, _react.useState)(null);
    const [viewMode, setViewMode] = (0, _react.useState)("avg");
    const [data] = (0, _react.useState)(()=>(0, _wohnungenJsonDefault.default).filter((d)=>d.latitude && d.longlitude).map((d, i)=>({
                ...d,
                id: i,
                position: [
                    parseFloat(d.longlitude) + jitter(),
                    parseFloat(d.latitude) + jitter()
                ]
            })));
    const prices = data.map((d)=>d.price_per_qm);
    const logPrices = prices.map((p)=>Math.log(p));
    const minLog = Math.min(...logPrices);
    const maxLog = Math.max(...logPrices);
    // 💡 jetzt innerhalb der Komponente definiert
    function priceToColor(price) {
        const logP = Math.log(price);
        const ratio = (logP - minLog) / (maxLog - minLog);
        const r = Math.floor(255 * ratio);
        const g = Math.floor(255 * (1 - Math.abs(ratio - 0.5) * 2));
        const b = Math.floor(255 * (1 - ratio));
        return [
            r,
            g,
            b,
            180
        ];
    }
    const stadtteilLayerMannheim = new (0, _layers.GeoJsonLayer)({
        id: 'stadtteile',
        data: (0, _stadtteileMannheimJsonDefault.default),
        stroked: true,
        filled: true,
        lineWidthScale: 2,
        lineWidthMinPixels: 1,
        getLineColor: [
            0,
            0,
            0,
            200
        ],
        getFillColor: [
            180,
            180,
            255,
            80
        ] // hellgrau-transparent
    });
    /*const bodenrichtwertMannheimLayer = new BitmapLayer({
    id: 'Bitmaplayer',
    bounds: [8.43, 49.44, 8.55, 49.53],
    image: bodenRichtwertMannheim,
    pickable: true,
  })
*/ const stadtteilLabelLayer = new (0, _layers.TextLayer)({
        id: 'stadtteil-labels',
        data: (0, _stadtteileMannheimJsonDefault.default).features.map((f)=>{
            const [lon, lat] = getCentroid(f);
            return {
                position: [
                    lon,
                    lat,
                    100
                ],
                name: f.properties.name
            };
        }),
        pickable: false,
        getPosition: (d)=>d.position,
        getText: (d)=>d.name,
        getSize: 200,
        sizeUnits: 'meters',
        getColor: [
            0,
            0,
            0,
            255
        ],
        fontFamily: 'Arial, sans-serif',
        billboard: true,
        characterSet: 'auto'
    });
    const columnLayer = new (0, _layers.ColumnLayer)({
        id: 'wohnungen',
        data,
        diskResolution: 6,
        radius: 40,
        extruded: true,
        pickable: true,
        wireframe: true,
        elevationScale: 60,
        getPosition: (d)=>d.position,
        getId: (d)=>d.id,
        getFillColor: (d)=>priceToColor(d.price_per_qm, minLog, maxLog),
        getLineColor: [
            0,
            0,
            0,
            255
        ],
        getLineWidth: 3,
        lineWidthUnits: 'pixels',
        getElevation: (d)=>d.price_per_qm
    });
    const testAvgData = (0, _stadtteileMannheimJsonDefault.default).features.map((feature, i)=>{
        const [lon, lat] = getCentroid(feature);
        return {
            id: i,
            name: feature.properties.name,
            position: [
                lon,
                lat + 0.000
            ],
            price_per_qm: Math.floor(8 + Math.random() * 10)
        };
    });
    const avgColumnLayer = new (0, _layers.ColumnLayer)({
        id: 'stadtteil-avg-balken',
        data: testAvgData,
        diskResolution: 6,
        radius: 130,
        extruded: true,
        wireframe: true,
        pickable: true,
        elevationScale: 120,
        getPosition: (d)=>d.position,
        getElevation: (d)=>d.price_per_qm,
        getFillColor: [
            255,
            140,
            0,
            140
        ],
        getLineColor: [
            255,
            255,
            255,
            255
        ],
        getLineWidth: 1,
        lineWidthUnits: 'pixels'
    });
    const layers = [
        /*bodenrichtwertMannheimLayer,*/ stadtteilLayerMannheim,
        stadtteilLabelLayer,
        viewMode === "avg" ? avgColumnLayer : columnLayer
    ];
    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
        style: {
            position: 'relative',
            width: '100vw',
            height: '100vh'
        },
        children: [
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _material.Button), {
                variant: "contained",
                color: "secondary",
                style: {
                    position: 'absolute',
                    top: 20,
                    right: 20,
                    zIndex: 1000
                },
                onClick: ()=>setViewMode(viewMode === "avg" ? "wohnungen" : "avg"),
                children: viewMode === "avg" ? "\uD83C\uDFE2 Einzelwohnungen anzeigen" : "\uD83D\uDCCA Durchschnitt pro Stadtteil"
            }, void 0, false, {
                fileName: "src/App.jsx",
                lineNumber: 169,
                columnNumber: 5
            }, undefined),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _react1.DeckGL), {
                initialViewState: INITIAL_VIEW_STATE,
                controller: true,
                layers: layers,
                onClick: (info)=>{
                    if (info.object && viewMode === "wohnungen") {
                        if (selectedObjectId === info.object.id) setSelectedObjectId(null);
                        else setSelectedObjectId(info.object.id);
                    } else setSelectedObjectId(null);
                },
                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _reactMapGl.Map), {
                    mapStyle: "mapbox://styles/mapbox/light-v11",
                    mapboxAccessToken: MAPBOX_TOKEN
                }, void 0, false, {
                    fileName: "src/App.jsx",
                    lineNumber: 203,
                    columnNumber: 7
                }, undefined)
            }, void 0, false, {
                fileName: "src/App.jsx",
                lineNumber: 187,
                columnNumber: 7
            }, undefined),
            selectedObjectId !== null && viewMode === "wohnungen" && (()=>{
                const selectedObject = data.find((d)=>d.id === selectedObjectId);
                if (!selectedObject) return null;
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
                    style: {
                        position: 'absolute',
                        bottom: 20,
                        left: 20,
                        padding: '10px 15px',
                        background: 'white',
                        boxShadow: '0 0 10px rgba(0,0,0,0.3)',
                        borderRadius: '8px',
                        maxWidth: '300px',
                        zIndex: 999
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("h3", {
                            style: {
                                margin: 0
                            },
                            children: selectedObject.title
                        }, void 0, false, {
                            fileName: "src/App.jsx",
                            lineNumber: 224,
                            columnNumber: 11
                        }, undefined),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("p", {
                            style: {
                                margin: 0
                            },
                            children: [
                                "\uD83D\uDCB0 Miete: ",
                                selectedObject.price_per_qm,
                                " \u20AC"
                            ]
                        }, void 0, true, {
                            fileName: "src/App.jsx",
                            lineNumber: 225,
                            columnNumber: 11
                        }, undefined),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("p", {
                            style: {
                                margin: 0
                            },
                            children: [
                                "\uD83D\uDCCD Adresse: ",
                                selectedObject.street
                            ]
                        }, void 0, true, {
                            fileName: "src/App.jsx",
                            lineNumber: 226,
                            columnNumber: 11
                        }, undefined),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("p", {
                            style: {
                                margin: 0
                            },
                            children: [
                                "\uD83D\uDCD0 ",
                                selectedObject.price_per_qm,
                                " \u20AC/m\xb2"
                            ]
                        }, void 0, true, {
                            fileName: "src/App.jsx",
                            lineNumber: 227,
                            columnNumber: 11
                        }, undefined)
                    ]
                }, void 0, true, {
                    fileName: "src/App.jsx",
                    lineNumber: 213,
                    columnNumber: 11
                }, undefined);
            })()
        ]
    }, void 0, true, {
        fileName: "src/App.jsx",
        lineNumber: 168,
        columnNumber: 5
    }, undefined);
};
_s(App, "ND0J+g7qzH1MlYgh9+CRJv0CMqY=");
_c = App;
exports.default = App;
var _c;
$RefreshReg$(_c, "App");

  $parcel$ReactRefreshHelpers$be2d.postlude(module);
} finally {
  globalThis.$RefreshReg$ = prevRefreshReg;
  globalThis.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"dVPUn","react":"jMk1U","@deck.gl/react":"4lMb0","react-map-gl":"5EUd0","@deck.gl/layers":"i5X8t","@mui/material":"9mWks","./wohnungen.json":"ahkwl","./stadtteile_mannheim.json":"hkinW","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"l2xjn"}],"4lMb0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeckGL", ()=>(0, _deckglDefault.default));
parcelHelpers.export(exports, "default", ()=>(0, _deckglDefault.default));
var _deckgl = require("./deckgl");
var _deckglDefault = parcelHelpers.interopDefault(_deckgl);

},{"./deckgl":"hxXOC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hxXOC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _core = require("@deck.gl/core");
var _useIsomorphicLayoutEffect = require("./utils/use-isomorphic-layout-effect");
var _useIsomorphicLayoutEffectDefault = parcelHelpers.interopDefault(_useIsomorphicLayoutEffect);
var _extractJsxLayers = require("./utils/extract-jsx-layers");
var _extractJsxLayersDefault = parcelHelpers.interopDefault(_extractJsxLayers);
var _positionChildrenUnderViews = require("./utils/position-children-under-views");
var _positionChildrenUnderViewsDefault = parcelHelpers.interopDefault(_positionChildrenUnderViews);
var _extractStyles = require("./utils/extract-styles");
var _extractStylesDefault = parcelHelpers.interopDefault(_extractStyles);
function getRefHandles(thisRef) {
    return {
        get deck () {
            return thisRef.deck;
        },
        pickObject: (opts)=>thisRef.deck.pickObject(opts),
        pickMultipleObjects: (opts)=>thisRef.deck.pickMultipleObjects(opts),
        pickObjects: (opts)=>thisRef.deck.pickObjects(opts)
    };
}
function redrawDeck(thisRef) {
    if (thisRef.redrawReason) {
        thisRef.deck._drawLayers(thisRef.redrawReason);
        thisRef.redrawReason = null;
    }
}
function createDeckInstance(thisRef, DeckClass, props) {
    const deck = new DeckClass({
        ...props,
        _customRender: (redrawReason)=>{
            thisRef.redrawReason = redrawReason;
            const viewports = deck.getViewports();
            if (thisRef.lastRenderedViewports !== viewports) thisRef.forceUpdate();
            else redrawDeck(thisRef);
        }
    });
    return deck;
}
const DeckGL = (0, _react.forwardRef)((props, ref)=>{
    const [version, setVersion] = (0, _react.useState)(0);
    const _thisRef = (0, _react.useRef)({
        control: null,
        version,
        forceUpdate: ()=>setVersion((v)=>v + 1)
    });
    const thisRef = _thisRef.current;
    const containerRef = (0, _react.useRef)(null);
    const canvasRef = (0, _react.useRef)(null);
    const jsxProps = (0, _react.useMemo)(()=>(0, _extractJsxLayersDefault.default)(props), [
        props.layers,
        props.views,
        props.children
    ]);
    let inRender = true;
    const handleViewStateChange = (params)=>{
        var _props$onViewStateCha;
        if (inRender && props.viewState) {
            thisRef.viewStateUpdateRequested = params;
            return null;
        }
        thisRef.viewStateUpdateRequested = null;
        return (_props$onViewStateCha = props.onViewStateChange) === null || _props$onViewStateCha === void 0 ? void 0 : _props$onViewStateCha.call(props, params);
    };
    const handleInteractionStateChange = (params)=>{
        if (inRender) thisRef.interactionStateUpdateRequested = params;
        else {
            var _props$onInteractionS;
            thisRef.interactionStateUpdateRequested = null;
            (_props$onInteractionS = props.onInteractionStateChange) === null || _props$onInteractionS === void 0 || _props$onInteractionS.call(props, params);
        }
    };
    const deckProps = (0, _react.useMemo)(()=>{
        const forwardProps = {
            ...props,
            style: null,
            width: '100%',
            height: '100%',
            parent: containerRef.current,
            canvas: canvasRef.current,
            layers: jsxProps.layers,
            views: jsxProps.views,
            onViewStateChange: handleViewStateChange,
            onInteractionStateChange: handleInteractionStateChange
        };
        delete forwardProps._customRender;
        if (thisRef.deck) thisRef.deck.setProps(forwardProps);
        return forwardProps;
    }, [
        props
    ]);
    (0, _react.useEffect)(()=>{
        const DeckClass = props.Deck || (0, _core.Deck);
        thisRef.deck = createDeckInstance(thisRef, DeckClass, {
            ...deckProps,
            parent: containerRef.current,
            canvas: canvasRef.current
        });
        return ()=>{
            var _thisRef$deck;
            return (_thisRef$deck = thisRef.deck) === null || _thisRef$deck === void 0 ? void 0 : _thisRef$deck.finalize();
        };
    }, []);
    (0, _useIsomorphicLayoutEffectDefault.default)(()=>{
        redrawDeck(thisRef);
        const { viewStateUpdateRequested, interactionStateUpdateRequested } = thisRef;
        if (viewStateUpdateRequested) handleViewStateChange(viewStateUpdateRequested);
        if (interactionStateUpdateRequested) handleInteractionStateChange(interactionStateUpdateRequested);
    });
    (0, _react.useImperativeHandle)(ref, ()=>getRefHandles(thisRef), []);
    const currentViewports = thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : undefined;
    const { ContextProvider, width, height, id, style } = props;
    const { containerStyle, canvasStyle } = (0, _react.useMemo)(()=>(0, _extractStylesDefault.default)({
            width,
            height,
            style
        }), [
        width,
        height,
        style
    ]);
    if (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports || thisRef.version !== version) {
        thisRef.lastRenderedViewports = currentViewports;
        thisRef.version = version;
        const childrenUnderViews = (0, _positionChildrenUnderViewsDefault.default)({
            children: jsxProps.children,
            deck: thisRef.deck,
            ContextProvider
        });
        const canvas = (0, _react.createElement)('canvas', {
            key: 'canvas',
            id: id || 'deckgl-overlay',
            ref: canvasRef,
            style: canvasStyle
        });
        thisRef.control = (0, _react.createElement)('div', {
            id: "".concat(id || 'deckgl', "-wrapper"),
            ref: containerRef,
            style: containerStyle
        }, [
            canvas,
            childrenUnderViews
        ]);
    }
    inRender = false;
    return thisRef.control;
});
DeckGL.defaultProps = (0, _core.Deck).defaultProps;
exports.default = DeckGL;

},{"react":"jMk1U","@deck.gl/core":"9zfJz","./utils/use-isomorphic-layout-effect":"fsJ8r","./utils/extract-jsx-layers":"qV7oN","./utils/position-children-under-views":"aZP5i","./utils/extract-styles":"61fTc","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9zfJz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VERSION", ()=>(0, _init.VERSION));
parcelHelpers.export(exports, "COORDINATE_SYSTEM", ()=>(0, _constants.COORDINATE_SYSTEM));
parcelHelpers.export(exports, "OPERATION", ()=>(0, _constants.OPERATION));
parcelHelpers.export(exports, "UNIT", ()=>(0, _constants.UNIT));
parcelHelpers.export(exports, "LightingEffect", ()=>(0, _lightingEffectDefault.default));
parcelHelpers.export(exports, "AmbientLight", ()=>(0, _ambientLight.AmbientLight));
parcelHelpers.export(exports, "DirectionalLight", ()=>(0, _directionalLight.DirectionalLight));
parcelHelpers.export(exports, "PointLight", ()=>(0, _pointLight.PointLight));
parcelHelpers.export(exports, "_CameraLight", ()=>(0, _cameraLightDefault.default));
parcelHelpers.export(exports, "_SunLight", ()=>(0, _sunLightDefault.default));
parcelHelpers.export(exports, "PostProcessEffect", ()=>(0, _postProcessEffectDefault.default));
parcelHelpers.export(exports, "_LayersPass", ()=>(0, _layersPassDefault.default));
parcelHelpers.export(exports, "_PickLayersPass", ()=>(0, _pickLayersPassDefault.default));
parcelHelpers.export(exports, "Deck", ()=>(0, _deckDefault.default));
parcelHelpers.export(exports, "LayerManager", ()=>(0, _layerManagerDefault.default));
parcelHelpers.export(exports, "AttributeManager", ()=>(0, _attributeManagerDefault.default));
parcelHelpers.export(exports, "Layer", ()=>(0, _layerDefault.default));
parcelHelpers.export(exports, "CompositeLayer", ()=>(0, _compositeLayerDefault.default));
parcelHelpers.export(exports, "DeckRenderer", ()=>(0, _deckRendererDefault.default));
parcelHelpers.export(exports, "Viewport", ()=>(0, _viewportDefault.default));
parcelHelpers.export(exports, "WebMercatorViewport", ()=>(0, _webMercatorViewportDefault.default));
parcelHelpers.export(exports, "_GlobeViewport", ()=>(0, _globeViewportDefault.default));
parcelHelpers.export(exports, "OrbitViewport", ()=>(0, _orbitViewportDefault.default));
parcelHelpers.export(exports, "OrthographicViewport", ()=>(0, _orthographicViewportDefault.default));
parcelHelpers.export(exports, "FirstPersonViewport", ()=>(0, _firstPersonViewportDefault.default));
parcelHelpers.export(exports, "picking", ()=>(0, _shaderlib.picking));
parcelHelpers.export(exports, "project", ()=>(0, _shaderlib.project));
parcelHelpers.export(exports, "project32", ()=>(0, _shaderlib.project32));
parcelHelpers.export(exports, "gouraudLighting", ()=>(0, _shaderlib.gouraudLighting));
parcelHelpers.export(exports, "phongLighting", ()=>(0, _shaderlib.phongLighting));
parcelHelpers.export(exports, "shadow", ()=>(0, _shaderlib.shadow));
parcelHelpers.export(exports, "View", ()=>(0, _viewDefault.default));
parcelHelpers.export(exports, "MapView", ()=>(0, _mapViewDefault.default));
parcelHelpers.export(exports, "FirstPersonView", ()=>(0, _firstPersonViewDefault.default));
parcelHelpers.export(exports, "OrbitView", ()=>(0, _orbitViewDefault.default));
parcelHelpers.export(exports, "OrthographicView", ()=>(0, _orthographicViewDefault.default));
parcelHelpers.export(exports, "_GlobeView", ()=>(0, _globeViewDefault.default));
parcelHelpers.export(exports, "Controller", ()=>(0, _controllerDefault.default));
parcelHelpers.export(exports, "MapController", ()=>(0, _mapControllerDefault.default));
parcelHelpers.export(exports, "_GlobeController", ()=>(0, _globeControllerDefault.default));
parcelHelpers.export(exports, "FirstPersonController", ()=>(0, _firstPersonControllerDefault.default));
parcelHelpers.export(exports, "OrbitController", ()=>(0, _orbitControllerDefault.default));
parcelHelpers.export(exports, "OrthographicController", ()=>(0, _orthographicControllerDefault.default));
parcelHelpers.export(exports, "LayerExtension", ()=>(0, _layerExtensionDefault.default));
parcelHelpers.export(exports, "TRANSITION_EVENTS", ()=>(0, _transitionManager.TRANSITION_EVENTS));
parcelHelpers.export(exports, "TransitionInterpolator", ()=>(0, _transitionInterpolatorDefault.default));
parcelHelpers.export(exports, "LinearInterpolator", ()=>(0, _linearInterpolatorDefault.default));
parcelHelpers.export(exports, "FlyToInterpolator", ()=>(0, _flyToInterpolatorDefault.default));
parcelHelpers.export(exports, "log", ()=>(0, _logDefault.default));
parcelHelpers.export(exports, "assert", ()=>(0, _assertDefault.default));
parcelHelpers.export(exports, "createIterable", ()=>(0, _iterableUtils.createIterable));
parcelHelpers.export(exports, "fp64LowPart", ()=>(0, _mathUtils.fp64LowPart));
parcelHelpers.export(exports, "Tesselator", ()=>(0, _tesselatorDefault.default));
parcelHelpers.export(exports, "_fillArray", ()=>(0, _flatten.fillArray));
parcelHelpers.export(exports, "_flatten", ()=>(0, _flatten.flatten));
parcelHelpers.export(exports, "_count", ()=>(0, _count.count));
parcelHelpers.export(exports, "_deepEqual", ()=>(0, _deepEqual.deepEqual));
parcelHelpers.export(exports, "_memoize", ()=>(0, _memoizeDefault.default));
parcelHelpers.export(exports, "_mergeShaders", ()=>(0, _shader.mergeShaders));
parcelHelpers.export(exports, "_compareProps", ()=>(0, _props.compareProps));
var _init = require("./lib/init");
var _constants = require("./lib/constants");
var _lightingEffect = require("./effects/lighting/lighting-effect");
var _lightingEffectDefault = parcelHelpers.interopDefault(_lightingEffect);
var _ambientLight = require("./effects/lighting/ambient-light");
var _directionalLight = require("./effects/lighting/directional-light");
var _pointLight = require("./effects/lighting/point-light");
var _cameraLight = require("./effects/lighting/camera-light");
var _cameraLightDefault = parcelHelpers.interopDefault(_cameraLight);
var _sunLight = require("./effects/lighting/sun-light");
var _sunLightDefault = parcelHelpers.interopDefault(_sunLight);
var _postProcessEffect = require("./effects/post-process-effect");
var _postProcessEffectDefault = parcelHelpers.interopDefault(_postProcessEffect);
var _layersPass = require("./passes/layers-pass");
var _layersPassDefault = parcelHelpers.interopDefault(_layersPass);
var _pickLayersPass = require("./passes/pick-layers-pass");
var _pickLayersPassDefault = parcelHelpers.interopDefault(_pickLayersPass);
var _deck = require("./lib/deck");
var _deckDefault = parcelHelpers.interopDefault(_deck);
var _layerManager = require("./lib/layer-manager");
var _layerManagerDefault = parcelHelpers.interopDefault(_layerManager);
var _attributeManager = require("./lib/attribute/attribute-manager");
var _attributeManagerDefault = parcelHelpers.interopDefault(_attributeManager);
var _layer = require("./lib/layer");
var _layerDefault = parcelHelpers.interopDefault(_layer);
var _compositeLayer = require("./lib/composite-layer");
var _compositeLayerDefault = parcelHelpers.interopDefault(_compositeLayer);
var _deckRenderer = require("./lib/deck-renderer");
var _deckRendererDefault = parcelHelpers.interopDefault(_deckRenderer);
var _viewport = require("./viewports/viewport");
var _viewportDefault = parcelHelpers.interopDefault(_viewport);
var _webMercatorViewport = require("./viewports/web-mercator-viewport");
var _webMercatorViewportDefault = parcelHelpers.interopDefault(_webMercatorViewport);
var _globeViewport = require("./viewports/globe-viewport");
var _globeViewportDefault = parcelHelpers.interopDefault(_globeViewport);
var _orbitViewport = require("./viewports/orbit-viewport");
var _orbitViewportDefault = parcelHelpers.interopDefault(_orbitViewport);
var _orthographicViewport = require("./viewports/orthographic-viewport");
var _orthographicViewportDefault = parcelHelpers.interopDefault(_orthographicViewport);
var _firstPersonViewport = require("./viewports/first-person-viewport");
var _firstPersonViewportDefault = parcelHelpers.interopDefault(_firstPersonViewport);
var _shaderlib = require("./shaderlib");
var _view = require("./views/view");
var _viewDefault = parcelHelpers.interopDefault(_view);
var _mapView = require("./views/map-view");
var _mapViewDefault = parcelHelpers.interopDefault(_mapView);
var _firstPersonView = require("./views/first-person-view");
var _firstPersonViewDefault = parcelHelpers.interopDefault(_firstPersonView);
var _orbitView = require("./views/orbit-view");
var _orbitViewDefault = parcelHelpers.interopDefault(_orbitView);
var _orthographicView = require("./views/orthographic-view");
var _orthographicViewDefault = parcelHelpers.interopDefault(_orthographicView);
var _globeView = require("./views/globe-view");
var _globeViewDefault = parcelHelpers.interopDefault(_globeView);
var _controller = require("./controllers/controller");
var _controllerDefault = parcelHelpers.interopDefault(_controller);
var _mapController = require("./controllers/map-controller");
var _mapControllerDefault = parcelHelpers.interopDefault(_mapController);
var _globeController = require("./controllers/globe-controller");
var _globeControllerDefault = parcelHelpers.interopDefault(_globeController);
var _firstPersonController = require("./controllers/first-person-controller");
var _firstPersonControllerDefault = parcelHelpers.interopDefault(_firstPersonController);
var _orbitController = require("./controllers/orbit-controller");
var _orbitControllerDefault = parcelHelpers.interopDefault(_orbitController);
var _orthographicController = require("./controllers/orthographic-controller");
var _orthographicControllerDefault = parcelHelpers.interopDefault(_orthographicController);
var _layerExtension = require("./lib/layer-extension");
var _layerExtensionDefault = parcelHelpers.interopDefault(_layerExtension);
var _transitionManager = require("./controllers/transition-manager");
var _transitionInterpolator = require("./transitions/transition-interpolator");
var _transitionInterpolatorDefault = parcelHelpers.interopDefault(_transitionInterpolator);
var _linearInterpolator = require("./transitions/linear-interpolator");
var _linearInterpolatorDefault = parcelHelpers.interopDefault(_linearInterpolator);
var _flyToInterpolator = require("./transitions/fly-to-interpolator");
var _flyToInterpolatorDefault = parcelHelpers.interopDefault(_flyToInterpolator);
var _log = require("./utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _assert = require("./utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _iterableUtils = require("./utils/iterable-utils");
var _mathUtils = require("./utils/math-utils");
var _tesselator = require("./utils/tesselator");
var _tesselatorDefault = parcelHelpers.interopDefault(_tesselator);
var _flatten = require("./utils/flatten");
var _count = require("./utils/count");
var _deepEqual = require("./utils/deep-equal");
var _memoize = require("./utils/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var _shader = require("./utils/shader");
var _props = require("./lifecycle/props");

},{"./lib/init":false,"./lib/constants":"lSdwU","./effects/lighting/lighting-effect":false,"./effects/lighting/ambient-light":false,"./effects/lighting/directional-light":false,"./effects/lighting/point-light":false,"./effects/lighting/camera-light":false,"./effects/lighting/sun-light":false,"./effects/post-process-effect":false,"./passes/layers-pass":false,"./passes/pick-layers-pass":false,"./lib/deck":"1qiBO","./lib/layer-manager":false,"./lib/attribute/attribute-manager":false,"./lib/layer":"h5FLJ","./lib/composite-layer":"3w8wp","./lib/deck-renderer":false,"./viewports/viewport":false,"./viewports/web-mercator-viewport":false,"./viewports/globe-viewport":false,"./viewports/orbit-viewport":false,"./viewports/orthographic-viewport":false,"./viewports/first-person-viewport":false,"./shaderlib":"gcBB9","./views/view":"8zBpj","./views/map-view":false,"./views/first-person-view":false,"./views/orbit-view":false,"./views/orthographic-view":false,"./views/globe-view":false,"./controllers/controller":false,"./controllers/map-controller":false,"./controllers/globe-controller":false,"./controllers/first-person-controller":false,"./controllers/orbit-controller":false,"./controllers/orthographic-controller":false,"./lib/layer-extension":false,"./controllers/transition-manager":false,"./transitions/transition-interpolator":false,"./transitions/linear-interpolator":false,"./transitions/fly-to-interpolator":false,"./utils/log":"GqqVU","./utils/assert":false,"./utils/iterable-utils":"81bnO","./utils/math-utils":false,"./utils/tesselator":"hKx47","./utils/flatten":false,"./utils/count":false,"./utils/deep-equal":false,"./utils/memoize":false,"./utils/shader":false,"./lifecycle/props":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lHvsz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VERSION", ()=>VERSION);
var _core = require("@loaders.gl/core");
var _images = require("@loaders.gl/images");
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _debug = require("../debug");
var _jsonLoader = require("../utils/json-loader");
var _jsonLoaderDefault = parcelHelpers.interopDefault(_jsonLoader);
function checkVersion() {
    const version = "8.9.36";
    const existingVersion = globalThis.deck && globalThis.deck.VERSION;
    if (existingVersion && existingVersion !== version) throw new Error("deck.gl - multiple versions detected: ".concat(existingVersion, " vs ").concat(version));
    if (!existingVersion) {
        (0, _logDefault.default).log(1, "deck.gl ".concat(version))();
        globalThis.deck = {
            ...globalThis.deck,
            VERSION: version,
            version,
            log: (0, _logDefault.default),
            _registerLoggers: (0, _debug.register)
        };
        (0, _core.registerLoaders)([
            (0, _jsonLoaderDefault.default),
            [
                (0, _images.ImageLoader),
                {
                    imagebitmap: {
                        premultiplyAlpha: 'none'
                    }
                }
            ]
        ]);
    }
    return version;
}
const VERSION = checkVersion();

},{"@loaders.gl/core":"9tqNe","@loaders.gl/images":"6x7eS","../utils/log":"GqqVU","../debug":"h4a5l","../utils/json-loader":"j7GrB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9tqNe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchFile", ()=>(0, _fetchFile.fetchFile));
parcelHelpers.export(exports, "readArrayBuffer", ()=>(0, _readArrayBuffer.readArrayBuffer));
parcelHelpers.export(exports, "readFileSync", ()=>(0, _readFile.readFileSync));
parcelHelpers.export(exports, "writeFile", ()=>(0, _writeFile.writeFile));
parcelHelpers.export(exports, "writeFileSync", ()=>(0, _writeFile.writeFileSync));
parcelHelpers.export(exports, "setLoaderOptions", ()=>(0, _loaderOptions.setLoaderOptions));
parcelHelpers.export(exports, "getLoaderOptions", ()=>(0, _loaderOptions.getLoaderOptions));
parcelHelpers.export(exports, "registerLoaders", ()=>(0, _registerLoaders.registerLoaders));
parcelHelpers.export(exports, "selectLoader", ()=>(0, _selectLoader.selectLoader));
parcelHelpers.export(exports, "selectLoaderSync", ()=>(0, _selectLoader.selectLoaderSync));
parcelHelpers.export(exports, "parse", ()=>(0, _parse.parse));
parcelHelpers.export(exports, "parseSync", ()=>(0, _parseSync.parseSync));
parcelHelpers.export(exports, "parseInBatches", ()=>(0, _parseInBatches.parseInBatches));
parcelHelpers.export(exports, "load", ()=>(0, _load.load));
parcelHelpers.export(exports, "loadInBatches", ()=>(0, _loadInBatches.loadInBatches));
parcelHelpers.export(exports, "encode", ()=>(0, _encode.encode));
parcelHelpers.export(exports, "encodeSync", ()=>(0, _encode.encodeSync));
parcelHelpers.export(exports, "encodeInBatches", ()=>(0, _encode.encodeInBatches));
parcelHelpers.export(exports, "encodeText", ()=>(0, _encode.encodeText));
parcelHelpers.export(exports, "encodeURLtoURL", ()=>(0, _encode.encodeURLtoURL));
parcelHelpers.export(exports, "save", ()=>(0, _save.save));
parcelHelpers.export(exports, "saveSync", ()=>(0, _save.saveSync));
parcelHelpers.export(exports, "setPathPrefix", ()=>(0, _loaderUtils.setPathPrefix));
parcelHelpers.export(exports, "getPathPrefix", ()=>(0, _loaderUtils.getPathPrefix));
parcelHelpers.export(exports, "resolvePath", ()=>(0, _loaderUtils.resolvePath));
parcelHelpers.export(exports, "RequestScheduler", ()=>(0, _loaderUtils.RequestScheduler));
parcelHelpers.export(exports, "makeIterator", ()=>(0, _makeIterator.makeIterator));
parcelHelpers.export(exports, "makeStream", ()=>(0, _makeNodeStream.makeStream));
parcelHelpers.export(exports, "NullWorkerLoader", ()=>(0, _nullLoader.NullWorkerLoader));
parcelHelpers.export(exports, "NullLoader", ()=>(0, _nullLoader.NullLoader));
parcelHelpers.export(exports, "JSONLoader", ()=>(0, _loaderUtils.JSONLoader));
parcelHelpers.export(exports, "_fetchProgress", ()=>(0, _fetchProgressDefault.default));
parcelHelpers.export(exports, "_BrowserFileSystem", ()=>(0, _browserFilesystemDefault.default));
parcelHelpers.export(exports, "_unregisterLoaders", ()=>(0, _registerLoaders._unregisterLoaders));
parcelHelpers.export(exports, "isBrowser", ()=>(0, _loaderUtils.isBrowser));
parcelHelpers.export(exports, "isWorker", ()=>(0, _loaderUtils.isWorker));
parcelHelpers.export(exports, "self", ()=>(0, _loaderUtils.self));
parcelHelpers.export(exports, "window", ()=>(0, _loaderUtils.window));
parcelHelpers.export(exports, "global", ()=>(0, _loaderUtils.global));
parcelHelpers.export(exports, "document", ()=>(0, _loaderUtils.document));
parcelHelpers.export(exports, "assert", ()=>(0, _loaderUtils.assert));
parcelHelpers.export(exports, "forEach", ()=>(0, _loaderUtils.forEach));
parcelHelpers.export(exports, "concatenateArrayBuffersAsync", ()=>(0, _loaderUtils.concatenateArrayBuffersAsync));
parcelHelpers.export(exports, "makeTextDecoderIterator", ()=>(0, _loaderUtils.makeTextDecoderIterator));
parcelHelpers.export(exports, "makeTextEncoderIterator", ()=>(0, _loaderUtils.makeTextEncoderIterator));
parcelHelpers.export(exports, "makeLineIterator", ()=>(0, _loaderUtils.makeLineIterator));
parcelHelpers.export(exports, "makeNumberedLineIterator", ()=>(0, _loaderUtils.makeNumberedLineIterator));
parcelHelpers.export(exports, "isPureObject", ()=>(0, _isType.isPureObject));
parcelHelpers.export(exports, "isPromise", ()=>(0, _isType.isPromise));
parcelHelpers.export(exports, "isIterable", ()=>(0, _isType.isIterable));
parcelHelpers.export(exports, "isAsyncIterable", ()=>(0, _isType.isAsyncIterable));
parcelHelpers.export(exports, "isIterator", ()=>(0, _isType.isIterator));
parcelHelpers.export(exports, "isResponse", ()=>(0, _isType.isResponse));
parcelHelpers.export(exports, "isReadableStream", ()=>(0, _isType.isReadableStream));
parcelHelpers.export(exports, "isWritableStream", ()=>(0, _isType.isWritableStream));
var _fetchFile = require("./lib/fetch/fetch-file");
var _readArrayBuffer = require("./lib/fetch/read-array-buffer");
var _readFile = require("./lib/fetch/read-file");
var _writeFile = require("./lib/fetch/write-file");
var _loaderOptions = require("./lib/api/loader-options");
var _registerLoaders = require("./lib/api/register-loaders");
var _selectLoader = require("./lib/api/select-loader");
var _parse = require("./lib/api/parse");
var _parseSync = require("./lib/api/parse-sync");
var _parseInBatches = require("./lib/api/parse-in-batches");
var _load = require("./lib/api/load");
var _loadInBatches = require("./lib/api/load-in-batches");
var _encode = require("./lib/api/encode");
var _save = require("./lib/api/save");
var _loaderUtils = require("@loaders.gl/loader-utils");
var _makeIterator = require("./iterators/make-iterator/make-iterator");
var _makeNodeStream = require("./iterators/make-stream/make-node-stream");
var _nullLoader = require("./null-loader");
var _fetchProgress = require("./lib/progress/fetch-progress");
var _fetchProgressDefault = parcelHelpers.interopDefault(_fetchProgress);
var _browserFilesystem = require("./lib/filesystems/browser-filesystem");
var _browserFilesystemDefault = parcelHelpers.interopDefault(_browserFilesystem);
var _isType = require("./javascript-utils/is-type");

},{"./lib/fetch/fetch-file":false,"./lib/fetch/read-array-buffer":false,"./lib/fetch/read-file":false,"./lib/fetch/write-file":false,"./lib/api/loader-options":false,"./lib/api/register-loaders":"g4efd","./lib/api/select-loader":false,"./lib/api/parse":false,"./lib/api/parse-sync":false,"./lib/api/parse-in-batches":false,"./lib/api/load":"dIlFx","./lib/api/load-in-batches":false,"./lib/api/encode":false,"./lib/api/save":false,"@loaders.gl/loader-utils":false,"./iterators/make-iterator/make-iterator":false,"./iterators/make-stream/make-node-stream":false,"./null-loader":false,"./lib/progress/fetch-progress":false,"./lib/filesystems/browser-filesystem":false,"./javascript-utils/is-type":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"h5MVj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchFile", ()=>fetchFile);
var _loaderUtils = require("@loaders.gl/loader-utils");
var _responseUtils = require("../utils/response-utils");
async function fetchFile(url, options) {
    if (typeof url === 'string') {
        url = (0, _loaderUtils.resolvePath)(url);
        let fetchOptions = options;
        if (options !== null && options !== void 0 && options.fetch && typeof (options === null || options === void 0 ? void 0 : options.fetch) !== 'function') fetchOptions = options.fetch;
        return await fetch(url, fetchOptions);
    }
    return await (0, _responseUtils.makeResponse)(url);
}

},{"@loaders.gl/loader-utils":"fYBuJ","../utils/response-utils":"k6APq","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fYBuJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>(0, _assert.assert));
parcelHelpers.export(exports, "isBrowser", ()=>(0, _globals.isBrowser));
parcelHelpers.export(exports, "isWorker", ()=>(0, _globals.isWorker));
parcelHelpers.export(exports, "nodeVersion", ()=>(0, _globals.nodeVersion));
parcelHelpers.export(exports, "self", ()=>(0, _globals.self));
parcelHelpers.export(exports, "window", ()=>(0, _globals.window));
parcelHelpers.export(exports, "global", ()=>(0, _globals.global));
parcelHelpers.export(exports, "document", ()=>(0, _globals.document));
parcelHelpers.export(exports, "mergeLoaderOptions", ()=>(0, _mergeLoaderOptions.mergeLoaderOptions));
parcelHelpers.export(exports, "createLoaderWorker", ()=>(0, _createLoaderWorker.createLoaderWorker));
parcelHelpers.export(exports, "parseWithWorker", ()=>(0, _parseWithWorker.parseWithWorker));
parcelHelpers.export(exports, "canParseWithWorker", ()=>(0, _parseWithWorker.canParseWithWorker));
parcelHelpers.export(exports, "canEncodeWithWorker", ()=>(0, _encodeWithWorker.canEncodeWithWorker));
parcelHelpers.export(exports, "parseJSON", ()=>(0, _parseJson.parseJSON));
parcelHelpers.export(exports, "sliceArrayBuffer", ()=>(0, _arrayBufferUtils.sliceArrayBuffer));
parcelHelpers.export(exports, "concatenateArrayBuffers", ()=>(0, _arrayBufferUtils.concatenateArrayBuffers));
parcelHelpers.export(exports, "concatenateTypedArrays", ()=>(0, _arrayBufferUtils.concatenateTypedArrays));
parcelHelpers.export(exports, "compareArrayBuffers", ()=>(0, _arrayBufferUtils.compareArrayBuffers));
parcelHelpers.export(exports, "padToNBytes", ()=>(0, _memoryCopyUtils.padToNBytes));
parcelHelpers.export(exports, "copyToArray", ()=>(0, _memoryCopyUtils.copyToArray));
parcelHelpers.export(exports, "copyArrayBuffer", ()=>(0, _memoryCopyUtils.copyArrayBuffer));
parcelHelpers.export(exports, "padStringToByteAlignment", ()=>(0, _dataviewCopyUtils.padStringToByteAlignment));
parcelHelpers.export(exports, "copyStringToDataView", ()=>(0, _dataviewCopyUtils.copyStringToDataView));
parcelHelpers.export(exports, "copyBinaryToDataView", ()=>(0, _dataviewCopyUtils.copyBinaryToDataView));
parcelHelpers.export(exports, "copyPaddedArrayBufferToDataView", ()=>(0, _dataviewCopyUtils.copyPaddedArrayBufferToDataView));
parcelHelpers.export(exports, "copyPaddedStringToDataView", ()=>(0, _dataviewCopyUtils.copyPaddedStringToDataView));
parcelHelpers.export(exports, "getFirstCharacters", ()=>(0, _getFirstCharacters.getFirstCharacters));
parcelHelpers.export(exports, "getMagicString", ()=>(0, _getFirstCharacters.getMagicString));
parcelHelpers.export(exports, "makeTextEncoderIterator", ()=>(0, _textIterators.makeTextEncoderIterator));
parcelHelpers.export(exports, "makeTextDecoderIterator", ()=>(0, _textIterators.makeTextDecoderIterator));
parcelHelpers.export(exports, "makeLineIterator", ()=>(0, _textIterators.makeLineIterator));
parcelHelpers.export(exports, "makeNumberedLineIterator", ()=>(0, _textIterators.makeNumberedLineIterator));
parcelHelpers.export(exports, "forEach", ()=>(0, _asyncIteration.forEach));
parcelHelpers.export(exports, "concatenateArrayBuffersAsync", ()=>(0, _asyncIteration.concatenateArrayBuffersAsync));
parcelHelpers.export(exports, "RequestScheduler", ()=>(0, _requestSchedulerDefault.default));
parcelHelpers.export(exports, "setPathPrefix", ()=>(0, _fileAliases.setPathPrefix));
parcelHelpers.export(exports, "getPathPrefix", ()=>(0, _fileAliases.getPathPrefix));
parcelHelpers.export(exports, "resolvePath", ()=>(0, _fileAliases.resolvePath));
parcelHelpers.export(exports, "_addAliases", ()=>(0, _fileAliases.addAliases));
parcelHelpers.export(exports, "JSONLoader", ()=>(0, _jsonLoader.JSONLoader));
parcelHelpers.export(exports, "isBuffer", ()=>(0, _memoryConversionUtils.isBuffer));
parcelHelpers.export(exports, "toBuffer", ()=>(0, _memoryConversionUtils.toBuffer));
parcelHelpers.export(exports, "toArrayBuffer", ()=>(0, _memoryConversionUtils.toArrayBuffer));
parcelHelpers.export(exports, "promisify1", ()=>(0, _promisify.promisify1));
parcelHelpers.export(exports, "promisify2", ()=>(0, _promisify.promisify2));
parcelHelpers.export(exports, "makeReadableFile", ()=>(0, _readableFile.makeReadableFile));
parcelHelpers.export(exports, "makeWritableFile", ()=>(0, _writableFile.makeWritableFile));
parcelHelpers.export(exports, "_NodeFileSystem", ()=>(0, _nodeFilesystemDefault.default));
parcelHelpers.export(exports, "path", ()=>_path);
parcelHelpers.export(exports, "fs", ()=>_fs);
parcelHelpers.export(exports, "stream", ()=>_stream);
var _assert = require("./lib/env-utils/assert");
var _globals = require("./lib/env-utils/globals");
var _mergeLoaderOptions = require("./lib/option-utils/merge-loader-options");
var _createLoaderWorker = require("./lib/worker-loader-utils/create-loader-worker");
var _parseWithWorker = require("./lib/worker-loader-utils/parse-with-worker");
var _encodeWithWorker = require("./lib/worker-loader-utils/encode-with-worker");
var _parseJson = require("./lib/parser-utils/parse-json");
var _arrayBufferUtils = require("./lib/binary-utils/array-buffer-utils");
var _memoryCopyUtils = require("./lib/binary-utils/memory-copy-utils");
var _dataviewCopyUtils = require("./lib/binary-utils/dataview-copy-utils");
var _getFirstCharacters = require("./lib/binary-utils/get-first-characters");
var _textIterators = require("./lib/iterators/text-iterators");
var _asyncIteration = require("./lib/iterators/async-iteration");
var _requestScheduler = require("./lib/request-utils/request-scheduler");
var _requestSchedulerDefault = parcelHelpers.interopDefault(_requestScheduler);
var _fileAliases = require("./lib/path-utils/file-aliases");
var _jsonLoader = require("./json-loader");
var _memoryConversionUtils = require("./lib/binary-utils/memory-conversion-utils");
var _promisify = require("./lib/node/promisify");
var _path = require("./lib/path-utils/path");
var _fs = require("./lib/node/fs");
var _stream = require("./lib/node/stream");
var _readableFile = require("./lib/filesystems/readable-file");
var _writableFile = require("./lib/filesystems/writable-file");
var _nodeFilesystem = require("./lib/filesystems/node-filesystem");
var _nodeFilesystemDefault = parcelHelpers.interopDefault(_nodeFilesystem);

},{"./lib/env-utils/assert":"6KAgq","./lib/env-utils/globals":"jwxHF","./lib/option-utils/merge-loader-options":false,"./lib/worker-loader-utils/create-loader-worker":false,"./lib/worker-loader-utils/parse-with-worker":"h3sWz","./lib/worker-loader-utils/encode-with-worker":false,"./lib/parser-utils/parse-json":false,"./lib/binary-utils/array-buffer-utils":"l6Gnk","./lib/binary-utils/memory-copy-utils":false,"./lib/binary-utils/dataview-copy-utils":false,"./lib/binary-utils/get-first-characters":false,"./lib/iterators/text-iterators":false,"./lib/iterators/async-iteration":"5BBWE","./lib/request-utils/request-scheduler":false,"./lib/path-utils/file-aliases":"kTeGB","./json-loader":false,"./lib/binary-utils/memory-conversion-utils":"7yiPN","./lib/node/promisify":false,"./lib/path-utils/path":"9AjjS","./lib/node/fs":false,"./lib/node/stream":false,"./lib/filesystems/readable-file":false,"./lib/filesystems/writable-file":false,"./lib/filesystems/node-filesystem":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6KAgq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message || 'loader assertion failed.');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bYT6T":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"jwxHF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "self", ()=>self_);
parcelHelpers.export(exports, "window", ()=>window_);
parcelHelpers.export(exports, "global", ()=>global_);
parcelHelpers.export(exports, "document", ()=>document_);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
parcelHelpers.export(exports, "isWorker", ()=>isWorker);
parcelHelpers.export(exports, "nodeVersion", ()=>nodeVersion);
var global = arguments[3];
const globals = {
    self: typeof self !== 'undefined' && self,
    window: typeof window !== 'undefined' && window,
    global: typeof global !== 'undefined' && global,
    document: typeof document !== 'undefined' && document
};
const self_ = globals.self || globals.window || globals.global || {};
const window_ = globals.window || globals.self || globals.global || {};
const global_ = globals.global || globals.self || globals.window || {};
const document_ = globals.document || {};
const isBrowser = Boolean(true);
const isWorker = typeof importScripts === 'function';
const matches = false;
const nodeVersion = matches && parseFloat(matches[1]) || 0;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"h3sWz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "canParseWithWorker", ()=>canParseWithWorker);
parcelHelpers.export(exports, "parseWithWorker", ()=>parseWithWorker);
var _workerUtils = require("@loaders.gl/worker-utils");
function canParseWithWorker(loader, options) {
    if (!(0, _workerUtils.WorkerFarm).isSupported()) return false;
    if (!(0, _workerUtils.isBrowser) && !(options !== null && options !== void 0 && options._nodeWorkers)) return false;
    return loader.worker && (options === null || options === void 0 ? void 0 : options.worker);
}
async function parseWithWorker(loader, data, options, context, parseOnMainThread) {
    const name = loader.id;
    const url = (0, _workerUtils.getWorkerURL)(loader, options);
    const workerFarm = (0, _workerUtils.WorkerFarm).getWorkerFarm(options);
    const workerPool = workerFarm.getWorkerPool({
        name,
        url
    });
    options = JSON.parse(JSON.stringify(options));
    context = JSON.parse(JSON.stringify(context || {}));
    const job = await workerPool.startJob('process-on-worker', onMessage.bind(null, parseOnMainThread));
    job.postMessage('process', {
        input: data,
        options,
        context
    });
    const result = await job.result;
    return await result.result;
}
async function onMessage(parseOnMainThread, job, type, payload) {
    switch(type){
        case 'done':
            job.done(payload);
            break;
        case 'error':
            job.error(new Error(payload.error));
            break;
        case 'process':
            const { id, input, options } = payload;
            try {
                const result = await parseOnMainThread(input, options);
                job.postMessage('done', {
                    id,
                    result
                });
            } catch (error) {
                const message = error instanceof Error ? error.message : 'unknown error';
                job.postMessage('error', {
                    id,
                    error: message
                });
            }
            break;
        default:
            console.warn("parse-with-worker unknown message ".concat(type));
    }
}

},{"@loaders.gl/worker-utils":"kNBkE","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kNBkE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>(0, _assert.assert));
parcelHelpers.export(exports, "isBrowser", ()=>(0, _globals.isBrowser));
parcelHelpers.export(exports, "isWorker", ()=>(0, _globals.isWorker));
parcelHelpers.export(exports, "WorkerJob", ()=>(0, _workerJobDefault.default));
parcelHelpers.export(exports, "WorkerThread", ()=>(0, _workerThreadDefault.default));
parcelHelpers.export(exports, "WorkerFarm", ()=>(0, _workerFarmDefault.default));
parcelHelpers.export(exports, "WorkerPool", ()=>(0, _workerPoolDefault.default));
parcelHelpers.export(exports, "WorkerBody", ()=>(0, _workerBodyDefault.default));
parcelHelpers.export(exports, "processOnWorker", ()=>(0, _processOnWorker.processOnWorker));
parcelHelpers.export(exports, "canProcessOnWorker", ()=>(0, _processOnWorker.canProcessOnWorker));
parcelHelpers.export(exports, "createWorker", ()=>(0, _createWorker.createWorker));
parcelHelpers.export(exports, "getWorkerURL", ()=>(0, _getWorkerUrl.getWorkerURL));
parcelHelpers.export(exports, "validateWorkerVersion", ()=>(0, _validateWorkerVersion.validateWorkerVersion));
parcelHelpers.export(exports, "getTransferList", ()=>(0, _getTransferList.getTransferList));
parcelHelpers.export(exports, "getTransferListForWriter", ()=>(0, _getTransferList.getTransferListForWriter));
parcelHelpers.export(exports, "getLibraryUrl", ()=>(0, _libraryUtils.getLibraryUrl));
parcelHelpers.export(exports, "loadLibrary", ()=>(0, _libraryUtils.loadLibrary));
parcelHelpers.export(exports, "AsyncQueue", ()=>(0, _asyncQueueDefault.default));
parcelHelpers.export(exports, "ChildProcessProxy", ()=>(0, _childProcessProxyDefault.default));
parcelHelpers.export(exports, "NullWorker", ()=>NullWorker);
var _version = require("./lib/env-utils/version");
var _assert = require("./lib/env-utils/assert");
var _globals = require("./lib/env-utils/globals");
var _workerJob = require("./lib/worker-farm/worker-job");
var _workerJobDefault = parcelHelpers.interopDefault(_workerJob);
var _workerThread = require("./lib/worker-farm/worker-thread");
var _workerThreadDefault = parcelHelpers.interopDefault(_workerThread);
var _workerFarm = require("./lib/worker-farm/worker-farm");
var _workerFarmDefault = parcelHelpers.interopDefault(_workerFarm);
var _workerPool = require("./lib/worker-farm/worker-pool");
var _workerPoolDefault = parcelHelpers.interopDefault(_workerPool);
var _workerBody = require("./lib/worker-farm/worker-body");
var _workerBodyDefault = parcelHelpers.interopDefault(_workerBody);
var _processOnWorker = require("./lib/worker-api/process-on-worker");
var _createWorker = require("./lib/worker-api/create-worker");
var _getWorkerUrl = require("./lib/worker-api/get-worker-url");
var _validateWorkerVersion = require("./lib/worker-api/validate-worker-version");
var _getTransferList = require("./lib/worker-utils/get-transfer-list");
var _libraryUtils = require("./lib/library-utils/library-utils");
var _asyncQueue = require("./lib/async-queue/async-queue");
var _asyncQueueDefault = parcelHelpers.interopDefault(_asyncQueue);
var _childProcessProxy = require("./lib/process-utils/child-process-proxy");
var _childProcessProxyDefault = parcelHelpers.interopDefault(_childProcessProxy);
const NullWorker = {
    id: 'null',
    name: 'null',
    module: 'worker-utils',
    version: (0, _version.VERSION),
    options: {
        null: {}
    }
};

},{"./lib/env-utils/version":"i8MZ9","./lib/env-utils/assert":"2w1rY","./lib/env-utils/globals":"hKKtz","./lib/worker-farm/worker-job":false,"./lib/worker-farm/worker-thread":false,"./lib/worker-farm/worker-farm":"N41XR","./lib/worker-farm/worker-pool":false,"./lib/worker-farm/worker-body":false,"./lib/worker-api/process-on-worker":false,"./lib/worker-api/create-worker":false,"./lib/worker-api/get-worker-url":"hTAzm","./lib/worker-api/validate-worker-version":"3wZkj","./lib/worker-utils/get-transfer-list":false,"./lib/library-utils/library-utils":false,"./lib/async-queue/async-queue":false,"./lib/process-utils/child-process-proxy":"dDjHu","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"i8MZ9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VERSION", ()=>VERSION);
const DEFAULT_VERSION = 'latest';
const VERSION = "3.4.15";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2w1rY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message || 'loaders.gl assertion failed.');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hKKtz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "self", ()=>self_);
parcelHelpers.export(exports, "window", ()=>window_);
parcelHelpers.export(exports, "global", ()=>global_);
parcelHelpers.export(exports, "document", ()=>document_);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
parcelHelpers.export(exports, "isWorker", ()=>isWorker);
parcelHelpers.export(exports, "isMobile", ()=>isMobile);
parcelHelpers.export(exports, "nodeVersion", ()=>nodeVersion);
var global = arguments[3];
const globals = {
    self: typeof self !== 'undefined' && self,
    window: typeof window !== 'undefined' && window,
    global: typeof global !== 'undefined' && global,
    document: typeof document !== 'undefined' && document
};
const self_ = globals.self || globals.window || globals.global || {};
const window_ = globals.window || globals.self || globals.global || {};
const global_ = globals.global || globals.self || globals.window || {};
const document_ = globals.document || {};
const isBrowser = true;
const isWorker = typeof importScripts === 'function';
const isMobile = typeof window !== 'undefined' && typeof window.orientation !== 'undefined';
const matches = false;
const nodeVersion = matches && parseFloat(matches[1]) || 0;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5JUjB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _assert = require("../env-utils/assert");
class WorkerJob {
    constructor(jobName, workerThread){
        (0, _definePropertyDefault.default)(this, "name", void 0);
        (0, _definePropertyDefault.default)(this, "workerThread", void 0);
        (0, _definePropertyDefault.default)(this, "isRunning", true);
        (0, _definePropertyDefault.default)(this, "result", void 0);
        (0, _definePropertyDefault.default)(this, "_resolve", ()=>{});
        (0, _definePropertyDefault.default)(this, "_reject", ()=>{});
        this.name = jobName;
        this.workerThread = workerThread;
        this.result = new Promise((resolve, reject)=>{
            this._resolve = resolve;
            this._reject = reject;
        });
    }
    postMessage(type, payload) {
        this.workerThread.postMessage({
            source: 'loaders.gl',
            type,
            payload
        });
    }
    done(value) {
        (0, _assert.assert)(this.isRunning);
        this.isRunning = false;
        this._resolve(value);
    }
    error(error) {
        (0, _assert.assert)(this.isRunning);
        this.isRunning = false;
        this._reject(error);
    }
}
exports.default = WorkerJob;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../env-utils/assert":"2w1rY","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9ZxLF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_defineProperty);
var _toPropertyKeyJs = require("./toPropertyKey.js");
var _toPropertyKeyJsDefault = parcelHelpers.interopDefault(_toPropertyKeyJs);
function _defineProperty(e, r, t) {
    return (r = (0, _toPropertyKeyJsDefault.default)(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : e[r] = t, e;
}

},{"./toPropertyKey.js":"j5oMs","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"j5oMs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>toPropertyKey);
var _typeofJs = require("./typeof.js");
var _typeofJsDefault = parcelHelpers.interopDefault(_typeofJs);
var _toPrimitiveJs = require("./toPrimitive.js");
var _toPrimitiveJsDefault = parcelHelpers.interopDefault(_toPrimitiveJs);
function toPropertyKey(t) {
    var i = (0, _toPrimitiveJsDefault.default)(t, "string");
    return "symbol" == (0, _typeofJsDefault.default)(i) ? i : i + "";
}

},{"./typeof.js":"8tKcH","./toPrimitive.js":"12HW2","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8tKcH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_typeof);
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"12HW2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>toPrimitive);
var _typeofJs = require("./typeof.js");
var _typeofJsDefault = parcelHelpers.interopDefault(_typeofJs);
function toPrimitive(t, r) {
    if ("object" != (0, _typeofJsDefault.default)(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != (0, _typeofJsDefault.default)(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}

},{"./typeof.js":"8tKcH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3voK6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _workerThreads = require("../node/worker_threads");
var _globals = require("../env-utils/globals");
var _assert = require("../env-utils/assert");
var _getLoadableWorkerUrl = require("../worker-utils/get-loadable-worker-url");
var _getTransferList = require("../worker-utils/get-transfer-list");
const NOOP = ()=>{};
class WorkerThread {
    static isSupported() {
        return typeof Worker !== 'undefined' && (0, _globals.isBrowser) || typeof (0, _workerThreads.NodeWorker) !== 'undefined' && !(0, _globals.isBrowser);
    }
    constructor(props){
        (0, _definePropertyDefault.default)(this, "name", void 0);
        (0, _definePropertyDefault.default)(this, "source", void 0);
        (0, _definePropertyDefault.default)(this, "url", void 0);
        (0, _definePropertyDefault.default)(this, "terminated", false);
        (0, _definePropertyDefault.default)(this, "worker", void 0);
        (0, _definePropertyDefault.default)(this, "onMessage", void 0);
        (0, _definePropertyDefault.default)(this, "onError", void 0);
        (0, _definePropertyDefault.default)(this, "_loadableURL", '');
        const { name, source, url } = props;
        (0, _assert.assert)(source || url);
        this.name = name;
        this.source = source;
        this.url = url;
        this.onMessage = NOOP;
        this.onError = (error)=>console.log(error);
        this.worker = (0, _globals.isBrowser) ? this._createBrowserWorker() : this._createNodeWorker();
    }
    destroy() {
        this.onMessage = NOOP;
        this.onError = NOOP;
        this.worker.terminate();
        this.terminated = true;
    }
    get isRunning() {
        return Boolean(this.onMessage);
    }
    postMessage(data, transferList) {
        transferList = transferList || (0, _getTransferList.getTransferList)(data);
        this.worker.postMessage(data, transferList);
    }
    _getErrorFromErrorEvent(event) {
        let message = 'Failed to load ';
        message += "worker ".concat(this.name, " from ").concat(this.url, ". ");
        if (event.message) message += "".concat(event.message, " in ");
        if (event.lineno) message += ":".concat(event.lineno, ":").concat(event.colno);
        return new Error(message);
    }
    _createBrowserWorker() {
        this._loadableURL = (0, _getLoadableWorkerUrl.getLoadableWorkerURL)({
            source: this.source,
            url: this.url
        });
        const worker = new Worker(this._loadableURL, {
            name: this.name
        });
        worker.onmessage = (event)=>{
            if (!event.data) this.onError(new Error('No data received'));
            else this.onMessage(event.data);
        };
        worker.onerror = (error)=>{
            this.onError(this._getErrorFromErrorEvent(error));
            this.terminated = true;
        };
        worker.onmessageerror = (event)=>console.error(event);
        return worker;
    }
    _createNodeWorker() {
        let worker;
        if (this.url) {
            const absolute = this.url.includes(':/') || this.url.startsWith('/');
            const url = absolute ? this.url : "./".concat(this.url);
            worker = new (0, _workerThreads.NodeWorker)(url, {
                eval: false
            });
        } else if (this.source) worker = new (0, _workerThreads.NodeWorker)(this.source, {
            eval: true
        });
        else throw new Error('no worker');
        worker.on('message', (data)=>{
            this.onMessage(data);
        });
        worker.on('error', (error)=>{
            this.onError(error);
        });
        worker.on('exit', (code)=>{});
        return worker;
    }
}
exports.default = WorkerThread;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../node/worker_threads":"62MFC","../env-utils/globals":"hKKtz","../env-utils/assert":"2w1rY","../worker-utils/get-loadable-worker-url":"cRrUF","../worker-utils/get-transfer-list":"jZF1X","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"62MFC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Worker", ()=>Worker);
parcelHelpers.export(exports, "NodeWorker", ()=>Worker);
parcelHelpers.export(exports, "NodeWorkerType", ()=>Worker);
parcelHelpers.export(exports, "parentPort", ()=>parentPort);
class Worker {
    terminate() {}
}
const parentPort = null;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cRrUF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getLoadableWorkerURL", ()=>getLoadableWorkerURL);
var _assert = require("../env-utils/assert");
const workerURLCache = new Map();
function getLoadableWorkerURL(props) {
    (0, _assert.assert)(props.source && !props.url || !props.source && props.url);
    let workerURL = workerURLCache.get(props.source || props.url);
    if (!workerURL) {
        if (props.url) {
            workerURL = getLoadableWorkerURLFromURL(props.url);
            workerURLCache.set(props.url, workerURL);
        }
        if (props.source) {
            workerURL = getLoadableWorkerURLFromSource(props.source);
            workerURLCache.set(props.source, workerURL);
        }
    }
    (0, _assert.assert)(workerURL);
    return workerURL;
}
function getLoadableWorkerURLFromURL(url) {
    if (!url.startsWith('http')) return url;
    const workerSource = buildScriptSource(url);
    return getLoadableWorkerURLFromSource(workerSource);
}
function getLoadableWorkerURLFromSource(workerSource) {
    const blob = new Blob([
        workerSource
    ], {
        type: 'application/javascript'
    });
    return URL.createObjectURL(blob);
}
function buildScriptSource(workerUrl) {
    return "try {\n  importScripts('".concat(workerUrl, "');\n} catch (error) {\n  console.error(error);\n  throw error;\n}");
}

},{"../env-utils/assert":"2w1rY","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jZF1X":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTransferList", ()=>getTransferList);
parcelHelpers.export(exports, "getTransferListForWriter", ()=>getTransferListForWriter);
function getTransferList(object) {
    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let transfers = arguments.length > 2 ? arguments[2] : undefined;
    const transfersSet = transfers || new Set();
    if (!object) ;
    else if (isTransferable(object)) transfersSet.add(object);
    else if (isTransferable(object.buffer)) transfersSet.add(object.buffer);
    else if (ArrayBuffer.isView(object)) ;
    else if (recursive && typeof object === 'object') for(const key in object)getTransferList(object[key], recursive, transfersSet);
    return transfers === undefined ? Array.from(transfersSet) : [];
}
function isTransferable(object) {
    if (!object) return false;
    if (object instanceof ArrayBuffer) return true;
    if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) return true;
    if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) return true;
    if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) return true;
    return false;
}
function getTransferListForWriter(object) {
    if (object === null) return {};
    const clone = Object.assign({}, object);
    Object.keys(clone).forEach((key)=>{
        if (typeof object[key] === 'object' && !ArrayBuffer.isView(object[key]) && !(object[key] instanceof Array)) clone[key] = getTransferListForWriter(object[key]);
        else if (typeof clone[key] === 'function' || clone[key] instanceof RegExp) clone[key] = {};
        else clone[key] = object[key];
    });
    return clone;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"N41XR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _workerPool = require("./worker-pool");
var _workerPoolDefault = parcelHelpers.interopDefault(_workerPool);
var _workerThread = require("./worker-thread");
var _workerThreadDefault = parcelHelpers.interopDefault(_workerThread);
const DEFAULT_PROPS = {
    maxConcurrency: 3,
    maxMobileConcurrency: 1,
    reuseWorkers: true,
    onDebug: ()=>{}
};
class WorkerFarm {
    static isSupported() {
        return (0, _workerThreadDefault.default).isSupported();
    }
    static getWorkerFarm() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});
        WorkerFarm._workerFarm.setProps(props);
        return WorkerFarm._workerFarm;
    }
    constructor(props){
        (0, _definePropertyDefault.default)(this, "props", void 0);
        (0, _definePropertyDefault.default)(this, "workerPools", new Map());
        this.props = {
            ...DEFAULT_PROPS
        };
        this.setProps(props);
        this.workerPools = new Map();
    }
    destroy() {
        for (const workerPool of this.workerPools.values())workerPool.destroy();
        this.workerPools = new Map();
    }
    setProps(props) {
        this.props = {
            ...this.props,
            ...props
        };
        for (const workerPool of this.workerPools.values())workerPool.setProps(this._getWorkerPoolProps());
    }
    getWorkerPool(options) {
        const { name, source, url } = options;
        let workerPool = this.workerPools.get(name);
        if (!workerPool) {
            workerPool = new (0, _workerPoolDefault.default)({
                name,
                source,
                url
            });
            workerPool.setProps(this._getWorkerPoolProps());
            this.workerPools.set(name, workerPool);
        }
        return workerPool;
    }
    _getWorkerPoolProps() {
        return {
            maxConcurrency: this.props.maxConcurrency,
            maxMobileConcurrency: this.props.maxMobileConcurrency,
            reuseWorkers: this.props.reuseWorkers,
            onDebug: this.props.onDebug
        };
    }
}
exports.default = WorkerFarm;
(0, _definePropertyDefault.default)(WorkerFarm, "_workerFarm", void 0);

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./worker-pool":"dB2mv","./worker-thread":"3voK6","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dB2mv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _globals = require("../env-utils/globals");
var _workerThread = require("./worker-thread");
var _workerThreadDefault = parcelHelpers.interopDefault(_workerThread);
var _workerJob = require("./worker-job");
var _workerJobDefault = parcelHelpers.interopDefault(_workerJob);
class WorkerPool {
    static isSupported() {
        return (0, _workerThreadDefault.default).isSupported();
    }
    constructor(props){
        (0, _definePropertyDefault.default)(this, "name", 'unnamed');
        (0, _definePropertyDefault.default)(this, "source", void 0);
        (0, _definePropertyDefault.default)(this, "url", void 0);
        (0, _definePropertyDefault.default)(this, "maxConcurrency", 1);
        (0, _definePropertyDefault.default)(this, "maxMobileConcurrency", 1);
        (0, _definePropertyDefault.default)(this, "onDebug", ()=>{});
        (0, _definePropertyDefault.default)(this, "reuseWorkers", true);
        (0, _definePropertyDefault.default)(this, "props", {});
        (0, _definePropertyDefault.default)(this, "jobQueue", []);
        (0, _definePropertyDefault.default)(this, "idleQueue", []);
        (0, _definePropertyDefault.default)(this, "count", 0);
        (0, _definePropertyDefault.default)(this, "isDestroyed", false);
        this.source = props.source;
        this.url = props.url;
        this.setProps(props);
    }
    destroy() {
        this.idleQueue.forEach((worker)=>worker.destroy());
        this.isDestroyed = true;
    }
    setProps(props) {
        this.props = {
            ...this.props,
            ...props
        };
        if (props.name !== undefined) this.name = props.name;
        if (props.maxConcurrency !== undefined) this.maxConcurrency = props.maxConcurrency;
        if (props.maxMobileConcurrency !== undefined) this.maxMobileConcurrency = props.maxMobileConcurrency;
        if (props.reuseWorkers !== undefined) this.reuseWorkers = props.reuseWorkers;
        if (props.onDebug !== undefined) this.onDebug = props.onDebug;
    }
    async startJob(name) {
        let onMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (job, type, data)=>job.done(data);
        let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (job, error)=>job.error(error);
        const startPromise = new Promise((onStart)=>{
            this.jobQueue.push({
                name,
                onMessage,
                onError,
                onStart
            });
            return this;
        });
        this._startQueuedJob();
        return await startPromise;
    }
    async _startQueuedJob() {
        if (!this.jobQueue.length) return;
        const workerThread = this._getAvailableWorker();
        if (!workerThread) return;
        const queuedJob = this.jobQueue.shift();
        if (queuedJob) {
            this.onDebug({
                message: 'Starting job',
                name: queuedJob.name,
                workerThread,
                backlog: this.jobQueue.length
            });
            const job = new (0, _workerJobDefault.default)(queuedJob.name, workerThread);
            workerThread.onMessage = (data)=>queuedJob.onMessage(job, data.type, data.payload);
            workerThread.onError = (error)=>queuedJob.onError(job, error);
            queuedJob.onStart(job);
            try {
                await job.result;
            } finally{
                this.returnWorkerToQueue(workerThread);
            }
        }
    }
    returnWorkerToQueue(worker) {
        const shouldDestroyWorker = this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();
        if (shouldDestroyWorker) {
            worker.destroy();
            this.count--;
        } else this.idleQueue.push(worker);
        if (!this.isDestroyed) this._startQueuedJob();
    }
    _getAvailableWorker() {
        if (this.idleQueue.length > 0) return this.idleQueue.shift() || null;
        if (this.count < this._getMaxConcurrency()) {
            this.count++;
            const name = "".concat(this.name.toLowerCase(), " (#").concat(this.count, " of ").concat(this.maxConcurrency, ")");
            return new (0, _workerThreadDefault.default)({
                name,
                source: this.source,
                url: this.url
            });
        }
        return null;
    }
    _getMaxConcurrency() {
        return (0, _globals.isMobile) ? this.maxMobileConcurrency : this.maxConcurrency;
    }
}
exports.default = WorkerPool;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../env-utils/globals":"hKKtz","./worker-thread":"3voK6","./worker-job":"5JUjB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hTAzm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getWorkerName", ()=>getWorkerName);
parcelHelpers.export(exports, "getWorkerURL", ()=>getWorkerURL);
var _assert = require("../env-utils/assert");
var _version = require("../env-utils/version");
const NPM_TAG = 'latest';
const VERSION = "3.4.15";
function getWorkerName(worker) {
    const warning = worker.version !== VERSION ? " (worker-utils@".concat(VERSION, ")") : '';
    return "".concat(worker.name, "@").concat(worker.version).concat(warning);
}
function getWorkerURL(worker) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const workerOptions = options[worker.id] || {};
    const workerFile = "".concat(worker.id, "-worker.js");
    let url = workerOptions.workerUrl;
    if (!url && worker.id === 'compression') url = options.workerUrl;
    if (options._workerType === 'test') url = "modules/".concat(worker.module, "/dist/").concat(workerFile);
    if (!url) {
        let version = worker.version;
        if (version === 'latest') version = NPM_TAG;
        const versionTag = version ? "@".concat(version) : '';
        url = "https://unpkg.com/@loaders.gl/".concat(worker.module).concat(versionTag, "/dist/").concat(workerFile);
    }
    (0, _assert.assert)(url);
    return url;
}

},{"../env-utils/assert":"2w1rY","../env-utils/version":"i8MZ9","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3wZkj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validateWorkerVersion", ()=>validateWorkerVersion);
var _assert = require("../env-utils/assert");
var _version = require("../env-utils/version");
function validateWorkerVersion(worker) {
    let coreVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _version.VERSION);
    (0, _assert.assert)(worker, 'no worker provided');
    const workerVersion = worker.version;
    if (!coreVersion || !workerVersion) return false;
    return true;
}
function parseVersion(version) {
    const parts = version.split('.').map(Number);
    return {
        major: parts[0],
        minor: parts[1]
    };
}

},{"../env-utils/assert":"2w1rY","../env-utils/version":"i8MZ9","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dDjHu":[function(require,module,exports,__globalThis) {
"use strict";

},{}],"l6Gnk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareArrayBuffers", ()=>compareArrayBuffers);
parcelHelpers.export(exports, "concatenateArrayBuffers", ()=>concatenateArrayBuffers);
parcelHelpers.export(exports, "concatenateTypedArrays", ()=>concatenateTypedArrays);
parcelHelpers.export(exports, "sliceArrayBuffer", ()=>sliceArrayBuffer);
function compareArrayBuffers(arrayBuffer1, arrayBuffer2, byteLength) {
    byteLength = byteLength || arrayBuffer1.byteLength;
    if (arrayBuffer1.byteLength < byteLength || arrayBuffer2.byteLength < byteLength) return false;
    const array1 = new Uint8Array(arrayBuffer1);
    const array2 = new Uint8Array(arrayBuffer2);
    for(let i = 0; i < array1.length; ++i){
        if (array1[i] !== array2[i]) return false;
    }
    return true;
}
function concatenateArrayBuffers() {
    for(var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++)sources[_key] = arguments[_key];
    const sourceArrays = sources.map((source2)=>source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2);
    const byteLength = sourceArrays.reduce((length, typedArray)=>length + typedArray.byteLength, 0);
    const result = new Uint8Array(byteLength);
    let offset = 0;
    for (const sourceArray of sourceArrays){
        result.set(sourceArray, offset);
        offset += sourceArray.byteLength;
    }
    return result.buffer;
}
function concatenateTypedArrays() {
    for(var _len2 = arguments.length, typedArrays = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)typedArrays[_key2] = arguments[_key2];
    const arrays = typedArrays;
    const TypedArrayConstructor = arrays && arrays.length > 1 && arrays[0].constructor || null;
    if (!TypedArrayConstructor) throw new Error('"concatenateTypedArrays" - incorrect quantity of arguments or arguments have incompatible data types');
    const sumLength = arrays.reduce((acc, value)=>acc + value.length, 0);
    const result = new TypedArrayConstructor(sumLength);
    let offset = 0;
    for (const array of arrays){
        result.set(array, offset);
        offset += array.length;
    }
    return result;
}
function sliceArrayBuffer(arrayBuffer, byteOffset, byteLength) {
    const subArray = byteLength !== undefined ? new Uint8Array(arrayBuffer).subarray(byteOffset, byteOffset + byteLength) : new Uint8Array(arrayBuffer).subarray(byteOffset);
    const arrayCopy = new Uint8Array(subArray);
    return arrayCopy.buffer;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5BBWE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "forEach", ()=>forEach);
parcelHelpers.export(exports, "concatenateArrayBuffersAsync", ()=>concatenateArrayBuffersAsync);
parcelHelpers.export(exports, "concatenateStringsAsync", ()=>concatenateStringsAsync);
var _arrayBufferUtils = require("../binary-utils/array-buffer-utils");
async function forEach(iterator, visitor) {
    while(true){
        const { done, value } = await iterator.next();
        if (done) {
            iterator.return();
            return;
        }
        const cancel = visitor(value);
        if (cancel) return;
    }
}
async function concatenateArrayBuffersAsync(asyncIterator) {
    const arrayBuffers = [];
    for await (const chunk of asyncIterator)arrayBuffers.push(chunk);
    return (0, _arrayBufferUtils.concatenateArrayBuffers)(...arrayBuffers);
}
async function concatenateStringsAsync(asyncIterator) {
    const strings = [];
    for await (const chunk of asyncIterator)strings.push(chunk);
    return strings.join('');
}

},{"../binary-utils/array-buffer-utils":"l6Gnk","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kTeGB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setPathPrefix", ()=>setPathPrefix);
parcelHelpers.export(exports, "getPathPrefix", ()=>getPathPrefix);
parcelHelpers.export(exports, "addAliases", ()=>addAliases);
parcelHelpers.export(exports, "resolvePath", ()=>resolvePath);
let pathPrefix = '';
const fileAliases = {};
function setPathPrefix(prefix) {
    pathPrefix = prefix;
}
function getPathPrefix() {
    return pathPrefix;
}
function addAliases(aliases) {
    Object.assign(fileAliases, aliases);
}
function resolvePath(filename) {
    for(const alias in fileAliases)if (filename.startsWith(alias)) {
        const replacement = fileAliases[alias];
        filename = filename.replace(alias, replacement);
    }
    if (!filename.startsWith('http://') && !filename.startsWith('https://')) filename = "".concat(pathPrefix).concat(filename);
    return filename;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7yiPN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBuffer", ()=>isBuffer);
parcelHelpers.export(exports, "toBuffer", ()=>toBuffer);
parcelHelpers.export(exports, "toArrayBuffer", ()=>toArrayBuffer);
var _buffer = require("../node/buffer");
function isBuffer(value) {
    return value && typeof value === 'object' && value.isBuffer;
}
function toBuffer(data) {
    return _buffer.toBuffer ? _buffer.toBuffer(data) : data;
}
function toArrayBuffer(data) {
    if (isBuffer(data)) return _buffer.toArrayBuffer(data);
    if (data instanceof ArrayBuffer) return data;
    if (ArrayBuffer.isView(data)) {
        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) return data.buffer;
        return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);
    }
    if (typeof data === 'string') {
        const text = data;
        const uint8Array = new TextEncoder().encode(text);
        return uint8Array.buffer;
    }
    if (data && typeof data === 'object' && data._toArrayBuffer) return data._toArrayBuffer();
    throw new Error('toArrayBuffer');
}

},{"../node/buffer":"9gbK7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9gbK7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toArrayBuffer", ()=>toArrayBuffer);
parcelHelpers.export(exports, "toBuffer", ()=>toBuffer);
function toArrayBuffer(buffer) {
    return buffer;
}
function toBuffer(binaryData) {
    throw new Error('Buffer not supported in browser');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9AjjS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filename", ()=>filename);
parcelHelpers.export(exports, "dirname", ()=>dirname);
parcelHelpers.export(exports, "join", ()=>join);
parcelHelpers.export(exports, "resolve", ()=>resolve);
var _getCwd = require("./get-cwd");
function filename(url) {
    const slashIndex = url ? url.lastIndexOf('/') : -1;
    return slashIndex >= 0 ? url.substr(slashIndex + 1) : '';
}
function dirname(url) {
    const slashIndex = url ? url.lastIndexOf('/') : -1;
    return slashIndex >= 0 ? url.substr(0, slashIndex) : '';
}
function join() {
    for(var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++)parts[_key] = arguments[_key];
    const separator = '/';
    parts = parts.map((part, index)=>{
        if (index) part = part.replace(new RegExp("^".concat(separator)), '');
        if (index !== parts.length - 1) part = part.replace(new RegExp("".concat(separator, "$")), '');
        return part;
    });
    return parts.join(separator);
}
function resolve() {
    const paths = [];
    for(let _i = 0; _i < arguments.length; _i++)paths[_i] = _i < 0 || arguments.length <= _i ? undefined : arguments[_i];
    let resolvedPath = '';
    let resolvedAbsolute = false;
    let cwd;
    for(let i = paths.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path;
        if (i >= 0) path = paths[i];
        else {
            if (cwd === undefined) cwd = (0, _getCwd.getCWD)();
            path = cwd;
        }
        if (path.length === 0) continue;
        resolvedPath = "".concat(path, "/").concat(resolvedPath);
        resolvedAbsolute = path.charCodeAt(0) === SLASH;
    }
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
    if (resolvedAbsolute) return "/".concat(resolvedPath);
    else if (resolvedPath.length > 0) return resolvedPath;
    return '.';
}
const SLASH = 47;
const DOT = 46;
function normalizeStringPosix(path, allowAboveRoot) {
    let res = '';
    let lastSlash = -1;
    let dots = 0;
    let code;
    let isAboveRoot = false;
    for(let i = 0; i <= path.length; ++i){
        if (i < path.length) code = path.charCodeAt(i);
        else if (code === SLASH) break;
        else code = SLASH;
        if (code === SLASH) {
            if (lastSlash === i - 1 || dots === 1) ;
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || !isAboveRoot || res.charCodeAt(res.length - 1) !== DOT || res.charCodeAt(res.length - 2) !== DOT) {
                    if (res.length > 2) {
                        const start = res.length - 1;
                        let j = start;
                        for(; j >= 0; --j){
                            if (res.charCodeAt(j) === SLASH) break;
                        }
                        if (j !== start) {
                            res = j === -1 ? '' : res.slice(0, j);
                            lastSlash = i;
                            dots = 0;
                            isAboveRoot = false;
                            continue;
                        }
                    } else if (res.length === 2 || res.length === 1) {
                        res = '';
                        lastSlash = i;
                        dots = 0;
                        isAboveRoot = false;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += '/..';
                    else res = '..';
                    isAboveRoot = true;
                }
            } else {
                const slice = path.slice(lastSlash + 1, i);
                if (res.length > 0) res += "/".concat(slice);
                else res = slice;
                isAboveRoot = false;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === DOT && dots !== -1) ++dots;
        else dots = -1;
    }
    return res;
}

},{"./get-cwd":"i2CDx","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"i2CDx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCWD", ()=>getCWD);
function getCWD() {
    var _window$location;
    const pathname = (_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.pathname;
    return (pathname === null || pathname === void 0 ? void 0 : pathname.slice(0, pathname.lastIndexOf('/') + 1)) || '';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"k6APq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeResponse", ()=>makeResponse);
parcelHelpers.export(exports, "checkResponse", ()=>checkResponse);
parcelHelpers.export(exports, "checkResponseSync", ()=>checkResponseSync);
var _isType = require("../../javascript-utils/is-type");
var _resourceUtils = require("./resource-utils");
async function makeResponse(resource) {
    if ((0, _isType.isResponse)(resource)) return resource;
    const headers = {};
    const contentLength = (0, _resourceUtils.getResourceContentLength)(resource);
    if (contentLength >= 0) headers['content-length'] = String(contentLength);
    const url = (0, _resourceUtils.getResourceUrl)(resource);
    const type = (0, _resourceUtils.getResourceMIMEType)(resource);
    if (type) headers['content-type'] = type;
    const initialDataUrl = await getInitialDataUrl(resource);
    if (initialDataUrl) headers['x-first-bytes'] = initialDataUrl;
    if (typeof resource === 'string') resource = new TextEncoder().encode(resource);
    const response = new Response(resource, {
        headers
    });
    Object.defineProperty(response, 'url', {
        value: url
    });
    return response;
}
async function checkResponse(response) {
    if (!response.ok) {
        const message = await getResponseError(response);
        throw new Error(message);
    }
}
function checkResponseSync(response) {
    if (!response.ok) {
        let message = "".concat(response.status, " ").concat(response.statusText);
        message = message.length > 60 ? "".concat(message.slice(0, 60), "...") : message;
        throw new Error(message);
    }
}
async function getResponseError(response) {
    let message = "Failed to fetch resource ".concat(response.url, " (").concat(response.status, "): ");
    try {
        const contentType = response.headers.get('Content-Type');
        let text = response.statusText;
        if (contentType.includes('application/json')) text += " ".concat(await response.text());
        message += text;
        message = message.length > 60 ? "".concat(message.slice(0, 60), "...") : message;
    } catch (error) {}
    return message;
}
async function getInitialDataUrl(resource) {
    const INITIAL_DATA_LENGTH = 5;
    if (typeof resource === 'string') return "data:,".concat(resource.slice(0, INITIAL_DATA_LENGTH));
    if (resource instanceof Blob) {
        const blobSlice = resource.slice(0, 5);
        return await new Promise((resolve)=>{
            const reader = new FileReader();
            reader.onload = (event)=>{
                var _event$target;
                return resolve(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);
            };
            reader.readAsDataURL(blobSlice);
        });
    }
    if (resource instanceof ArrayBuffer) {
        const slice = resource.slice(0, INITIAL_DATA_LENGTH);
        const base64 = arrayBufferToBase64(slice);
        return "data:base64,".concat(base64);
    }
    return null;
}
function arrayBufferToBase64(buffer) {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    for(let i = 0; i < bytes.byteLength; i++)binary += String.fromCharCode(bytes[i]);
    return btoa(binary);
}

},{"../../javascript-utils/is-type":"3p5ZW","./resource-utils":"dkv8m","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3p5ZW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isPureObject", ()=>isPureObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isIterable", ()=>isIterable);
parcelHelpers.export(exports, "isAsyncIterable", ()=>isAsyncIterable);
parcelHelpers.export(exports, "isIterator", ()=>isIterator);
parcelHelpers.export(exports, "isResponse", ()=>isResponse);
parcelHelpers.export(exports, "isFile", ()=>isFile);
parcelHelpers.export(exports, "isBlob", ()=>isBlob);
parcelHelpers.export(exports, "isBuffer", ()=>isBuffer);
parcelHelpers.export(exports, "isWritableDOMStream", ()=>isWritableDOMStream);
parcelHelpers.export(exports, "isReadableDOMStream", ()=>isReadableDOMStream);
parcelHelpers.export(exports, "isWritableNodeStream", ()=>isWritableNodeStream);
parcelHelpers.export(exports, "isReadableNodeStream", ()=>isReadableNodeStream);
parcelHelpers.export(exports, "isReadableStream", ()=>isReadableStream);
parcelHelpers.export(exports, "isWritableStream", ()=>isWritableStream);
const isBoolean = (x)=>typeof x === 'boolean';
const isFunction = (x)=>typeof x === 'function';
const isObject = (x)=>x !== null && typeof x === 'object';
const isPureObject = (x)=>isObject(x) && x.constructor === ({}).constructor;
const isPromise = (x)=>isObject(x) && isFunction(x.then);
const isIterable = (x)=>x && typeof x[Symbol.iterator] === 'function';
const isAsyncIterable = (x)=>x && typeof x[Symbol.asyncIterator] === 'function';
const isIterator = (x)=>x && isFunction(x.next);
const isResponse = (x)=>typeof Response !== 'undefined' && x instanceof Response || x && x.arrayBuffer && x.text && x.json;
const isFile = (x)=>typeof File !== 'undefined' && x instanceof File;
const isBlob = (x)=>typeof Blob !== 'undefined' && x instanceof Blob;
const isBuffer = (x)=>x && typeof x === 'object' && x.isBuffer;
const isWritableDOMStream = (x)=>isObject(x) && isFunction(x.abort) && isFunction(x.getWriter);
const isReadableDOMStream = (x)=>typeof ReadableStream !== 'undefined' && x instanceof ReadableStream || isObject(x) && isFunction(x.tee) && isFunction(x.cancel) && isFunction(x.getReader);
const isWritableNodeStream = (x)=>isObject(x) && isFunction(x.end) && isFunction(x.write) && isBoolean(x.writable);
const isReadableNodeStream = (x)=>isObject(x) && isFunction(x.read) && isFunction(x.pipe) && isBoolean(x.readable);
const isReadableStream = (x)=>isReadableDOMStream(x) || isReadableNodeStream(x);
const isWritableStream = (x)=>isWritableDOMStream(x) || isWritableNodeStream(x);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dkv8m":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getResourceUrl", ()=>getResourceUrl);
parcelHelpers.export(exports, "getResourceMIMEType", ()=>getResourceMIMEType);
parcelHelpers.export(exports, "getResourceContentLength", ()=>getResourceContentLength);
var _isType = require("../../javascript-utils/is-type");
var _mimeTypeUtils = require("./mime-type-utils");
var _urlUtils = require("./url-utils");
function getResourceUrl(resource) {
    if ((0, _isType.isResponse)(resource)) {
        const response = resource;
        return response.url;
    }
    if ((0, _isType.isBlob)(resource)) {
        const blob = resource;
        return blob.name || '';
    }
    if (typeof resource === 'string') return resource;
    return '';
}
function getResourceMIMEType(resource) {
    if ((0, _isType.isResponse)(resource)) {
        const response = resource;
        const contentTypeHeader = response.headers.get('content-type') || '';
        const noQueryUrl = (0, _urlUtils.stripQueryString)(response.url);
        return (0, _mimeTypeUtils.parseMIMEType)(contentTypeHeader) || (0, _mimeTypeUtils.parseMIMETypeFromURL)(noQueryUrl);
    }
    if ((0, _isType.isBlob)(resource)) {
        const blob = resource;
        return blob.type || '';
    }
    if (typeof resource === 'string') return (0, _mimeTypeUtils.parseMIMETypeFromURL)(resource);
    return '';
}
function getResourceContentLength(resource) {
    if ((0, _isType.isResponse)(resource)) {
        const response = resource;
        return response.headers['content-length'] || -1;
    }
    if ((0, _isType.isBlob)(resource)) {
        const blob = resource;
        return blob.size;
    }
    if (typeof resource === 'string') return resource.length;
    if (resource instanceof ArrayBuffer) return resource.byteLength;
    if (ArrayBuffer.isView(resource)) return resource.byteLength;
    return -1;
}

},{"../../javascript-utils/is-type":"3p5ZW","./mime-type-utils":"eahAS","./url-utils":"3Lf8q","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eahAS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseMIMEType", ()=>parseMIMEType);
parcelHelpers.export(exports, "parseMIMETypeFromURL", ()=>parseMIMETypeFromURL);
const DATA_URL_PATTERN = /^data:([-\w.]+\/[-\w.+]+)(;|,)/;
const MIME_TYPE_PATTERN = /^([-\w.]+\/[-\w.+]+)/;
function parseMIMEType(mimeString) {
    const matches = MIME_TYPE_PATTERN.exec(mimeString);
    if (matches) return matches[1];
    return mimeString;
}
function parseMIMETypeFromURL(url) {
    const matches = DATA_URL_PATTERN.exec(url);
    if (matches) return matches[1];
    return '';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3Lf8q":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extractQueryString", ()=>extractQueryString);
parcelHelpers.export(exports, "stripQueryString", ()=>stripQueryString);
const QUERY_STRING_PATTERN = /\?.*/;
function extractQueryString(url) {
    const matches = url.match(QUERY_STRING_PATTERN);
    return matches && matches[0];
}
function stripQueryString(url) {
    return url.replace(QUERY_STRING_PATTERN, '');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"g4efd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registerLoaders", ()=>registerLoaders);
parcelHelpers.export(exports, "getRegisteredLoaders", ()=>getRegisteredLoaders);
parcelHelpers.export(exports, "_unregisterLoaders", ()=>_unregisterLoaders);
var _normalizeLoader = require("../loader-utils/normalize-loader");
var _optionUtils = require("../loader-utils/option-utils");
const getGlobalLoaderRegistry = ()=>{
    const state = (0, _optionUtils.getGlobalLoaderState)();
    state.loaderRegistry = state.loaderRegistry || [];
    return state.loaderRegistry;
};
function registerLoaders(loaders) {
    const loaderRegistry = getGlobalLoaderRegistry();
    loaders = Array.isArray(loaders) ? loaders : [
        loaders
    ];
    for (const loader of loaders){
        const normalizedLoader = (0, _normalizeLoader.normalizeLoader)(loader);
        if (!loaderRegistry.find((registeredLoader)=>normalizedLoader === registeredLoader)) loaderRegistry.unshift(normalizedLoader);
    }
}
function getRegisteredLoaders() {
    return getGlobalLoaderRegistry();
}
function _unregisterLoaders() {
    const state = (0, _optionUtils.getGlobalLoaderState)();
    state.loaderRegistry = [];
}

},{"../loader-utils/normalize-loader":"j8Jim","../loader-utils/option-utils":"5rGfF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"j8Jim":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isLoaderObject", ()=>isLoaderObject);
parcelHelpers.export(exports, "normalizeLoader", ()=>normalizeLoader);
var _loaderUtils = require("@loaders.gl/loader-utils");
function isLoaderObject(loader) {
    var _loader;
    if (!loader) return false;
    if (Array.isArray(loader)) loader = loader[0];
    const hasExtensions = Array.isArray((_loader = loader) === null || _loader === void 0 ? void 0 : _loader.extensions);
    return hasExtensions;
}
function normalizeLoader(loader) {
    var _loader2, _loader3;
    (0, _loaderUtils.assert)(loader, 'null loader');
    (0, _loaderUtils.assert)(isLoaderObject(loader), 'invalid loader');
    let options;
    if (Array.isArray(loader)) {
        options = loader[1];
        loader = loader[0];
        loader = {
            ...loader,
            options: {
                ...loader.options,
                ...options
            }
        };
    }
    if ((_loader2 = loader) !== null && _loader2 !== void 0 && _loader2.parseTextSync || (_loader3 = loader) !== null && _loader3 !== void 0 && _loader3.parseText) loader.text = true;
    if (!loader.text) loader.binary = true;
    return loader;
}

},{"@loaders.gl/loader-utils":"fYBuJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5rGfF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getGlobalLoaderState", ()=>getGlobalLoaderState);
parcelHelpers.export(exports, "getGlobalLoaderOptions", ()=>getGlobalLoaderOptions);
parcelHelpers.export(exports, "setGlobalOptions", ()=>setGlobalOptions);
parcelHelpers.export(exports, "normalizeOptions", ()=>normalizeOptions);
var _isType = require("../../javascript-utils/is-type");
var _loggers = require("./loggers");
var _optionDefaults = require("./option-defaults");
function getGlobalLoaderState() {
    globalThis.loaders = globalThis.loaders || {};
    const { loaders } = globalThis;
    loaders._state = loaders._state || {};
    return loaders._state;
}
const getGlobalLoaderOptions = ()=>{
    const state = getGlobalLoaderState();
    state.globalOptions = state.globalOptions || {
        ...(0, _optionDefaults.DEFAULT_LOADER_OPTIONS)
    };
    return state.globalOptions;
};
function setGlobalOptions(options) {
    const state = getGlobalLoaderState();
    const globalOptions = getGlobalLoaderOptions();
    state.globalOptions = normalizeOptionsInternal(globalOptions, options);
}
function normalizeOptions(options, loader, loaders, url) {
    loaders = loaders || [];
    loaders = Array.isArray(loaders) ? loaders : [
        loaders
    ];
    validateOptions(options, loaders);
    return normalizeOptionsInternal(loader, options, url);
}
function validateOptions(options, loaders) {
    validateOptionsObject(options, null, (0, _optionDefaults.DEFAULT_LOADER_OPTIONS), (0, _optionDefaults.REMOVED_LOADER_OPTIONS), loaders);
    for (const loader of loaders){
        const idOptions = options && options[loader.id] || {};
        const loaderOptions = loader.options && loader.options[loader.id] || {};
        const deprecatedOptions = loader.deprecatedOptions && loader.deprecatedOptions[loader.id] || {};
        validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);
    }
}
function validateOptionsObject(options, id, defaultOptions, deprecatedOptions, loaders) {
    const loaderName = id || 'Top level';
    const prefix = id ? "".concat(id, ".") : '';
    for(const key in options){
        const isSubOptions = !id && (0, _isType.isObject)(options[key]);
        const isBaseUriOption = key === 'baseUri' && !id;
        const isWorkerUrlOption = key === 'workerUrl' && id;
        if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {
            if (key in deprecatedOptions) (0, _loggers.probeLog).warn("".concat(loaderName, " loader option '").concat(prefix).concat(key, "' no longer supported, use '").concat(deprecatedOptions[key], "'"))();
            else if (!isSubOptions) {
                const suggestion = findSimilarOption(key, loaders);
                (0, _loggers.probeLog).warn("".concat(loaderName, " loader option '").concat(prefix).concat(key, "' not recognized. ").concat(suggestion))();
            }
        }
    }
}
function findSimilarOption(optionKey, loaders) {
    const lowerCaseOptionKey = optionKey.toLowerCase();
    let bestSuggestion = '';
    for (const loader of loaders)for(const key in loader.options){
        if (optionKey === key) return "Did you mean '".concat(loader.id, ".").concat(key, "'?");
        const lowerCaseKey = key.toLowerCase();
        const isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);
        if (isPartialMatch) bestSuggestion = bestSuggestion || "Did you mean '".concat(loader.id, ".").concat(key, "'?");
    }
    return bestSuggestion;
}
function normalizeOptionsInternal(loader, options, url) {
    const loaderDefaultOptions = loader.options || {};
    const mergedOptions = {
        ...loaderDefaultOptions
    };
    addUrlOptions(mergedOptions, url);
    if (mergedOptions.log === null) mergedOptions.log = new (0, _loggers.NullLog)();
    mergeNestedFields(mergedOptions, getGlobalLoaderOptions());
    mergeNestedFields(mergedOptions, options);
    return mergedOptions;
}
function mergeNestedFields(mergedOptions, options) {
    for(const key in options)if (key in options) {
        const value = options[key];
        if ((0, _isType.isPureObject)(value) && (0, _isType.isPureObject)(mergedOptions[key])) mergedOptions[key] = {
            ...mergedOptions[key],
            ...options[key]
        };
        else mergedOptions[key] = options[key];
    }
}
function addUrlOptions(options, url) {
    if (url && !('baseUri' in options)) options.baseUri = url;
}

},{"../../javascript-utils/is-type":"3p5ZW","./loggers":"arOQy","./option-defaults":"j31Rq","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"arOQy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "probeLog", ()=>probeLog);
parcelHelpers.export(exports, "NullLog", ()=>NullLog);
parcelHelpers.export(exports, "ConsoleLog", ()=>ConsoleLog);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _log = require("@probe.gl/log");
const probeLog = new (0, _log.Log)({
    id: 'loaders.gl'
});
class NullLog {
    log() {
        return ()=>{};
    }
    info() {
        return ()=>{};
    }
    warn() {
        return ()=>{};
    }
    error() {
        return ()=>{};
    }
}
class ConsoleLog {
    constructor(){
        (0, _definePropertyDefault.default)(this, "console", void 0);
        this.console = console;
    }
    log() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        return this.console.log.bind(this.console, ...args);
    }
    info() {
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return this.console.info.bind(this.console, ...args);
    }
    warn() {
        for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
        return this.console.warn.bind(this.console, ...args);
    }
    error() {
        for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
        return this.console.error.bind(this.console, ...args);
    }
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@probe.gl/log":"gabz3","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gabz3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Log", ()=>(0, _log.Log));
parcelHelpers.export(exports, "COLOR", ()=>(0, _color.COLOR));
parcelHelpers.export(exports, "addColor", ()=>(0, _color.addColor));
parcelHelpers.export(exports, "leftPad", ()=>(0, _formatters.leftPad));
parcelHelpers.export(exports, "rightPad", ()=>(0, _formatters.rightPad));
parcelHelpers.export(exports, "autobind", ()=>(0, _autobind.autobind));
parcelHelpers.export(exports, "LocalStorage", ()=>(0, _localStorage.LocalStorage));
parcelHelpers.export(exports, "getHiResTimestamp", ()=>(0, _hiResTimestamp.getHiResTimestamp));
var _log = require("./log");
var _color = require("./utils/color");
var _formatters = require("./utils/formatters");
var _autobind = require("./utils/autobind");
var _localStorage = require("./utils/local-storage");
var _hiResTimestamp = require("./utils/hi-res-timestamp");
var _init = require("./init");
exports.default = new (0, _log.Log)({
    id: '@probe.gl/log'
});

},{"./log":"gpocF","./utils/color":false,"./utils/formatters":false,"./utils/autobind":false,"./utils/local-storage":false,"./utils/hi-res-timestamp":false,"./init":"dia9Y","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gpocF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Log", ()=>Log);
parcelHelpers.export(exports, "normalizeArguments", ()=>normalizeArguments);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _env = require("@probe.gl/env");
var _localStorage = require("./utils/local-storage");
var _formatters = require("./utils/formatters");
var _color = require("./utils/color");
var _autobind = require("./utils/autobind");
var _assert = require("./utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _hiResTimestamp = require("./utils/hi-res-timestamp");
const originalConsole = {
    debug: (0, _env.isBrowser) ? console.debug || console.log : console.log,
    log: console.log,
    info: console.info,
    warn: console.warn,
    error: console.error
};
const DEFAULT_SETTINGS = {
    enabled: true,
    level: 0
};
function noop() {}
const cache = {};
const ONCE = {
    once: true
};
class Log {
    constructor(){
        let { id } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            id: ''
        };
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "VERSION", (0, _env.VERSION));
        (0, _definePropertyDefault.default)(this, "_startTs", (0, _hiResTimestamp.getHiResTimestamp)());
        (0, _definePropertyDefault.default)(this, "_deltaTs", (0, _hiResTimestamp.getHiResTimestamp)());
        (0, _definePropertyDefault.default)(this, "_storage", void 0);
        (0, _definePropertyDefault.default)(this, "userData", {});
        (0, _definePropertyDefault.default)(this, "LOG_THROTTLE_TIMEOUT", 0);
        this.id = id;
        this.userData = {};
        this._storage = new (0, _localStorage.LocalStorage)("__probe-".concat(this.id, "__"), DEFAULT_SETTINGS);
        this.timeStamp("".concat(this.id, " started"));
        (0, _autobind.autobind)(this);
        Object.seal(this);
    }
    set level(newLevel) {
        this.setLevel(newLevel);
    }
    get level() {
        return this.getLevel();
    }
    isEnabled() {
        return this._storage.config.enabled;
    }
    getLevel() {
        return this._storage.config.level;
    }
    getTotal() {
        return Number(((0, _hiResTimestamp.getHiResTimestamp)() - this._startTs).toPrecision(10));
    }
    getDelta() {
        return Number(((0, _hiResTimestamp.getHiResTimestamp)() - this._deltaTs).toPrecision(10));
    }
    set priority(newPriority) {
        this.level = newPriority;
    }
    get priority() {
        return this.level;
    }
    getPriority() {
        return this.level;
    }
    enable() {
        let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this._storage.setConfiguration({
            enabled
        });
        return this;
    }
    setLevel(level) {
        this._storage.setConfiguration({
            level
        });
        return this;
    }
    get(setting) {
        return this._storage.config[setting];
    }
    set(setting, value) {
        this._storage.setConfiguration({
            [setting]: value
        });
    }
    settings() {
        if (console.table) console.table(this._storage.config);
        else console.log(this._storage.config);
    }
    assert(condition, message) {
        (0, _assertDefault.default)(condition, message);
    }
    warn(message) {
        return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);
    }
    error(message) {
        return this._getLogFunction(0, message, originalConsole.error, arguments);
    }
    deprecated(oldUsage, newUsage) {
        return this.warn("`".concat(oldUsage, "` is deprecated and will be removed in a later version. Use `").concat(newUsage, "` instead"));
    }
    removed(oldUsage, newUsage) {
        return this.error("`".concat(oldUsage, "` has been removed. Use `").concat(newUsage, "` instead"));
    }
    probe(logLevel, message) {
        return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {
            time: true,
            once: true
        });
    }
    log(logLevel, message) {
        return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);
    }
    info(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.info, arguments);
    }
    once(logLevel, message) {
        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)args[_key - 2] = arguments[_key];
        return this._getLogFunction(logLevel, message, originalConsole.debug || originalConsole.info, arguments, ONCE);
    }
    table(logLevel, table, columns) {
        if (table) return this._getLogFunction(logLevel, table, console.table || noop, columns && [
            columns
        ], {
            tag: getTableHeader(table)
        });
        return noop;
    }
    image(_ref) {
        let { logLevel, priority, image, message = '', scale = 1 } = _ref;
        if (!this._shouldLog(logLevel || priority)) return noop;
        return (0, _env.isBrowser) ? logImageInBrowser({
            image,
            message,
            scale
        }) : logImageInNode({
            image,
            message,
            scale
        });
    }
    time(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);
    }
    timeEnd(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.timeEnd ? console.timeEnd : console.info);
    }
    timeStamp(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.timeStamp || noop);
    }
    group(logLevel, message) {
        let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
            collapsed: false
        };
        const options = normalizeArguments({
            logLevel,
            message,
            opts
        });
        const { collapsed } = opts;
        options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;
        return this._getLogFunction(options);
    }
    groupCollapsed(logLevel, message) {
        let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this.group(logLevel, message, Object.assign({}, opts, {
            collapsed: true
        }));
    }
    groupEnd(logLevel) {
        return this._getLogFunction(logLevel, '', console.groupEnd || noop);
    }
    withGroup(logLevel, message, func) {
        this.group(logLevel, message)();
        try {
            func();
        } finally{
            this.groupEnd(logLevel)();
        }
    }
    trace() {
        if (console.trace) console.trace();
    }
    _shouldLog(logLevel) {
        return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);
    }
    _getLogFunction(logLevel, message, method, args, opts) {
        if (this._shouldLog(logLevel)) {
            opts = normalizeArguments({
                logLevel,
                message,
                args,
                opts
            });
            method = method || opts.method;
            (0, _assertDefault.default)(method);
            opts.total = this.getTotal();
            opts.delta = this.getDelta();
            this._deltaTs = (0, _hiResTimestamp.getHiResTimestamp)();
            const tag = opts.tag || opts.message;
            if (opts.once) {
                if (!cache[tag]) cache[tag] = (0, _hiResTimestamp.getHiResTimestamp)();
                else return noop;
            }
            message = decorateMessage(this.id, opts.message, opts);
            return method.bind(console, message, ...opts.args);
        }
        return noop;
    }
}
(0, _definePropertyDefault.default)(Log, "VERSION", (0, _env.VERSION));
function normalizeLogLevel(logLevel) {
    if (!logLevel) return 0;
    let resolvedLevel;
    switch(typeof logLevel){
        case 'number':
            resolvedLevel = logLevel;
            break;
        case 'object':
            resolvedLevel = logLevel.logLevel || logLevel.priority || 0;
            break;
        default:
            return 0;
    }
    (0, _assertDefault.default)(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);
    return resolvedLevel;
}
function normalizeArguments(opts) {
    const { logLevel, message } = opts;
    opts.logLevel = normalizeLogLevel(logLevel);
    const args = opts.args ? Array.from(opts.args) : [];
    while(args.length && args.shift() !== message);
    switch(typeof logLevel){
        case 'string':
        case 'function':
            if (message !== undefined) args.unshift(message);
            opts.message = logLevel;
            break;
        case 'object':
            Object.assign(opts, logLevel);
            break;
        default:
    }
    if (typeof opts.message === 'function') opts.message = opts.message();
    const messageType = typeof opts.message;
    (0, _assertDefault.default)(messageType === 'string' || messageType === 'object');
    return Object.assign(opts, {
        args
    }, opts.opts);
}
function decorateMessage(id, message, opts) {
    if (typeof message === 'string') {
        const time = opts.time ? (0, _formatters.leftPad)((0, _formatters.formatTime)(opts.total)) : '';
        message = opts.time ? "".concat(id, ": ").concat(time, "  ").concat(message) : "".concat(id, ": ").concat(message);
        message = (0, _color.addColor)(message, opts.color, opts.background);
    }
    return message;
}
function logImageInNode(_ref2) {
    let { image, message = '', scale = 1 } = _ref2;
    console.warn('removed');
    return noop;
}
function logImageInBrowser(_ref3) {
    let { image, message = '', scale = 1 } = _ref3;
    if (typeof image === 'string') {
        const img = new Image();
        img.onload = ()=>{
            const args = (0, _formatters.formatImage)(img, message, scale);
            console.log(...args);
        };
        img.src = image;
        return noop;
    }
    const element = image.nodeName || '';
    if (element.toLowerCase() === 'img') {
        console.log(...(0, _formatters.formatImage)(image, message, scale));
        return noop;
    }
    if (element.toLowerCase() === 'canvas') {
        const img = new Image();
        img.onload = ()=>console.log(...(0, _formatters.formatImage)(img, message, scale));
        img.src = image.toDataURL();
        return noop;
    }
    return noop;
}
function getTableHeader(table) {
    for(const key in table){
        for(const title in table[key])return title || 'untitled';
    }
    return 'empty';
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@probe.gl/env":"f6Lpj","./utils/local-storage":"5nryy","./utils/formatters":"77RB9","./utils/color":"e7ZSB","./utils/autobind":"9wIoC","./utils/assert":"5ipkD","./utils/hi-res-timestamp":"1589t","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"f6Lpj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VERSION", ()=>(0, _globals.VERSION));
parcelHelpers.export(exports, "self", ()=>(0, _globals1.self));
parcelHelpers.export(exports, "window", ()=>(0, _globals1.window));
parcelHelpers.export(exports, "global", ()=>(0, _globals1.global));
parcelHelpers.export(exports, "document", ()=>(0, _globals1.document));
parcelHelpers.export(exports, "process", ()=>(0, _globals1.process));
parcelHelpers.export(exports, "console", ()=>(0, _globals1.console));
parcelHelpers.export(exports, "isBrowser", ()=>(0, _isBrowserDefault.default));
parcelHelpers.export(exports, "isBrowserMainThread", ()=>(0, _isBrowser.isBrowserMainThread));
parcelHelpers.export(exports, "getBrowser", ()=>(0, _getBrowserDefault.default));
parcelHelpers.export(exports, "isMobile", ()=>(0, _getBrowser.isMobile));
parcelHelpers.export(exports, "isElectron", ()=>(0, _isElectronDefault.default));
parcelHelpers.export(exports, "assert", ()=>(0, _assertDefault.default));
var _globals = require("./utils/globals");
var _globals1 = require("./lib/globals");
var _isBrowser = require("./lib/is-browser");
var _isBrowserDefault = parcelHelpers.interopDefault(_isBrowser);
var _getBrowser = require("./lib/get-browser");
var _getBrowserDefault = parcelHelpers.interopDefault(_getBrowser);
var _isElectron = require("./lib/is-electron");
var _isElectronDefault = parcelHelpers.interopDefault(_isElectron);
var _assert = require("./utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);

},{"./utils/globals":"jrVYE","./lib/globals":"bX2o8","./lib/is-browser":"eaFEr","./lib/get-browser":"hBuJJ","./lib/is-electron":false,"./utils/assert":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jrVYE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "self", ()=>(0, _globals.self));
parcelHelpers.export(exports, "window", ()=>(0, _globals.window));
parcelHelpers.export(exports, "global", ()=>(0, _globals.global));
parcelHelpers.export(exports, "document", ()=>(0, _globals.document));
parcelHelpers.export(exports, "process", ()=>(0, _globals.process));
parcelHelpers.export(exports, "console", ()=>(0, _globals.console));
parcelHelpers.export(exports, "VERSION", ()=>VERSION);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
var _isBrowser = require("../lib/is-browser");
var _isBrowserDefault = parcelHelpers.interopDefault(_isBrowser);
var _globals = require("../lib/globals");
const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';
const isBrowser = (0, _isBrowserDefault.default)();

},{"../lib/is-browser":"eaFEr","../lib/globals":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eaFEr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isBrowser);
parcelHelpers.export(exports, "isBrowserMainThread", ()=>isBrowserMainThread);
var _isElectron = require("./is-electron");
var _isElectronDefault = parcelHelpers.interopDefault(_isElectron);
function isBrowser() {
    const isNode = false;
    return !isNode || (0, _isElectronDefault.default)();
}
function isBrowserMainThread() {
    return isBrowser() && typeof document !== 'undefined';
}

},{"./is-electron":"gCd7c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gCd7c":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isElectron);
function isElectron(mockUserAgent) {
    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') return true;
    const realUserAgent = typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent;
    const userAgent = mockUserAgent || realUserAgent;
    if (userAgent && userAgent.indexOf('Electron') >= 0) return true;
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bX2o8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "self", ()=>self_);
parcelHelpers.export(exports, "window", ()=>window_);
parcelHelpers.export(exports, "global", ()=>global_);
parcelHelpers.export(exports, "document", ()=>document_);
parcelHelpers.export(exports, "process", ()=>process_);
parcelHelpers.export(exports, "console", ()=>console_);
var global = arguments[3];
const globals = {
    self: typeof self !== 'undefined' && self,
    window: typeof window !== 'undefined' && window,
    global: typeof global !== 'undefined' && global,
    document: typeof document !== 'undefined' && document,
    process: false
};
const global_ = globalThis;
const self_ = globals.self || globals.window || globals.global;
const window_ = globals.window || globals.self || globals.global;
const document_ = globals.document || {};
const process_ = globals.process || {};
const console_ = console;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hBuJJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isMobile", ()=>isMobile);
parcelHelpers.export(exports, "default", ()=>getBrowser);
var _isBrowser = require("./is-browser");
var _isBrowserDefault = parcelHelpers.interopDefault(_isBrowser);
var _isElectron = require("./is-electron");
var _isElectronDefault = parcelHelpers.interopDefault(_isElectron);
const window = globalThis;
function isMobile() {
    return typeof window.orientation !== 'undefined';
}
function getBrowser(mockUserAgent) {
    if (!mockUserAgent && !(0, _isBrowserDefault.default)()) return 'Node';
    if ((0, _isElectronDefault.default)(mockUserAgent)) return 'Electron';
    const navigator_ = typeof navigator !== 'undefined' ? navigator : {};
    const userAgent = mockUserAgent || navigator_.userAgent || '';
    if (userAgent.indexOf('Edge') > -1) return 'Edge';
    const isMSIE = userAgent.indexOf('MSIE ') !== -1;
    const isTrident = userAgent.indexOf('Trident/') !== -1;
    if (isMSIE || isTrident) return 'IE';
    if (window.chrome) return 'Chrome';
    if (window.safari) return 'Safari';
    if (window.mozInnerScreenX) return 'Firefox';
    return 'Unknown';
}

},{"./is-browser":"eaFEr","./is-electron":"gCd7c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5nryy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LocalStorage", ()=>LocalStorage);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
function getStorage(type) {
    try {
        const storage = window[type];
        const x = '__storage_test__';
        storage.setItem(x, x);
        storage.removeItem(x);
        return storage;
    } catch (e) {
        return null;
    }
}
class LocalStorage {
    constructor(id, defaultConfig){
        let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';
        (0, _definePropertyDefault.default)(this, "storage", void 0);
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "config", void 0);
        this.storage = getStorage(type);
        this.id = id;
        this.config = defaultConfig;
        this._loadConfiguration();
    }
    getConfiguration() {
        return this.config;
    }
    setConfiguration(configuration) {
        Object.assign(this.config, configuration);
        if (this.storage) {
            const serialized = JSON.stringify(this.config);
            this.storage.setItem(this.id, serialized);
        }
    }
    _loadConfiguration() {
        let configuration = {};
        if (this.storage) {
            const serializedConfiguration = this.storage.getItem(this.id);
            configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};
        }
        Object.assign(this.config, configuration);
        return this;
    }
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"77RB9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatTime", ()=>formatTime);
parcelHelpers.export(exports, "leftPad", ()=>leftPad);
parcelHelpers.export(exports, "rightPad", ()=>rightPad);
parcelHelpers.export(exports, "formatValue", ()=>formatValue);
parcelHelpers.export(exports, "formatImage", ()=>formatImage);
function formatTime(ms) {
    let formatted;
    if (ms < 10) formatted = "".concat(ms.toFixed(2), "ms");
    else if (ms < 100) formatted = "".concat(ms.toFixed(1), "ms");
    else if (ms < 1000) formatted = "".concat(ms.toFixed(0), "ms");
    else formatted = "".concat((ms / 1000).toFixed(2), "s");
    return formatted;
}
function leftPad(string) {
    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
    const padLength = Math.max(length - string.length, 0);
    return "".concat(' '.repeat(padLength)).concat(string);
}
function rightPad(string) {
    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
    const padLength = Math.max(length - string.length, 0);
    return "".concat(string).concat(' '.repeat(padLength));
}
function formatValue(v) {
    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const EPSILON = 1e-16;
    const { isInteger = false } = opts;
    if (Array.isArray(v) || ArrayBuffer.isView(v)) return formatArrayValue(v, opts);
    if (!Number.isFinite(v)) return String(v);
    if (Math.abs(v) < EPSILON) return isInteger ? '0' : '0.';
    if (isInteger) return v.toFixed(0);
    if (Math.abs(v) > 100 && Math.abs(v) < 10000) return v.toFixed(0);
    const string = v.toPrecision(2);
    const decimal = string.indexOf('.0');
    return decimal === string.length - 2 ? string.slice(0, -1) : string;
}
function formatArrayValue(v, opts) {
    const { maxElts = 16, size = 1 } = opts;
    let string = '[';
    for(let i = 0; i < v.length && i < maxElts; ++i){
        if (i > 0) string += ",".concat(i % size === 0 ? ' ' : '');
        string += formatValue(v[i], opts);
    }
    const terminator = v.length > maxElts ? '...' : ']';
    return "".concat(string).concat(terminator);
}
function formatImage(image, message, scale) {
    let maxWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 600;
    const imageUrl = image.src.replace(/\(/g, '%28').replace(/\)/g, '%29');
    if (image.width > maxWidth) scale = Math.min(scale, maxWidth / image.width);
    const width = image.width * scale;
    const height = image.height * scale;
    const style = [
        'font-size:1px;',
        "padding:".concat(Math.floor(height / 2), "px ").concat(Math.floor(width / 2), "px;"),
        "line-height:".concat(height, "px;"),
        "background:url(".concat(imageUrl, ");"),
        "background-size:".concat(width, "px ").concat(height, "px;"),
        'color:transparent;'
    ].join('');
    return [
        "".concat(message, " %c+"),
        style
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"e7ZSB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COLOR", ()=>COLOR);
parcelHelpers.export(exports, "addColor", ()=>addColor);
var _env = require("@probe.gl/env");
let COLOR;
(function(COLOR) {
    COLOR[COLOR["BLACK"] = 30] = "BLACK";
    COLOR[COLOR["RED"] = 31] = "RED";
    COLOR[COLOR["GREEN"] = 32] = "GREEN";
    COLOR[COLOR["YELLOW"] = 33] = "YELLOW";
    COLOR[COLOR["BLUE"] = 34] = "BLUE";
    COLOR[COLOR["MAGENTA"] = 35] = "MAGENTA";
    COLOR[COLOR["CYAN"] = 36] = "CYAN";
    COLOR[COLOR["WHITE"] = 37] = "WHITE";
    COLOR[COLOR["BRIGHT_BLACK"] = 90] = "BRIGHT_BLACK";
    COLOR[COLOR["BRIGHT_RED"] = 91] = "BRIGHT_RED";
    COLOR[COLOR["BRIGHT_GREEN"] = 92] = "BRIGHT_GREEN";
    COLOR[COLOR["BRIGHT_YELLOW"] = 93] = "BRIGHT_YELLOW";
    COLOR[COLOR["BRIGHT_BLUE"] = 94] = "BRIGHT_BLUE";
    COLOR[COLOR["BRIGHT_MAGENTA"] = 95] = "BRIGHT_MAGENTA";
    COLOR[COLOR["BRIGHT_CYAN"] = 96] = "BRIGHT_CYAN";
    COLOR[COLOR["BRIGHT_WHITE"] = 97] = "BRIGHT_WHITE";
})(COLOR || (COLOR = {}));
function getColor(color) {
    return typeof color === 'string' ? COLOR[color.toUpperCase()] || COLOR.WHITE : color;
}
function addColor(string, color, background) {
    if (!(0, _env.isBrowser) && typeof string === 'string') {
        if (color) {
            color = getColor(color);
            string = "\x1B[".concat(color, "m").concat(string, "\x1B[39m");
        }
        if (background) {
            color = getColor(background);
            string = "\x1B[".concat(background + 10, "m").concat(string, "\x1B[49m");
        }
    }
    return string;
}

},{"@probe.gl/env":"f6Lpj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9wIoC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "autobind", ()=>autobind);
function autobind(obj) {
    let predefined = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [
        'constructor'
    ];
    const proto = Object.getPrototypeOf(obj);
    const propNames = Object.getOwnPropertyNames(proto);
    for (const key of propNames){
        if (typeof obj[key] === 'function') {
            if (!predefined.find((name)=>key === name)) obj[key] = obj[key].bind(obj);
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5ipkD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message || 'Assertion failed');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1589t":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHiResTimestamp", ()=>getHiResTimestamp);
var _env = require("@probe.gl/env");
function getHiResTimestamp() {
    let timestamp;
    if ((0, _env.isBrowser) && 'performance' in (0, _env.window)) {
        var _window$performance, _window$performance$n;
        timestamp = (0, _env.window) === null || (0, _env.window) === void 0 ? void 0 : (_window$performance = (0, _env.window).performance) === null || _window$performance === void 0 ? void 0 : (_window$performance$n = _window$performance.now) === null || _window$performance$n === void 0 ? void 0 : _window$performance$n.call(_window$performance);
    } else if ('hrtime' in (0, _env.process)) {
        var _process$hrtime;
        const timeParts = (0, _env.process) === null || (0, _env.process) === void 0 ? void 0 : (_process$hrtime = (0, _env.process).hrtime) === null || _process$hrtime === void 0 ? void 0 : _process$hrtime.call((0, _env.process));
        timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;
    } else timestamp = Date.now();
    return timestamp;
}

},{"@probe.gl/env":"f6Lpj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dia9Y":[function(require,module,exports,__globalThis) {
globalThis.probe = {};

},{}],"j31Rq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_LOADER_OPTIONS", ()=>DEFAULT_LOADER_OPTIONS);
parcelHelpers.export(exports, "REMOVED_LOADER_OPTIONS", ()=>REMOVED_LOADER_OPTIONS);
var _loaderUtils = require("@loaders.gl/loader-utils");
var _loggers = require("./loggers");
const DEFAULT_LOADER_OPTIONS = {
    fetch: null,
    mimeType: undefined,
    nothrow: false,
    log: new (0, _loggers.ConsoleLog)(),
    CDN: 'https://unpkg.com/@loaders.gl',
    worker: true,
    maxConcurrency: 3,
    maxMobileConcurrency: 1,
    reuseWorkers: (0, _loaderUtils.isBrowser),
    _nodeWorkers: false,
    _workerType: '',
    limit: 0,
    _limitMB: 0,
    batchSize: 'auto',
    batchDebounceMs: 0,
    metadata: false,
    transforms: []
};
const REMOVED_LOADER_OPTIONS = {
    throws: 'nothrow',
    dataType: '(no longer used)',
    uri: 'baseUri',
    method: 'fetch.method',
    headers: 'fetch.headers',
    body: 'fetch.body',
    mode: 'fetch.mode',
    credentials: 'fetch.credentials',
    cache: 'fetch.cache',
    redirect: 'fetch.redirect',
    referrer: 'fetch.referrer',
    referrerPolicy: 'fetch.referrerPolicy',
    integrity: 'fetch.integrity',
    keepalive: 'fetch.keepalive',
    signal: 'fetch.signal'
};

},{"@loaders.gl/loader-utils":"fYBuJ","./loggers":"arOQy","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"arGZq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selectLoader", ()=>selectLoader);
parcelHelpers.export(exports, "selectLoaderSync", ()=>selectLoaderSync);
var _loaderUtils = require("@loaders.gl/loader-utils");
var _normalizeLoader = require("../loader-utils/normalize-loader");
var _log = require("../utils/log");
var _resourceUtils = require("../utils/resource-utils");
var _registerLoaders = require("./register-loaders");
var _isType = require("../../javascript-utils/is-type");
var _urlUtils = require("../utils/url-utils");
const EXT_PATTERN = /\.([^.]+)$/;
async function selectLoader(data) {
    let loaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let options = arguments.length > 2 ? arguments[2] : undefined;
    let context = arguments.length > 3 ? arguments[3] : undefined;
    if (!validHTTPResponse(data)) return null;
    let loader = selectLoaderSync(data, loaders, {
        ...options,
        nothrow: true
    }, context);
    if (loader) return loader;
    if ((0, _isType.isBlob)(data)) {
        data = await data.slice(0, 10).arrayBuffer();
        loader = selectLoaderSync(data, loaders, options, context);
    }
    if (!loader && !(options !== null && options !== void 0 && options.nothrow)) throw new Error(getNoValidLoaderMessage(data));
    return loader;
}
function selectLoaderSync(data) {
    let loaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let options = arguments.length > 2 ? arguments[2] : undefined;
    let context = arguments.length > 3 ? arguments[3] : undefined;
    if (!validHTTPResponse(data)) return null;
    if (loaders && !Array.isArray(loaders)) return (0, _normalizeLoader.normalizeLoader)(loaders);
    let candidateLoaders = [];
    if (loaders) candidateLoaders = candidateLoaders.concat(loaders);
    if (!(options !== null && options !== void 0 && options.ignoreRegisteredLoaders)) candidateLoaders.push(...(0, _registerLoaders.getRegisteredLoaders)());
    normalizeLoaders(candidateLoaders);
    const loader = selectLoaderInternal(data, candidateLoaders, options, context);
    if (!loader && !(options !== null && options !== void 0 && options.nothrow)) throw new Error(getNoValidLoaderMessage(data));
    return loader;
}
function selectLoaderInternal(data, loaders, options, context) {
    const url = (0, _resourceUtils.getResourceUrl)(data);
    const type = (0, _resourceUtils.getResourceMIMEType)(data);
    const testUrl = (0, _urlUtils.stripQueryString)(url) || (context === null || context === void 0 ? void 0 : context.url);
    let loader = null;
    let reason = '';
    if (options !== null && options !== void 0 && options.mimeType) {
        loader = findLoaderByMIMEType(loaders, options === null || options === void 0 ? void 0 : options.mimeType);
        reason = "match forced by supplied MIME type ".concat(options === null || options === void 0 ? void 0 : options.mimeType);
    }
    loader = loader || findLoaderByUrl(loaders, testUrl);
    reason = reason || (loader ? "matched url ".concat(testUrl) : '');
    loader = loader || findLoaderByMIMEType(loaders, type);
    reason = reason || (loader ? "matched MIME type ".concat(type) : '');
    loader = loader || findLoaderByInitialBytes(loaders, data);
    reason = reason || (loader ? "matched initial data ".concat(getFirstCharacters(data)) : '');
    loader = loader || findLoaderByMIMEType(loaders, options === null || options === void 0 ? void 0 : options.fallbackMimeType);
    reason = reason || (loader ? "matched fallback MIME type ".concat(type) : '');
    if (reason) {
        var _loader;
        (0, _log.log).log(1, "selectLoader selected ".concat((_loader = loader) === null || _loader === void 0 ? void 0 : _loader.name, ": ").concat(reason, "."));
    }
    return loader;
}
function validHTTPResponse(data) {
    if (data instanceof Response) {
        if (data.status === 204) return false;
    }
    return true;
}
function getNoValidLoaderMessage(data) {
    const url = (0, _resourceUtils.getResourceUrl)(data);
    const type = (0, _resourceUtils.getResourceMIMEType)(data);
    let message = 'No valid loader found (';
    message += url ? "".concat((0, _loaderUtils.path).filename(url), ", ") : 'no url provided, ';
    message += "MIME type: ".concat(type ? "\"".concat(type, "\"") : 'not provided', ", ");
    const firstCharacters = data ? getFirstCharacters(data) : '';
    message += firstCharacters ? " first bytes: \"".concat(firstCharacters, "\"") : 'first bytes: not available';
    message += ')';
    return message;
}
function normalizeLoaders(loaders) {
    for (const loader of loaders)(0, _normalizeLoader.normalizeLoader)(loader);
}
function findLoaderByUrl(loaders, url) {
    const match = url && EXT_PATTERN.exec(url);
    const extension = match && match[1];
    return extension ? findLoaderByExtension(loaders, extension) : null;
}
function findLoaderByExtension(loaders, extension) {
    extension = extension.toLowerCase();
    for (const loader of loaders)for (const loaderExtension of loader.extensions){
        if (loaderExtension.toLowerCase() === extension) return loader;
    }
    return null;
}
function findLoaderByMIMEType(loaders, mimeType) {
    for (const loader of loaders){
        if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) return loader;
        if (mimeType === "application/x.".concat(loader.id)) return loader;
    }
    return null;
}
function findLoaderByInitialBytes(loaders, data) {
    if (!data) return null;
    for (const loader of loaders){
        if (typeof data === 'string') {
            if (testDataAgainstText(data, loader)) return loader;
        } else if (ArrayBuffer.isView(data)) {
            if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) return loader;
        } else if (data instanceof ArrayBuffer) {
            const byteOffset = 0;
            if (testDataAgainstBinary(data, byteOffset, loader)) return loader;
        }
    }
    return null;
}
function testDataAgainstText(data, loader) {
    if (loader.testText) return loader.testText(data);
    const tests = Array.isArray(loader.tests) ? loader.tests : [
        loader.tests
    ];
    return tests.some((test)=>data.startsWith(test));
}
function testDataAgainstBinary(data, byteOffset, loader) {
    const tests = Array.isArray(loader.tests) ? loader.tests : [
        loader.tests
    ];
    return tests.some((test)=>testBinary(data, byteOffset, loader, test));
}
function testBinary(data, byteOffset, loader, test) {
    if (test instanceof ArrayBuffer) return (0, _loaderUtils.compareArrayBuffers)(test, data, test.byteLength);
    switch(typeof test){
        case 'function':
            return test(data, loader);
        case 'string':
            const magic = getMagicString(data, byteOffset, test.length);
            return test === magic;
        default:
            return false;
    }
}
function getFirstCharacters(data) {
    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    if (typeof data === 'string') return data.slice(0, length);
    else if (ArrayBuffer.isView(data)) return getMagicString(data.buffer, data.byteOffset, length);
    else if (data instanceof ArrayBuffer) {
        const byteOffset = 0;
        return getMagicString(data, byteOffset, length);
    }
    return '';
}
function getMagicString(arrayBuffer, byteOffset, length) {
    if (arrayBuffer.byteLength < byteOffset + length) return '';
    const dataView = new DataView(arrayBuffer);
    let magic = '';
    for(let i = 0; i < length; i++)magic += String.fromCharCode(dataView.getUint8(byteOffset + i));
    return magic;
}

},{"@loaders.gl/loader-utils":"fYBuJ","../loader-utils/normalize-loader":"j8Jim","../utils/log":"gVYbL","../utils/resource-utils":"dkv8m","./register-loaders":"g4efd","../../javascript-utils/is-type":"3p5ZW","../utils/url-utils":"3Lf8q","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gVYbL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log", ()=>log);
var _log = require("@probe.gl/log");
const log = new (0, _log.Log)({
    id: 'loaders.gl'
});

},{"@probe.gl/log":"gabz3","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"besSL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parse", ()=>parse);
var _workerUtils = require("@loaders.gl/worker-utils");
var _loaderUtils = require("@loaders.gl/loader-utils");
var _normalizeLoader = require("../loader-utils/normalize-loader");
var _isType = require("../../javascript-utils/is-type");
var _optionUtils = require("../loader-utils/option-utils");
var _getData = require("../loader-utils/get-data");
var _loaderContext = require("../loader-utils/loader-context");
var _resourceUtils = require("../utils/resource-utils");
var _selectLoader = require("./select-loader");
async function parse(data, loaders, options, context) {
    (0, _workerUtils.assert)(!context || typeof context === 'object');
    if (loaders && !Array.isArray(loaders) && !(0, _normalizeLoader.isLoaderObject)(loaders)) {
        context = undefined;
        options = loaders;
        loaders = undefined;
    }
    data = await data;
    options = options || {};
    const url = (0, _resourceUtils.getResourceUrl)(data);
    const typedLoaders = loaders;
    const candidateLoaders = (0, _loaderContext.getLoadersFromContext)(typedLoaders, context);
    const loader = await (0, _selectLoader.selectLoader)(data, candidateLoaders, options);
    if (!loader) return null;
    options = (0, _optionUtils.normalizeOptions)(options, loader, candidateLoaders, url);
    context = (0, _loaderContext.getLoaderContext)({
        url,
        parse,
        loaders: candidateLoaders
    }, options, context || null);
    return await parseWithLoader(loader, data, options, context);
}
async function parseWithLoader(loader, data, options, context) {
    (0, _workerUtils.validateWorkerVersion)(loader);
    if ((0, _isType.isResponse)(data)) {
        const response = data;
        const { ok, redirected, status, statusText, type, url } = response;
        const headers = Object.fromEntries(response.headers.entries());
        context.response = {
            headers,
            ok,
            redirected,
            status,
            statusText,
            type,
            url
        };
    }
    data = await (0, _getData.getArrayBufferOrStringFromData)(data, loader, options);
    if (loader.parseTextSync && typeof data === 'string') {
        options.dataType = 'text';
        return loader.parseTextSync(data, options, context, loader);
    }
    if ((0, _loaderUtils.canParseWithWorker)(loader, options)) return await (0, _loaderUtils.parseWithWorker)(loader, data, options, context, parse);
    if (loader.parseText && typeof data === 'string') return await loader.parseText(data, options, context, loader);
    if (loader.parse) return await loader.parse(data, options, context, loader);
    (0, _workerUtils.assert)(!loader.parseSync);
    throw new Error("".concat(loader.id, " loader - no parser found and worker is disabled"));
}

},{"@loaders.gl/worker-utils":"kNBkE","@loaders.gl/loader-utils":"fYBuJ","../loader-utils/normalize-loader":"j8Jim","../../javascript-utils/is-type":"3p5ZW","../loader-utils/option-utils":"5rGfF","../loader-utils/get-data":"9z9ld","../loader-utils/loader-context":"n50ue","../utils/resource-utils":"dkv8m","./select-loader":"arGZq","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9z9ld":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getArrayBufferOrStringFromDataSync", ()=>getArrayBufferOrStringFromDataSync);
parcelHelpers.export(exports, "getArrayBufferOrStringFromData", ()=>getArrayBufferOrStringFromData);
parcelHelpers.export(exports, "getAsyncIterableFromData", ()=>getAsyncIterableFromData);
parcelHelpers.export(exports, "getReadableStream", ()=>getReadableStream);
var _loaderUtils = require("@loaders.gl/loader-utils");
var _isType = require("../../javascript-utils/is-type");
var _makeIterator = require("../../iterators/make-iterator/make-iterator");
var _responseUtils = require("../utils/response-utils");
const ERR_DATA = 'Cannot convert supplied data type';
function getArrayBufferOrStringFromDataSync(data, loader, options) {
    if (loader.text && typeof data === 'string') return data;
    if ((0, _isType.isBuffer)(data)) data = data.buffer;
    if (data instanceof ArrayBuffer) {
        const arrayBuffer = data;
        if (loader.text && !loader.binary) {
            const textDecoder = new TextDecoder('utf8');
            return textDecoder.decode(arrayBuffer);
        }
        return arrayBuffer;
    }
    if (ArrayBuffer.isView(data)) {
        if (loader.text && !loader.binary) {
            const textDecoder = new TextDecoder('utf8');
            return textDecoder.decode(data);
        }
        let arrayBuffer = data.buffer;
        const byteLength = data.byteLength || data.length;
        if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);
        return arrayBuffer;
    }
    throw new Error(ERR_DATA);
}
async function getArrayBufferOrStringFromData(data, loader, options) {
    const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);
    if (typeof data === 'string' || isArrayBuffer) return getArrayBufferOrStringFromDataSync(data, loader, options);
    if ((0, _isType.isBlob)(data)) data = await (0, _responseUtils.makeResponse)(data);
    if ((0, _isType.isResponse)(data)) {
        const response = data;
        await (0, _responseUtils.checkResponse)(response);
        return loader.binary ? await response.arrayBuffer() : await response.text();
    }
    if ((0, _isType.isReadableStream)(data)) data = (0, _makeIterator.makeIterator)(data, options);
    if ((0, _isType.isIterable)(data) || (0, _isType.isAsyncIterable)(data)) return (0, _loaderUtils.concatenateArrayBuffersAsync)(data);
    throw new Error(ERR_DATA);
}
async function getAsyncIterableFromData(data, options) {
    if ((0, _isType.isIterator)(data)) return data;
    if ((0, _isType.isResponse)(data)) {
        const response = data;
        await (0, _responseUtils.checkResponse)(response);
        const body = await response.body;
        return (0, _makeIterator.makeIterator)(body, options);
    }
    if ((0, _isType.isBlob)(data) || (0, _isType.isReadableStream)(data)) return (0, _makeIterator.makeIterator)(data, options);
    if ((0, _isType.isAsyncIterable)(data)) return data[Symbol.asyncIterator]();
    return getIterableFromData(data);
}
async function getReadableStream(data) {
    if ((0, _isType.isReadableStream)(data)) return data;
    if ((0, _isType.isResponse)(data)) return data.body;
    const response = await (0, _responseUtils.makeResponse)(data);
    return response.body;
}
function getIterableFromData(data) {
    if (ArrayBuffer.isView(data)) return function* oneChunk() {
        yield data.buffer;
    }();
    if (data instanceof ArrayBuffer) return function* oneChunk() {
        yield data;
    }();
    if ((0, _isType.isIterator)(data)) return data;
    if ((0, _isType.isIterable)(data)) return data[Symbol.iterator]();
    throw new Error(ERR_DATA);
}

},{"@loaders.gl/loader-utils":"fYBuJ","../../javascript-utils/is-type":"3p5ZW","../../iterators/make-iterator/make-iterator":"icgaA","../utils/response-utils":"k6APq","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"icgaA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeIterator", ()=>makeIterator);
var _makeStringIterator = require("./make-string-iterator");
var _makeArrayBufferIterator = require("./make-array-buffer-iterator");
var _makeBlobIterator = require("./make-blob-iterator");
var _makeStreamIterator = require("./make-stream-iterator");
var _isType = require("../../javascript-utils/is-type");
function makeIterator(data, options) {
    if (typeof data === 'string') return (0, _makeStringIterator.makeStringIterator)(data, options);
    if (data instanceof ArrayBuffer) return (0, _makeArrayBufferIterator.makeArrayBufferIterator)(data, options);
    if ((0, _isType.isBlob)(data)) return (0, _makeBlobIterator.makeBlobIterator)(data, options);
    if ((0, _isType.isReadableStream)(data)) return (0, _makeStreamIterator.makeStreamIterator)(data, options);
    if ((0, _isType.isResponse)(data)) {
        const response = data;
        return (0, _makeStreamIterator.makeStreamIterator)(response.body, options);
    }
    throw new Error('makeIterator');
}

},{"./make-string-iterator":"5aNHt","./make-array-buffer-iterator":"lw1pt","./make-blob-iterator":"88dPg","./make-stream-iterator":"6y1HY","../../javascript-utils/is-type":"3p5ZW","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5aNHt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeStringIterator", ()=>makeStringIterator);
const DEFAULT_CHUNK_SIZE = 262144;
function* makeStringIterator(string, options) {
    const chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;
    let offset = 0;
    const textEncoder = new TextEncoder();
    while(offset < string.length){
        const chunkLength = Math.min(string.length - offset, chunkSize);
        const chunk = string.slice(offset, offset + chunkLength);
        offset += chunkLength;
        yield textEncoder.encode(chunk);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lw1pt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeArrayBufferIterator", ()=>makeArrayBufferIterator);
const DEFAULT_CHUNK_SIZE = 262144;
function makeArrayBufferIterator(arrayBuffer) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return function*() {
        const { chunkSize = DEFAULT_CHUNK_SIZE } = options;
        let byteOffset = 0;
        while(byteOffset < arrayBuffer.byteLength){
            const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);
            const chunk = new ArrayBuffer(chunkByteLength);
            const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);
            const chunkArray = new Uint8Array(chunk);
            chunkArray.set(sourceArray);
            byteOffset += chunkByteLength;
            yield chunk;
        }
    }();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"88dPg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeBlobIterator", ()=>makeBlobIterator);
const DEFAULT_CHUNK_SIZE = 1048576;
async function* makeBlobIterator(blob, options) {
    const chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;
    let offset = 0;
    while(offset < blob.size){
        const end = offset + chunkSize;
        const chunk = await blob.slice(offset, end).arrayBuffer();
        offset = end;
        yield chunk;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6y1HY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeStreamIterator", ()=>makeStreamIterator);
var _loaderUtils = require("@loaders.gl/loader-utils");
function makeStreamIterator(stream, options) {
    return (0, _loaderUtils.isBrowser) ? makeBrowserStreamIterator(stream, options) : makeNodeStreamIterator(stream, options);
}
async function* makeBrowserStreamIterator(stream, options) {
    const reader = stream.getReader();
    let nextBatchPromise;
    try {
        while(true){
            const currentBatchPromise = nextBatchPromise || reader.read();
            if (options !== null && options !== void 0 && options._streamReadAhead) nextBatchPromise = reader.read();
            const { done, value } = await currentBatchPromise;
            if (done) return;
            yield (0, _loaderUtils.toArrayBuffer)(value);
        }
    } catch (error) {
        reader.releaseLock();
    }
}
async function* makeNodeStreamIterator(stream, options) {
    for await (const chunk of stream)yield (0, _loaderUtils.toArrayBuffer)(chunk);
}

},{"@loaders.gl/loader-utils":"fYBuJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"n50ue":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getLoaderContext", ()=>getLoaderContext);
parcelHelpers.export(exports, "getLoadersFromContext", ()=>getLoadersFromContext);
var _getFetchFunction = require("./get-fetch-function");
var _urlUtils = require("../utils/url-utils");
var _loaderUtils = require("@loaders.gl/loader-utils");
function getLoaderContext(context, options, parentContext) {
    if (parentContext) return parentContext;
    const newContext = {
        fetch: (0, _getFetchFunction.getFetchFunction)(options, context),
        ...context
    };
    if (newContext.url) {
        const baseUrl = (0, _urlUtils.stripQueryString)(newContext.url);
        newContext.baseUrl = baseUrl;
        newContext.queryString = (0, _urlUtils.extractQueryString)(newContext.url);
        newContext.filename = (0, _loaderUtils.path).filename(baseUrl);
        newContext.baseUrl = (0, _loaderUtils.path).dirname(baseUrl);
    }
    if (!Array.isArray(newContext.loaders)) newContext.loaders = null;
    return newContext;
}
function getLoadersFromContext(loaders, context) {
    if (!context && loaders && !Array.isArray(loaders)) return loaders;
    let candidateLoaders;
    if (loaders) candidateLoaders = Array.isArray(loaders) ? loaders : [
        loaders
    ];
    if (context && context.loaders) {
        const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [
            context.loaders
        ];
        candidateLoaders = candidateLoaders ? [
            ...candidateLoaders,
            ...contextLoaders
        ] : contextLoaders;
    }
    return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;
}

},{"./get-fetch-function":"lk7lT","../utils/url-utils":"3Lf8q","@loaders.gl/loader-utils":"fYBuJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lk7lT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFetchFunction", ()=>getFetchFunction);
var _isType = require("../../javascript-utils/is-type");
var _fetchFile = require("../fetch/fetch-file");
var _optionUtils = require("./option-utils");
function getFetchFunction(options, context) {
    const globalOptions = (0, _optionUtils.getGlobalLoaderOptions)();
    const fetchOptions = options || globalOptions;
    if (typeof fetchOptions.fetch === 'function') return fetchOptions.fetch;
    if ((0, _isType.isObject)(fetchOptions.fetch)) return (url)=>(0, _fetchFile.fetchFile)(url, fetchOptions);
    if (context !== null && context !== void 0 && context.fetch) return context === null || context === void 0 ? void 0 : context.fetch;
    return 0, _fetchFile.fetchFile;
}

},{"../../javascript-utils/is-type":"3p5ZW","../fetch/fetch-file":"h5MVj","./option-utils":"5rGfF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dIlFx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "load", ()=>load);
var _isType = require("../../javascript-utils/is-type");
var _normalizeLoader = require("../loader-utils/normalize-loader");
var _getFetchFunction = require("../loader-utils/get-fetch-function");
var _parse = require("./parse");
async function load(url, loaders, options, context) {
    if (!Array.isArray(loaders) && !(0, _normalizeLoader.isLoaderObject)(loaders)) {
        context = undefined;
        options = loaders;
        loaders = undefined;
    }
    const fetch = (0, _getFetchFunction.getFetchFunction)(options);
    let data = url;
    if (typeof url === 'string') data = await fetch(url);
    if ((0, _isType.isBlob)(url)) data = await fetch(url);
    return await (0, _parse.parse)(data, loaders, options);
}

},{"../../javascript-utils/is-type":"3p5ZW","../loader-utils/normalize-loader":"j8Jim","../loader-utils/get-fetch-function":"lk7lT","./parse":"besSL","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6x7eS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageLoader", ()=>(0, _imageLoader.ImageLoader));
parcelHelpers.export(exports, "ImageWriter", ()=>(0, _imageWriter.ImageWriter));
parcelHelpers.export(exports, "getBinaryImageMetadata", ()=>(0, _binaryImageApi.getBinaryImageMetadata));
parcelHelpers.export(exports, "isImageTypeSupported", ()=>(0, _imageType.isImageTypeSupported));
parcelHelpers.export(exports, "getDefaultImageType", ()=>(0, _imageType.getDefaultImageType));
parcelHelpers.export(exports, "isImage", ()=>(0, _parsedImageApi.isImage));
parcelHelpers.export(exports, "getImageType", ()=>(0, _parsedImageApi.getImageType));
parcelHelpers.export(exports, "getImageSize", ()=>(0, _parsedImageApi.getImageSize));
parcelHelpers.export(exports, "getImageData", ()=>(0, _parsedImageApi.getImageData));
parcelHelpers.export(exports, "getSupportedImageFormats", ()=>(0, _imageFormat.getSupportedImageFormats));
parcelHelpers.export(exports, "isImageFormatSupported", ()=>(0, _imageFormat.isImageFormatSupported));
parcelHelpers.export(exports, "loadImage", ()=>(0, _loadImage.loadImage));
var _imageLoader = require("./image-loader");
var _imageWriter = require("./image-writer");
var _binaryImageApi = require("./lib/category-api/binary-image-api");
var _imageType = require("./lib/category-api/image-type");
var _parsedImageApi = require("./lib/category-api/parsed-image-api");
var _imageFormat = require("./lib/category-api/image-format");
var _loadImage = require("./lib/texture-api/load-image");

},{"./image-loader":"eqaiX","./image-writer":false,"./lib/category-api/binary-image-api":false,"./lib/category-api/image-type":false,"./lib/category-api/parsed-image-api":false,"./lib/category-api/image-format":false,"./lib/texture-api/load-image":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eqaiX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageLoader", ()=>ImageLoader);
parcelHelpers.export(exports, "_typecheckImageLoader", ()=>_typecheckImageLoader);
var _version = require("./lib/utils/version");
var _parseImage = require("./lib/parsers/parse-image");
var _binaryImageApi = require("./lib/category-api/binary-image-api");
const EXTENSIONS = [
    'png',
    'jpg',
    'jpeg',
    'gif',
    'webp',
    'bmp',
    'ico',
    'svg',
    'avif'
];
const MIME_TYPES = [
    'image/png',
    'image/jpeg',
    'image/gif',
    'image/webp',
    'image/avif',
    'image/bmp',
    'image/vnd.microsoft.icon',
    'image/svg+xml'
];
const DEFAULT_IMAGE_LOADER_OPTIONS = {
    image: {
        type: 'auto',
        decode: true
    }
};
const ImageLoader = {
    id: 'image',
    module: 'images',
    name: 'Images',
    version: (0, _version.VERSION),
    mimeTypes: MIME_TYPES,
    extensions: EXTENSIONS,
    parse: (0, _parseImage.parseImage),
    tests: [
        (arrayBuffer)=>Boolean((0, _binaryImageApi.getBinaryImageMetadata)(new DataView(arrayBuffer)))
    ],
    options: DEFAULT_IMAGE_LOADER_OPTIONS
};
const _typecheckImageLoader = ImageLoader;

},{"./lib/utils/version":"3Y0tQ","./lib/parsers/parse-image":"djZCY","./lib/category-api/binary-image-api":"44zKX","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3Y0tQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VERSION", ()=>VERSION);
const VERSION = "3.4.15";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"djZCY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseImage", ()=>parseImage);
var _loaderUtils = require("@loaders.gl/loader-utils");
var _imageType = require("../category-api/image-type");
var _parsedImageApi = require("../category-api/parsed-image-api");
var _parseToImage = require("./parse-to-image");
var _parseToImageBitmap = require("./parse-to-image-bitmap");
var _parseToNodeImage = require("./parse-to-node-image");
async function parseImage(arrayBuffer, options, context) {
    options = options || {};
    const imageOptions = options.image || {};
    const imageType = imageOptions.type || 'auto';
    const { url } = context || {};
    const loadType = getLoadableImageType(imageType);
    let image;
    switch(loadType){
        case 'imagebitmap':
            image = await (0, _parseToImageBitmap.parseToImageBitmap)(arrayBuffer, options, url);
            break;
        case 'image':
            image = await (0, _parseToImage.parseToImage)(arrayBuffer, options, url);
            break;
        case 'data':
            image = await (0, _parseToNodeImage.parseToNodeImage)(arrayBuffer, options);
            break;
        default:
            (0, _loaderUtils.assert)(false);
    }
    if (imageType === 'data') image = (0, _parsedImageApi.getImageData)(image);
    return image;
}
function getLoadableImageType(type) {
    switch(type){
        case 'auto':
        case 'data':
            return (0, _imageType.getDefaultImageType)();
        default:
            (0, _imageType.isImageTypeSupported)(type);
            return type;
    }
}

},{"@loaders.gl/loader-utils":"fYBuJ","../category-api/image-type":"ljAWp","../category-api/parsed-image-api":"kXzYB","./parse-to-image":"ftWqe","./parse-to-image-bitmap":"61hdD","./parse-to-node-image":"kwsxV","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ljAWp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isImageTypeSupported", ()=>isImageTypeSupported);
parcelHelpers.export(exports, "getDefaultImageType", ()=>getDefaultImageType);
var _loaderUtils = require("@loaders.gl/loader-utils");
const { _parseImageNode } = globalThis;
const IMAGE_SUPPORTED = typeof Image !== 'undefined';
const IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';
const NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);
const DATA_SUPPORTED = (0, _loaderUtils.isBrowser) ? true : NODE_IMAGE_SUPPORTED;
function isImageTypeSupported(type) {
    switch(type){
        case 'auto':
            return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;
        case 'imagebitmap':
            return IMAGE_BITMAP_SUPPORTED;
        case 'image':
            return IMAGE_SUPPORTED;
        case 'data':
            return DATA_SUPPORTED;
        default:
            throw new Error("@loaders.gl/images: image ".concat(type, " not supported in this environment"));
    }
}
function getDefaultImageType() {
    if (IMAGE_BITMAP_SUPPORTED) return 'imagebitmap';
    if (IMAGE_SUPPORTED) return 'image';
    if (DATA_SUPPORTED) return 'data';
    throw new Error('Install \'@loaders.gl/polyfills\' to parse images under Node.js');
}

},{"@loaders.gl/loader-utils":"fYBuJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kXzYB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isImage", ()=>isImage);
parcelHelpers.export(exports, "deleteImage", ()=>deleteImage);
parcelHelpers.export(exports, "getImageType", ()=>getImageType);
parcelHelpers.export(exports, "getImageSize", ()=>getImageSize);
parcelHelpers.export(exports, "getImageData", ()=>getImageData);
function isImage(image) {
    return Boolean(getImageTypeOrNull(image));
}
function deleteImage(image) {
    switch(getImageType(image)){
        case 'imagebitmap':
            image.close();
            break;
        default:
    }
}
function getImageType(image) {
    const format = getImageTypeOrNull(image);
    if (!format) throw new Error('Not an image');
    return format;
}
function getImageSize(image) {
    return getImageData(image);
}
function getImageData(image) {
    switch(getImageType(image)){
        case 'data':
            return image;
        case 'image':
        case 'imagebitmap':
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            if (!context) throw new Error('getImageData');
            canvas.width = image.width;
            canvas.height = image.height;
            context.drawImage(image, 0, 0);
            return context.getImageData(0, 0, image.width, image.height);
        default:
            throw new Error('getImageData');
    }
}
function getImageTypeOrNull(image) {
    if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) return 'imagebitmap';
    if (typeof Image !== 'undefined' && image instanceof Image) return 'image';
    if (image && typeof image === 'object' && image.data && image.width && image.height) return 'data';
    return null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ftWqe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseToImage", ()=>parseToImage);
parcelHelpers.export(exports, "loadToImage", ()=>loadToImage);
var _svgUtils = require("./svg-utils");
async function parseToImage(arrayBuffer, options, url) {
    const blobOrDataUrl = (0, _svgUtils.getBlobOrSVGDataUrl)(arrayBuffer, url);
    const URL = self.URL || self.webkitURL;
    const objectUrl = typeof blobOrDataUrl !== 'string' && URL.createObjectURL(blobOrDataUrl);
    try {
        return await loadToImage(objectUrl || blobOrDataUrl, options);
    } finally{
        if (objectUrl) URL.revokeObjectURL(objectUrl);
    }
}
async function loadToImage(url, options) {
    const image = new Image();
    image.src = url;
    if (options.image && options.image.decode && image.decode) {
        await image.decode();
        return image;
    }
    return await new Promise((resolve, reject)=>{
        try {
            image.onload = ()=>resolve(image);
            image.onerror = (err)=>reject(new Error("Could not load image ".concat(url, ": ").concat(err)));
        } catch (error) {
            reject(error);
        }
    });
}

},{"./svg-utils":"dK6sP","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dK6sP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isSVG", ()=>isSVG);
parcelHelpers.export(exports, "getBlobOrSVGDataUrl", ()=>getBlobOrSVGDataUrl);
parcelHelpers.export(exports, "getBlob", ()=>getBlob);
const SVG_DATA_URL_PATTERN = /^data:image\/svg\+xml/;
const SVG_URL_PATTERN = /\.svg((\?|#).*)?$/;
function isSVG(url) {
    return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));
}
function getBlobOrSVGDataUrl(arrayBuffer, url) {
    if (isSVG(url)) {
        const textDecoder = new TextDecoder();
        let xmlText = textDecoder.decode(arrayBuffer);
        try {
            if (typeof unescape === 'function' && typeof encodeURIComponent === 'function') xmlText = unescape(encodeURIComponent(xmlText));
        } catch (error) {
            throw new Error(error.message);
        }
        const src = "data:image/svg+xml;base64,".concat(btoa(xmlText));
        return src;
    }
    return getBlob(arrayBuffer, url);
}
function getBlob(arrayBuffer, url) {
    if (isSVG(url)) throw new Error('SVG cannot be parsed directly to imagebitmap');
    return new Blob([
        new Uint8Array(arrayBuffer)
    ]);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"61hdD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseToImageBitmap", ()=>parseToImageBitmap);
var _svgUtils = require("./svg-utils");
var _parseToImage = require("./parse-to-image");
const EMPTY_OBJECT = {};
let imagebitmapOptionsSupported = true;
async function parseToImageBitmap(arrayBuffer, options, url) {
    let blob;
    if ((0, _svgUtils.isSVG)(url)) {
        const image = await (0, _parseToImage.parseToImage)(arrayBuffer, options, url);
        blob = image;
    } else blob = (0, _svgUtils.getBlob)(arrayBuffer, url);
    const imagebitmapOptions = options && options.imagebitmap;
    return await safeCreateImageBitmap(blob, imagebitmapOptions);
}
async function safeCreateImageBitmap(blob) {
    let imagebitmapOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) imagebitmapOptions = null;
    if (imagebitmapOptions) try {
        return await createImageBitmap(blob, imagebitmapOptions);
    } catch (error) {
        console.warn(error);
        imagebitmapOptionsSupported = false;
    }
    return await createImageBitmap(blob);
}
function isEmptyObject(object) {
    for(const key in object || EMPTY_OBJECT)return false;
    return true;
}

},{"./svg-utils":"dK6sP","./parse-to-image":"ftWqe","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kwsxV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseToNodeImage", ()=>parseToNodeImage);
var _loaderUtils = require("@loaders.gl/loader-utils");
var _binaryImageApi = require("../category-api/binary-image-api");
async function parseToNodeImage(arrayBuffer, options) {
    const { mimeType } = (0, _binaryImageApi.getBinaryImageMetadata)(arrayBuffer) || {};
    const _parseImageNode = globalThis._parseImageNode;
    (0, _loaderUtils.assert)(_parseImageNode);
    return await _parseImageNode(arrayBuffer, mimeType);
}

},{"@loaders.gl/loader-utils":"fYBuJ","../category-api/binary-image-api":"44zKX","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"44zKX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBinaryImageMetadata", ()=>getBinaryImageMetadata);
parcelHelpers.export(exports, "getBmpMetadata", ()=>getBmpMetadata);
var _parseIsobmffBinary = require("./parse-isobmff-binary");
const BIG_ENDIAN = false;
const LITTLE_ENDIAN = true;
function getBinaryImageMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    return getPngMetadata(dataView) || getJpegMetadata(dataView) || getGifMetadata(dataView) || getBmpMetadata(dataView) || getISOBMFFMetadata(dataView);
}
function getISOBMFFMetadata(binaryData) {
    const buffer = new Uint8Array(binaryData instanceof DataView ? binaryData.buffer : binaryData);
    const mediaType = (0, _parseIsobmffBinary.getISOBMFFMediaType)(buffer);
    if (!mediaType) return null;
    return {
        mimeType: mediaType.mimeType,
        width: 0,
        height: 0
    };
}
function getPngMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;
    if (!isPng) return null;
    return {
        mimeType: 'image/png',
        width: dataView.getUint32(16, BIG_ENDIAN),
        height: dataView.getUint32(20, BIG_ENDIAN)
    };
}
function getGifMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;
    if (!isGif) return null;
    return {
        mimeType: 'image/gif',
        width: dataView.getUint16(6, LITTLE_ENDIAN),
        height: dataView.getUint16(8, LITTLE_ENDIAN)
    };
}
function getBmpMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    const isBmp = dataView.byteLength >= 14 && dataView.getUint16(0, BIG_ENDIAN) === 0x424d && dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;
    if (!isBmp) return null;
    return {
        mimeType: 'image/bmp',
        width: dataView.getUint32(18, LITTLE_ENDIAN),
        height: dataView.getUint32(22, LITTLE_ENDIAN)
    };
}
function getJpegMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    const isJpeg = dataView.byteLength >= 3 && dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 && dataView.getUint8(2) === 0xff;
    if (!isJpeg) return null;
    const { tableMarkers, sofMarkers } = getJpegMarkers();
    let i = 2;
    while(i + 9 < dataView.byteLength){
        const marker = dataView.getUint16(i, BIG_ENDIAN);
        if (sofMarkers.has(marker)) return {
            mimeType: 'image/jpeg',
            height: dataView.getUint16(i + 5, BIG_ENDIAN),
            width: dataView.getUint16(i + 7, BIG_ENDIAN)
        };
        if (!tableMarkers.has(marker)) return null;
        i += 2;
        i += dataView.getUint16(i, BIG_ENDIAN);
    }
    return null;
}
function getJpegMarkers() {
    const tableMarkers = new Set([
        0xffdb,
        0xffc4,
        0xffcc,
        0xffdd,
        0xfffe
    ]);
    for(let i = 0xffe0; i < 0xfff0; ++i)tableMarkers.add(i);
    const sofMarkers = new Set([
        0xffc0,
        0xffc1,
        0xffc2,
        0xffc3,
        0xffc5,
        0xffc6,
        0xffc7,
        0xffc9,
        0xffca,
        0xffcb,
        0xffcd,
        0xffce,
        0xffcf,
        0xffde
    ]);
    return {
        tableMarkers,
        sofMarkers
    };
}
function toDataView(data) {
    if (data instanceof DataView) return data;
    if (ArrayBuffer.isView(data)) return new DataView(data.buffer);
    if (data instanceof ArrayBuffer) return new DataView(data);
    throw new Error('toDataView');
}

},{"./parse-isobmff-binary":"kEFoF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kEFoF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getISOBMFFMediaType", ()=>getISOBMFFMediaType);
parcelHelpers.export(exports, "decodeMajorBrand", ()=>decodeMajorBrand);
function getISOBMFFMediaType(buffer) {
    if (!checkString(buffer, 'ftyp', 4)) return null;
    if ((buffer[8] & 0x60) === 0x00) return null;
    return decodeMajorBrand(buffer);
}
function decodeMajorBrand(buffer) {
    const brandMajor = getUTF8String(buffer, 8, 12).replace('\0', ' ').trim();
    switch(brandMajor){
        case 'avif':
        case 'avis':
            return {
                extension: 'avif',
                mimeType: 'image/avif'
            };
        default:
            return null;
    }
}
function getUTF8String(array, start, end) {
    return String.fromCharCode(...array.slice(start, end));
}
function stringToBytes(string) {
    return [
        ...string
    ].map((character)=>character.charCodeAt(0));
}
function checkString(buffer, header) {
    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    const headerBytes = stringToBytes(header);
    for(let i = 0; i < headerBytes.length; ++i){
        if (headerBytes[i] !== buffer[i + offset]) return false;
    }
    return true;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"GqqVU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _log = require("@probe.gl/log");
exports.default = new (0, _log.Log)({
    id: 'deck'
});

},{"@probe.gl/log":"gabz3","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"h4a5l":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "register", ()=>register);
parcelHelpers.export(exports, "default", ()=>debug);
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _loggers = require("./loggers");
let loggers = {};
loggers = (0, _loggers.getLoggers)((0, _logDefault.default));
function register(handlers) {
    loggers = handlers;
}
function debug(eventType, arg1, arg2, arg3) {
    if ((0, _logDefault.default).level > 0 && loggers[eventType]) loggers[eventType].call(null, arg1, arg2, arg3);
}

},{"../utils/log":"GqqVU","./loggers":"9xMq8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9xMq8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getLoggers", ()=>getLoggers);
const logState = {
    attributeUpdateStart: -1,
    attributeManagerUpdateStart: -1,
    attributeUpdateMessages: []
};
const LOG_LEVEL_MAJOR_UPDATE = 1;
const LOG_LEVEL_MINOR_UPDATE = 2;
const LOG_LEVEL_UPDATE_DETAIL = 3;
const LOG_LEVEL_INFO = 4;
const LOG_LEVEL_DRAW = 2;
const getLoggers = (log)=>({
        'layer.changeFlag': (layer, key, flags)=>{
            log.log(LOG_LEVEL_UPDATE_DETAIL, "".concat(layer.id, " ").concat(key, ": "), flags[key])();
        },
        'layer.initialize': (layer)=>{
            log.log(LOG_LEVEL_MAJOR_UPDATE, "Initializing ".concat(layer))();
        },
        'layer.update': (layer, needsUpdate)=>{
            if (needsUpdate) {
                const flags = layer.getChangeFlags();
                log.log(LOG_LEVEL_MINOR_UPDATE, "Updating ".concat(layer, " because: ").concat(Object.keys(flags).filter((key)=>flags[key]).join(', ')))();
            } else log.log(LOG_LEVEL_INFO, "".concat(layer, " does not need update"))();
        },
        'layer.matched': (layer, changed)=>{
            if (changed) log.log(LOG_LEVEL_INFO, "Matched ".concat(layer, ", state transfered"))();
        },
        'layer.finalize': (layer)=>{
            log.log(LOG_LEVEL_MAJOR_UPDATE, "Finalizing ".concat(layer))();
        },
        'compositeLayer.renderLayers': (layer, updated, subLayers)=>{
            if (updated) log.log(LOG_LEVEL_MINOR_UPDATE, "Composite layer rendered new subLayers ".concat(layer), subLayers)();
            else log.log(LOG_LEVEL_INFO, "Composite layer reused subLayers ".concat(layer), subLayers)();
        },
        'layerManager.setLayers': (layerManager, updated, layers)=>{
            if (updated) log.log(LOG_LEVEL_MINOR_UPDATE, "Updating ".concat(layers.length, " deck layers"))();
        },
        'layerManager.activateViewport': (layerManager, viewport)=>{
            log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();
        },
        'attributeManager.invalidate': (attributeManager, trigger, attributeNames)=>{
            log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? "invalidated attributes ".concat(attributeNames, " (").concat(trigger, ") for ").concat(attributeManager.id) : "invalidated all attributes for ".concat(attributeManager.id))();
        },
        'attributeManager.updateStart': (attributeManager)=>{
            logState.attributeUpdateMessages.length = 0;
            logState.attributeManagerUpdateStart = Date.now();
        },
        'attributeManager.updateEnd': (attributeManager, numInstances)=>{
            const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);
            log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, "Updated attributes for ".concat(numInstances, " instances in ").concat(attributeManager.id, " in ").concat(timeMs, "ms"))();
            for (const updateMessage of logState.attributeUpdateMessages)log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();
            log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();
        },
        'attribute.updateStart': (attribute)=>{
            logState.attributeUpdateStart = Date.now();
        },
        'attribute.allocate': (attribute, numInstances)=>{
            const message = "".concat(attribute.id, " allocated ").concat(numInstances);
            logState.attributeUpdateMessages.push(message);
        },
        'attribute.updateEnd': (attribute, numInstances)=>{
            const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);
            const message = "".concat(attribute.id, " updated ").concat(numInstances, " in ").concat(timeMs, "ms");
            logState.attributeUpdateMessages.push(message);
        },
        'deckRenderer.renderLayers': (deckRenderer, renderStats, opts)=>{
            const { pass, redrawReason, stats } = opts;
            for (const status of renderStats){
                const { totalCount, visibleCount, compositeCount, pickableCount } = status;
                const primitiveCount = totalCount - compositeCount;
                const hiddenCount = primitiveCount - visibleCount;
                log.log(LOG_LEVEL_DRAW, "RENDER #".concat(deckRenderer.renderCount, "   ").concat(visibleCount, " (of ").concat(totalCount, " layers) to ").concat(pass, " because ").concat(redrawReason, "   (").concat(hiddenCount, " hidden, ").concat(compositeCount, " composite ").concat(pickableCount, " pickable)"))();
                if (stats) stats.get('Redraw Layers').add(visibleCount);
            }
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"j7GrB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function isJSON(text) {
    const firstChar = text[0];
    const lastChar = text[text.length - 1];
    return firstChar === '{' && lastChar === '}' || firstChar === '[' && lastChar === ']';
}
exports.default = {
    id: 'JSON',
    name: 'JSON',
    module: '',
    version: '',
    options: {},
    extensions: [
        'json',
        'geojson'
    ],
    mimeTypes: [
        'application/json',
        'application/geo+json'
    ],
    testText: isJSON,
    parseTextSync: JSON.parse
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lSdwU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COORDINATE_SYSTEM", ()=>COORDINATE_SYSTEM);
parcelHelpers.export(exports, "PROJECTION_MODE", ()=>PROJECTION_MODE);
parcelHelpers.export(exports, "UNIT", ()=>UNIT);
parcelHelpers.export(exports, "EVENTS", ()=>EVENTS);
parcelHelpers.export(exports, "OPERATION", ()=>OPERATION);
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
const COORDINATE_SYSTEM = {
    DEFAULT: -1,
    LNGLAT: 1,
    METER_OFFSETS: 2,
    LNGLAT_OFFSETS: 3,
    CARTESIAN: 0
};
Object.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {
    get: ()=>{
        (0, _logDefault.default).deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();
        return 0;
    }
});
const PROJECTION_MODE = {
    WEB_MERCATOR: 1,
    GLOBE: 2,
    WEB_MERCATOR_AUTO_OFFSET: 4,
    IDENTITY: 0
};
const UNIT = {
    common: 0,
    meters: 1,
    pixels: 2
};
const EVENTS = {
    click: {
        handler: 'onClick'
    },
    panstart: {
        handler: 'onDragStart'
    },
    panmove: {
        handler: 'onDrag'
    },
    panend: {
        handler: 'onDragEnd'
    }
};
const OPERATION = {
    DRAW: 'draw',
    MASK: 'mask',
    TERRAIN: 'terrain'
};

},{"../utils/log":"GqqVU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hGrwd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@luma.gl/core");
var _ambientLight = require("./ambient-light");
var _directionalLight = require("./directional-light");
var _core1 = require("@math.gl/core");
var _shadowPass = require("../../passes/shadow-pass");
var _shadowPassDefault = parcelHelpers.interopDefault(_shadowPass);
var _shadow = require("../../shaderlib/shadow/shadow");
var _shadowDefault = parcelHelpers.interopDefault(_shadow);
const DEFAULT_AMBIENT_LIGHT_PROPS = {
    color: [
        255,
        255,
        255
    ],
    intensity: 1.0
};
const DEFAULT_DIRECTIONAL_LIGHT_PROPS = [
    {
        color: [
            255,
            255,
            255
        ],
        intensity: 1.0,
        direction: [
            -1,
            3,
            -1
        ]
    },
    {
        color: [
            255,
            255,
            255
        ],
        intensity: 0.9,
        direction: [
            1,
            -8,
            -2.5
        ]
    }
];
const DEFAULT_SHADOW_COLOR = [
    0,
    0,
    0,
    200 / 255
];
class LightingEffect {
    constructor(props = {}){
        (0, _definePropertyDefault.default)(this, "id", 'lighting-effect');
        (0, _definePropertyDefault.default)(this, "props", void 0);
        (0, _definePropertyDefault.default)(this, "shadowColor", DEFAULT_SHADOW_COLOR);
        (0, _definePropertyDefault.default)(this, "shadow", void 0);
        (0, _definePropertyDefault.default)(this, "ambientLight", void 0);
        (0, _definePropertyDefault.default)(this, "directionalLights", void 0);
        (0, _definePropertyDefault.default)(this, "pointLights", void 0);
        (0, _definePropertyDefault.default)(this, "shadowPasses", []);
        (0, _definePropertyDefault.default)(this, "shadowMaps", []);
        (0, _definePropertyDefault.default)(this, "dummyShadowMap", null);
        (0, _definePropertyDefault.default)(this, "programManager", void 0);
        (0, _definePropertyDefault.default)(this, "shadowMatrices", void 0);
        this.setProps(props);
    }
    setProps(props) {
        this.ambientLight = null;
        this.directionalLights = [];
        this.pointLights = [];
        for(const key in props){
            const lightSource = props[key];
            switch(lightSource.type){
                case 'ambient':
                    this.ambientLight = lightSource;
                    break;
                case 'directional':
                    this.directionalLights.push(lightSource);
                    break;
                case 'point':
                    this.pointLights.push(lightSource);
                    break;
                default:
            }
        }
        this._applyDefaultLights();
        this.shadow = this.directionalLights.some((light)=>light.shadow);
        this.props = props;
    }
    preRender(gl, { layers, layerFilter, viewports, onViewportActive, views }) {
        if (!this.shadow) return;
        this.shadowMatrices = this._calculateMatrices();
        if (this.shadowPasses.length === 0) this._createShadowPasses(gl);
        if (!this.programManager) {
            this.programManager = (0, _core.ProgramManager).getDefaultProgramManager(gl);
            if (0, _shadowDefault.default) this.programManager.addDefaultModule((0, _shadowDefault.default));
        }
        if (!this.dummyShadowMap) this.dummyShadowMap = new (0, _core.Texture2D)(gl, {
            width: 1,
            height: 1
        });
        for(let i = 0; i < this.shadowPasses.length; i++){
            const shadowPass = this.shadowPasses[i];
            shadowPass.render({
                layers,
                layerFilter,
                viewports,
                onViewportActive,
                views,
                moduleParameters: {
                    shadowLightId: i,
                    dummyShadowMap: this.dummyShadowMap,
                    shadowMatrices: this.shadowMatrices
                }
            });
        }
    }
    getModuleParameters(layer) {
        const parameters = this.shadow ? {
            shadowMaps: this.shadowMaps,
            dummyShadowMap: this.dummyShadowMap,
            shadowColor: this.shadowColor,
            shadowMatrices: this.shadowMatrices
        } : {};
        parameters.lightSources = {
            ambientLight: this.ambientLight,
            directionalLights: this.directionalLights.map((directionalLight)=>directionalLight.getProjectedLight({
                    layer
                })),
            pointLights: this.pointLights.map((pointLight)=>pointLight.getProjectedLight({
                    layer
                }))
        };
        return parameters;
    }
    cleanup() {
        for (const shadowPass of this.shadowPasses)shadowPass.delete();
        this.shadowPasses.length = 0;
        this.shadowMaps.length = 0;
        if (this.dummyShadowMap) {
            this.dummyShadowMap.delete();
            this.dummyShadowMap = null;
        }
        if (this.shadow && this.programManager) {
            this.programManager.removeDefaultModule((0, _shadowDefault.default));
            this.programManager = null;
        }
    }
    _calculateMatrices() {
        const lightMatrices = [];
        for (const light of this.directionalLights){
            const viewMatrix = new (0, _core1.Matrix4)().lookAt({
                eye: new (0, _core1.Vector3)(light.direction).negate()
            });
            lightMatrices.push(viewMatrix);
        }
        return lightMatrices;
    }
    _createShadowPasses(gl) {
        for(let i = 0; i < this.directionalLights.length; i++){
            const shadowPass = new (0, _shadowPassDefault.default)(gl);
            this.shadowPasses[i] = shadowPass;
            this.shadowMaps[i] = shadowPass.shadowMap;
        }
    }
    _applyDefaultLights() {
        const { ambientLight, pointLights, directionalLights } = this;
        if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {
            this.ambientLight = new (0, _ambientLight.AmbientLight)(DEFAULT_AMBIENT_LIGHT_PROPS);
            this.directionalLights.push(new (0, _directionalLight.DirectionalLight)(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]), new (0, _directionalLight.DirectionalLight)(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));
        }
    }
}
exports.default = LightingEffect;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@luma.gl/core":"9rnrC","./ambient-light":"ddOfn","./directional-light":"6dzYa","@math.gl/core":"e2A67","../../passes/shadow-pass":"24bSq","../../shaderlib/shadow/shadow":"4AbP4","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9rnrC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGLContext", ()=>(0, _gltools.createGLContext));
parcelHelpers.export(exports, "instrumentGLContext", ()=>(0, _gltools.instrumentGLContext));
parcelHelpers.export(exports, "isWebGL", ()=>(0, _gltools.isWebGL));
parcelHelpers.export(exports, "isWebGL2", ()=>(0, _gltools.isWebGL2));
parcelHelpers.export(exports, "getParameters", ()=>(0, _gltools.getParameters));
parcelHelpers.export(exports, "setParameters", ()=>(0, _gltools.setParameters));
parcelHelpers.export(exports, "withParameters", ()=>(0, _gltools.withParameters));
parcelHelpers.export(exports, "resetParameters", ()=>(0, _gltools.resetParameters));
parcelHelpers.export(exports, "cssToDeviceRatio", ()=>(0, _gltools.cssToDeviceRatio));
parcelHelpers.export(exports, "cssToDevicePixels", ()=>(0, _gltools.cssToDevicePixels));
parcelHelpers.export(exports, "lumaStats", ()=>(0, _webgl.lumaStats));
parcelHelpers.export(exports, "FEATURES", ()=>(0, _webgl.FEATURES));
parcelHelpers.export(exports, "hasFeature", ()=>(0, _webgl.hasFeature));
parcelHelpers.export(exports, "hasFeatures", ()=>(0, _webgl.hasFeatures));
parcelHelpers.export(exports, "Buffer", ()=>(0, _webgl.Buffer));
parcelHelpers.export(exports, "Program", ()=>(0, _webgl.Program));
parcelHelpers.export(exports, "Framebuffer", ()=>(0, _webgl.Framebuffer));
parcelHelpers.export(exports, "Renderbuffer", ()=>(0, _webgl.Renderbuffer));
parcelHelpers.export(exports, "Texture2D", ()=>(0, _webgl.Texture2D));
parcelHelpers.export(exports, "TextureCube", ()=>(0, _webgl.TextureCube));
parcelHelpers.export(exports, "VertexShader", ()=>(0, _webgl.VertexShader));
parcelHelpers.export(exports, "FragmentShader", ()=>(0, _webgl.FragmentShader));
parcelHelpers.export(exports, "clear", ()=>(0, _webgl.clear));
parcelHelpers.export(exports, "readPixelsToArray", ()=>(0, _webgl.readPixelsToArray));
parcelHelpers.export(exports, "readPixelsToBuffer", ()=>(0, _webgl.readPixelsToBuffer));
parcelHelpers.export(exports, "cloneTextureFrom", ()=>(0, _webgl.cloneTextureFrom));
parcelHelpers.export(exports, "copyToTexture", ()=>(0, _webgl.copyToTexture));
parcelHelpers.export(exports, "Texture3D", ()=>(0, _webgl.Texture3D));
parcelHelpers.export(exports, "TransformFeedback", ()=>(0, _webgl.TransformFeedback));
parcelHelpers.export(exports, "AnimationLoop", ()=>(0, _engine.AnimationLoop));
parcelHelpers.export(exports, "Model", ()=>(0, _engine.Model));
parcelHelpers.export(exports, "Transform", ()=>(0, _engine.Transform));
parcelHelpers.export(exports, "ProgramManager", ()=>(0, _engine.ProgramManager));
parcelHelpers.export(exports, "Timeline", ()=>(0, _engine.Timeline));
parcelHelpers.export(exports, "Geometry", ()=>(0, _engine.Geometry));
parcelHelpers.export(exports, "ClipSpace", ()=>(0, _engine.ClipSpace));
parcelHelpers.export(exports, "ConeGeometry", ()=>(0, _engine.ConeGeometry));
parcelHelpers.export(exports, "CubeGeometry", ()=>(0, _engine.CubeGeometry));
parcelHelpers.export(exports, "CylinderGeometry", ()=>(0, _engine.CylinderGeometry));
parcelHelpers.export(exports, "IcoSphereGeometry", ()=>(0, _engine.IcoSphereGeometry));
parcelHelpers.export(exports, "PlaneGeometry", ()=>(0, _engine.PlaneGeometry));
parcelHelpers.export(exports, "SphereGeometry", ()=>(0, _engine.SphereGeometry));
parcelHelpers.export(exports, "TruncatedConeGeometry", ()=>(0, _engine.TruncatedConeGeometry));
parcelHelpers.export(exports, "normalizeShaderModule", ()=>(0, _shadertools.normalizeShaderModule));
parcelHelpers.export(exports, "fp32", ()=>(0, _shadertools.fp32));
parcelHelpers.export(exports, "fp64", ()=>(0, _shadertools.fp64));
parcelHelpers.export(exports, "project", ()=>(0, _shadertools.project));
parcelHelpers.export(exports, "dirlight", ()=>(0, _shadertools.dirlight));
parcelHelpers.export(exports, "picking", ()=>(0, _shadertools.picking));
parcelHelpers.export(exports, "gouraudLighting", ()=>(0, _shadertools.gouraudLighting));
parcelHelpers.export(exports, "phongLighting", ()=>(0, _shadertools.phongLighting));
parcelHelpers.export(exports, "pbr", ()=>(0, _shadertools.pbr));
parcelHelpers.export(exports, "log", ()=>(0, _webgl.log));
parcelHelpers.export(exports, "assert", ()=>(0, _webgl.assert));
parcelHelpers.export(exports, "uid", ()=>(0, _webgl.uid));
var _gltools = require("@luma.gl/gltools");
var _webgl = require("@luma.gl/webgl");
var _engine = require("@luma.gl/engine");
var _shadertools = require("@luma.gl/shadertools");

},{"@luma.gl/gltools":"4jTOy","@luma.gl/webgl":"bcvb8","@luma.gl/engine":"7fyJq","@luma.gl/shadertools":"4858B","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4jTOy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log", ()=>(0, _log.log));
parcelHelpers.export(exports, "isWebGL", ()=>(0, _webglChecks.isWebGL));
parcelHelpers.export(exports, "isWebGL2", ()=>(0, _webglChecks.isWebGL2));
parcelHelpers.export(exports, "getWebGL2Context", ()=>(0, _webglChecks.getWebGL2Context));
parcelHelpers.export(exports, "assertWebGLContext", ()=>(0, _webglChecks.assertWebGLContext));
parcelHelpers.export(exports, "assertWebGL2Context", ()=>(0, _webglChecks.assertWebGL2Context));
parcelHelpers.export(exports, "polyfillContext", ()=>(0, _polyfillContext.polyfillContext));
parcelHelpers.export(exports, "getParameters", ()=>(0, _unifiedParameterApi.getParameters));
parcelHelpers.export(exports, "setParameters", ()=>(0, _unifiedParameterApi.setParameters));
parcelHelpers.export(exports, "resetParameters", ()=>(0, _unifiedParameterApi.resetParameters));
parcelHelpers.export(exports, "withParameters", ()=>(0, _unifiedParameterApi.withParameters));
parcelHelpers.export(exports, "trackContextState", ()=>(0, _trackContextState.trackContextState));
parcelHelpers.export(exports, "pushContextState", ()=>(0, _trackContextState.pushContextState));
parcelHelpers.export(exports, "popContextState", ()=>(0, _trackContextState.popContextState));
parcelHelpers.export(exports, "createGLContext", ()=>(0, _context.createGLContext));
parcelHelpers.export(exports, "resizeGLContext", ()=>(0, _context.resizeGLContext));
parcelHelpers.export(exports, "instrumentGLContext", ()=>(0, _context.instrumentGLContext));
parcelHelpers.export(exports, "getContextDebugInfo", ()=>(0, _context.getContextDebugInfo));
parcelHelpers.export(exports, "cssToDeviceRatio", ()=>(0, _devicePixels.cssToDeviceRatio));
parcelHelpers.export(exports, "cssToDevicePixels", ()=>(0, _devicePixels.cssToDevicePixels));
var _log = require("./utils/log");
var _webglChecks = require("./utils/webgl-checks");
var _polyfillContext = require("./polyfill/polyfill-context");
var _unifiedParameterApi = require("./state-tracker/unified-parameter-api");
var _trackContextState = require("./state-tracker/track-context-state");
var _context = require("./context/context");
var _devicePixels = require("./utils/device-pixels");

},{"./utils/log":"b62tU","./utils/webgl-checks":"biWnv","./polyfill/polyfill-context":"5sulp","./state-tracker/unified-parameter-api":"7VRvv","./state-tracker/track-context-state":"g8GZv","./context/context":"fiwa9","./utils/device-pixels":"fHntV","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"b62tU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log", ()=>log);
var _log = require("@probe.gl/log");
const log = new (0, _log.Log)({
    id: 'luma.gl'
});

},{"@probe.gl/log":"gabz3","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"biWnv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ERR_WEBGL", ()=>ERR_WEBGL);
parcelHelpers.export(exports, "ERR_WEBGL2", ()=>ERR_WEBGL2);
parcelHelpers.export(exports, "isWebGL", ()=>isWebGL);
parcelHelpers.export(exports, "isWebGL2", ()=>isWebGL2);
parcelHelpers.export(exports, "getWebGL2Context", ()=>getWebGL2Context);
parcelHelpers.export(exports, "assertWebGLContext", ()=>assertWebGLContext);
parcelHelpers.export(exports, "assertWebGL2Context", ()=>assertWebGL2Context);
var _assert = require("./assert");
const ERR_CONTEXT = 'Invalid WebGLRenderingContext';
const ERR_WEBGL = ERR_CONTEXT;
const ERR_WEBGL2 = 'Requires WebGL2';
function isWebGL(gl) {
    if (typeof WebGLRenderingContext !== 'undefined' && gl instanceof WebGLRenderingContext) return true;
    if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) return true;
    return Boolean(gl && Number.isFinite(gl._version));
}
function isWebGL2(gl) {
    if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) return true;
    return Boolean(gl && gl._version === 2);
}
function getWebGL2Context(gl) {
    return isWebGL2(gl) ? gl : null;
}
function assertWebGLContext(gl) {
    (0, _assert.assert)(isWebGL(gl), ERR_CONTEXT);
    return gl;
}
function assertWebGL2Context(gl) {
    (0, _assert.assert)(isWebGL2(gl), ERR_WEBGL2);
    return gl;
}

},{"./assert":"hYgqY","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hYgqY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message || 'luma.gl: assertion failed.');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5sulp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "polyfillContext", ()=>polyfillContext);
var _polyfillVertexArrayObject = require("./polyfill-vertex-array-object");
var _assert = require("../utils/assert");
var _polyfillTable = require("./polyfill-table");
function polyfillContext(gl) {
    gl.luma = gl.luma || {};
    const { luma } = gl;
    if (!luma.polyfilled) {
        (0, _polyfillVertexArrayObject.polyfillVertexArrayObject)(gl);
        initializeExtensions(gl);
        installPolyfills(gl, (0, _polyfillTable.WEBGL2_CONTEXT_POLYFILLS));
        installOverrides(gl, {
            target: luma,
            target2: gl
        });
        luma.polyfilled = true;
    }
    return gl;
}
globalThis.polyfillContext = polyfillContext;
function initializeExtensions(gl) {
    gl.luma.extensions = {};
    const EXTENSIONS = gl.getSupportedExtensions() || [];
    for (const extension of EXTENSIONS)gl.luma[extension] = gl.getExtension(extension);
}
function installOverrides(gl, _ref) {
    let { target, target2 } = _ref;
    Object.keys((0, _polyfillTable.WEBGL2_CONTEXT_OVERRIDES)).forEach((key)=>{
        if (typeof (0, _polyfillTable.WEBGL2_CONTEXT_OVERRIDES)[key] === 'function') {
            const originalFunc = gl[key] ? gl[key].bind(gl) : ()=>{};
            const polyfill = (0, _polyfillTable.WEBGL2_CONTEXT_OVERRIDES)[key].bind(null, gl, originalFunc);
            target[key] = polyfill;
            target2[key] = polyfill;
        }
    });
}
function installPolyfills(gl, polyfills) {
    for (const extension of Object.getOwnPropertyNames(polyfills))if (extension !== 'overrides') polyfillExtension(gl, {
        extension,
        target: gl.luma,
        target2: gl
    });
}
function polyfillExtension(gl, _ref2) {
    let { extension, target, target2 } = _ref2;
    const defaults = (0, _polyfillTable.WEBGL2_CONTEXT_POLYFILLS)[extension];
    (0, _assert.assert)(defaults);
    const { meta = {} } = defaults;
    const { suffix = '' } = meta;
    const ext = gl.getExtension(extension);
    for (const key of Object.keys(defaults)){
        const extKey = "".concat(key).concat(suffix);
        let polyfill = null;
        if (key === 'meta') ;
        else if (typeof gl[key] === 'function') ;
        else if (ext && typeof ext[extKey] === 'function') polyfill = function() {
            return ext[extKey](...arguments);
        };
        else if (typeof defaults[key] === 'function') polyfill = defaults[key].bind(target);
        if (polyfill) {
            target[key] = polyfill;
            target2[key] = polyfill;
        }
    }
}

},{"./polyfill-vertex-array-object":"2ssv7","../utils/assert":"hYgqY","./polyfill-table":"2LTt6","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2ssv7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "polyfillVertexArrayObject", ()=>polyfillVertexArrayObject);
const glErrorShadow = {};
function error(msg) {
    if (globalThis.console && globalThis.console.error) globalThis.console.error(msg);
}
function log(msg) {
    if (globalThis.console && globalThis.console.log) globalThis.console.log(msg);
}
function synthesizeGLError(err, opt_msg) {
    glErrorShadow[err] = true;
    if (opt_msg !== undefined) error(opt_msg);
}
function wrapGLError(gl) {
    const f = gl.getError;
    gl.getError = function getError() {
        let err;
        do {
            err = f.apply(gl);
            if (err !== 0) glErrorShadow[err] = true;
        }while (err !== 0);
        for(err in glErrorShadow)if (glErrorShadow[err]) {
            delete glErrorShadow[err];
            return parseInt(err, 10);
        }
        return 0;
    };
}
const WebGLVertexArrayObjectOES = function WebGLVertexArrayObjectOES(ext) {
    const gl = ext.gl;
    this.ext = ext;
    this.isAlive = true;
    this.hasBeenBound = false;
    this.elementArrayBuffer = null;
    this.attribs = new Array(ext.maxVertexAttribs);
    for(let n = 0; n < this.attribs.length; n++){
        const attrib = new WebGLVertexArrayObjectOES.VertexAttrib(gl);
        this.attribs[n] = attrib;
    }
    this.maxAttrib = 0;
};
WebGLVertexArrayObjectOES.VertexAttrib = function VertexAttrib(gl) {
    this.enabled = false;
    this.buffer = null;
    this.size = 4;
    this.type = 5126;
    this.normalized = false;
    this.stride = 16;
    this.offset = 0;
    this.cached = '';
    this.recache();
};
WebGLVertexArrayObjectOES.VertexAttrib.prototype.recache = function recache() {
    this.cached = [
        this.size,
        this.type,
        this.normalized,
        this.stride,
        this.offset
    ].join(':');
};
const OESVertexArrayObject = function OESVertexArrayObject(gl) {
    const self = this;
    this.gl = gl;
    wrapGLError(gl);
    const original = this.original = {
        getParameter: gl.getParameter,
        enableVertexAttribArray: gl.enableVertexAttribArray,
        disableVertexAttribArray: gl.disableVertexAttribArray,
        bindBuffer: gl.bindBuffer,
        getVertexAttrib: gl.getVertexAttrib,
        vertexAttribPointer: gl.vertexAttribPointer
    };
    gl.getParameter = function getParameter(pname) {
        if (pname === self.VERTEX_ARRAY_BINDING_OES) {
            if (self.currentVertexArrayObject === self.defaultVertexArrayObject) return null;
            return self.currentVertexArrayObject;
        }
        return original.getParameter.apply(this, arguments);
    };
    gl.enableVertexAttribArray = function enableVertexAttribArray(index) {
        const vao = self.currentVertexArrayObject;
        vao.maxAttrib = Math.max(vao.maxAttrib, index);
        const attrib = vao.attribs[index];
        attrib.enabled = true;
        return original.enableVertexAttribArray.apply(this, arguments);
    };
    gl.disableVertexAttribArray = function disableVertexAttribArray(index) {
        const vao = self.currentVertexArrayObject;
        vao.maxAttrib = Math.max(vao.maxAttrib, index);
        const attrib = vao.attribs[index];
        attrib.enabled = false;
        return original.disableVertexAttribArray.apply(this, arguments);
    };
    gl.bindBuffer = function bindBuffer(target, buffer) {
        switch(target){
            case 34962:
                self.currentArrayBuffer = buffer;
                break;
            case 34963:
                self.currentVertexArrayObject.elementArrayBuffer = buffer;
                break;
            default:
        }
        return original.bindBuffer.apply(this, arguments);
    };
    gl.getVertexAttrib = function getVertexAttrib(index, pname) {
        const vao = self.currentVertexArrayObject;
        const attrib = vao.attribs[index];
        switch(pname){
            case 34975:
                return attrib.buffer;
            case 34338:
                return attrib.enabled;
            case 34339:
                return attrib.size;
            case 34340:
                return attrib.stride;
            case 34341:
                return attrib.type;
            case 34922:
                return attrib.normalized;
            default:
                return original.getVertexAttrib.apply(this, arguments);
        }
    };
    gl.vertexAttribPointer = function vertexAttribPointer(indx, size, type, normalized, stride, offset) {
        const vao = self.currentVertexArrayObject;
        vao.maxAttrib = Math.max(vao.maxAttrib, indx);
        const attrib = vao.attribs[indx];
        attrib.buffer = self.currentArrayBuffer;
        attrib.size = size;
        attrib.type = type;
        attrib.normalized = normalized;
        attrib.stride = stride;
        attrib.offset = offset;
        attrib.recache();
        return original.vertexAttribPointer.apply(this, arguments);
    };
    if (gl.instrumentExtension) gl.instrumentExtension(this, 'OES_vertex_array_object');
    if (gl.canvas) gl.canvas.addEventListener('webglcontextrestored', ()=>{
        log('OESVertexArrayObject emulation library context restored');
        self.reset_();
    }, true);
    this.reset_();
};
OESVertexArrayObject.prototype.VERTEX_ARRAY_BINDING_OES = 0x85b5;
OESVertexArrayObject.prototype.reset_ = function reset_() {
    const contextWasLost = this.vertexArrayObjects !== undefined;
    if (contextWasLost) for(let ii = 0; ii < this.vertexArrayObjects.length; ++ii)this.vertexArrayObjects.isAlive = false;
    const gl = this.gl;
    this.maxVertexAttribs = gl.getParameter(34921);
    this.defaultVertexArrayObject = new WebGLVertexArrayObjectOES(this);
    this.currentVertexArrayObject = null;
    this.currentArrayBuffer = null;
    this.vertexArrayObjects = [
        this.defaultVertexArrayObject
    ];
    this.bindVertexArrayOES(null);
};
OESVertexArrayObject.prototype.createVertexArrayOES = function createVertexArrayOES() {
    const arrayObject = new WebGLVertexArrayObjectOES(this);
    this.vertexArrayObjects.push(arrayObject);
    return arrayObject;
};
OESVertexArrayObject.prototype.deleteVertexArrayOES = function deleteVertexArrayOES(arrayObject) {
    arrayObject.isAlive = false;
    this.vertexArrayObjects.splice(this.vertexArrayObjects.indexOf(arrayObject), 1);
    if (this.currentVertexArrayObject === arrayObject) this.bindVertexArrayOES(null);
};
OESVertexArrayObject.prototype.isVertexArrayOES = function isVertexArrayOES(arrayObject) {
    if (arrayObject && arrayObject instanceof WebGLVertexArrayObjectOES) {
        if (arrayObject.hasBeenBound && arrayObject.ext === this) return true;
    }
    return false;
};
OESVertexArrayObject.prototype.bindVertexArrayOES = function bindVertexArrayOES(arrayObject) {
    const gl = this.gl;
    if (arrayObject && !arrayObject.isAlive) {
        synthesizeGLError(1282, 'bindVertexArrayOES: attempt to bind deleted arrayObject');
        return;
    }
    const original = this.original;
    const oldVAO = this.currentVertexArrayObject;
    this.currentVertexArrayObject = arrayObject || this.defaultVertexArrayObject;
    this.currentVertexArrayObject.hasBeenBound = true;
    const newVAO = this.currentVertexArrayObject;
    if (oldVAO === newVAO) return;
    if (!oldVAO || newVAO.elementArrayBuffer !== oldVAO.elementArrayBuffer) original.bindBuffer.call(gl, 34963, newVAO.elementArrayBuffer);
    let currentBinding = this.currentArrayBuffer;
    const maxAttrib = Math.max(oldVAO ? oldVAO.maxAttrib : 0, newVAO.maxAttrib);
    for(let n = 0; n <= maxAttrib; n++){
        const attrib = newVAO.attribs[n];
        const oldAttrib = oldVAO ? oldVAO.attribs[n] : null;
        if (!oldVAO || attrib.enabled !== oldAttrib.enabled) {
            if (attrib.enabled) original.enableVertexAttribArray.call(gl, n);
            else original.disableVertexAttribArray.call(gl, n);
        }
        if (attrib.enabled) {
            let bufferChanged = false;
            if (!oldVAO || attrib.buffer !== oldAttrib.buffer) {
                if (currentBinding !== attrib.buffer) {
                    original.bindBuffer.call(gl, 34962, attrib.buffer);
                    currentBinding = attrib.buffer;
                }
                bufferChanged = true;
            }
            if (bufferChanged || attrib.cached !== oldAttrib.cached) original.vertexAttribPointer.call(gl, n, attrib.size, attrib.type, attrib.normalized, attrib.stride, attrib.offset);
        }
    }
    if (this.currentArrayBuffer !== currentBinding) original.bindBuffer.call(gl, 34962, this.currentArrayBuffer);
};
function polyfillVertexArrayObject(gl) {
    if (typeof gl.createVertexArray === 'function') return;
    const original_getSupportedExtensions = gl.getSupportedExtensions;
    gl.getSupportedExtensions = function getSupportedExtensions() {
        const list = original_getSupportedExtensions.call(this) || [];
        if (list.indexOf('OES_vertex_array_object') < 0) list.push('OES_vertex_array_object');
        return list;
    };
    const original_getExtension = gl.getExtension;
    gl.getExtension = function getExtension(name) {
        const ext = original_getExtension.call(this, name);
        if (ext) return ext;
        if (name !== 'OES_vertex_array_object') return null;
        if (!gl.__OESVertexArrayObject) this.__OESVertexArrayObject = new OESVertexArrayObject(this);
        return this.__OESVertexArrayObject;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2LTt6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WEBGL2_CONTEXT_POLYFILLS", ()=>WEBGL2_CONTEXT_POLYFILLS);
parcelHelpers.export(exports, "WEBGL2_CONTEXT_OVERRIDES", ()=>WEBGL2_CONTEXT_OVERRIDES);
var _assert = require("../utils/assert");
var _webglChecks = require("../utils/webgl-checks");
var _getParameterPolyfill = require("./get-parameter-polyfill");
const OES_vertex_array_object = 'OES_vertex_array_object';
const ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';
const WEBGL_draw_buffers = 'WEBGL_draw_buffers';
const EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
const EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';
const ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';
function getExtensionData(gl, extension) {
    return {
        webgl2: (0, _webglChecks.isWebGL2)(gl),
        ext: gl.getExtension(extension)
    };
}
const WEBGL2_CONTEXT_POLYFILLS = {
    [OES_vertex_array_object]: {
        meta: {
            suffix: 'OES'
        },
        createVertexArray: ()=>{
            (0, _assert.assert)(false, ERR_VAO_NOT_SUPPORTED);
        },
        deleteVertexArray: ()=>{},
        bindVertexArray: ()=>{},
        isVertexArray: ()=>false
    },
    [ANGLE_instanced_arrays]: {
        meta: {
            suffix: 'ANGLE'
        },
        vertexAttribDivisor (location, divisor) {
            (0, _assert.assert)(divisor === 0, 'WebGL instanced rendering not supported');
        },
        drawElementsInstanced: ()=>{},
        drawArraysInstanced: ()=>{}
    },
    [WEBGL_draw_buffers]: {
        meta: {
            suffix: 'WEBGL'
        },
        drawBuffers: ()=>{
            (0, _assert.assert)(false);
        }
    },
    [EXT_disjoint_timer_query]: {
        meta: {
            suffix: 'EXT'
        },
        createQuery: ()=>{
            (0, _assert.assert)(false);
        },
        deleteQuery: ()=>{
            (0, _assert.assert)(false);
        },
        beginQuery: ()=>{
            (0, _assert.assert)(false);
        },
        endQuery: ()=>{},
        getQuery (handle, pname) {
            return this.getQueryObject(handle, pname);
        },
        getQueryParameter (handle, pname) {
            return this.getQueryObject(handle, pname);
        },
        getQueryObject: ()=>{}
    }
};
const WEBGL2_CONTEXT_OVERRIDES = {
    readBuffer: (gl, originalFunc, attachment)=>{
        if ((0, _webglChecks.isWebGL2)(gl)) originalFunc(attachment);
    },
    getVertexAttrib: (gl, originalFunc, location, pname)=>{
        const { webgl2, ext } = getExtensionData(gl, ANGLE_instanced_arrays);
        let result;
        switch(pname){
            case 35069:
                result = !webgl2 ? false : undefined;
                break;
            case 35070:
                result = !webgl2 && !ext ? 0 : undefined;
                break;
            default:
        }
        return result !== undefined ? result : originalFunc(location, pname);
    },
    getProgramParameter: (gl, originalFunc, program, pname)=>{
        if (!(0, _webglChecks.isWebGL2)(gl)) switch(pname){
            case 35967:
                return 35981;
            case 35971:
                return 0;
            case 35382:
                return 0;
            default:
        }
        return originalFunc(program, pname);
    },
    getInternalformatParameter: (gl, originalFunc, target, format, pname)=>{
        if (!(0, _webglChecks.isWebGL2)(gl)) switch(pname){
            case 32937:
                return new Int32Array([
                    0
                ]);
            default:
        }
        return gl.getInternalformatParameter(target, format, pname);
    },
    getTexParameter (gl, originalFunc, target, pname) {
        switch(pname){
            case 34046:
                const { extensions } = gl.luma;
                const ext = extensions[EXT_texture_filter_anisotropic];
                pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || 34046;
                break;
            default:
        }
        return originalFunc(target, pname);
    },
    getParameter: (0, _getParameterPolyfill.getParameterPolyfill),
    hint (gl, originalFunc, pname, value) {
        return originalFunc(pname, value);
    }
};

},{"../utils/assert":"hYgqY","../utils/webgl-checks":"biWnv","./get-parameter-polyfill":"1LcFK","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1LcFK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getParameterPolyfill", ()=>getParameterPolyfill);
var _webglChecks = require("../utils/webgl-checks");
const OES_element_index = 'OES_element_index';
const WEBGL_draw_buffers = 'WEBGL_draw_buffers';
const EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
const EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';
const EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';
const WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;
const GL_DONT_CARE = 0x1100;
const GL_GPU_DISJOINT_EXT = 0x8fbb;
const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;
const GL_UNMASKED_VENDOR_WEBGL = 0x9245;
const GL_UNMASKED_RENDERER_WEBGL = 0x9246;
const getWebGL2ValueOrZero = (gl)=>!(0, _webglChecks.isWebGL2)(gl) ? 0 : undefined;
const WEBGL_PARAMETERS = {
    [3074]: (gl)=>!(0, _webglChecks.isWebGL2)(gl) ? 36064 : undefined,
    [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: (gl)=>!(0, _webglChecks.isWebGL2)(gl) ? GL_DONT_CARE : undefined,
    [35977]: getWebGL2ValueOrZero,
    [32937]: getWebGL2ValueOrZero,
    [GL_GPU_DISJOINT_EXT]: (gl, getParameter)=>{
        const ext = (0, _webglChecks.isWebGL2)(gl) ? gl.getExtension(EXT_disjoint_timer_query_webgl2) : gl.getExtension(EXT_disjoint_timer_query);
        return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;
    },
    [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter)=>{
        const ext = gl.getExtension(WEBGL_debug_renderer_info);
        return getParameter(ext && ext.UNMASKED_VENDOR_WEBGL || 7936);
    },
    [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter)=>{
        const ext = gl.getExtension(WEBGL_debug_renderer_info);
        return getParameter(ext && ext.UNMASKED_RENDERER_WEBGL || 7937);
    },
    [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter)=>{
        const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];
        return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;
    },
    [32883]: getWebGL2ValueOrZero,
    [35071]: getWebGL2ValueOrZero,
    [37447]: getWebGL2ValueOrZero,
    [36063]: (gl, getParameter)=>{
        if (!(0, _webglChecks.isWebGL2)(gl)) {
            const ext = gl.getExtension(WEBGL_draw_buffers);
            return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;
        }
        return undefined;
    },
    [35379]: getWebGL2ValueOrZero,
    [35374]: getWebGL2ValueOrZero,
    [35377]: getWebGL2ValueOrZero,
    [34852]: (gl)=>{
        if (!(0, _webglChecks.isWebGL2)(gl)) {
            const ext = gl.getExtension(WEBGL_draw_buffers);
            return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;
        }
        return undefined;
    },
    [36203]: (gl)=>gl.getExtension(OES_element_index) ? 2147483647 : 65535,
    [33001]: (gl)=>gl.getExtension(OES_element_index) ? 16777216 : 65535,
    [33000]: (gl)=>16777216,
    [37157]: getWebGL2ValueOrZero,
    [35373]: getWebGL2ValueOrZero,
    [35657]: getWebGL2ValueOrZero,
    [36183]: getWebGL2ValueOrZero,
    [37137]: getWebGL2ValueOrZero,
    [34045]: getWebGL2ValueOrZero,
    [35978]: getWebGL2ValueOrZero,
    [35979]: getWebGL2ValueOrZero,
    [35968]: getWebGL2ValueOrZero,
    [35376]: getWebGL2ValueOrZero,
    [35375]: getWebGL2ValueOrZero,
    [35659]: getWebGL2ValueOrZero,
    [37154]: getWebGL2ValueOrZero,
    [35371]: getWebGL2ValueOrZero,
    [35658]: getWebGL2ValueOrZero,
    [35076]: getWebGL2ValueOrZero,
    [35077]: getWebGL2ValueOrZero,
    [35380]: getWebGL2ValueOrZero
};
function getParameterPolyfill(gl, originalGetParameter, pname) {
    const limit = WEBGL_PARAMETERS[pname];
    const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;
    const result = value !== undefined ? value : originalGetParameter(pname);
    return result;
}

},{"../utils/webgl-checks":"biWnv","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7VRvv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setParameters", ()=>setParameters);
parcelHelpers.export(exports, "getParameters", ()=>getParameters);
parcelHelpers.export(exports, "resetParameters", ()=>resetParameters);
parcelHelpers.export(exports, "withParameters", ()=>withParameters);
var _webglParameterTables = require("./webgl-parameter-tables");
var _trackContextState = require("./track-context-state");
var _assert = require("../utils/assert");
var _webglChecks = require("../utils/webgl-checks");
var _utils = require("../utils/utils");
function setParameters(gl, values) {
    (0, _assert.assert)((0, _webglChecks.isWebGL)(gl), 'setParameters requires a WebGL context');
    if ((0, _utils.isObjectEmpty)(values)) return;
    const compositeSetters = {};
    for(const key in values){
        const glConstant = Number(key);
        const setter = (0, _webglParameterTables.GL_PARAMETER_SETTERS)[key];
        if (setter) {
            if (typeof setter === 'string') compositeSetters[setter] = true;
            else setter(gl, values[key], glConstant);
        }
    }
    const cache = gl.state && gl.state.cache;
    if (cache) for(const key in compositeSetters){
        const compositeSetter = (0, _webglParameterTables.GL_COMPOSITE_PARAMETER_SETTERS)[key];
        compositeSetter(gl, values, cache);
    }
}
function getParameters(gl, parameters) {
    parameters = parameters || (0, _webglParameterTables.GL_PARAMETER_DEFAULTS);
    if (typeof parameters === 'number') {
        const key = parameters;
        const getter = (0, _webglParameterTables.GL_PARAMETER_GETTERS)[key];
        return getter ? getter(gl, key) : gl.getParameter(key);
    }
    const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);
    const state = {};
    for (const key of parameterKeys){
        const getter = (0, _webglParameterTables.GL_PARAMETER_GETTERS)[key];
        state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
    }
    return state;
}
function resetParameters(gl) {
    setParameters(gl, (0, _webglParameterTables.GL_PARAMETER_DEFAULTS));
}
function withParameters(gl, parameters, func) {
    if ((0, _utils.isObjectEmpty)(parameters)) return func(gl);
    const { nocatch = true } = parameters;
    (0, _trackContextState.pushContextState)(gl);
    setParameters(gl, parameters);
    let value;
    if (nocatch) {
        value = func(gl);
        (0, _trackContextState.popContextState)(gl);
    } else try {
        value = func(gl);
    } finally{
        (0, _trackContextState.popContextState)(gl);
    }
    return value;
}

},{"./webgl-parameter-tables":"hbost","./track-context-state":"g8GZv","../utils/assert":"hYgqY","../utils/webgl-checks":"biWnv","../utils/utils":"iy9eJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hbost":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GL_PARAMETER_DEFAULTS", ()=>GL_PARAMETER_DEFAULTS);
parcelHelpers.export(exports, "GL_PARAMETER_SETTERS", ()=>GL_PARAMETER_SETTERS);
parcelHelpers.export(exports, "GL_COMPOSITE_PARAMETER_SETTERS", ()=>GL_COMPOSITE_PARAMETER_SETTERS);
parcelHelpers.export(exports, "GL_HOOKED_SETTERS", ()=>GL_HOOKED_SETTERS);
parcelHelpers.export(exports, "GL_PARAMETER_GETTERS", ()=>GL_PARAMETER_GETTERS);
var _webglChecks = require("../utils/webgl-checks");
const GL_PARAMETER_DEFAULTS = {
    [3042]: false,
    [32773]: new Float32Array([
        0,
        0,
        0,
        0
    ]),
    [32777]: 32774,
    [34877]: 32774,
    [32969]: 1,
    [32968]: 0,
    [32971]: 1,
    [32970]: 0,
    [3106]: new Float32Array([
        0,
        0,
        0,
        0
    ]),
    [3107]: [
        true,
        true,
        true,
        true
    ],
    [2884]: false,
    [2885]: 1029,
    [2929]: false,
    [2931]: 1,
    [2932]: 513,
    [2928]: new Float32Array([
        0,
        1
    ]),
    [2930]: true,
    [3024]: true,
    [36006]: null,
    [2886]: 2305,
    [33170]: 4352,
    [2849]: 1,
    [32823]: false,
    [32824]: 0,
    [10752]: 0,
    [32938]: 1.0,
    [32939]: false,
    [3089]: false,
    [3088]: new Int32Array([
        0,
        0,
        1024,
        1024
    ]),
    [2960]: false,
    [2961]: 0,
    [2968]: 0xffffffff,
    [36005]: 0xffffffff,
    [2962]: 519,
    [2967]: 0,
    [2963]: 0xffffffff,
    [34816]: 519,
    [36003]: 0,
    [36004]: 0xffffffff,
    [2964]: 7680,
    [2965]: 7680,
    [2966]: 7680,
    [34817]: 7680,
    [34818]: 7680,
    [34819]: 7680,
    [2978]: [
        0,
        0,
        1024,
        1024
    ],
    [3333]: 4,
    [3317]: 4,
    [37440]: false,
    [37441]: false,
    [37443]: 37444,
    [35723]: 4352,
    [36010]: null,
    [35977]: false,
    [3330]: 0,
    [3332]: 0,
    [3331]: 0,
    [3314]: 0,
    [32878]: 0,
    [3316]: 0,
    [3315]: 0,
    [32877]: 0
};
const enable = (gl, value, key)=>value ? gl.enable(key) : gl.disable(key);
const hint = (gl, value, key)=>gl.hint(key, value);
const pixelStorei = (gl, value, key)=>gl.pixelStorei(key, value);
const drawFramebuffer = (gl, value)=>{
    const target = (0, _webglChecks.isWebGL2)(gl) ? 36009 : 36160;
    return gl.bindFramebuffer(target, value);
};
const readFramebuffer = (gl, value)=>{
    return gl.bindFramebuffer(36008, value);
};
function isArray(array) {
    return Array.isArray(array) || ArrayBuffer.isView(array);
}
const GL_PARAMETER_SETTERS = {
    [3042]: enable,
    [32773]: (gl, value)=>gl.blendColor(...value),
    [32777]: 'blendEquation',
    [34877]: 'blendEquation',
    [32969]: 'blendFunc',
    [32968]: 'blendFunc',
    [32971]: 'blendFunc',
    [32970]: 'blendFunc',
    [3106]: (gl, value)=>gl.clearColor(...value),
    [3107]: (gl, value)=>gl.colorMask(...value),
    [2884]: enable,
    [2885]: (gl, value)=>gl.cullFace(value),
    [2929]: enable,
    [2931]: (gl, value)=>gl.clearDepth(value),
    [2932]: (gl, value)=>gl.depthFunc(value),
    [2928]: (gl, value)=>gl.depthRange(...value),
    [2930]: (gl, value)=>gl.depthMask(value),
    [3024]: enable,
    [35723]: hint,
    [36006]: drawFramebuffer,
    [2886]: (gl, value)=>gl.frontFace(value),
    [33170]: hint,
    [2849]: (gl, value)=>gl.lineWidth(value),
    [32823]: enable,
    [32824]: 'polygonOffset',
    [10752]: 'polygonOffset',
    [35977]: enable,
    [32938]: 'sampleCoverage',
    [32939]: 'sampleCoverage',
    [3089]: enable,
    [3088]: (gl, value)=>gl.scissor(...value),
    [2960]: enable,
    [2961]: (gl, value)=>gl.clearStencil(value),
    [2968]: (gl, value)=>gl.stencilMaskSeparate(1028, value),
    [36005]: (gl, value)=>gl.stencilMaskSeparate(1029, value),
    [2962]: 'stencilFuncFront',
    [2967]: 'stencilFuncFront',
    [2963]: 'stencilFuncFront',
    [34816]: 'stencilFuncBack',
    [36003]: 'stencilFuncBack',
    [36004]: 'stencilFuncBack',
    [2964]: 'stencilOpFront',
    [2965]: 'stencilOpFront',
    [2966]: 'stencilOpFront',
    [34817]: 'stencilOpBack',
    [34818]: 'stencilOpBack',
    [34819]: 'stencilOpBack',
    [2978]: (gl, value)=>gl.viewport(...value),
    [3333]: pixelStorei,
    [3317]: pixelStorei,
    [37440]: pixelStorei,
    [37441]: pixelStorei,
    [37443]: pixelStorei,
    [3330]: pixelStorei,
    [3332]: pixelStorei,
    [3331]: pixelStorei,
    [36010]: readFramebuffer,
    [3314]: pixelStorei,
    [32878]: pixelStorei,
    [3316]: pixelStorei,
    [3315]: pixelStorei,
    [32877]: pixelStorei,
    framebuffer: (gl, framebuffer)=>{
        const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;
        return gl.bindFramebuffer(36160, handle);
    },
    blend: (gl, value)=>value ? gl.enable(3042) : gl.disable(3042),
    blendColor: (gl, value)=>gl.blendColor(...value),
    blendEquation: (gl, args)=>{
        args = isArray(args) ? args : [
            args,
            args
        ];
        gl.blendEquationSeparate(...args);
    },
    blendFunc: (gl, args)=>{
        args = isArray(args) && args.length === 2 ? [
            ...args,
            ...args
        ] : args;
        gl.blendFuncSeparate(...args);
    },
    clearColor: (gl, value)=>gl.clearColor(...value),
    clearDepth: (gl, value)=>gl.clearDepth(value),
    clearStencil: (gl, value)=>gl.clearStencil(value),
    colorMask: (gl, value)=>gl.colorMask(...value),
    cull: (gl, value)=>value ? gl.enable(2884) : gl.disable(2884),
    cullFace: (gl, value)=>gl.cullFace(value),
    depthTest: (gl, value)=>value ? gl.enable(2929) : gl.disable(2929),
    depthFunc: (gl, value)=>gl.depthFunc(value),
    depthMask: (gl, value)=>gl.depthMask(value),
    depthRange: (gl, value)=>gl.depthRange(...value),
    dither: (gl, value)=>value ? gl.enable(3024) : gl.disable(3024),
    derivativeHint: (gl, value)=>{
        gl.hint(35723, value);
    },
    frontFace: (gl, value)=>gl.frontFace(value),
    mipmapHint: (gl, value)=>gl.hint(33170, value),
    lineWidth: (gl, value)=>gl.lineWidth(value),
    polygonOffsetFill: (gl, value)=>value ? gl.enable(32823) : gl.disable(32823),
    polygonOffset: (gl, value)=>gl.polygonOffset(...value),
    sampleCoverage: (gl, value)=>gl.sampleCoverage(...value),
    scissorTest: (gl, value)=>value ? gl.enable(3089) : gl.disable(3089),
    scissor: (gl, value)=>gl.scissor(...value),
    stencilTest: (gl, value)=>value ? gl.enable(2960) : gl.disable(2960),
    stencilMask: (gl, value)=>{
        value = isArray(value) ? value : [
            value,
            value
        ];
        const [mask, backMask] = value;
        gl.stencilMaskSeparate(1028, mask);
        gl.stencilMaskSeparate(1029, backMask);
    },
    stencilFunc: (gl, args)=>{
        args = isArray(args) && args.length === 3 ? [
            ...args,
            ...args
        ] : args;
        const [func, ref, mask, backFunc, backRef, backMask] = args;
        gl.stencilFuncSeparate(1028, func, ref, mask);
        gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);
    },
    stencilOp: (gl, args)=>{
        args = isArray(args) && args.length === 3 ? [
            ...args,
            ...args
        ] : args;
        const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;
        gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
        gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);
    },
    viewport: (gl, value)=>gl.viewport(...value)
};
function getValue(glEnum, values, cache) {
    return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];
}
const GL_COMPOSITE_PARAMETER_SETTERS = {
    blendEquation: (gl, values, cache)=>gl.blendEquationSeparate(getValue(32777, values, cache), getValue(34877, values, cache)),
    blendFunc: (gl, values, cache)=>gl.blendFuncSeparate(getValue(32969, values, cache), getValue(32968, values, cache), getValue(32971, values, cache), getValue(32970, values, cache)),
    polygonOffset: (gl, values, cache)=>gl.polygonOffset(getValue(32824, values, cache), getValue(10752, values, cache)),
    sampleCoverage: (gl, values, cache)=>gl.sampleCoverage(getValue(32938, values, cache), getValue(32939, values, cache)),
    stencilFuncFront: (gl, values, cache)=>gl.stencilFuncSeparate(1028, getValue(2962, values, cache), getValue(2967, values, cache), getValue(2963, values, cache)),
    stencilFuncBack: (gl, values, cache)=>gl.stencilFuncSeparate(1029, getValue(34816, values, cache), getValue(36003, values, cache), getValue(36004, values, cache)),
    stencilOpFront: (gl, values, cache)=>gl.stencilOpSeparate(1028, getValue(2964, values, cache), getValue(2965, values, cache), getValue(2966, values, cache)),
    stencilOpBack: (gl, values, cache)=>gl.stencilOpSeparate(1029, getValue(34817, values, cache), getValue(34818, values, cache), getValue(34819, values, cache))
};
const GL_HOOKED_SETTERS = {
    enable: (update, capability)=>update({
            [capability]: true
        }),
    disable: (update, capability)=>update({
            [capability]: false
        }),
    pixelStorei: (update, pname, value)=>update({
            [pname]: value
        }),
    hint: (update, pname, hint)=>update({
            [pname]: hint
        }),
    bindFramebuffer: (update, target, framebuffer)=>{
        switch(target){
            case 36160:
                return update({
                    [36006]: framebuffer,
                    [36010]: framebuffer
                });
            case 36009:
                return update({
                    [36006]: framebuffer
                });
            case 36008:
                return update({
                    [36010]: framebuffer
                });
            default:
                return null;
        }
    },
    blendColor: (update, r, g, b, a)=>update({
            [32773]: new Float32Array([
                r,
                g,
                b,
                a
            ])
        }),
    blendEquation: (update, mode)=>update({
            [32777]: mode,
            [34877]: mode
        }),
    blendEquationSeparate: (update, modeRGB, modeAlpha)=>update({
            [32777]: modeRGB,
            [34877]: modeAlpha
        }),
    blendFunc: (update, src, dst)=>update({
            [32969]: src,
            [32968]: dst,
            [32971]: src,
            [32970]: dst
        }),
    blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha)=>update({
            [32969]: srcRGB,
            [32968]: dstRGB,
            [32971]: srcAlpha,
            [32970]: dstAlpha
        }),
    clearColor: (update, r, g, b, a)=>update({
            [3106]: new Float32Array([
                r,
                g,
                b,
                a
            ])
        }),
    clearDepth: (update, depth)=>update({
            [2931]: depth
        }),
    clearStencil: (update, s)=>update({
            [2961]: s
        }),
    colorMask: (update, r, g, b, a)=>update({
            [3107]: [
                r,
                g,
                b,
                a
            ]
        }),
    cullFace: (update, mode)=>update({
            [2885]: mode
        }),
    depthFunc: (update, func)=>update({
            [2932]: func
        }),
    depthRange: (update, zNear, zFar)=>update({
            [2928]: new Float32Array([
                zNear,
                zFar
            ])
        }),
    depthMask: (update, mask)=>update({
            [2930]: mask
        }),
    frontFace: (update, face)=>update({
            [2886]: face
        }),
    lineWidth: (update, width)=>update({
            [2849]: width
        }),
    polygonOffset: (update, factor, units)=>update({
            [32824]: factor,
            [10752]: units
        }),
    sampleCoverage: (update, value, invert)=>update({
            [32938]: value,
            [32939]: invert
        }),
    scissor: (update, x, y, width, height)=>update({
            [3088]: new Int32Array([
                x,
                y,
                width,
                height
            ])
        }),
    stencilMask: (update, mask)=>update({
            [2968]: mask,
            [36005]: mask
        }),
    stencilMaskSeparate: (update, face, mask)=>update({
            [face === 1028 ? 2968 : 36005]: mask
        }),
    stencilFunc: (update, func, ref, mask)=>update({
            [2962]: func,
            [2967]: ref,
            [2963]: mask,
            [34816]: func,
            [36003]: ref,
            [36004]: mask
        }),
    stencilFuncSeparate: (update, face, func, ref, mask)=>update({
            [face === 1028 ? 2962 : 34816]: func,
            [face === 1028 ? 2967 : 36003]: ref,
            [face === 1028 ? 2963 : 36004]: mask
        }),
    stencilOp: (update, fail, zfail, zpass)=>update({
            [2964]: fail,
            [2965]: zfail,
            [2966]: zpass,
            [34817]: fail,
            [34818]: zfail,
            [34819]: zpass
        }),
    stencilOpSeparate: (update, face, fail, zfail, zpass)=>update({
            [face === 1028 ? 2964 : 34817]: fail,
            [face === 1028 ? 2965 : 34818]: zfail,
            [face === 1028 ? 2966 : 34819]: zpass
        }),
    viewport: (update, x, y, width, height)=>update({
            [2978]: [
                x,
                y,
                width,
                height
            ]
        })
};
const isEnabled = (gl, key)=>gl.isEnabled(key);
const GL_PARAMETER_GETTERS = {
    [3042]: isEnabled,
    [2884]: isEnabled,
    [2929]: isEnabled,
    [3024]: isEnabled,
    [32823]: isEnabled,
    [32926]: isEnabled,
    [32928]: isEnabled,
    [3089]: isEnabled,
    [2960]: isEnabled,
    [35977]: isEnabled
};

},{"../utils/webgl-checks":"biWnv","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"g8GZv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "trackContextState", ()=>trackContextState);
parcelHelpers.export(exports, "pushContextState", ()=>pushContextState);
parcelHelpers.export(exports, "popContextState", ()=>popContextState);
var _webglParameterTables = require("./webgl-parameter-tables");
var _unifiedParameterApi = require("./unified-parameter-api");
var _assert = require("../utils/assert");
var _utils = require("../utils/utils");
function installGetterOverride(gl, functionName) {
    const originalGetterFunc = gl[functionName].bind(gl);
    gl[functionName] = function get() {
        const pname = arguments.length <= 0 ? undefined : arguments[0];
        if (!(pname in gl.state.cache)) return originalGetterFunc(...arguments);
        return gl.state.enable ? gl.state.cache[pname] : originalGetterFunc(...arguments);
    };
    Object.defineProperty(gl[functionName], 'name', {
        value: "".concat(functionName, "-from-cache"),
        configurable: false
    });
}
function installSetterSpy(gl, functionName, setter) {
    const originalSetterFunc = gl[functionName].bind(gl);
    gl[functionName] = function set() {
        for(var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++)params[_key] = arguments[_key];
        const { valueChanged, oldValue } = setter(gl.state._updateCache, ...params);
        if (valueChanged) originalSetterFunc(...params);
        return oldValue;
    };
    Object.defineProperty(gl[functionName], 'name', {
        value: "".concat(functionName, "-to-cache"),
        configurable: false
    });
}
function installProgramSpy(gl) {
    const originalUseProgram = gl.useProgram.bind(gl);
    gl.useProgram = function useProgramLuma(handle) {
        if (gl.state.program !== handle) {
            originalUseProgram(handle);
            gl.state.program = handle;
        }
    };
}
class GLState {
    constructor(gl){
        let { copyState = false, log = ()=>{} } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.gl = gl;
        this.program = null;
        this.stateStack = [];
        this.enable = true;
        this.cache = copyState ? (0, _unifiedParameterApi.getParameters)(gl) : Object.assign({}, (0, _webglParameterTables.GL_PARAMETER_DEFAULTS));
        this.log = log;
        this._updateCache = this._updateCache.bind(this);
        Object.seal(this);
    }
    push() {
        let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.stateStack.push({});
    }
    pop() {
        (0, _assert.assert)(this.stateStack.length > 0);
        const oldValues = this.stateStack[this.stateStack.length - 1];
        (0, _unifiedParameterApi.setParameters)(this.gl, oldValues);
        this.stateStack.pop();
    }
    _updateCache(values) {
        let valueChanged = false;
        let oldValue;
        const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];
        for(const key in values){
            (0, _assert.assert)(key !== undefined);
            const value = values[key];
            const cached = this.cache[key];
            if (!(0, _utils.deepArrayEqual)(value, cached)) {
                valueChanged = true;
                oldValue = cached;
                if (oldValues && !(key in oldValues)) oldValues[key] = cached;
                this.cache[key] = value;
            }
        }
        return {
            valueChanged,
            oldValue
        };
    }
}
function trackContextState(gl) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const { enable = true, copyState } = options;
    (0, _assert.assert)(copyState !== undefined);
    if (!gl.state) {
        const { polyfillContext } = globalThis;
        if (polyfillContext) polyfillContext(gl);
        gl.state = new GLState(gl, {
            copyState
        });
        installProgramSpy(gl);
        for(const key in 0, _webglParameterTables.GL_HOOKED_SETTERS){
            const setter = (0, _webglParameterTables.GL_HOOKED_SETTERS)[key];
            installSetterSpy(gl, key, setter);
        }
        installGetterOverride(gl, 'getParameter');
        installGetterOverride(gl, 'isEnabled');
    }
    gl.state.enable = enable;
    return gl;
}
function pushContextState(gl) {
    if (!gl.state) trackContextState(gl, {
        copyState: false
    });
    gl.state.push();
}
function popContextState(gl) {
    (0, _assert.assert)(gl.state);
    gl.state.pop();
}

},{"./webgl-parameter-tables":"hbost","./unified-parameter-api":"7VRvv","../utils/assert":"hYgqY","../utils/utils":"iy9eJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iy9eJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isObjectEmpty", ()=>isObjectEmpty);
parcelHelpers.export(exports, "deepArrayEqual", ()=>deepArrayEqual);
function isObjectEmpty(object) {
    for(const key in object)return false;
    return true;
}
function deepArrayEqual(x, y) {
    if (x === y) return true;
    const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);
    const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);
    if (isArrayX && isArrayY && x.length === y.length) {
        for(let i = 0; i < x.length; ++i){
            if (x[i] !== y[i]) return false;
        }
        return true;
    }
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fiwa9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGLContext", ()=>createGLContext);
parcelHelpers.export(exports, "instrumentGLContext", ()=>instrumentGLContext);
parcelHelpers.export(exports, "getContextDebugInfo", ()=>getContextDebugInfo);
parcelHelpers.export(exports, "resizeGLContext", ()=>resizeGLContext);
var _env = require("@probe.gl/env");
var _trackContextState = require("../state-tracker/track-context-state");
var _log = require("../utils/log");
var _assert = require("../utils/assert");
var _devicePixels = require("../utils/device-pixels");
var _webglChecks = require("../utils/webgl-checks");
const isBrowser = (0, _env.isBrowser)();
const isPage = isBrowser && typeof document !== 'undefined';
const CONTEXT_DEFAULTS = {
    webgl2: true,
    webgl1: true,
    throwOnError: true,
    manageState: true,
    canvas: null,
    debug: false,
    width: 800,
    height: 600
};
function createGLContext() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _assert.assert)(isBrowser, "createGLContext only available in the browser.\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils");
    options = Object.assign({}, CONTEXT_DEFAULTS, options);
    const { width, height } = options;
    function onError(message) {
        if (options.throwOnError) throw new Error(message);
        console.error(message);
        return null;
    }
    options.onError = onError;
    let gl;
    const { canvas } = options;
    const targetCanvas = getCanvas({
        canvas,
        width,
        height,
        onError
    });
    gl = createBrowserContext(targetCanvas, options);
    if (!gl) return null;
    gl = instrumentGLContext(gl, options);
    logInfo(gl);
    return gl;
}
function instrumentGLContext(gl) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!gl || gl._instrumented) return gl;
    gl._version = gl._version || getVersion(gl);
    gl.luma = gl.luma || {};
    gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};
    options = Object.assign({}, CONTEXT_DEFAULTS, options);
    const { manageState, debug } = options;
    if (manageState) (0, _trackContextState.trackContextState)(gl, {
        copyState: false,
        log: function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
            return (0, _log.log).log(1, ...args)();
        }
    });
    if (isBrowser && debug) {
        if (!globalThis.makeDebugContext) (0, _log.log).warn('WebGL debug mode not activated. import "@luma.gl/debug" to enable.')();
        else {
            gl = globalThis.makeDebugContext(gl, options);
            (0, _log.log).level = Math.max((0, _log.log).level, 1);
        }
    }
    gl._instrumented = true;
    return gl;
}
function getContextDebugInfo(gl) {
    const vendorMasked = gl.getParameter(7936);
    const rendererMasked = gl.getParameter(7937);
    const ext = gl.getExtension('WEBGL_debug_renderer_info');
    const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || 7936);
    const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || 7937);
    return {
        vendor: vendorUnmasked || vendorMasked,
        renderer: rendererUnmasked || rendererMasked,
        vendorMasked,
        rendererMasked,
        version: gl.getParameter(7938),
        shadingLanguageVersion: gl.getParameter(35724)
    };
}
function resizeGLContext(gl) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (gl.canvas) {
        const devicePixelRatio = (0, _devicePixels.getDevicePixelRatio)(options.useDevicePixels);
        setDevicePixelRatio(gl, devicePixelRatio, options);
        return;
    }
    const ext = gl.getExtension('STACKGL_resize_drawingbuffer');
    if (ext && "width" in options && "height" in options) ext.resize(options.width, options.height);
}
function createBrowserContext(canvas, options) {
    const { onError } = options;
    let errorMessage = null;
    const onCreateError = (error)=>errorMessage = error.statusMessage || errorMessage;
    canvas.addEventListener('webglcontextcreationerror', onCreateError, false);
    const { webgl1 = true, webgl2 = true } = options;
    let gl = null;
    if (webgl2) {
        gl = gl || canvas.getContext('webgl2', options);
        gl = gl || canvas.getContext('experimental-webgl2', options);
    }
    if (webgl1) {
        gl = gl || canvas.getContext('webgl', options);
        gl = gl || canvas.getContext('experimental-webgl', options);
    }
    canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);
    if (!gl) return onError("Failed to create ".concat(webgl2 && !webgl1 ? 'WebGL2' : 'WebGL', " context: ").concat(errorMessage || 'Unknown error'));
    if (options.onContextLost) canvas.addEventListener('webglcontextlost', options.onContextLost, false);
    if (options.onContextRestored) canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);
    return gl;
}
function getCanvas(_ref) {
    let { canvas, width = 800, height = 600, onError } = _ref;
    let targetCanvas;
    if (typeof canvas === 'string') {
        const isPageLoaded = isPage && document.readyState === 'complete';
        if (!isPageLoaded) onError("createGLContext called on canvas '".concat(canvas, "' before page was loaded"));
        targetCanvas = document.getElementById(canvas);
    } else if (canvas) targetCanvas = canvas;
    else {
        targetCanvas = document.createElement('canvas');
        targetCanvas.id = 'lumagl-canvas';
        targetCanvas.style.width = Number.isFinite(width) ? "".concat(width, "px") : '100%';
        targetCanvas.style.height = Number.isFinite(height) ? "".concat(height, "px") : '100%';
        document.body.insertBefore(targetCanvas, document.body.firstChild);
    }
    return targetCanvas;
}
function logInfo(gl) {
    const webGL = (0, _webglChecks.isWebGL2)(gl) ? 'WebGL2' : 'WebGL1';
    const info = getContextDebugInfo(gl);
    const driver = info ? "(".concat(info.vendor, ",").concat(info.renderer, ")") : '';
    const debug = gl.debug ? ' debug' : '';
    (0, _log.log).info(1, "".concat(webGL).concat(debug, " context ").concat(driver))();
}
function getVersion(gl) {
    if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) return 2;
    return 1;
}
function setDevicePixelRatio(gl, devicePixelRatio, options) {
    let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;
    let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;
    if (!clientWidth || !clientHeight) {
        (0, _log.log).log(1, 'Canvas clientWidth/clientHeight is 0')();
        devicePixelRatio = 1;
        clientWidth = gl.canvas.width || 1;
        clientHeight = gl.canvas.height || 1;
    }
    gl.luma = gl.luma || {};
    gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};
    const cachedSize = gl.luma.canvasSizeInfo;
    if (cachedSize.clientWidth !== clientWidth || cachedSize.clientHeight !== clientHeight || cachedSize.devicePixelRatio !== devicePixelRatio) {
        let clampedPixelRatio = devicePixelRatio;
        const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);
        const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);
        gl.canvas.width = canvasWidth;
        gl.canvas.height = canvasHeight;
        if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {
            (0, _log.log).warn("Device pixel ratio clamped")();
            clampedPixelRatio = Math.min(gl.drawingBufferWidth / clientWidth, gl.drawingBufferHeight / clientHeight);
            gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);
            gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);
        }
        Object.assign(gl.luma.canvasSizeInfo, {
            clientWidth,
            clientHeight,
            devicePixelRatio
        });
    }
}

},{"@probe.gl/env":"f6Lpj","../state-tracker/track-context-state":"g8GZv","../utils/log":"b62tU","../utils/assert":"hYgqY","../utils/device-pixels":"fHntV","../utils/webgl-checks":"biWnv","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fHntV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssToDeviceRatio", ()=>cssToDeviceRatio);
parcelHelpers.export(exports, "cssToDevicePixels", ()=>cssToDevicePixels);
parcelHelpers.export(exports, "getDevicePixelRatio", ()=>getDevicePixelRatio);
function cssToDeviceRatio(gl) {
    const { luma } = gl;
    if (gl.canvas && luma) {
        const cachedSize = luma.canvasSizeInfo;
        const clientWidth = 'clientWidth' in cachedSize ? cachedSize.clientWidth : gl.canvas.clientWidth;
        return clientWidth ? gl.drawingBufferWidth / clientWidth : 1;
    }
    return 1;
}
function cssToDevicePixels(gl, cssPixel) {
    let yInvert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    const ratio = cssToDeviceRatio(gl);
    const width = gl.drawingBufferWidth;
    const height = gl.drawingBufferHeight;
    return scalePixels(cssPixel, ratio, width, height, yInvert);
}
function getDevicePixelRatio(useDevicePixels) {
    const windowRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio || 1;
    if (Number.isFinite(useDevicePixels)) return useDevicePixels <= 0 ? 1 : useDevicePixels;
    return useDevicePixels ? windowRatio : 1;
}
function scalePixels(pixel, ratio, width, height, yInvert) {
    const x = scaleX(pixel[0], ratio, width);
    let y = scaleY(pixel[1], ratio, height, yInvert);
    let t = scaleX(pixel[0] + 1, ratio, width);
    const xHigh = t === width - 1 ? t : t - 1;
    t = scaleY(pixel[1] + 1, ratio, height, yInvert);
    let yHigh;
    if (yInvert) {
        t = t === 0 ? t : t + 1;
        yHigh = y;
        y = t;
    } else yHigh = t === height - 1 ? t : t - 1;
    return {
        x,
        y,
        width: Math.max(xHigh - x + 1, 1),
        height: Math.max(yHigh - y + 1, 1)
    };
}
function scaleX(x, ratio, width) {
    const r = Math.min(Math.round(x * ratio), width - 1);
    return r;
}
function scaleY(y, ratio, height, yInvert) {
    return yInvert ? Math.max(0, height - 1 - Math.round(y * ratio)) : Math.min(Math.round(y * ratio), height - 1);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bcvb8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lumaStats", ()=>(0, _init.lumaStats));
parcelHelpers.export(exports, "requestAnimationFrame", ()=>(0, _requestAnimationFrame.requestAnimationFrame));
parcelHelpers.export(exports, "cancelAnimationFrame", ()=>(0, _requestAnimationFrame.cancelAnimationFrame));
parcelHelpers.export(exports, "cloneTextureFrom", ()=>(0, _textureUtils.cloneTextureFrom));
parcelHelpers.export(exports, "getKeyValue", ()=>(0, _constantsToKeys.getKeyValue));
parcelHelpers.export(exports, "getKey", ()=>(0, _constantsToKeys.getKey));
parcelHelpers.export(exports, "getContextInfo", ()=>(0, _limits.getContextInfo));
parcelHelpers.export(exports, "getGLContextInfo", ()=>(0, _limits.getGLContextInfo));
parcelHelpers.export(exports, "getContextLimits", ()=>(0, _limits.getContextLimits));
parcelHelpers.export(exports, "FEATURES", ()=>(0, _webglFeaturesTable.FEATURES));
parcelHelpers.export(exports, "hasFeature", ()=>(0, _features.hasFeature));
parcelHelpers.export(exports, "hasFeatures", ()=>(0, _features.hasFeatures));
parcelHelpers.export(exports, "getFeatures", ()=>(0, _features.getFeatures));
parcelHelpers.export(exports, "canCompileGLGSExtension", ()=>(0, _checkGlslExtensionDefault.default));
parcelHelpers.export(exports, "Accessor", ()=>(0, _accessorDefault.default));
parcelHelpers.export(exports, "Buffer", ()=>(0, _bufferDefault.default));
parcelHelpers.export(exports, "Shader", ()=>(0, _shader.Shader));
parcelHelpers.export(exports, "VertexShader", ()=>(0, _shader.VertexShader));
parcelHelpers.export(exports, "FragmentShader", ()=>(0, _shader.FragmentShader));
parcelHelpers.export(exports, "Program", ()=>(0, _programDefault.default));
parcelHelpers.export(exports, "Framebuffer", ()=>(0, _framebufferDefault.default));
parcelHelpers.export(exports, "Renderbuffer", ()=>(0, _renderbufferDefault.default));
parcelHelpers.export(exports, "Texture2D", ()=>(0, _texture2DDefault.default));
parcelHelpers.export(exports, "TextureCube", ()=>(0, _textureCubeDefault.default));
parcelHelpers.export(exports, "clear", ()=>(0, _clear.clear));
parcelHelpers.export(exports, "clearBuffer", ()=>(0, _clear.clearBuffer));
parcelHelpers.export(exports, "readPixelsToArray", ()=>(0, _copyAndBlit.readPixelsToArray));
parcelHelpers.export(exports, "readPixelsToBuffer", ()=>(0, _copyAndBlit.readPixelsToBuffer));
parcelHelpers.export(exports, "copyToDataUrl", ()=>(0, _copyAndBlit.copyToDataUrl));
parcelHelpers.export(exports, "copyToImage", ()=>(0, _copyAndBlit.copyToImage));
parcelHelpers.export(exports, "copyToTexture", ()=>(0, _copyAndBlit.copyToTexture));
parcelHelpers.export(exports, "blit", ()=>(0, _copyAndBlit.blit));
parcelHelpers.export(exports, "Query", ()=>(0, _queryDefault.default));
parcelHelpers.export(exports, "Texture3D", ()=>(0, _texture3DDefault.default));
parcelHelpers.export(exports, "TransformFeedback", ()=>(0, _transformFeedbackDefault.default));
parcelHelpers.export(exports, "VertexArrayObject", ()=>(0, _vertexArrayObjectDefault.default));
parcelHelpers.export(exports, "VertexArray", ()=>(0, _vertexArrayDefault.default));
parcelHelpers.export(exports, "UniformBufferLayout", ()=>(0, _uniformBufferLayoutDefault.default));
parcelHelpers.export(exports, "setPathPrefix", ()=>(0, _loadFile.setPathPrefix));
parcelHelpers.export(exports, "loadFile", ()=>(0, _loadFile.loadFile));
parcelHelpers.export(exports, "loadImage", ()=>(0, _loadFile.loadImage));
parcelHelpers.export(exports, "getShaderName", ()=>(0, _getShaderNameDefault.default));
parcelHelpers.export(exports, "getShaderVersion", ()=>(0, _getShaderVersionDefault.default));
parcelHelpers.export(exports, "log", ()=>(0, _gltools.log));
parcelHelpers.export(exports, "assert", ()=>(0, _assert.assert));
parcelHelpers.export(exports, "uid", ()=>(0, _utils.uid));
parcelHelpers.export(exports, "isObjectEmpty", ()=>(0, _utils.isObjectEmpty));
parcelHelpers.export(exports, "parseUniformName", ()=>(0, _uniforms.parseUniformName));
parcelHelpers.export(exports, "getUniformSetter", ()=>(0, _uniforms.getUniformSetter));
parcelHelpers.export(exports, "getDebugTableForUniforms", ()=>(0, _debugUniforms.getDebugTableForUniforms));
parcelHelpers.export(exports, "getDebugTableForVertexArray", ()=>(0, _debugVertexArray.getDebugTableForVertexArray));
parcelHelpers.export(exports, "getDebugTableForProgramConfiguration", ()=>(0, _debugProgramConfiguration.getDebugTableForProgramConfiguration));
var _init = require("./init");
var _requestAnimationFrame = require("./webgl-utils/request-animation-frame");
var _textureUtils = require("./webgl-utils/texture-utils");
var _constantsToKeys = require("./webgl-utils/constants-to-keys");
var _limits = require("./features/limits");
var _webglFeaturesTable = require("./features/webgl-features-table");
var _features = require("./features/features");
var _checkGlslExtension = require("./features/check-glsl-extension");
var _checkGlslExtensionDefault = parcelHelpers.interopDefault(_checkGlslExtension);
var _accessor = require("./classes/accessor");
var _accessorDefault = parcelHelpers.interopDefault(_accessor);
var _buffer = require("./classes/buffer");
var _bufferDefault = parcelHelpers.interopDefault(_buffer);
var _shader = require("./classes/shader");
var _program = require("./classes/program");
var _programDefault = parcelHelpers.interopDefault(_program);
var _framebuffer = require("./classes/framebuffer");
var _framebufferDefault = parcelHelpers.interopDefault(_framebuffer);
var _renderbuffer = require("./classes/renderbuffer");
var _renderbufferDefault = parcelHelpers.interopDefault(_renderbuffer);
var _texture2D = require("./classes/texture-2d");
var _texture2DDefault = parcelHelpers.interopDefault(_texture2D);
var _textureCube = require("./classes/texture-cube");
var _textureCubeDefault = parcelHelpers.interopDefault(_textureCube);
var _clear = require("./classes/clear");
var _copyAndBlit = require("./classes/copy-and-blit");
var _query = require("./classes/query");
var _queryDefault = parcelHelpers.interopDefault(_query);
var _texture3D = require("./classes/texture-3d");
var _texture3DDefault = parcelHelpers.interopDefault(_texture3D);
var _transformFeedback = require("./classes/transform-feedback");
var _transformFeedbackDefault = parcelHelpers.interopDefault(_transformFeedback);
var _vertexArrayObject = require("./classes/vertex-array-object");
var _vertexArrayObjectDefault = parcelHelpers.interopDefault(_vertexArrayObject);
var _vertexArray = require("./classes/vertex-array");
var _vertexArrayDefault = parcelHelpers.interopDefault(_vertexArray);
var _uniformBufferLayout = require("./classes/uniform-buffer-layout");
var _uniformBufferLayoutDefault = parcelHelpers.interopDefault(_uniformBufferLayout);
var _loadFile = require("./utils/load-file");
var _getShaderName = require("./glsl-utils/get-shader-name");
var _getShaderNameDefault = parcelHelpers.interopDefault(_getShaderName);
var _getShaderVersion = require("./glsl-utils/get-shader-version");
var _getShaderVersionDefault = parcelHelpers.interopDefault(_getShaderVersion);
var _gltools = require("@luma.gl/gltools");
var _assert = require("./utils/assert");
var _utils = require("./utils/utils");
var _uniforms = require("./classes/uniforms");
var _debugUniforms = require("./debug/debug-uniforms");
var _debugVertexArray = require("./debug/debug-vertex-array");
var _debugProgramConfiguration = require("./debug/debug-program-configuration");

},{"./init":"hmgEY","./webgl-utils/request-animation-frame":"doKqA","./webgl-utils/texture-utils":"9LyPO","./webgl-utils/constants-to-keys":false,"./features/limits":false,"./features/webgl-features-table":"jSgHu","./features/features":"3pEUt","./features/check-glsl-extension":false,"./classes/accessor":false,"./classes/buffer":"kpTpO","./classes/shader":false,"./classes/program":"fLbAM","./classes/framebuffer":"d8j9m","./classes/renderbuffer":"9893Q","./classes/texture-2d":"1SG03","./classes/texture-cube":false,"./classes/clear":"22a7t","./classes/copy-and-blit":"lsaVh","./classes/query":"6DyFC","./classes/texture-3d":false,"./classes/transform-feedback":"2fR4f","./classes/vertex-array-object":false,"./classes/vertex-array":"lSHsf","./classes/uniform-buffer-layout":false,"./utils/load-file":false,"./glsl-utils/get-shader-name":false,"./glsl-utils/get-shader-version":"cZhZX","@luma.gl/gltools":"4jTOy","./utils/assert":"8HI0c","./utils/utils":"3ygCB","./classes/uniforms":false,"./debug/debug-uniforms":"5JM50","./debug/debug-vertex-array":"bEocD","./debug/debug-program-configuration":"5erVJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hmgEY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StatsManager", ()=>StatsManager);
parcelHelpers.export(exports, "lumaStats", ()=>lumaStats);
var _gltools = require("@luma.gl/gltools");
var _stats = require("@probe.gl/stats");
var _env = require("@probe.gl/env");
const VERSION = "8.5.21";
const STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';
class StatsManager {
    constructor(){
        this.stats = new Map();
    }
    get(name) {
        if (!this.stats.has(name)) this.stats.set(name, new (0, _stats.Stats)({
            id: name
        }));
        return this.stats.get(name);
    }
}
const lumaStats = new StatsManager();
if (globalThis.luma && globalThis.luma.VERSION !== VERSION) throw new Error("luma.gl - multiple VERSIONs detected: ".concat(globalThis.luma.VERSION, " vs ").concat(VERSION));
if (!globalThis.luma) {
    if ((0, _env.isBrowser)()) (0, _gltools.log).log(1, "luma.gl ".concat(VERSION, " - ").concat(STARTUP_MESSAGE))();
    globalThis.luma = globalThis.luma || {
        VERSION,
        version: VERSION,
        log: (0, _gltools.log),
        stats: lumaStats,
        globals: {
            modules: {},
            nodeIO: {}
        }
    };
}
exports.default = globalThis.luma;

},{"@luma.gl/gltools":"4jTOy","@probe.gl/stats":"4VIFo","@probe.gl/env":"f6Lpj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4VIFo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Stats", ()=>(0, _statsDefault.default));
parcelHelpers.export(exports, "Stat", ()=>(0, _statDefault.default));
parcelHelpers.export(exports, "_getHiResTimestamp", ()=>(0, _hiResTimestampDefault.default));
var _stats = require("./lib/stats");
var _statsDefault = parcelHelpers.interopDefault(_stats);
var _stat = require("./lib/stat");
var _statDefault = parcelHelpers.interopDefault(_stat);
var _hiResTimestamp = require("./utils/hi-res-timestamp");
var _hiResTimestampDefault = parcelHelpers.interopDefault(_hiResTimestamp);

},{"./lib/stats":"eX9ev","./lib/stat":"3Aosp","./utils/hi-res-timestamp":"5psPl","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eX9ev":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _stat = require("./stat");
var _statDefault = parcelHelpers.interopDefault(_stat);
class Stats {
    constructor(options){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "stats", {});
        this.id = options.id;
        this.stats = {};
        this._initializeStats(options.stats);
        Object.seal(this);
    }
    get(name) {
        let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'count';
        return this._getOrCreate({
            name,
            type
        });
    }
    get size() {
        return Object.keys(this.stats).length;
    }
    reset() {
        for(const key in this.stats)this.stats[key].reset();
        return this;
    }
    forEach(fn) {
        for(const key in this.stats)fn(this.stats[key]);
    }
    getTable() {
        const table = {};
        this.forEach((stat)=>{
            table[stat.name] = {
                time: stat.time || 0,
                count: stat.count || 0,
                average: stat.getAverageTime() || 0,
                hz: stat.getHz() || 0
            };
        });
        return table;
    }
    _initializeStats() {
        let stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        stats.forEach((stat)=>this._getOrCreate(stat));
    }
    _getOrCreate(stat) {
        if (!stat || !stat.name) return null;
        const { name, type } = stat;
        if (!this.stats[name]) {
            if (stat instanceof (0, _statDefault.default)) this.stats[name] = stat;
            else this.stats[name] = new (0, _statDefault.default)(name, type);
        }
        return this.stats[name];
    }
}
exports.default = Stats;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./stat":"3Aosp","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3Aosp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _hiResTimestamp = require("../utils/hi-res-timestamp");
var _hiResTimestampDefault = parcelHelpers.interopDefault(_hiResTimestamp);
class Stat {
    constructor(name, type){
        (0, _definePropertyDefault.default)(this, "name", void 0);
        (0, _definePropertyDefault.default)(this, "type", void 0);
        (0, _definePropertyDefault.default)(this, "sampleSize", 1);
        (0, _definePropertyDefault.default)(this, "time", void 0);
        (0, _definePropertyDefault.default)(this, "count", void 0);
        (0, _definePropertyDefault.default)(this, "samples", void 0);
        (0, _definePropertyDefault.default)(this, "lastTiming", void 0);
        (0, _definePropertyDefault.default)(this, "lastSampleTime", void 0);
        (0, _definePropertyDefault.default)(this, "lastSampleCount", void 0);
        (0, _definePropertyDefault.default)(this, "_count", 0);
        (0, _definePropertyDefault.default)(this, "_time", 0);
        (0, _definePropertyDefault.default)(this, "_samples", 0);
        (0, _definePropertyDefault.default)(this, "_startTime", 0);
        (0, _definePropertyDefault.default)(this, "_timerPending", false);
        this.name = name;
        this.type = type;
        this.reset();
    }
    setSampleSize(samples) {
        this.sampleSize = samples;
        return this;
    }
    incrementCount() {
        this.addCount(1);
        return this;
    }
    decrementCount() {
        this.subtractCount(1);
        return this;
    }
    addCount(value) {
        this._count += value;
        this._samples++;
        this._checkSampling();
        return this;
    }
    subtractCount(value) {
        this._count -= value;
        this._samples++;
        this._checkSampling();
        return this;
    }
    addTime(time) {
        this._time += time;
        this.lastTiming = time;
        this._samples++;
        this._checkSampling();
        return this;
    }
    timeStart() {
        this._startTime = (0, _hiResTimestampDefault.default)();
        this._timerPending = true;
        return this;
    }
    timeEnd() {
        if (!this._timerPending) return this;
        this.addTime((0, _hiResTimestampDefault.default)() - this._startTime);
        this._timerPending = false;
        this._checkSampling();
        return this;
    }
    getSampleAverageCount() {
        return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;
    }
    getSampleAverageTime() {
        return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;
    }
    getSampleHz() {
        return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;
    }
    getAverageCount() {
        return this.samples > 0 ? this.count / this.samples : 0;
    }
    getAverageTime() {
        return this.samples > 0 ? this.time / this.samples : 0;
    }
    getHz() {
        return this.time > 0 ? this.samples / (this.time / 1000) : 0;
    }
    reset() {
        this.time = 0;
        this.count = 0;
        this.samples = 0;
        this.lastTiming = 0;
        this.lastSampleTime = 0;
        this.lastSampleCount = 0;
        this._count = 0;
        this._time = 0;
        this._samples = 0;
        this._startTime = 0;
        this._timerPending = false;
        return this;
    }
    _checkSampling() {
        if (this._samples === this.sampleSize) {
            this.lastSampleTime = this._time;
            this.lastSampleCount = this._count;
            this.count += this._count;
            this.time += this._time;
            this.samples += this._samples;
            this._time = 0;
            this._count = 0;
            this._samples = 0;
        }
    }
}
exports.default = Stat;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../utils/hi-res-timestamp":"5psPl","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5psPl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getHiResTimestamp);
function getHiResTimestamp() {
    let timestamp;
    if (typeof window !== 'undefined' && window.performance) timestamp = window.performance.now();
    else timestamp = Date.now();
    return timestamp;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"doKqA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "requestAnimationFrame", ()=>requestAnimationFrame);
parcelHelpers.export(exports, "cancelAnimationFrame", ()=>cancelAnimationFrame);
function requestAnimationFrame(callback) {
    return typeof window !== 'undefined' && window.requestAnimationFrame ? window.requestAnimationFrame(callback) : setTimeout(callback, 1000 / 60);
}
function cancelAnimationFrame(timerId) {
    return typeof window !== 'undefined' && window.cancelAnimationFrame ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9LyPO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cloneTextureFrom", ()=>cloneTextureFrom);
parcelHelpers.export(exports, "toFramebuffer", ()=>toFramebuffer);
var _texture2D = require("../classes/texture-2d");
var _texture2DDefault = parcelHelpers.interopDefault(_texture2D);
var _textureCube = require("../classes/texture-cube");
var _textureCubeDefault = parcelHelpers.interopDefault(_textureCube);
var _texture3D = require("../classes/texture-3d");
var _texture3DDefault = parcelHelpers.interopDefault(_texture3D);
var _framebuffer = require("../classes/framebuffer");
var _framebufferDefault = parcelHelpers.interopDefault(_framebuffer);
var _assert = require("../utils/assert");
function cloneTextureFrom(refTexture, overrides) {
    (0, _assert.assert)(refTexture instanceof (0, _texture2DDefault.default) || refTexture instanceof (0, _textureCubeDefault.default) || refTexture instanceof (0, _texture3DDefault.default));
    const TextureType = refTexture.constructor;
    const { gl, width, height, format, type, dataFormat, border, mipmaps } = refTexture;
    const textureOptions = Object.assign({
        width,
        height,
        format,
        type,
        dataFormat,
        border,
        mipmaps
    }, overrides);
    return new TextureType(gl, textureOptions);
}
function toFramebuffer(texture, opts) {
    const { gl, width, height, id } = texture;
    const framebuffer = new (0, _framebufferDefault.default)(gl, Object.assign({}, opts, {
        id: "framebuffer-for-".concat(id),
        width,
        height,
        attachments: {
            [36064]: texture
        }
    }));
    return framebuffer;
}

},{"../classes/texture-2d":"1SG03","../classes/texture-cube":"lWNMz","../classes/texture-3d":"5Inlk","../classes/framebuffer":"d8j9m","../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1SG03":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _texture = require("./texture");
var _textureDefault = parcelHelpers.interopDefault(_texture);
var _loadFile = require("../utils/load-file");
class Texture2D extends (0, _textureDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Texture2D';
    }
    static isSupported(gl, opts) {
        return (0, _textureDefault.default).isSupported(gl, opts);
    }
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _gltools.assertWebGLContext)(gl);
        if (props instanceof Promise || typeof props === 'string') props = {
            data: props
        };
        if (typeof props.data === 'string') props = Object.assign({}, props, {
            data: (0, _loadFile.loadImage)(props.data)
        });
        super(gl, Object.assign({}, props, {
            target: 3553
        }));
        this.initialize(props);
        Object.seal(this);
    }
}
exports.default = Texture2D;

},{"@luma.gl/gltools":"4jTOy","./texture":"2UaoF","../utils/load-file":"fC7bB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2UaoF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
var _buffer = require("./buffer");
var _bufferDefault = parcelHelpers.interopDefault(_buffer);
var _textureFormats = require("./texture-formats");
var _assert = require("../utils/assert");
var _utils = require("../utils/utils");
const NPOT_MIN_FILTERS = [
    9729,
    9728
];
const WebGLBuffer = globalThis.WebGLBuffer || function WebGLBuffer() {};
class Texture extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Texture';
    }
    static isSupported(gl) {
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const { format, linearFiltering } = opts;
        let supported = true;
        if (format) {
            supported = supported && (0, _textureFormats.isFormatSupported)(gl, format);
            supported = supported && (!linearFiltering || (0, _textureFormats.isLinearFilteringSupported)(gl, format));
        }
        return supported;
    }
    constructor(gl, props){
        const { id = (0, _utils.uid)('texture'), handle, target } = props;
        super(gl, {
            id,
            handle
        });
        this.target = target;
        this.textureUnit = undefined;
        this.loaded = false;
        this.width = undefined;
        this.height = undefined;
        this.depth = undefined;
        this.format = undefined;
        this.type = undefined;
        this.dataFormat = undefined;
        this.border = undefined;
        this.textureUnit = undefined;
        this.mipmaps = undefined;
    }
    toString() {
        return "Texture(".concat(this.id, ",").concat(this.width, "x").concat(this.height, ")");
    }
    initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        let data = props.data;
        if (data instanceof Promise) {
            data.then((resolvedImageData)=>this.initialize(Object.assign({}, props, {
                    pixels: resolvedImageData,
                    data: resolvedImageData
                })));
            return this;
        }
        const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;
        if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {
            this._video = null;
            data.addEventListener('loadeddata', ()=>this.initialize(props));
            return this;
        }
        const { pixels = null, format = 6408, border = 0, recreate = false, parameters = {}, pixelStore = {}, textureUnit } = props;
        if (!data) data = pixels;
        let { width, height, dataFormat, type, compressed = false, mipmaps = true } = props;
        const { depth = 0 } = props;
        ({ width, height, compressed, dataFormat, type } = this._deduceParameters({
            format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        this.width = width;
        this.height = height;
        this.depth = depth;
        this.format = format;
        this.type = type;
        this.dataFormat = dataFormat;
        this.border = border;
        this.textureUnit = textureUnit;
        if (Number.isFinite(this.textureUnit)) {
            this.gl.activeTexture(33984 + this.textureUnit);
            this.gl.bindTexture(this.target, this.handle);
        }
        if (mipmaps && this._isNPOT()) {
            (0, _gltools.log).warn("texture: ".concat(this, " is Non-Power-Of-Two, disabling mipmaping"))();
            mipmaps = false;
            this._updateForNPOT(parameters);
        }
        this.mipmaps = mipmaps;
        this.setImageData({
            data,
            width,
            height,
            depth,
            format,
            type,
            dataFormat,
            border,
            mipmaps,
            parameters: pixelStore,
            compressed
        });
        if (mipmaps) this.generateMipmap();
        this.setParameters(parameters);
        if (recreate) this.data = data;
        if (isVideo) this._video = {
            video: data,
            parameters,
            lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1
        };
        return this;
    }
    update() {
        if (this._video) {
            const { video, parameters, lastTime } = this._video;
            if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) return;
            this.setSubImageData({
                data: video,
                parameters
            });
            if (this.mipmaps) this.generateMipmap();
            this._video.lastTime = video.currentTime;
        }
    }
    resize(_ref) {
        let { height, width, mipmaps = false } = _ref;
        if (width !== this.width || height !== this.height) return this.initialize({
            width,
            height,
            format: this.format,
            type: this.type,
            dataFormat: this.dataFormat,
            border: this.border,
            mipmaps
        });
        return this;
    }
    generateMipmap() {
        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (this._isNPOT()) {
            (0, _gltools.log).warn("texture: ".concat(this, " is Non-Power-Of-Two, disabling mipmaping"))();
            return this;
        }
        this.mipmaps = true;
        this.gl.bindTexture(this.target, this.handle);
        (0, _gltools.withParameters)(this.gl, params, ()=>{
            this.gl.generateMipmap(this.target);
        });
        this.gl.bindTexture(this.target, null);
        return this;
    }
    setImageData(options) {
        this._trackDeallocatedMemory('Texture');
        const { target = this.target, pixels = null, level = 0, format = this.format, border = this.border, offset = 0, parameters = {} } = options;
        let { data = null, type = this.type, width = this.width, height = this.height, dataFormat = this.dataFormat, compressed = false } = options;
        if (!data) data = pixels;
        ({ type, dataFormat, compressed, width, height } = this._deduceParameters({
            format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        const { gl } = this;
        gl.bindTexture(this.target, this.handle);
        let dataType = null;
        ({ data, dataType } = this._getDataType({
            data,
            compressed
        }));
        let gl2;
        let compressedTextureSize = 0;
        (0, _gltools.withParameters)(this.gl, parameters, ()=>{
            switch(dataType){
                case 'null':
                    gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);
                    break;
                case 'typed-array':
                    gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);
                    break;
                case 'buffer':
                    gl2 = (0, _gltools.assertWebGL2Context)(gl);
                    gl2.bindBuffer(35052, data.handle || data);
                    gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);
                    gl2.bindBuffer(35052, null);
                    break;
                case 'browser-object':
                    if ((0, _gltools.isWebGL2)(gl)) gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);
                    else gl.texImage2D(target, level, format, dataFormat, type, data);
                    break;
                case 'compressed':
                    for (const [levelIndex, levelData] of data.entries()){
                        gl.compressedTexImage2D(target, levelIndex, levelData.format, levelData.width, levelData.height, border, levelData.data);
                        compressedTextureSize += levelData.levelSize;
                    }
                    break;
                default:
                    (0, _assert.assert)(false, 'Unknown image data type');
            }
        });
        if (dataType === 'compressed') this._trackAllocatedMemory(compressedTextureSize, 'Texture');
        else if (data && data.byteLength) this._trackAllocatedMemory(data.byteLength, 'Texture');
        else {
            const channels = (0, _textureFormats.DATA_FORMAT_CHANNELS)[this.dataFormat] || 4;
            const channelSize = (0, _textureFormats.TYPE_SIZES)[this.type] || 1;
            this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');
        }
        this.loaded = true;
        return this;
    }
    setSubImageData(_ref2) {
        let { target = this.target, pixels = null, data = null, x = 0, y = 0, width = this.width, height = this.height, level = 0, format = this.format, type = this.type, dataFormat = this.dataFormat, compressed = false, offset = 0, border = this.border, parameters = {} } = _ref2;
        ({ type, dataFormat, compressed, width, height } = this._deduceParameters({
            format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        (0, _assert.assert)(this.depth === 0, 'texSubImage not supported for 3D textures');
        if (!data) data = pixels;
        if (data && data.data) {
            const ndarray = data;
            data = ndarray.data;
            width = ndarray.shape[0];
            height = ndarray.shape[1];
        }
        if (data instanceof (0, _bufferDefault.default)) data = data.handle;
        this.gl.bindTexture(this.target, this.handle);
        (0, _gltools.withParameters)(this.gl, parameters, ()=>{
            if (compressed) this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);
            else if (data === null) this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);
            else if (ArrayBuffer.isView(data)) this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);
            else if (data instanceof WebGLBuffer) {
                const gl2 = (0, _gltools.assertWebGL2Context)(this.gl);
                gl2.bindBuffer(35052, data);
                gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);
                gl2.bindBuffer(35052, null);
            } else if ((0, _gltools.isWebGL2)(this.gl)) {
                const gl2 = (0, _gltools.assertWebGL2Context)(this.gl);
                gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);
            } else this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);
        });
        this.gl.bindTexture(this.target, null);
    }
    copyFramebuffer() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _gltools.log).error('Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})')();
        return null;
    }
    getActiveUnit() {
        return this.gl.getParameter(34016) - 33984;
    }
    bind() {
        let textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;
        const { gl } = this;
        if (textureUnit !== undefined) {
            this.textureUnit = textureUnit;
            gl.activeTexture(33984 + textureUnit);
        }
        gl.bindTexture(this.target, this.handle);
        return textureUnit;
    }
    unbind() {
        let textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;
        const { gl } = this;
        if (textureUnit !== undefined) {
            this.textureUnit = textureUnit;
            gl.activeTexture(33984 + textureUnit);
        }
        gl.bindTexture(this.target, null);
        return textureUnit;
    }
    _getDataType(_ref3) {
        let { data, compressed = false } = _ref3;
        if (compressed) return {
            data,
            dataType: 'compressed'
        };
        if (data === null) return {
            data,
            dataType: 'null'
        };
        if (ArrayBuffer.isView(data)) return {
            data,
            dataType: 'typed-array'
        };
        if (data instanceof (0, _bufferDefault.default)) return {
            data: data.handle,
            dataType: 'buffer'
        };
        if (data instanceof WebGLBuffer) return {
            data,
            dataType: 'buffer'
        };
        return {
            data,
            dataType: 'browser-object'
        };
    }
    _deduceParameters(opts) {
        const { format, data } = opts;
        let { width, height, dataFormat, type, compressed } = opts;
        const textureFormat = (0, _textureFormats.TEXTURE_FORMATS)[format];
        dataFormat = dataFormat || textureFormat && textureFormat.dataFormat;
        type = type || textureFormat && textureFormat.types[0];
        compressed = compressed || textureFormat && textureFormat.compressed;
        ({ width, height } = this._deduceImageSize(data, width, height));
        return {
            dataFormat,
            type,
            compressed,
            width,
            height,
            format,
            data
        };
    }
    _deduceImageSize(data, width, height) {
        let size;
        if (typeof ImageData !== 'undefined' && data instanceof ImageData) size = {
            width: data.width,
            height: data.height
        };
        else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) size = {
            width: data.naturalWidth,
            height: data.naturalHeight
        };
        else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) size = {
            width: data.width,
            height: data.height
        };
        else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) size = {
            width: data.width,
            height: data.height
        };
        else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) size = {
            width: data.videoWidth,
            height: data.videoHeight
        };
        else if (!data) size = {
            width: width >= 0 ? width : 1,
            height: height >= 0 ? height : 1
        };
        else size = {
            width,
            height
        };
        (0, _assert.assert)(size, 'Could not deduced texture size');
        (0, _assert.assert)(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');
        (0, _assert.assert)(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');
        return size;
    }
    _createHandle() {
        return this.gl.createTexture();
    }
    _deleteHandle() {
        this.gl.deleteTexture(this.handle);
        this._trackDeallocatedMemory('Texture');
    }
    _getParameter(pname) {
        switch(pname){
            case 4096:
                return this.width;
            case 4097:
                return this.height;
            default:
                this.gl.bindTexture(this.target, this.handle);
                const value = this.gl.getTexParameter(this.target, pname);
                this.gl.bindTexture(this.target, null);
                return value;
        }
    }
    _setParameter(pname, param) {
        this.gl.bindTexture(this.target, this.handle);
        param = this._getNPOTParam(pname, param);
        switch(pname){
            case 33082:
            case 33083:
                this.gl.texParameterf(this.handle, pname, param);
                break;
            case 4096:
            case 4097:
                (0, _assert.assert)(false);
                break;
            default:
                this.gl.texParameteri(this.target, pname, param);
                break;
        }
        this.gl.bindTexture(this.target, null);
        return this;
    }
    _isNPOT() {
        if ((0, _gltools.isWebGL2)(this.gl)) return false;
        if (!this.width || !this.height) return false;
        return !(0, _utils.isPowerOfTwo)(this.width) || !(0, _utils.isPowerOfTwo)(this.height);
    }
    _updateForNPOT(parameters) {
        if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;
        if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;
        if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;
    }
    _getNPOTParam(pname, param) {
        if (this._isNPOT()) switch(pname){
            case 10241:
                if (NPOT_MIN_FILTERS.indexOf(param) === -1) param = 9729;
                break;
            case 10242:
            case 10243:
                if (param !== 33071) param = 33071;
                break;
            default:
                break;
        }
        return param;
    }
}
exports.default = Texture;

},{"@luma.gl/gltools":"4jTOy","./resource":"99wyj","./buffer":"kpTpO","./texture-formats":"4QtKK","../utils/assert":"8HI0c","../utils/utils":"3ygCB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"99wyj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _init = require("../init");
var _constantsToKeys = require("../webgl-utils/constants-to-keys");
var _assert = require("../utils/assert");
var _utils = require("../utils/utils");
var _stubMethods = require("../utils/stub-methods");
const ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';
class Resource {
    get [Symbol.toStringTag]() {
        return 'Resource';
    }
    constructor(gl){
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _gltools.assertWebGLContext)(gl);
        const { id, userData = {} } = opts;
        this.gl = gl;
        this.gl2 = gl;
        this.id = id || (0, _utils.uid)(this[Symbol.toStringTag]);
        this.userData = userData;
        this._bound = false;
        this._handle = opts.handle;
        if (this._handle === undefined) this._handle = this._createHandle();
        this.byteLength = 0;
        this._addStats();
    }
    toString() {
        return "".concat(this[Symbol.toStringTag] || this.constructor.name, "(").concat(this.id, ")");
    }
    get handle() {
        return this._handle;
    }
    delete() {
        let { deleteChildren = false } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const children = this._handle && this._deleteHandle(this._handle);
        if (this._handle) this._removeStats();
        this._handle = null;
        if (children && deleteChildren) children.filter(Boolean).forEach((child)=>child.delete());
        return this;
    }
    bind() {
        let funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;
        if (typeof funcOrHandle !== 'function') {
            this._bindHandle(funcOrHandle);
            return this;
        }
        let value;
        if (!this._bound) {
            this._bindHandle(this.handle);
            this._bound = true;
            value = funcOrHandle();
            this._bound = false;
            this._bindHandle(null);
        } else value = funcOrHandle();
        return value;
    }
    unbind() {
        this.bind(null);
    }
    getParameter(pname) {
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        pname = (0, _constantsToKeys.getKeyValue)(this.gl, pname);
        (0, _assert.assert)(pname);
        const parameters = this.constructor.PARAMETERS || {};
        const parameter = parameters[pname];
        if (parameter) {
            const isWebgl2 = (0, _gltools.isWebGL2)(this.gl);
            const parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));
            if (!parameterAvailable) {
                const webgl1Default = parameter.webgl1;
                const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;
                const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;
                return defaultValue;
            }
        }
        return this._getParameter(pname, opts);
    }
    getParameters() {
        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { parameters, keys } = options;
        const PARAMETERS = this.constructor.PARAMETERS || {};
        const isWebgl2 = (0, _gltools.isWebGL2)(this.gl);
        const values = {};
        const parameterKeys = parameters || Object.keys(PARAMETERS);
        for (const pname of parameterKeys){
            const parameter = PARAMETERS[pname];
            const parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));
            if (parameterAvailable) {
                const key = keys ? (0, _constantsToKeys.getKey)(this.gl, pname) : pname;
                values[key] = this.getParameter(pname, options);
                if (keys && parameter.type === 'GLenum') values[key] = (0, _constantsToKeys.getKey)(this.gl, values[key]);
            }
        }
        return values;
    }
    setParameter(pname, value) {
        pname = (0, _constantsToKeys.getKeyValue)(this.gl, pname);
        (0, _assert.assert)(pname);
        const parameters = this.constructor.PARAMETERS || {};
        const parameter = parameters[pname];
        if (parameter) {
            const isWebgl2 = (0, _gltools.isWebGL2)(this.gl);
            const parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));
            if (!parameterAvailable) throw new Error('Parameter not available on this platform');
            if (parameter.type === 'GLenum') value = (0, _constantsToKeys.getKeyValue)(value);
        }
        this._setParameter(pname, value);
        return this;
    }
    setParameters(parameters) {
        for(const pname in parameters)this.setParameter(pname, parameters[pname]);
        return this;
    }
    stubRemovedMethods(className, version, methodNames) {
        return (0, _stubMethods.stubRemovedMethods)(this, className, version, methodNames);
    }
    initialize(opts) {}
    _createHandle() {
        throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
    _deleteHandle() {
        throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
    _bindHandle(handle) {
        throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
    _getOptsFromHandle() {
        throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
    _getParameter(pname, opts) {
        throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
    _setParameter(pname, value) {
        throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
    _context() {
        this.gl.luma = this.gl.luma || {};
        return this.gl.luma;
    }
    _addStats() {
        const name = this[Symbol.toStringTag];
        const stats = (0, _init.lumaStats).get('Resource Counts');
        stats.get('Resources Created').incrementCount();
        stats.get("".concat(name, "s Created")).incrementCount();
        stats.get("".concat(name, "s Active")).incrementCount();
    }
    _removeStats() {
        const name = this[Symbol.toStringTag];
        const stats = (0, _init.lumaStats).get('Resource Counts');
        stats.get("".concat(name, "s Active")).decrementCount();
    }
    _trackAllocatedMemory(bytes) {
        let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this[Symbol.toStringTag];
        this._trackAllocatedMemoryForContext(bytes, name);
        this._trackAllocatedMemoryForContext(bytes, name, this.gl.canvas && this.gl.canvas.id);
        this.byteLength = bytes;
    }
    _trackAllocatedMemoryForContext(bytes) {
        let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this[Symbol.toStringTag];
        let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        const stats = (0, _init.lumaStats).get("Memory Usage".concat(id));
        stats.get('GPU Memory').addCount(bytes);
        stats.get("".concat(name, " Memory")).addCount(bytes);
    }
    _trackDeallocatedMemory() {
        let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this[Symbol.toStringTag];
        this._trackDeallocatedMemoryForContext(name);
        this._trackDeallocatedMemoryForContext(name, this.gl.canvas && this.gl.canvas.id);
        this.byteLength = 0;
    }
    _trackDeallocatedMemoryForContext() {
        let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this[Symbol.toStringTag];
        let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        const stats = (0, _init.lumaStats).get("Memory Usage".concat(id));
        stats.get('GPU Memory').subtractCount(this.byteLength);
        stats.get("".concat(name, " Memory")).subtractCount(this.byteLength);
    }
}
exports.default = Resource;

},{"@luma.gl/gltools":"4jTOy","../init":"hmgEY","../webgl-utils/constants-to-keys":"bDQE3","../utils/assert":"8HI0c","../utils/utils":"3ygCB","../utils/stub-methods":"cU0FY","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bDQE3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getKeyValue", ()=>getKeyValue);
parcelHelpers.export(exports, "getKey", ()=>getKey);
parcelHelpers.export(exports, "getKeyType", ()=>getKeyType);
var _assert = require("../utils/assert");
function getKeyValue(gl, name) {
    if (typeof name !== 'string') return name;
    const number = Number(name);
    if (!isNaN(number)) return number;
    name = name.replace(/^.*\./, '');
    const value = gl[name];
    (0, _assert.assert)(value !== undefined, "Accessing undefined constant GL.".concat(name));
    return value;
}
function getKey(gl, value) {
    value = Number(value);
    for(const key in gl){
        if (gl[key] === value) return "GL.".concat(key);
    }
    return String(value);
}
function getKeyType(gl, value) {
    (0, _assert.assert)(value !== undefined, 'undefined key');
    value = Number(value);
    for(const key in gl){
        if (gl[key] === value) return "GL.".concat(key);
    }
    return String(value);
}

},{"../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8HI0c":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message || 'luma.gl: assertion failed.');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3ygCB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uid", ()=>uid);
parcelHelpers.export(exports, "isPowerOfTwo", ()=>isPowerOfTwo);
parcelHelpers.export(exports, "isObjectEmpty", ()=>isObjectEmpty);
var _assert = require("./assert");
const uidCounters = {};
function uid() {
    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';
    uidCounters[id] = uidCounters[id] || 1;
    const count = uidCounters[id]++;
    return "".concat(id, "-").concat(count);
}
function isPowerOfTwo(n) {
    (0, _assert.assert)(typeof n === 'number', 'Input must be a number');
    return n && (n & n - 1) === 0;
}
function isObjectEmpty(obj) {
    let isEmpty = true;
    for(const key in obj){
        isEmpty = false;
        break;
    }
    return isEmpty;
}

},{"./assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cU0FY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stubRemovedMethods", ()=>stubRemovedMethods);
var _gltools = require("@luma.gl/gltools");
function stubRemovedMethods(instance, className, version, methodNames) {
    const upgradeMessage = "See luma.gl ".concat(version, " Upgrade Guide at https://luma.gl/docs/upgrade-guide");
    const prototype = Object.getPrototypeOf(instance);
    methodNames.forEach((methodName)=>{
        if (prototype.methodName) return;
        prototype[methodName] = ()=>{
            (0, _gltools.log).removed("Calling removed method ".concat(className, ".").concat(methodName, ": "), upgradeMessage)();
            throw new Error(methodName);
        };
    });
}

},{"@luma.gl/gltools":"4jTOy","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kpTpO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
var _accessor = require("./accessor");
var _accessorDefault = parcelHelpers.interopDefault(_accessor);
var _typedArrayUtils = require("../webgl-utils/typed-array-utils");
var _gltools = require("@luma.gl/gltools");
var _assert = require("../utils/assert");
var _checkProps = require("../utils/check-props");
const DEBUG_DATA_LENGTH = 10;
const DEPRECATED_PROPS = {
    offset: 'accessor.offset',
    stride: 'accessor.stride',
    type: 'accessor.type',
    size: 'accessor.size',
    divisor: 'accessor.divisor',
    normalized: 'accessor.normalized',
    integer: 'accessor.integer',
    instanced: 'accessor.divisor',
    isInstanced: 'accessor.divisor'
};
const PROP_CHECKS_INITIALIZE = {
    removedProps: {},
    replacedProps: {
        bytes: 'byteLength'
    },
    deprecatedProps: DEPRECATED_PROPS
};
const PROP_CHECKS_SET_PROPS = {
    removedProps: DEPRECATED_PROPS
};
class Buffer extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Buffer';
    }
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        super(gl, props);
        this.stubRemovedMethods('Buffer', 'v6.0', [
            'layout',
            'setLayout',
            'getIndexedParameter'
        ]);
        this.target = props.target || (this.gl.webgl2 ? 36662 : 34962);
        this.initialize(props);
        Object.seal(this);
    }
    getElementCount() {
        let accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;
        return Math.round(this.byteLength / (0, _accessorDefault.default).getBytesPerElement(accessor));
    }
    getVertexCount() {
        let accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;
        return Math.round(this.byteLength / (0, _accessorDefault.default).getBytesPerVertex(accessor));
    }
    initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (ArrayBuffer.isView(props)) props = {
            data: props
        };
        if (Number.isFinite(props)) props = {
            byteLength: props
        };
        props = (0, _checkProps.checkProps)('Buffer', props, PROP_CHECKS_INITIALIZE);
        this.usage = props.usage || 35044;
        this.debugData = null;
        this.setAccessor(Object.assign({}, props, props.accessor));
        if (props.data) this._setData(props.data, props.offset, props.byteLength);
        else this._setByteLength(props.byteLength || 0);
        return this;
    }
    setProps(props) {
        props = (0, _checkProps.checkProps)('Buffer', props, PROP_CHECKS_SET_PROPS);
        if ('accessor' in props) this.setAccessor(props.accessor);
        return this;
    }
    setAccessor(accessor) {
        accessor = Object.assign({}, accessor);
        delete accessor.buffer;
        this.accessor = new (0, _accessorDefault.default)(accessor);
        return this;
    }
    reallocate(byteLength) {
        if (byteLength > this.byteLength) {
            this._setByteLength(byteLength);
            return true;
        }
        this.bytesUsed = byteLength;
        return false;
    }
    setData(props) {
        return this.initialize(props);
    }
    subData(props) {
        if (ArrayBuffer.isView(props)) props = {
            data: props
        };
        const { data, offset = 0, srcOffset = 0 } = props;
        const byteLength = props.byteLength || props.length;
        (0, _assert.assert)(data);
        const target = this.gl.webgl2 ? 36663 : this.target;
        this.gl.bindBuffer(target, this.handle);
        if (srcOffset !== 0 || byteLength !== undefined) {
            (0, _gltools.assertWebGL2Context)(this.gl);
            this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);
        } else this.gl.bufferSubData(target, offset, data);
        this.gl.bindBuffer(target, null);
        this.debugData = null;
        this._inferType(data);
        return this;
    }
    copyData(_ref) {
        let { sourceBuffer, readOffset = 0, writeOffset = 0, size } = _ref;
        const { gl } = this;
        (0, _gltools.assertWebGL2Context)(gl);
        gl.bindBuffer(36662, sourceBuffer.handle);
        gl.bindBuffer(36663, this.handle);
        gl.copyBufferSubData(36662, 36663, readOffset, writeOffset, size);
        gl.bindBuffer(36662, null);
        gl.bindBuffer(36663, null);
        this.debugData = null;
        return this;
    }
    getData() {
        let { dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0 } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _gltools.assertWebGL2Context)(this.gl);
        const ArrayType = (0, _typedArrayUtils.getTypedArrayFromGLType)(this.accessor.type || 5126, {
            clamped: false
        });
        const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);
        const dstElementOffset = dstOffset;
        let dstAvailableElementCount;
        let dstElementCount;
        if (dstData) {
            dstElementCount = dstData.length;
            dstAvailableElementCount = dstElementCount - dstElementOffset;
        } else {
            dstAvailableElementCount = Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);
            dstElementCount = dstElementOffset + dstAvailableElementCount;
        }
        const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);
        length = length || copyElementCount;
        (0, _assert.assert)(length <= copyElementCount);
        dstData = dstData || new ArrayType(dstElementCount);
        this.gl.bindBuffer(36662, this.handle);
        this.gl.getBufferSubData(36662, srcByteOffset, dstData, dstOffset, length);
        this.gl.bindBuffer(36662, null);
        return dstData;
    }
    bind() {
        let { target = this.target, index = this.accessor && this.accessor.index, offset = 0, size } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (target === 35345 || target === 35982) {
            if (size !== undefined) this.gl.bindBufferRange(target, index, this.handle, offset, size);
            else {
                (0, _assert.assert)(offset === 0);
                this.gl.bindBufferBase(target, index, this.handle);
            }
        } else this.gl.bindBuffer(target, this.handle);
        return this;
    }
    unbind() {
        let { target = this.target, index = this.accessor && this.accessor.index } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const isIndexedBuffer = target === 35345 || target === 35982;
        if (isIndexedBuffer) this.gl.bindBufferBase(target, index, null);
        else this.gl.bindBuffer(target, null);
        return this;
    }
    getDebugData() {
        if (!this.debugData) {
            this.debugData = this.getData({
                length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)
            });
            return {
                data: this.debugData,
                changed: true
            };
        }
        return {
            data: this.debugData,
            changed: false
        };
    }
    invalidateDebugData() {
        this.debugData = null;
    }
    _setData(data) {
        let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        let byteLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.byteLength + offset;
        (0, _assert.assert)(ArrayBuffer.isView(data));
        this._trackDeallocatedMemory();
        const target = this._getTarget();
        this.gl.bindBuffer(target, this.handle);
        this.gl.bufferData(target, byteLength, this.usage);
        this.gl.bufferSubData(target, offset, data);
        this.gl.bindBuffer(target, null);
        this.debugData = data.slice(0, DEBUG_DATA_LENGTH);
        this.bytesUsed = byteLength;
        this._trackAllocatedMemory(byteLength);
        const type = (0, _typedArrayUtils.getGLTypeFromTypedArray)(data);
        (0, _assert.assert)(type);
        this.setAccessor(new (0, _accessorDefault.default)(this.accessor, {
            type
        }));
        return this;
    }
    _setByteLength(byteLength) {
        let usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.usage;
        (0, _assert.assert)(byteLength >= 0);
        this._trackDeallocatedMemory();
        let data = byteLength;
        if (byteLength === 0) data = new Float32Array(0);
        const target = this._getTarget();
        this.gl.bindBuffer(target, this.handle);
        this.gl.bufferData(target, data, usage);
        this.gl.bindBuffer(target, null);
        this.usage = usage;
        this.debugData = null;
        this.bytesUsed = byteLength;
        this._trackAllocatedMemory(byteLength);
        return this;
    }
    _getTarget() {
        return this.gl.webgl2 ? 36663 : this.target;
    }
    _getAvailableElementCount(srcByteOffset) {
        const ArrayType = (0, _typedArrayUtils.getTypedArrayFromGLType)(this.accessor.type || 5126, {
            clamped: false
        });
        const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;
        return this.getElementCount() - sourceElementOffset;
    }
    _inferType(data) {
        if (!this.accessor.type) this.setAccessor(new (0, _accessorDefault.default)(this.accessor, {
            type: (0, _typedArrayUtils.getGLTypeFromTypedArray)(data)
        }));
    }
    _createHandle() {
        return this.gl.createBuffer();
    }
    _deleteHandle() {
        this.gl.deleteBuffer(this.handle);
        this._trackDeallocatedMemory();
    }
    _getParameter(pname) {
        this.gl.bindBuffer(this.target, this.handle);
        const value = this.gl.getBufferParameter(this.target, pname);
        this.gl.bindBuffer(this.target, null);
        return value;
    }
    get type() {
        (0, _gltools.log).deprecated('Buffer.type', 'Buffer.accessor.type')();
        return this.accessor.type;
    }
    get bytes() {
        (0, _gltools.log).deprecated('Buffer.bytes', 'Buffer.byteLength')();
        return this.byteLength;
    }
    setByteLength(byteLength) {
        (0, _gltools.log).deprecated('setByteLength', 'reallocate')();
        return this.reallocate(byteLength);
    }
    updateAccessor(opts) {
        (0, _gltools.log).deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();
        this.accessor = new (0, _accessorDefault.default)(this.accessor, opts);
        return this;
    }
}
exports.default = Buffer;

},{"./resource":"99wyj","./accessor":"27K3L","../webgl-utils/typed-array-utils":"9fK1r","@luma.gl/gltools":"4jTOy","../utils/assert":"8HI0c","../utils/check-props":"7Y8tM","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"27K3L":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_ACCESSOR_VALUES", ()=>DEFAULT_ACCESSOR_VALUES);
var _typedArrayUtils = require("../webgl-utils/typed-array-utils");
var _assert = require("../utils/assert");
var _checkProps = require("../utils/check-props");
const DEFAULT_ACCESSOR_VALUES = {
    offset: 0,
    stride: 0,
    type: 5126,
    size: 1,
    divisor: 0,
    normalized: false,
    integer: false
};
const PROP_CHECKS = {
    deprecatedProps: {
        instanced: 'divisor',
        isInstanced: 'divisor'
    }
};
class Accessor {
    static getBytesPerElement(accessor) {
        const ArrayType = (0, _typedArrayUtils.getTypedArrayFromGLType)(accessor.type || 5126);
        return ArrayType.BYTES_PER_ELEMENT;
    }
    static getBytesPerVertex(accessor) {
        (0, _assert.assert)(accessor.size);
        const ArrayType = (0, _typedArrayUtils.getTypedArrayFromGLType)(accessor.type || 5126);
        return ArrayType.BYTES_PER_ELEMENT * accessor.size;
    }
    static resolve() {
        for(var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++)accessors[_key] = arguments[_key];
        return new Accessor(...[
            DEFAULT_ACCESSOR_VALUES,
            ...accessors
        ]);
    }
    constructor(){
        for(var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)accessors[_key2] = arguments[_key2];
        accessors.forEach((accessor)=>this._assign(accessor));
        Object.freeze(this);
    }
    toString() {
        return JSON.stringify(this);
    }
    get BYTES_PER_ELEMENT() {
        return Accessor.getBytesPerElement(this);
    }
    get BYTES_PER_VERTEX() {
        return Accessor.getBytesPerVertex(this);
    }
    _assign() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        props = (0, _checkProps.checkProps)('Accessor', props, PROP_CHECKS);
        if (props.type !== undefined) {
            this.type = props.type;
            if (props.type === 5124 || props.type === 5125) this.integer = true;
        }
        if (props.size !== undefined) this.size = props.size;
        if (props.offset !== undefined) this.offset = props.offset;
        if (props.stride !== undefined) this.stride = props.stride;
        if (props.normalized !== undefined) this.normalized = props.normalized;
        if (props.integer !== undefined) this.integer = props.integer;
        if (props.divisor !== undefined) this.divisor = props.divisor;
        if (props.buffer !== undefined) this.buffer = props.buffer;
        if (props.index !== undefined) {
            if (typeof props.index === 'boolean') this.index = props.index ? 1 : 0;
            else this.index = props.index;
        }
        if (props.instanced !== undefined) this.divisor = props.instanced ? 1 : 0;
        if (props.isInstanced !== undefined) this.divisor = props.isInstanced ? 1 : 0;
        return this;
    }
}
exports.default = Accessor;

},{"../webgl-utils/typed-array-utils":"9fK1r","../utils/assert":"8HI0c","../utils/check-props":"7Y8tM","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9fK1r":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getGLTypeFromTypedArray", ()=>getGLTypeFromTypedArray);
parcelHelpers.export(exports, "getTypedArrayFromGLType", ()=>getTypedArrayFromGLType);
parcelHelpers.export(exports, "flipRows", ()=>flipRows);
parcelHelpers.export(exports, "scalePixels", ()=>scalePixels);
const ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';
function getGLTypeFromTypedArray(arrayOrType) {
    const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
    switch(type){
        case Float32Array:
            return 5126;
        case Uint16Array:
            return 5123;
        case Uint32Array:
            return 5125;
        case Uint8Array:
            return 5121;
        case Uint8ClampedArray:
            return 5121;
        case Int8Array:
            return 5120;
        case Int16Array:
            return 5122;
        case Int32Array:
            return 5124;
        default:
            throw new Error(ERR_TYPE_DEDUCTION);
    }
}
function getTypedArrayFromGLType(glType) {
    let { clamped = true } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    switch(glType){
        case 5126:
            return Float32Array;
        case 5123:
        case 33635:
        case 32819:
        case 32820:
            return Uint16Array;
        case 5125:
            return Uint32Array;
        case 5121:
            return clamped ? Uint8ClampedArray : Uint8Array;
        case 5120:
            return Int8Array;
        case 5122:
            return Int16Array;
        case 5124:
            return Int32Array;
        default:
            throw new Error('Failed to deduce typed array type from GL constant');
    }
}
function flipRows(_ref) {
    let { data, width, height, bytesPerPixel = 4, temp } = _ref;
    const bytesPerRow = width * bytesPerPixel;
    temp = temp || new Uint8Array(bytesPerRow);
    for(let y = 0; y < height / 2; ++y){
        const topOffset = y * bytesPerRow;
        const bottomOffset = (height - y - 1) * bytesPerRow;
        temp.set(data.subarray(topOffset, topOffset + bytesPerRow));
        data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
        data.set(temp, bottomOffset);
    }
}
function scalePixels(_ref2) {
    let { data, width, height } = _ref2;
    const newWidth = Math.round(width / 2);
    const newHeight = Math.round(height / 2);
    const newData = new Uint8Array(newWidth * newHeight * 4);
    for(let y = 0; y < newHeight; y++){
        for(let x = 0; x < newWidth; x++)for(let c = 0; c < 4; c++)newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];
    }
    return {
        data: newData,
        width: newWidth,
        height: newHeight
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7Y8tM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkProps", ()=>checkProps);
var _gltools = require("@luma.gl/gltools");
function checkProps(className, props, propChecks) {
    const { removedProps = {}, deprecatedProps = {}, replacedProps = {} } = propChecks;
    for(const propName in removedProps)if (propName in props) {
        const replacementProp = removedProps[propName];
        const replacement = replacementProp ? "".concat(className, ".").concat(removedProps[propName]) : 'N/A';
        (0, _gltools.log).removed("".concat(className, ".").concat(propName), replacement)();
    }
    for(const propName in deprecatedProps)if (propName in props) {
        const replacementProp = deprecatedProps[propName];
        (0, _gltools.log).deprecated("".concat(className, ".").concat(propName), "".concat(className, ".").concat(replacementProp))();
    }
    let newProps = null;
    for(const propName in replacedProps)if (propName in props) {
        const replacementProp = replacedProps[propName];
        (0, _gltools.log).deprecated("".concat(className, ".").concat(propName), "".concat(className, ".").concat(replacementProp))();
        newProps = newProps || Object.assign({}, props);
        newProps[replacementProp] = props[propName];
        delete newProps[propName];
    }
    return newProps || props;
}

},{"@luma.gl/gltools":"4jTOy","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4QtKK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TEXTURE_FORMATS", ()=>TEXTURE_FORMATS);
parcelHelpers.export(exports, "DATA_FORMAT_CHANNELS", ()=>DATA_FORMAT_CHANNELS);
parcelHelpers.export(exports, "TYPE_SIZES", ()=>TYPE_SIZES);
parcelHelpers.export(exports, "isFormatSupported", ()=>isFormatSupported);
parcelHelpers.export(exports, "isLinearFilteringSupported", ()=>isLinearFilteringSupported);
var _gltools = require("@luma.gl/gltools");
const TEXTURE_FORMATS = {
    [6407]: {
        dataFormat: 6407,
        types: [
            5121,
            33635
        ]
    },
    [6408]: {
        dataFormat: 6408,
        types: [
            5121,
            32819,
            32820
        ]
    },
    [6406]: {
        dataFormat: 6406,
        types: [
            5121
        ]
    },
    [6409]: {
        dataFormat: 6409,
        types: [
            5121
        ]
    },
    [6410]: {
        dataFormat: 6410,
        types: [
            5121
        ]
    },
    [33326]: {
        dataFormat: 6403,
        types: [
            5126
        ],
        gl2: true
    },
    [33328]: {
        dataFormat: 33319,
        types: [
            5126
        ],
        gl2: true
    },
    [34837]: {
        dataFormat: 6407,
        types: [
            5126
        ],
        gl2: true
    },
    [34836]: {
        dataFormat: 6408,
        types: [
            5126
        ],
        gl2: true
    }
};
const DATA_FORMAT_CHANNELS = {
    [6403]: 1,
    [36244]: 1,
    [33319]: 2,
    [33320]: 2,
    [6407]: 3,
    [36248]: 3,
    [6408]: 4,
    [36249]: 4,
    [6402]: 1,
    [34041]: 1,
    [6406]: 1,
    [6409]: 1,
    [6410]: 2
};
const TYPE_SIZES = {
    [5126]: 4,
    [5125]: 4,
    [5124]: 4,
    [5123]: 2,
    [5122]: 2,
    [5131]: 2,
    [5120]: 1,
    [5121]: 1
};
function isFormatSupported(gl, format) {
    const info = TEXTURE_FORMATS[format];
    if (!info) return false;
    if (info.gl1 === undefined && info.gl2 === undefined) return true;
    const value = (0, _gltools.isWebGL2)(gl) ? info.gl2 || info.gl1 : info.gl1;
    return typeof value === 'string' ? gl.getExtension(value) : value;
}
function isLinearFilteringSupported(gl, format) {
    const info = TEXTURE_FORMATS[format];
    switch(info && info.types[0]){
        case 5126:
            return gl.getExtension('OES_texture_float_linear');
        case 5131:
            return gl.getExtension('OES_texture_half_float_linear');
        default:
            return true;
    }
}

},{"@luma.gl/gltools":"4jTOy","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fC7bB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setPathPrefix", ()=>setPathPrefix);
parcelHelpers.export(exports, "loadFile", ()=>loadFile);
parcelHelpers.export(exports, "loadImage", ()=>loadImage);
var _assert = require("../utils/assert");
let pathPrefix = '';
function setPathPrefix(prefix) {
    pathPrefix = prefix;
}
function loadFile(url) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _assert.assert)(typeof url === 'string');
    url = pathPrefix + url;
    const dataType = options.dataType || 'text';
    return fetch(url, options).then((res)=>res[dataType]());
}
function loadImage(url, opts) {
    (0, _assert.assert)(typeof url === 'string');
    url = pathPrefix + url;
    return new Promise((resolve, reject)=>{
        try {
            const image = new Image();
            image.onload = ()=>resolve(image);
            image.onerror = ()=>reject(new Error("Could not load image ".concat(url, ".")));
            image.crossOrigin = opts && opts.crossOrigin || 'anonymous';
            image.src = url;
        } catch (error) {
            reject(error);
        }
    });
}

},{"../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lWNMz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _texture = require("./texture");
var _textureDefault = parcelHelpers.interopDefault(_texture);
const FACES = [
    34069,
    34070,
    34071,
    34072,
    34073,
    34074
];
class TextureCube extends (0, _textureDefault.default) {
    get [Symbol.toStringTag]() {
        return 'TextureCube';
    }
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _gltools.assertWebGLContext)(gl);
        super(gl, Object.assign({}, props, {
            target: 34067
        }));
        this.initialize(props);
        Object.seal(this);
    }
    initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { mipmaps = true, parameters = {} } = props;
        this.opts = props;
        this.setCubeMapImageData(props).then(()=>{
            this.loaded = true;
            if (mipmaps) this.generateMipmap(props);
            this.setParameters(parameters);
        });
        return this;
    }
    subImage(_ref) {
        let { face, data, x = 0, y = 0, mipmapLevel = 0 } = _ref;
        return this._subImage({
            target: face,
            data,
            x,
            y,
            mipmapLevel
        });
    }
    async setCubeMapImageData(_ref2) {
        let { width, height, pixels, data, border = 0, format = 6408, type = 5121 } = _ref2;
        const { gl } = this;
        const imageDataMap = pixels || data;
        const resolvedFaces = await Promise.all(FACES.map((face)=>{
            const facePixels = imageDataMap[face];
            return Promise.all(Array.isArray(facePixels) ? facePixels : [
                facePixels
            ]);
        }));
        this.bind();
        FACES.forEach((face, index)=>{
            if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) (0, _gltools.log).warn("".concat(this.id, " has mipmap and multiple LODs."))();
            resolvedFaces[index].forEach((image, lodLevel)=>{
                if (width && height) gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);
                else gl.texImage2D(face, lodLevel, format, format, type, image);
            });
        });
        this.unbind();
    }
    setImageDataForFace(options) {
        const { face, width, height, pixels, data, border = 0, format = 6408, type = 5121 } = options;
        const { gl } = this;
        const imageData = pixels || data;
        this.bind();
        if (imageData instanceof Promise) imageData.then((resolvedImageData)=>this.setImageDataForFace(Object.assign({}, options, {
                face,
                data: resolvedImageData,
                pixels: resolvedImageData
            })));
        else if (this.width || this.height) gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);
        else gl.texImage2D(face, 0, format, format, type, imageData);
        return this;
    }
}
exports.default = TextureCube;
TextureCube.FACES = FACES;

},{"@luma.gl/gltools":"4jTOy","./texture":"2UaoF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5Inlk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _texture = require("./texture");
var _textureDefault = parcelHelpers.interopDefault(_texture);
var _textureFormats = require("./texture-formats");
var _buffer = require("./buffer");
var _bufferDefault = parcelHelpers.interopDefault(_buffer);
class Texture3D extends (0, _textureDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Texture3D';
    }
    static isSupported(gl) {
        return (0, _gltools.isWebGL2)(gl);
    }
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _gltools.assertWebGL2Context)(gl);
        props = Object.assign({
            depth: 1
        }, props, {
            target: 32879,
            unpackFlipY: false
        });
        super(gl, props);
        this.initialize(props);
        Object.seal(this);
    }
    setImageData(_ref) {
        let { level = 0, dataFormat = 6408, width, height, depth = 1, border = 0, format, type = 5121, offset = 0, data, parameters = {} } = _ref;
        this._trackDeallocatedMemory('Texture');
        this.gl.bindTexture(this.target, this.handle);
        (0, _gltools.withParameters)(this.gl, parameters, ()=>{
            if (ArrayBuffer.isView(data)) this.gl.texImage3D(this.target, level, dataFormat, width, height, depth, border, format, type, data);
            if (data instanceof (0, _bufferDefault.default)) {
                this.gl.bindBuffer(35052, data.handle);
                this.gl.texImage3D(this.target, level, dataFormat, width, height, depth, border, format, type, offset);
            }
        });
        if (data && data.byteLength) this._trackAllocatedMemory(data.byteLength, 'Texture');
        else {
            const channels = (0, _textureFormats.DATA_FORMAT_CHANNELS)[this.dataFormat] || 4;
            const channelSize = (0, _textureFormats.TYPE_SIZES)[this.type] || 1;
            this._trackAllocatedMemory(this.width * this.height * this.depth * channels * channelSize, 'Texture');
        }
        this.loaded = true;
        return this;
    }
}
exports.default = Texture3D;

},{"@luma.gl/gltools":"4jTOy","./texture":"2UaoF","./texture-formats":"4QtKK","./buffer":"kpTpO","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"d8j9m":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FRAMEBUFFER_ATTACHMENT_PARAMETERS", ()=>FRAMEBUFFER_ATTACHMENT_PARAMETERS);
var _gltools = require("@luma.gl/gltools");
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
var _texture2D = require("./texture-2d");
var _texture2DDefault = parcelHelpers.interopDefault(_texture2D);
var _renderbuffer = require("./renderbuffer");
var _renderbufferDefault = parcelHelpers.interopDefault(_renderbuffer);
var _clear = require("./clear");
var _copyAndBlitJs = require("./copy-and-blit.js");
var _features = require("../features");
var _constantsToKeys = require("../webgl-utils/constants-to-keys");
var _assert = require("../utils/assert");
const ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';
class Framebuffer extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Framebuffer';
    }
    static isSupported(gl) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const { colorBufferFloat, colorBufferHalfFloat } = options;
        let supported = true;
        if (colorBufferFloat) supported = Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('WEBGL_color_buffer_float') || gl.getExtension('OES_texture_float'));
        if (colorBufferHalfFloat) supported = supported && Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('EXT_color_buffer_half_float'));
        return supported;
    }
    static getDefaultFramebuffer(gl) {
        gl.luma = gl.luma || {};
        gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {
            id: 'default-framebuffer',
            handle: null,
            attachments: {}
        });
        return gl.luma.defaultFramebuffer;
    }
    get MAX_COLOR_ATTACHMENTS() {
        const gl2 = (0, _gltools.assertWebGL2Context)(this.gl);
        return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);
    }
    get MAX_DRAW_BUFFERS() {
        const gl2 = (0, _gltools.assertWebGL2Context)(this.gl);
        return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);
    }
    constructor(gl){
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        super(gl, opts);
        this.width = null;
        this.height = null;
        this.attachments = {};
        this.readBuffer = 36064;
        this.drawBuffers = [
            36064
        ];
        this.ownResources = [];
        this.initialize(opts);
        Object.seal(this);
    }
    get color() {
        return this.attachments[36064] || null;
    }
    get texture() {
        return this.attachments[36064] || null;
    }
    get depth() {
        return this.attachments[36096] || this.attachments[33306] || null;
    }
    get stencil() {
        return this.attachments[36128] || this.attachments[33306] || null;
    }
    initialize(_ref) {
        let { width = 1, height = 1, attachments = null, color = true, depth = true, stencil = false, check = true, readBuffer, drawBuffers } = _ref;
        (0, _assert.assert)(width >= 0 && height >= 0, 'Width and height need to be integers');
        this.width = width;
        this.height = height;
        if (attachments) for(const attachment in attachments){
            const target = attachments[attachment];
            const object = Array.isArray(target) ? target[0] : target;
            object.resize({
                width,
                height
            });
        }
        else attachments = this._createDefaultAttachments(color, depth, stencil, width, height);
        this.update({
            clearAttachments: true,
            attachments,
            readBuffer,
            drawBuffers
        });
        if (attachments && check) this.checkStatus();
    }
    delete() {
        for (const resource of this.ownResources)resource.delete();
        super.delete();
        return this;
    }
    update(_ref2) {
        let { attachments = {}, readBuffer, drawBuffers, clearAttachments = false, resizeAttachments = true } = _ref2;
        this.attach(attachments, {
            clearAttachments,
            resizeAttachments
        });
        const { gl } = this;
        const prevHandle = gl.bindFramebuffer(36160, this.handle);
        if (readBuffer) this._setReadBuffer(readBuffer);
        if (drawBuffers) this._setDrawBuffers(drawBuffers);
        gl.bindFramebuffer(36160, prevHandle || null);
        return this;
    }
    resize() {
        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        let { width, height } = options;
        if (this.handle === null) {
            (0, _assert.assert)(width === undefined && height === undefined);
            this.width = this.gl.drawingBufferWidth;
            this.height = this.gl.drawingBufferHeight;
            return this;
        }
        if (width === undefined) width = this.gl.drawingBufferWidth;
        if (height === undefined) height = this.gl.drawingBufferHeight;
        if (width !== this.width && height !== this.height) (0, _gltools.log).log(2, "Resizing framebuffer ".concat(this.id, " to ").concat(width, "x").concat(height))();
        for(const attachmentPoint in this.attachments)this.attachments[attachmentPoint].resize({
            width,
            height
        });
        this.width = width;
        this.height = height;
        return this;
    }
    attach(attachments) {
        let { clearAttachments = false, resizeAttachments = true } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const newAttachments = {};
        if (clearAttachments) Object.keys(this.attachments).forEach((key)=>{
            newAttachments[key] = null;
        });
        Object.assign(newAttachments, attachments);
        const prevHandle = this.gl.bindFramebuffer(36160, this.handle);
        for(const key in newAttachments){
            (0, _assert.assert)(key !== undefined, 'Misspelled framebuffer binding point?');
            const attachment = Number(key);
            const descriptor = newAttachments[attachment];
            let object = descriptor;
            if (!object) this._unattach(attachment);
            else if (object instanceof (0, _renderbufferDefault.default)) this._attachRenderbuffer({
                attachment,
                renderbuffer: object
            });
            else if (Array.isArray(descriptor)) {
                const [texture, layer = 0, level = 0] = descriptor;
                object = texture;
                this._attachTexture({
                    attachment,
                    texture,
                    layer,
                    level
                });
            } else this._attachTexture({
                attachment,
                texture: object,
                layer: 0,
                level: 0
            });
            if (resizeAttachments && object) object.resize({
                width: this.width,
                height: this.height
            });
        }
        this.gl.bindFramebuffer(36160, prevHandle || null);
        Object.assign(this.attachments, attachments);
        Object.keys(this.attachments).filter((key)=>!this.attachments[key]).forEach((key)=>{
            delete this.attachments[key];
        });
    }
    checkStatus() {
        const { gl } = this;
        const status = this.getStatus();
        if (status !== 36053) throw new Error(_getFrameBufferStatus(status));
        return this;
    }
    getStatus() {
        const { gl } = this;
        const prevHandle = gl.bindFramebuffer(36160, this.handle);
        const status = gl.checkFramebufferStatus(36160);
        gl.bindFramebuffer(36160, prevHandle || null);
        return status;
    }
    clear() {
        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { color, depth, stencil, drawBuffers = [] } = options;
        const prevHandle = this.gl.bindFramebuffer(36160, this.handle);
        if (color || depth || stencil) (0, _clear.clear)(this.gl, {
            color,
            depth,
            stencil
        });
        drawBuffers.forEach((value, drawBuffer)=>{
            (0, _clear.clearBuffer)(this.gl, {
                drawBuffer,
                value
            });
        });
        this.gl.bindFramebuffer(36160, prevHandle || null);
        return this;
    }
    readPixels() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _gltools.log).error('Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)')();
        return null;
    }
    readPixelsToBuffer() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _gltools.log).error('Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)')();
        return null;
    }
    copyToDataUrl() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _gltools.log).error('Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)')();
        return null;
    }
    copyToImage() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _gltools.log).error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();
        return null;
    }
    copyToTexture() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _gltools.log).error('Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})')();
        return null;
    }
    blit() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _gltools.log).error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();
        return null;
    }
    invalidate(_ref3) {
        let { attachments = [], x = 0, y = 0, width, height } = _ref3;
        const gl2 = (0, _gltools.assertWebGL2Context)(this.gl);
        const prevHandle = gl2.bindFramebuffer(36008, this.handle);
        const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;
        if (invalidateAll) gl2.invalidateFramebuffer(36008, attachments);
        else gl2.invalidateFramebuffer(36008, attachments, x, y, width, height);
        gl2.bindFramebuffer(36008, prevHandle);
        return this;
    }
    getAttachmentParameter(attachment, pname, keys) {
        let value = this._getAttachmentParameterFallback(pname);
        if (value === null) {
            this.gl.bindFramebuffer(36160, this.handle);
            value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);
            this.gl.bindFramebuffer(36160, null);
        }
        if (keys && value > 1000) value = (0, _constantsToKeys.getKey)(this.gl, value);
        return value;
    }
    getAttachmentParameters() {
        let attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;
        let keys = arguments.length > 1 ? arguments[1] : undefined;
        let parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];
        const values = {};
        for (const pname of parameters){
            const key = keys ? (0, _constantsToKeys.getKey)(this.gl, pname) : pname;
            values[key] = this.getAttachmentParameter(attachment, pname, keys);
        }
        return values;
    }
    getParameters() {
        let keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        const attachments = Object.keys(this.attachments);
        const parameters = {};
        for (const attachmentName of attachments){
            const attachment = Number(attachmentName);
            const key = keys ? (0, _constantsToKeys.getKey)(this.gl, attachment) : attachment;
            parameters[key] = this.getAttachmentParameters(attachment, keys);
        }
        return parameters;
    }
    show() {
        if (typeof window !== 'undefined') window.open((0, _copyAndBlitJs.copyToDataUrl)(this), 'luma-debug-texture');
        return this;
    }
    log() {
        let logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        if (logLevel > (0, _gltools.log).level || typeof window === 'undefined') return this;
        message = message || "Framebuffer ".concat(this.id);
        const image = (0, _copyAndBlitJs.copyToDataUrl)(this, {
            targetMaxHeight: 100
        });
        (0, _gltools.log).image({
            logLevel,
            message,
            image
        }, message)();
        return this;
    }
    bind() {
        let { target = 36160 } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.gl.bindFramebuffer(target, this.handle);
        return this;
    }
    unbind() {
        let { target = 36160 } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.gl.bindFramebuffer(target, null);
        return this;
    }
    _createDefaultAttachments(color, depth, stencil, width, height) {
        let defaultAttachments = null;
        if (color) {
            defaultAttachments = defaultAttachments || {};
            defaultAttachments[36064] = new (0, _texture2DDefault.default)(this.gl, {
                id: "".concat(this.id, "-color0"),
                pixels: null,
                format: 6408,
                type: 5121,
                width,
                height,
                mipmaps: false,
                parameters: {
                    [10241]: 9729,
                    [10240]: 9729,
                    [10242]: 33071,
                    [10243]: 33071
                }
            });
            this.ownResources.push(defaultAttachments[36064]);
        }
        if (depth && stencil) {
            defaultAttachments = defaultAttachments || {};
            defaultAttachments[33306] = new (0, _renderbufferDefault.default)(this.gl, {
                id: "".concat(this.id, "-depth-stencil"),
                format: 35056,
                width,
                height: 111
            });
            this.ownResources.push(defaultAttachments[33306]);
        } else if (depth) {
            defaultAttachments = defaultAttachments || {};
            defaultAttachments[36096] = new (0, _renderbufferDefault.default)(this.gl, {
                id: "".concat(this.id, "-depth"),
                format: 33189,
                width,
                height
            });
            this.ownResources.push(defaultAttachments[36096]);
        } else if (stencil) (0, _assert.assert)(false);
        return defaultAttachments;
    }
    _unattach(attachment) {
        const oldAttachment = this.attachments[attachment];
        if (!oldAttachment) return;
        if (oldAttachment instanceof (0, _renderbufferDefault.default)) this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);
        else this.gl.framebufferTexture2D(36160, attachment, 3553, null, 0);
        delete this.attachments[attachment];
    }
    _attachRenderbuffer(_ref4) {
        let { attachment = 36064, renderbuffer } = _ref4;
        const { gl } = this;
        gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle);
        this.attachments[attachment] = renderbuffer;
    }
    _attachTexture(_ref5) {
        let { attachment = 36064, texture, layer, level } = _ref5;
        const { gl } = this;
        gl.bindTexture(texture.target, texture.handle);
        switch(texture.target){
            case 35866:
            case 32879:
                const gl2 = (0, _gltools.assertWebGL2Context)(gl);
                gl2.framebufferTextureLayer(36160, attachment, texture.target, level, layer);
                break;
            case 34067:
                const face = mapIndexToCubeMapFace(layer);
                gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);
                break;
            case 3553:
                gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);
                break;
            default:
                (0, _assert.assert)(false, 'Illegal texture type');
        }
        gl.bindTexture(texture.target, null);
        this.attachments[attachment] = texture;
    }
    _setReadBuffer(readBuffer) {
        const gl2 = (0, _gltools.getWebGL2Context)(this.gl);
        if (gl2) gl2.readBuffer(readBuffer);
        else (0, _assert.assert)(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);
        this.readBuffer = readBuffer;
    }
    _setDrawBuffers(drawBuffers) {
        const { gl } = this;
        const gl2 = (0, _gltools.assertWebGL2Context)(gl);
        if (gl2) gl2.drawBuffers(drawBuffers);
        else {
            const ext = gl.getExtension('WEBGL_draw_buffers');
            if (ext) ext.drawBuffersWEBGL(drawBuffers);
            else (0, _assert.assert)(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);
        }
        this.drawBuffers = drawBuffers;
    }
    _getAttachmentParameterFallback(pname) {
        const caps = (0, _features.getFeatures)(this.gl);
        switch(pname){
            case 36052:
                return !caps.WEBGL2 ? 0 : null;
            case 33298:
            case 33299:
            case 33300:
            case 33301:
            case 33302:
            case 33303:
                return !caps.WEBGL2 ? 8 : null;
            case 33297:
                return !caps.WEBGL2 ? 5125 : null;
            case 33296:
                return !caps.WEBGL2 && !caps.EXT_sRGB ? 9729 : null;
            default:
                return null;
        }
    }
    _createHandle() {
        return this.gl.createFramebuffer();
    }
    _deleteHandle() {
        this.gl.deleteFramebuffer(this.handle);
    }
    _bindHandle(handle) {
        return this.gl.bindFramebuffer(36160, handle);
    }
}
exports.default = Framebuffer;
function mapIndexToCubeMapFace(layer) {
    return layer < 34069 ? layer + 34069 : layer;
}
function _getFrameBufferStatus(status) {
    const STATUS = Framebuffer.STATUS || {};
    return STATUS[status] || "Framebuffer error ".concat(status);
}
const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [
    36049,
    36048,
    33296,
    33298,
    33299,
    33300,
    33301,
    33302,
    33303
];
Framebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;

},{"@luma.gl/gltools":"4jTOy","./resource":"99wyj","./texture-2d":"1SG03","./renderbuffer":"9893Q","./clear":"22a7t","./copy-and-blit.js":"lsaVh","../features":"jUhDA","../webgl-utils/constants-to-keys":"bDQE3","../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9893Q":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
var _renderbufferFormats = require("./renderbuffer-formats");
var _renderbufferFormatsDefault = parcelHelpers.interopDefault(_renderbufferFormats);
var _gltools = require("@luma.gl/gltools");
var _assert = require("../utils/assert");
function isFormatSupported(gl, format, formats) {
    const info = formats[format];
    if (!info) return false;
    const value = (0, _gltools.isWebGL2)(gl) ? info.gl2 || info.gl1 : info.gl1;
    if (typeof value === 'string') return gl.getExtension(value);
    return value;
}
class Renderbuffer extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Renderbuffer';
    }
    static isSupported(gl) {
        let { format } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            format: null
        };
        return !format || isFormatSupported(gl, format, (0, _renderbufferFormatsDefault.default));
    }
    static getSamplesForFormat(gl, _ref) {
        let { format } = _ref;
        return gl.getInternalformatParameter(36161, format, 32937);
    }
    constructor(gl){
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        super(gl, opts);
        this.initialize(opts);
        Object.seal(this);
    }
    initialize(_ref2) {
        let { format, width = 1, height = 1, samples = 0 } = _ref2;
        (0, _assert.assert)(format, 'Needs format');
        this._trackDeallocatedMemory();
        this.gl.bindRenderbuffer(36161, this.handle);
        if (samples !== 0 && (0, _gltools.isWebGL2)(this.gl)) this.gl.renderbufferStorageMultisample(36161, samples, format, width, height);
        else this.gl.renderbufferStorage(36161, format, width, height);
        this.format = format;
        this.width = width;
        this.height = height;
        this.samples = samples;
        this._trackAllocatedMemory(this.width * this.height * (this.samples || 1) * (0, _renderbufferFormatsDefault.default)[this.format].bpp);
        return this;
    }
    resize(_ref3) {
        let { width, height } = _ref3;
        if (width !== this.width || height !== this.height) return this.initialize({
            width,
            height,
            format: this.format,
            samples: this.samples
        });
        return this;
    }
    _createHandle() {
        return this.gl.createRenderbuffer();
    }
    _deleteHandle() {
        this.gl.deleteRenderbuffer(this.handle);
        this._trackDeallocatedMemory();
    }
    _bindHandle(handle) {
        this.gl.bindRenderbuffer(36161, handle);
    }
    _syncHandle(handle) {
        this.format = this.getParameter(36164);
        this.width = this.getParameter(36162);
        this.height = this.getParameter(36163);
        this.samples = this.getParameter(36011);
    }
    _getParameter(pname) {
        this.gl.bindRenderbuffer(36161, this.handle);
        const value = this.gl.getRenderbufferParameter(36161, pname);
        return value;
    }
}
exports.default = Renderbuffer;

},{"./resource":"99wyj","./renderbuffer-formats":"aAelk","@luma.gl/gltools":"4jTOy","../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aAelk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const EXT_FLOAT_WEBGL2 = 'EXT_color_buffer_float';
exports.default = {
    [33189]: {
        bpp: 2
    },
    [33190]: {
        gl2: true,
        bpp: 3
    },
    [36012]: {
        gl2: true,
        bpp: 4
    },
    [36168]: {
        bpp: 1
    },
    [34041]: {
        bpp: 4
    },
    [35056]: {
        gl2: true,
        bpp: 4
    },
    [36013]: {
        gl2: true,
        bpp: 5
    },
    [32854]: {
        bpp: 2
    },
    [36194]: {
        bpp: 2
    },
    [32855]: {
        bpp: 2
    },
    [33321]: {
        gl2: true,
        bpp: 1
    },
    [33330]: {
        gl2: true,
        bpp: 1
    },
    [33329]: {
        gl2: true,
        bpp: 1
    },
    [33332]: {
        gl2: true,
        bpp: 2
    },
    [33331]: {
        gl2: true,
        bpp: 2
    },
    [33334]: {
        gl2: true,
        bpp: 4
    },
    [33333]: {
        gl2: true,
        bpp: 4
    },
    [33323]: {
        gl2: true,
        bpp: 2
    },
    [33336]: {
        gl2: true,
        bpp: 2
    },
    [33335]: {
        gl2: true,
        bpp: 2
    },
    [33338]: {
        gl2: true,
        bpp: 4
    },
    [33337]: {
        gl2: true,
        bpp: 4
    },
    [33340]: {
        gl2: true,
        bpp: 8
    },
    [33339]: {
        gl2: true,
        bpp: 8
    },
    [32849]: {
        gl2: true,
        bpp: 3
    },
    [32856]: {
        gl2: true,
        bpp: 4
    },
    [32857]: {
        gl2: true,
        bpp: 4
    },
    [36220]: {
        gl2: true,
        bpp: 4
    },
    [36238]: {
        gl2: true,
        bpp: 4
    },
    [36975]: {
        gl2: true,
        bpp: 4
    },
    [36214]: {
        gl2: true,
        bpp: 8
    },
    [36232]: {
        gl2: true,
        bpp: 8
    },
    [36226]: {
        gl2: true,
        bpp: 16
    },
    [36208]: {
        gl2: true,
        bpp: 16
    },
    [33325]: {
        gl2: EXT_FLOAT_WEBGL2,
        bpp: 2
    },
    [33327]: {
        gl2: EXT_FLOAT_WEBGL2,
        bpp: 4
    },
    [34842]: {
        gl2: EXT_FLOAT_WEBGL2,
        bpp: 8
    },
    [33326]: {
        gl2: EXT_FLOAT_WEBGL2,
        bpp: 4
    },
    [33328]: {
        gl2: EXT_FLOAT_WEBGL2,
        bpp: 8
    },
    [34836]: {
        gl2: EXT_FLOAT_WEBGL2,
        bpp: 16
    },
    [35898]: {
        gl2: EXT_FLOAT_WEBGL2,
        bpp: 4
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"22a7t":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clear", ()=>clear);
parcelHelpers.export(exports, "clearBuffer", ()=>clearBuffer);
var _gltools = require("@luma.gl/gltools");
var _assert = require("../utils/assert");
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_COLOR = 0x1800;
const GL_DEPTH = 0x1801;
const GL_STENCIL = 0x1802;
const GL_DEPTH_STENCIL = 0x84f9;
const ERR_ARGUMENTS = 'clear: bad arguments';
function clear(gl) {
    let { framebuffer = null, color = null, depth = null, stencil = null } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const parameters = {};
    if (framebuffer) parameters.framebuffer = framebuffer;
    let clearFlags = 0;
    if (color) {
        clearFlags |= GL_COLOR_BUFFER_BIT;
        if (color !== true) parameters.clearColor = color;
    }
    if (depth) {
        clearFlags |= GL_DEPTH_BUFFER_BIT;
        if (depth !== true) parameters.clearDepth = depth;
    }
    if (stencil) {
        clearFlags |= GL_STENCIL_BUFFER_BIT;
        if (depth !== true) parameters.clearStencil = depth;
    }
    (0, _assert.assert)(clearFlags !== 0, ERR_ARGUMENTS);
    (0, _gltools.withParameters)(gl, parameters, ()=>{
        gl.clear(clearFlags);
    });
}
function clearBuffer(gl) {
    let { framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [
        0,
        0,
        0,
        0
    ] } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _gltools.assertWebGL2Context)(gl);
    (0, _gltools.withParameters)(gl, {
        framebuffer
    }, ()=>{
        switch(buffer){
            case GL_COLOR:
                switch(value.constructor){
                    case Int32Array:
                        gl.clearBufferiv(buffer, drawBuffer, value);
                        break;
                    case Uint32Array:
                        gl.clearBufferuiv(buffer, drawBuffer, value);
                        break;
                    case Float32Array:
                    default:
                        gl.clearBufferfv(buffer, drawBuffer, value);
                }
                break;
            case GL_DEPTH:
                gl.clearBufferfv(GL_DEPTH, 0, [
                    value
                ]);
                break;
            case GL_STENCIL:
                gl.clearBufferiv(GL_STENCIL, 0, [
                    value
                ]);
                break;
            case GL_DEPTH_STENCIL:
                const [depth, stencil] = value;
                gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);
                break;
            default:
                (0, _assert.assert)(false, ERR_ARGUMENTS);
        }
    });
}

},{"@luma.gl/gltools":"4jTOy","../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lsaVh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "readPixelsToArray", ()=>readPixelsToArray);
parcelHelpers.export(exports, "readPixelsToBuffer", ()=>readPixelsToBuffer);
parcelHelpers.export(exports, "copyToDataUrl", ()=>copyToDataUrl);
parcelHelpers.export(exports, "copyToImage", ()=>copyToImage);
parcelHelpers.export(exports, "copyToTexture", ()=>copyToTexture);
parcelHelpers.export(exports, "blit", ()=>blit);
var _buffer = require("./buffer");
var _bufferDefault = parcelHelpers.interopDefault(_buffer);
var _framebuffer = require("./framebuffer");
var _framebufferDefault = parcelHelpers.interopDefault(_framebuffer);
var _texture = require("./texture");
var _textureDefault = parcelHelpers.interopDefault(_texture);
var _gltools = require("@luma.gl/gltools");
var _typedArrayUtils = require("../webgl-utils/typed-array-utils");
var _formatUtils = require("../webgl-utils/format-utils");
var _textureUtils = require("../webgl-utils/texture-utils");
var _assert = require("../utils/assert");
function readPixelsToArray(source) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const { sourceX = 0, sourceY = 0, sourceFormat = 6408 } = options;
    let { sourceAttachment = 36064, target = null, sourceWidth, sourceHeight, sourceType } = options;
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0, _assert.assert)(framebuffer);
    const { gl, handle, attachments } = framebuffer;
    sourceWidth = sourceWidth || framebuffer.width;
    sourceHeight = sourceHeight || framebuffer.height;
    if (sourceAttachment === 36064 && handle === null) sourceAttachment = 1028;
    (0, _assert.assert)(attachments[sourceAttachment]);
    sourceType = sourceType || attachments[sourceAttachment].type;
    target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);
    sourceType = sourceType || (0, _typedArrayUtils.getGLTypeFromTypedArray)(target);
    const prevHandle = gl.bindFramebuffer(36160, handle);
    gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);
    gl.bindFramebuffer(36160, prevHandle || null);
    if (deleteFramebuffer) framebuffer.delete();
    return target;
}
function readPixelsToBuffer(source, _ref) {
    let { sourceX = 0, sourceY = 0, sourceFormat = 6408, target = null, targetByteOffset = 0, sourceWidth, sourceHeight, sourceType } = _ref;
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0, _assert.assert)(framebuffer);
    sourceWidth = sourceWidth || framebuffer.width;
    sourceHeight = sourceHeight || framebuffer.height;
    const gl2 = (0, _gltools.assertWebGL2Context)(framebuffer.gl);
    sourceType = sourceType || (target ? target.type : 5121);
    if (!target) {
        const components = (0, _formatUtils.glFormatToComponents)(sourceFormat);
        const byteCount = (0, _formatUtils.glTypeToBytes)(sourceType);
        const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;
        target = new (0, _bufferDefault.default)(gl2, {
            byteLength,
            accessor: {
                type: sourceType,
                size: components
            }
        });
    }
    target.bind({
        target: 35051
    });
    (0, _gltools.withParameters)(gl2, {
        framebuffer
    }, ()=>{
        gl2.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, targetByteOffset);
    });
    target.unbind({
        target: 35051
    });
    if (deleteFramebuffer) framebuffer.delete();
    return target;
}
function copyToDataUrl(source) {
    let { sourceAttachment = 36064, targetMaxHeight = Number.MAX_SAFE_INTEGER } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let data = readPixelsToArray(source, {
        sourceAttachment
    });
    let { width, height } = source;
    while(height > targetMaxHeight)({ data, width, height } = (0, _typedArrayUtils.scalePixels)({
        data,
        width,
        height
    }));
    (0, _typedArrayUtils.flipRows)({
        data,
        width,
        height
    });
    const canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    const context = canvas.getContext('2d');
    const imageData = context.createImageData(width, height);
    imageData.data.set(data);
    context.putImageData(imageData, 0, 0);
    return canvas.toDataURL();
}
function copyToImage(source) {
    let { sourceAttachment = 36064, targetImage = null } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const dataUrl = copyToDataUrl(source, {
        sourceAttachment
    });
    targetImage = targetImage || new Image();
    targetImage.src = dataUrl;
    return targetImage;
}
function copyToTexture(source, target) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const { sourceX = 0, sourceY = 0, targetMipmaplevel = 0, targetInternalFormat = 6408 } = options;
    let { targetX, targetY, targetZ, width, height } = options;
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0, _assert.assert)(framebuffer);
    const { gl, handle } = framebuffer;
    const isSubCopy = typeof targetX !== 'undefined' || typeof targetY !== 'undefined' || typeof targetZ !== 'undefined';
    targetX = targetX || 0;
    targetY = targetY || 0;
    targetZ = targetZ || 0;
    const prevHandle = gl.bindFramebuffer(36160, handle);
    (0, _assert.assert)(target);
    let texture = null;
    if (target instanceof (0, _textureDefault.default)) {
        texture = target;
        width = Number.isFinite(width) ? width : texture.width;
        height = Number.isFinite(height) ? height : texture.height;
        texture.bind(0);
        target = texture.target;
    }
    if (!isSubCopy) gl.copyTexImage2D(target, targetMipmaplevel, targetInternalFormat, sourceX, sourceY, width, height, 0);
    else switch(target){
        case 3553:
        case 34067:
            gl.copyTexSubImage2D(target, targetMipmaplevel, targetX, targetY, sourceX, sourceY, width, height);
            break;
        case 35866:
        case 32879:
            const gl2 = (0, _gltools.assertWebGL2Context)(gl);
            gl2.copyTexSubImage3D(target, targetMipmaplevel, targetX, targetY, targetZ, sourceX, sourceY, width, height);
            break;
        default:
    }
    if (texture) texture.unbind();
    gl.bindFramebuffer(36160, prevHandle || null);
    if (deleteFramebuffer) framebuffer.delete();
    return texture;
}
function blit(source, target) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const { sourceX0 = 0, sourceY0 = 0, targetX0 = 0, targetY0 = 0, color = true, depth = false, stencil = false, filter = 9728 } = options;
    let { sourceX1, sourceY1, targetX1, targetY1, sourceAttachment = 36064, mask = 0 } = options;
    const { framebuffer: srcFramebuffer, deleteFramebuffer: deleteSrcFramebuffer } = getFramebuffer(source);
    const { framebuffer: dstFramebuffer, deleteFramebuffer: deleteDstFramebuffer } = getFramebuffer(target);
    (0, _assert.assert)(srcFramebuffer);
    (0, _assert.assert)(dstFramebuffer);
    const { gl, handle, width, height, readBuffer } = dstFramebuffer;
    const gl2 = (0, _gltools.assertWebGL2Context)(gl);
    if (!srcFramebuffer.handle && sourceAttachment === 36064) sourceAttachment = 1028;
    if (color) mask |= 16384;
    if (depth) mask |= 256;
    if (stencil) mask |= 1024;
    if (deleteSrcFramebuffer || deleteDstFramebuffer) {
        if (mask & 1280) {
            mask = 16384;
            (0, _gltools.log).warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();
        }
    }
    (0, _assert.assert)(mask);
    sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;
    sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;
    targetX1 = targetX1 === undefined ? width : targetX1;
    targetY1 = targetY1 === undefined ? height : targetY1;
    const prevDrawHandle = gl.bindFramebuffer(36009, handle);
    const prevReadHandle = gl.bindFramebuffer(36008, srcFramebuffer.handle);
    gl2.readBuffer(sourceAttachment);
    gl2.blitFramebuffer(sourceX0, sourceY0, sourceX1, sourceY1, targetX0, targetY0, targetX1, targetY1, mask, filter);
    gl2.readBuffer(readBuffer);
    gl2.bindFramebuffer(36008, prevReadHandle || null);
    gl2.bindFramebuffer(36009, prevDrawHandle || null);
    if (deleteSrcFramebuffer) srcFramebuffer.delete();
    if (deleteDstFramebuffer) dstFramebuffer.delete();
    return dstFramebuffer;
}
function getFramebuffer(source) {
    if (!(source instanceof (0, _framebufferDefault.default))) return {
        framebuffer: (0, _textureUtils.toFramebuffer)(source),
        deleteFramebuffer: true
    };
    return {
        framebuffer: source,
        deleteFramebuffer: false
    };
}
function getPixelArray(pixelArray, type, format, width, height) {
    if (pixelArray) return pixelArray;
    type = type || 5121;
    const ArrayType = (0, _typedArrayUtils.getTypedArrayFromGLType)(type, {
        clamped: false
    });
    const components = (0, _formatUtils.glFormatToComponents)(format);
    return new ArrayType(width * height * components);
}

},{"./buffer":"kpTpO","./framebuffer":"d8j9m","./texture":"2UaoF","@luma.gl/gltools":"4jTOy","../webgl-utils/typed-array-utils":"9fK1r","../webgl-utils/format-utils":"2lh4Q","../webgl-utils/texture-utils":"9LyPO","../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2lh4Q":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "glFormatToComponents", ()=>glFormatToComponents);
parcelHelpers.export(exports, "glTypeToBytes", ()=>glTypeToBytes);
var _assert = require("../utils/assert");
function glFormatToComponents(format) {
    switch(format){
        case 6406:
        case 33326:
        case 6403:
            return 1;
        case 33328:
        case 33319:
            return 2;
        case 6407:
        case 34837:
            return 3;
        case 6408:
        case 34836:
            return 4;
        default:
            (0, _assert.assert)(false);
            return 0;
    }
}
function glTypeToBytes(type) {
    switch(type){
        case 5121:
            return 1;
        case 33635:
        case 32819:
        case 32820:
            return 2;
        case 5126:
            return 4;
        default:
            (0, _assert.assert)(false);
            return 0;
    }
}

},{"../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jUhDA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getContextInfo", ()=>(0, _limits.getContextInfo));
parcelHelpers.export(exports, "getGLContextInfo", ()=>(0, _limits.getGLContextInfo));
parcelHelpers.export(exports, "getContextLimits", ()=>(0, _limits.getContextLimits));
parcelHelpers.export(exports, "FEATURES", ()=>(0, _webglFeaturesTable.FEATURES));
parcelHelpers.export(exports, "hasFeature", ()=>(0, _features.hasFeature));
parcelHelpers.export(exports, "hasFeatures", ()=>(0, _features.hasFeatures));
parcelHelpers.export(exports, "getFeatures", ()=>(0, _features.getFeatures));
parcelHelpers.export(exports, "canCompileGLGSExtension", ()=>(0, _checkGlslExtensionDefault.default));
var _limits = require("./limits");
var _webglFeaturesTable = require("./webgl-features-table");
var _features = require("./features");
var _checkGlslExtension = require("./check-glsl-extension");
var _checkGlslExtensionDefault = parcelHelpers.interopDefault(_checkGlslExtension);

},{"./limits":false,"./webgl-features-table":"jSgHu","./features":"3pEUt","./check-glsl-extension":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jSgHu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FEATURES", ()=>FEATURES);
var _framebuffer = require("../classes/framebuffer");
var _framebufferDefault = parcelHelpers.interopDefault(_framebuffer);
var _texture2D = require("../classes/texture-2d");
var _texture2DDefault = parcelHelpers.interopDefault(_texture2D);
const FEATURES = {
    WEBGL2: 'WEBGL2',
    VERTEX_ARRAY_OBJECT: 'VERTEX_ARRAY_OBJECT',
    TIMER_QUERY: 'TIMER_QUERY',
    INSTANCED_RENDERING: 'INSTANCED_RENDERING',
    MULTIPLE_RENDER_TARGETS: 'MULTIPLE_RENDER_TARGETS',
    ELEMENT_INDEX_UINT32: 'ELEMENT_INDEX_UINT32',
    BLEND_EQUATION_MINMAX: 'BLEND_EQUATION_MINMAX',
    FLOAT_BLEND: 'FLOAT_BLEND',
    COLOR_ENCODING_SRGB: 'COLOR_ENCODING_SRGB',
    TEXTURE_DEPTH: 'TEXTURE_DEPTH',
    TEXTURE_FLOAT: 'TEXTURE_FLOAT',
    TEXTURE_HALF_FLOAT: 'TEXTURE_HALF_FLOAT',
    TEXTURE_FILTER_LINEAR_FLOAT: 'TEXTURE_FILTER_LINEAR_FLOAT',
    TEXTURE_FILTER_LINEAR_HALF_FLOAT: 'TEXTURE_FILTER_LINEAR_HALF_FLOAT',
    TEXTURE_FILTER_ANISOTROPIC: 'TEXTURE_FILTER_ANISOTROPIC',
    COLOR_ATTACHMENT_RGBA32F: 'COLOR_ATTACHMENT_RGBA32F',
    COLOR_ATTACHMENT_FLOAT: 'COLOR_ATTACHMENT_FLOAT',
    COLOR_ATTACHMENT_HALF_FLOAT: 'COLOR_ATTACHMENT_HALF_FLOAT',
    GLSL_FRAG_DATA: 'GLSL_FRAG_DATA',
    GLSL_FRAG_DEPTH: 'GLSL_FRAG_DEPTH',
    GLSL_DERIVATIVES: 'GLSL_DERIVATIVES',
    GLSL_TEXTURE_LOD: 'GLSL_TEXTURE_LOD'
};
function checkFloat32ColorAttachment(gl) {
    const testTexture = new (0, _texture2DDefault.default)(gl, {
        format: 6408,
        type: 5126,
        dataFormat: 6408
    });
    const testFb = new (0, _framebufferDefault.default)(gl, {
        id: "test-framebuffer",
        check: false,
        attachments: {
            [36064]: testTexture
        }
    });
    const status = testFb.getStatus();
    testTexture.delete();
    testFb.delete();
    return status === 36053;
}
exports.default = {
    [FEATURES.WEBGL2]: [
        false,
        true
    ],
    [FEATURES.VERTEX_ARRAY_OBJECT]: [
        'OES_vertex_array_object',
        true
    ],
    [FEATURES.TIMER_QUERY]: [
        'EXT_disjoint_timer_query',
        'EXT_disjoint_timer_query_webgl2'
    ],
    [FEATURES.INSTANCED_RENDERING]: [
        'ANGLE_instanced_arrays',
        true
    ],
    [FEATURES.MULTIPLE_RENDER_TARGETS]: [
        'WEBGL_draw_buffers',
        true
    ],
    [FEATURES.ELEMENT_INDEX_UINT32]: [
        'OES_element_index_uint',
        true
    ],
    [FEATURES.BLEND_EQUATION_MINMAX]: [
        'EXT_blend_minmax',
        true
    ],
    [FEATURES.FLOAT_BLEND]: [
        'EXT_float_blend'
    ],
    [FEATURES.COLOR_ENCODING_SRGB]: [
        'EXT_sRGB',
        true
    ],
    [FEATURES.TEXTURE_DEPTH]: [
        'WEBGL_depth_texture',
        true
    ],
    [FEATURES.TEXTURE_FLOAT]: [
        'OES_texture_float',
        true
    ],
    [FEATURES.TEXTURE_HALF_FLOAT]: [
        'OES_texture_half_float',
        true
    ],
    [FEATURES.TEXTURE_FILTER_LINEAR_FLOAT]: [
        'OES_texture_float_linear'
    ],
    [FEATURES.TEXTURE_FILTER_LINEAR_HALF_FLOAT]: [
        'OES_texture_half_float_linear'
    ],
    [FEATURES.TEXTURE_FILTER_ANISOTROPIC]: [
        'EXT_texture_filter_anisotropic'
    ],
    [FEATURES.COLOR_ATTACHMENT_RGBA32F]: [
        checkFloat32ColorAttachment,
        'EXT_color_buffer_float'
    ],
    [FEATURES.COLOR_ATTACHMENT_FLOAT]: [
        false,
        'EXT_color_buffer_float'
    ],
    [FEATURES.COLOR_ATTACHMENT_HALF_FLOAT]: [
        'EXT_color_buffer_half_float'
    ],
    [FEATURES.GLSL_FRAG_DATA]: [
        'WEBGL_draw_buffers',
        true
    ],
    [FEATURES.GLSL_FRAG_DEPTH]: [
        'EXT_frag_depth',
        true
    ],
    [FEATURES.GLSL_DERIVATIVES]: [
        'OES_standard_derivatives',
        true
    ],
    [FEATURES.GLSL_TEXTURE_LOD]: [
        'EXT_shader_texture_lod',
        true
    ]
};

},{"../classes/framebuffer":"d8j9m","../classes/texture-2d":"1SG03","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3pEUt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasFeature", ()=>hasFeature);
parcelHelpers.export(exports, "hasFeatures", ()=>hasFeatures);
parcelHelpers.export(exports, "getFeatures", ()=>getFeatures);
var _webglFeaturesTable = require("./webgl-features-table");
var _webglFeaturesTableDefault = parcelHelpers.interopDefault(_webglFeaturesTable);
var _gltools = require("@luma.gl/gltools");
var _assert = require("../utils/assert");
const LOG_UNSUPPORTED_FEATURE = 2;
function hasFeature(gl, feature) {
    return hasFeatures(gl, feature);
}
function hasFeatures(gl, features) {
    features = Array.isArray(features) ? features : [
        features
    ];
    return features.every((feature)=>{
        return isFeatureSupported(gl, feature);
    });
}
function getFeatures(gl) {
    gl.luma = gl.luma || {};
    gl.luma.caps = gl.luma.caps || {};
    for(const cap in 0, _webglFeaturesTableDefault.default)if (gl.luma.caps[cap] === undefined) gl.luma.caps[cap] = isFeatureSupported(gl, cap);
    return gl.luma.caps;
}
function isFeatureSupported(gl, cap) {
    gl.luma = gl.luma || {};
    gl.luma.caps = gl.luma.caps || {};
    if (gl.luma.caps[cap] === undefined) gl.luma.caps[cap] = queryFeature(gl, cap);
    if (!gl.luma.caps[cap]) (0, _gltools.log).log(LOG_UNSUPPORTED_FEATURE, "Feature: ".concat(cap, " not supported"))();
    return gl.luma.caps[cap];
}
function queryFeature(gl, cap) {
    const feature = (0, _webglFeaturesTableDefault.default)[cap];
    (0, _assert.assert)(feature, cap);
    let isSupported;
    const featureDefinition = (0, _gltools.isWebGL2)(gl) ? feature[1] || feature[0] : feature[0];
    if (typeof featureDefinition === 'function') isSupported = featureDefinition(gl);
    else if (Array.isArray(featureDefinition)) {
        isSupported = true;
        for (const extension of featureDefinition)isSupported = isSupported && Boolean(gl.getExtension(extension));
    } else if (typeof featureDefinition === 'string') isSupported = Boolean(gl.getExtension(featureDefinition));
    else if (typeof featureDefinition === 'boolean') isSupported = featureDefinition;
    else (0, _assert.assert)(false);
    return isSupported;
}

},{"./webgl-features-table":"jSgHu","@luma.gl/gltools":"4jTOy","../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eKsM7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Shader", ()=>Shader);
parcelHelpers.export(exports, "VertexShader", ()=>VertexShader);
parcelHelpers.export(exports, "FragmentShader", ()=>FragmentShader);
var _gltools = require("@luma.gl/gltools");
var _glslUtils = require("../glsl-utils");
var _assert = require("../utils/assert");
var _utils = require("../utils/utils");
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
const ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';
class Shader extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Shader';
    }
    static getTypeName(shaderType) {
        switch(shaderType){
            case 35633:
                return 'vertex-shader';
            case 35632:
                return 'fragment-shader';
            default:
                (0, _assert.assert)(false);
                return 'unknown';
        }
    }
    constructor(gl, props){
        (0, _gltools.assertWebGLContext)(gl);
        (0, _assert.assert)(typeof props.source === 'string', ERR_SOURCE);
        const id = (0, _glslUtils.getShaderName)(props.source, null) || props.id || (0, _utils.uid)("unnamed ".concat(Shader.getTypeName(props.shaderType)));
        super(gl, {
            id
        });
        this.shaderType = props.shaderType;
        this.source = props.source;
        this.initialize(props);
    }
    initialize(_ref) {
        let { source } = _ref;
        const shaderName = (0, _glslUtils.getShaderName)(source, null);
        if (shaderName) this.id = (0, _utils.uid)(shaderName);
        this._compile(source);
    }
    getParameter(pname) {
        return this.gl.getShaderParameter(this.handle, pname);
    }
    toString() {
        return "".concat(Shader.getTypeName(this.shaderType), ":").concat(this.id);
    }
    getName() {
        return (0, _glslUtils.getShaderName)(this.source) || 'unnamed-shader';
    }
    getSource() {
        return this.gl.getShaderSource(this.handle);
    }
    getTranslatedSource() {
        const extension = this.gl.getExtension('WEBGL_debug_shaders');
        return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';
    }
    _compile() {
        let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.source;
        if (!source.startsWith('#version ')) source = "#version 100\n".concat(source);
        this.source = source;
        this.gl.shaderSource(this.handle, this.source);
        this.gl.compileShader(this.handle);
        const compileStatus = this.getParameter(35713);
        if (!compileStatus) {
            const infoLog = this.gl.getShaderInfoLog(this.handle);
            const { shaderName, errors, warnings } = (0, _glslUtils.parseGLSLCompilerError)(infoLog, this.source, this.shaderType, this.id);
            (0, _gltools.log).error("GLSL compilation errors in ".concat(shaderName, "\n").concat(errors))();
            (0, _gltools.log).warn("GLSL compilation warnings in ".concat(shaderName, "\n").concat(warnings))();
            throw new Error("GLSL compilation errors in ".concat(shaderName));
        }
    }
    _deleteHandle() {
        this.gl.deleteShader(this.handle);
    }
    _getOptsFromHandle() {
        return {
            type: this.getParameter(35663),
            source: this.getSource()
        };
    }
}
class VertexShader extends Shader {
    get [Symbol.toStringTag]() {
        return 'VertexShader';
    }
    constructor(gl, props){
        if (typeof props === 'string') props = {
            source: props
        };
        super(gl, Object.assign({}, props, {
            shaderType: 35633
        }));
    }
    _createHandle() {
        return this.gl.createShader(35633);
    }
}
class FragmentShader extends Shader {
    get [Symbol.toStringTag]() {
        return 'FragmentShader';
    }
    constructor(gl, props){
        if (typeof props === 'string') props = {
            source: props
        };
        super(gl, Object.assign({}, props, {
            shaderType: 35632
        }));
    }
    _createHandle() {
        return this.gl.createShader(35632);
    }
}

},{"@luma.gl/gltools":"4jTOy","../glsl-utils":"21GQW","../utils/assert":"8HI0c","../utils/utils":"3ygCB","./resource":"99wyj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"21GQW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatGLSLCompilerError", ()=>(0, _formatGlslErrorDefault.default));
parcelHelpers.export(exports, "parseGLSLCompilerError", ()=>(0, _formatGlslError.parseGLSLCompilerError));
parcelHelpers.export(exports, "getShaderName", ()=>(0, _getShaderNameDefault.default));
parcelHelpers.export(exports, "getShaderVersion", ()=>(0, _getShaderVersionDefault.default));
parcelHelpers.export(exports, "getShaderTypeName", ()=>(0, _getShaderTypeNameDefault.default));
var _formatGlslError = require("./format-glsl-error");
var _formatGlslErrorDefault = parcelHelpers.interopDefault(_formatGlslError);
var _getShaderName = require("./get-shader-name");
var _getShaderNameDefault = parcelHelpers.interopDefault(_getShaderName);
var _getShaderVersion = require("./get-shader-version");
var _getShaderVersionDefault = parcelHelpers.interopDefault(_getShaderVersion);
var _getShaderTypeName = require("./get-shader-type-name");
var _getShaderTypeNameDefault = parcelHelpers.interopDefault(_getShaderTypeName);

},{"./format-glsl-error":"4jzOR","./get-shader-name":"7AjE5","./get-shader-version":false,"./get-shader-type-name":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4jzOR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>formatGLSLCompilerError);
parcelHelpers.export(exports, "parseGLSLCompilerError", ()=>parseGLSLCompilerError);
var _getShaderName = require("./get-shader-name");
var _getShaderNameDefault = parcelHelpers.interopDefault(_getShaderName);
var _getShaderTypeName = require("./get-shader-type-name");
var _getShaderTypeNameDefault = parcelHelpers.interopDefault(_getShaderTypeName);
function formatGLSLCompilerError(errLog, src, shaderType) {
    const { shaderName, errors, warnings } = parseGLSLCompilerError(errLog, src, shaderType);
    return "GLSL compilation error in ".concat(shaderName, "\n\n").concat(errors, "\n").concat(warnings);
}
function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {
    const errorStrings = errLog.split(/\r?\n/);
    const errors = {};
    const warnings = {};
    const name = shaderName || (0, _getShaderNameDefault.default)(src) || '(unnamed)';
    const shaderDescription = "".concat((0, _getShaderTypeNameDefault.default)(shaderType), " shader ").concat(name);
    for(let i = 0; i < errorStrings.length; i++){
        const errorString = errorStrings[i];
        if (errorString.length <= 1) continue;
        const segments = errorString.split(':');
        const type = segments[0];
        const line = parseInt(segments[2], 10);
        if (isNaN(line)) throw new Error("GLSL compilation error in ".concat(shaderDescription, ": ").concat(errLog));
        if (type !== 'WARNING') errors[line] = errorString;
        else warnings[line] = errorString;
    }
    const lines = addLineNumbers(src);
    return {
        shaderName: shaderDescription,
        errors: formatErrors(errors, lines),
        warnings: formatErrors(warnings, lines)
    };
}
function formatErrors(errors, lines) {
    let message = '';
    for(let i = 0; i < lines.length; i++){
        const line = lines[i];
        if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) continue;
        message += "".concat(line, "\n");
        if (errors[i + 1]) {
            const error = errors[i + 1];
            const segments = error.split(':', 3);
            const type = segments[0];
            const column = parseInt(segments[1], 10) || 0;
            const err = error.substring(segments.join(':').length + 1).trim();
            message += padLeft("^^^ ".concat(type, ": ").concat(err, "\n\n"), column);
        }
    }
    return message;
}
function addLineNumbers(string) {
    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ': ';
    const lines = string.split(/\r?\n/);
    const maxDigits = String(lines.length + start - 1).length;
    return lines.map((line, i)=>{
        const lineNumber = String(i + start);
        const digits = lineNumber.length;
        const prefix = padLeft(lineNumber, maxDigits - digits);
        return prefix + delim + line;
    });
}
function padLeft(string, digits) {
    let result = '';
    for(let i = 0; i < digits; ++i)result += ' ';
    return "".concat(result).concat(string);
}

},{"./get-shader-name":"7AjE5","./get-shader-type-name":"d1UJ2","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7AjE5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getShaderName);
function getShaderName(shader) {
    let defaultName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unnamed';
    const SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
    const match = shader.match(SHADER_NAME_REGEXP);
    return match ? match[1] : defaultName;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"d1UJ2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getShaderTypeName);
const GL_FRAGMENT_SHADER = 0x8b30;
const GL_VERTEX_SHADER = 0x8b31;
function getShaderTypeName(type) {
    switch(type){
        case GL_FRAGMENT_SHADER:
            return 'fragment';
        case GL_VERTEX_SHADER:
            return 'vertex';
        default:
            return 'unknown type';
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cZhZX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getShaderVersion);
function getShaderVersion(source) {
    let version = 100;
    const words = source.match(/[^\s]+/g);
    if (words.length >= 2 && words[0] === '#version') {
        const v = parseInt(words[1], 10);
        if (Number.isFinite(v)) version = v;
    }
    return version;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fLbAM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
var _texture = require("./texture");
var _textureDefault = parcelHelpers.interopDefault(_texture);
var _framebuffer = require("./framebuffer");
var _framebufferDefault = parcelHelpers.interopDefault(_framebuffer);
var _uniforms = require("./uniforms");
var _shader = require("./shader");
var _programConfiguration = require("./program-configuration");
var _programConfigurationDefault = parcelHelpers.interopDefault(_programConfiguration);
var _gltools = require("@luma.gl/gltools");
var _constantsToKeys = require("../webgl-utils/constants-to-keys");
var _attributeUtils = require("../webgl-utils/attribute-utils");
var _assert = require("../utils/assert");
var _utils = require("../utils/utils");
const LOG_PROGRAM_PERF_PRIORITY = 4;
const GL_SEPARATE_ATTRIBS = 0x8c8d;
const V6_DEPRECATED_METHODS = [
    'setVertexArray',
    'setAttributes',
    'setBuffers',
    'unsetBuffers',
    'use',
    'getUniformCount',
    'getUniformInfo',
    'getUniformLocation',
    'getUniformValue',
    'getVarying',
    'getFragDataLocation',
    'getAttachedShaders',
    'getAttributeCount',
    'getAttributeLocation',
    'getAttributeInfo'
];
class Program extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Program';
    }
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        super(gl, props);
        this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);
        this._isCached = false;
        this.initialize(props);
        Object.seal(this);
        this._setId(props.id);
    }
    initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { hash, vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS } = props;
        this.hash = hash || '';
        this.vs = typeof vs === 'string' ? new (0, _shader.VertexShader)(this.gl, {
            id: "".concat(props.id, "-vs"),
            source: vs
        }) : vs;
        this.fs = typeof fs === 'string' ? new (0, _shader.FragmentShader)(this.gl, {
            id: "".concat(props.id, "-fs"),
            source: fs
        }) : fs;
        (0, _assert.assert)(this.vs instanceof (0, _shader.VertexShader));
        (0, _assert.assert)(this.fs instanceof (0, _shader.FragmentShader));
        this.uniforms = {};
        this._textureUniforms = {};
        if (varyings && varyings.length > 0) {
            (0, _gltools.assertWebGL2Context)(this.gl);
            this.varyings = varyings;
            this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);
        }
        this._compileAndLink();
        this._readUniformLocationsFromLinkedProgram();
        this.configuration = new (0, _programConfigurationDefault.default)(this);
        return this.setProps(props);
    }
    delete() {
        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (this._isCached) return this;
        return super.delete(options);
    }
    setProps(props) {
        if ('uniforms' in props) this.setUniforms(props.uniforms);
        return this;
    }
    draw(_ref) {
        let { logPriority, drawMode = 4, vertexCount, offset = 0, start, end, isIndexed = false, indexType = 5123, instanceCount = 0, isInstanced = instanceCount > 0, vertexArray = null, transformFeedback, framebuffer, parameters = {}, uniforms, samplers } = _ref;
        if (uniforms || samplers) {
            (0, _gltools.log).deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();
            this.setUniforms(uniforms || {});
        }
        if ((0, _gltools.log).priority >= logPriority) {
            const fb = framebuffer ? framebuffer.id : 'default';
            const message = "mode=".concat((0, _constantsToKeys.getKey)(this.gl, drawMode), " verts=").concat(vertexCount, " ") + "instances=".concat(instanceCount, " indexType=").concat((0, _constantsToKeys.getKey)(this.gl, indexType), " ") + "isInstanced=".concat(isInstanced, " isIndexed=").concat(isIndexed, " ") + "Framebuffer=".concat(fb);
            (0, _gltools.log).log(logPriority, message)();
        }
        (0, _assert.assert)(vertexArray);
        this.gl.useProgram(this.handle);
        if (!this._areTexturesRenderable() || vertexCount === 0 || isInstanced && instanceCount === 0) return false;
        vertexArray.bindForDraw(vertexCount, instanceCount, ()=>{
            if (framebuffer !== undefined) parameters = Object.assign({}, parameters, {
                framebuffer
            });
            if (transformFeedback) {
                const primitiveMode = (0, _attributeUtils.getPrimitiveDrawMode)(drawMode);
                transformFeedback.begin(primitiveMode);
            }
            this._bindTextures();
            (0, _gltools.withParameters)(this.gl, parameters, ()=>{
                if (isIndexed && isInstanced) this.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);
                else if (isIndexed && (0, _gltools.isWebGL2)(this.gl) && !isNaN(start) && !isNaN(end)) this.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);
                else if (isIndexed) this.gl.drawElements(drawMode, vertexCount, indexType, offset);
                else if (isInstanced) this.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);
                else this.gl.drawArrays(drawMode, offset, vertexCount);
            });
            if (transformFeedback) transformFeedback.end();
        });
        return true;
    }
    setUniforms() {
        let uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if ((0, _gltools.log).priority >= 2) (0, _uniforms.checkUniformValues)(uniforms, this.id, this._uniformSetters);
        this.gl.useProgram(this.handle);
        for(const uniformName in uniforms){
            const uniform = uniforms[uniformName];
            const uniformSetter = this._uniformSetters[uniformName];
            if (uniformSetter) {
                let value = uniform;
                let textureUpdate = false;
                if (value instanceof (0, _framebufferDefault.default)) value = value.texture;
                if (value instanceof (0, _textureDefault.default)) {
                    textureUpdate = this.uniforms[uniformName] !== uniform;
                    if (textureUpdate) {
                        if (uniformSetter.textureIndex === undefined) uniformSetter.textureIndex = this._textureIndexCounter++;
                        const texture = value;
                        const { textureIndex } = uniformSetter;
                        texture.bind(textureIndex);
                        value = textureIndex;
                        this._textureUniforms[uniformName] = texture;
                    } else value = uniformSetter.textureIndex;
                } else if (this._textureUniforms[uniformName]) delete this._textureUniforms[uniformName];
                if (uniformSetter(value) || textureUpdate) (0, _uniforms.copyUniform)(this.uniforms, uniformName, uniform);
            }
        }
        return this;
    }
    _areTexturesRenderable() {
        let texturesRenderable = true;
        for(const uniformName in this._textureUniforms){
            const texture = this._textureUniforms[uniformName];
            texture.update();
            texturesRenderable = texturesRenderable && texture.loaded;
        }
        return texturesRenderable;
    }
    _bindTextures() {
        for(const uniformName in this._textureUniforms){
            const textureIndex = this._uniformSetters[uniformName].textureIndex;
            this._textureUniforms[uniformName].bind(textureIndex);
        }
    }
    _createHandle() {
        return this.gl.createProgram();
    }
    _deleteHandle() {
        this.gl.deleteProgram(this.handle);
    }
    _getOptionsFromHandle(handle) {
        const shaderHandles = this.gl.getAttachedShaders(handle);
        const opts = {};
        for (const shaderHandle of shaderHandles){
            const type = this.gl.getShaderParameter(this.handle, 35663);
            switch(type){
                case 35633:
                    opts.vs = new (0, _shader.VertexShader)({
                        handle: shaderHandle
                    });
                    break;
                case 35632:
                    opts.fs = new (0, _shader.FragmentShader)({
                        handle: shaderHandle
                    });
                    break;
                default:
            }
        }
        return opts;
    }
    _getParameter(pname) {
        return this.gl.getProgramParameter(this.handle, pname);
    }
    _setId(id) {
        if (!id) {
            const programName = this._getName();
            this.id = (0, _utils.uid)(programName);
        }
    }
    _getName() {
        let programName = this.vs.getName() || this.fs.getName();
        programName = programName.replace(/shader/i, '');
        programName = programName ? "".concat(programName, "-program") : 'program';
        return programName;
    }
    _compileAndLink() {
        const { gl } = this;
        gl.attachShader(this.handle, this.vs.handle);
        gl.attachShader(this.handle, this.fs.handle);
        (0, _gltools.log).time(LOG_PROGRAM_PERF_PRIORITY, "linkProgram for ".concat(this._getName()))();
        gl.linkProgram(this.handle);
        (0, _gltools.log).timeEnd(LOG_PROGRAM_PERF_PRIORITY, "linkProgram for ".concat(this._getName()))();
        if (gl.debug || (0, _gltools.log).level > 0) {
            const linked = gl.getProgramParameter(this.handle, 35714);
            if (!linked) throw new Error("Error linking: ".concat(gl.getProgramInfoLog(this.handle)));
            gl.validateProgram(this.handle);
            const validated = gl.getProgramParameter(this.handle, 35715);
            if (!validated) throw new Error("Error validating: ".concat(gl.getProgramInfoLog(this.handle)));
        }
    }
    _readUniformLocationsFromLinkedProgram() {
        const { gl } = this;
        this._uniformSetters = {};
        this._uniformCount = this._getParameter(35718);
        for(let i = 0; i < this._uniformCount; i++){
            const info = this.gl.getActiveUniform(this.handle, i);
            const { name } = (0, _uniforms.parseUniformName)(info.name);
            let location = gl.getUniformLocation(this.handle, name);
            this._uniformSetters[name] = (0, _uniforms.getUniformSetter)(gl, location, info);
            if (info.size > 1) for(let l = 0; l < info.size; l++){
                location = gl.getUniformLocation(this.handle, "".concat(name, "[").concat(l, "]"));
                this._uniformSetters["".concat(name, "[").concat(l, "]")] = (0, _uniforms.getUniformSetter)(gl, location, info);
            }
        }
        this._textureIndexCounter = 0;
    }
    getActiveUniforms(uniformIndices, pname) {
        return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);
    }
    getUniformBlockIndex(blockName) {
        return this.gl2.getUniformBlockIndex(this.handle, blockName);
    }
    getActiveUniformBlockParameter(blockIndex, pname) {
        return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);
    }
    uniformBlockBinding(blockIndex, blockBinding) {
        this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);
    }
}
exports.default = Program;

},{"./resource":"99wyj","./texture":"2UaoF","./framebuffer":"d8j9m","./uniforms":"fwcyo","./shader":"eKsM7","./program-configuration":"6J655","@luma.gl/gltools":"4jTOy","../webgl-utils/constants-to-keys":"bDQE3","../webgl-utils/attribute-utils":"8cHXG","../utils/assert":"8HI0c","../utils/utils":"3ygCB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fwcyo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUniformSetter", ()=>getUniformSetter);
parcelHelpers.export(exports, "parseUniformName", ()=>parseUniformName);
parcelHelpers.export(exports, "checkUniformValues", ()=>checkUniformValues);
parcelHelpers.export(exports, "copyUniform", ()=>copyUniform);
var _gltools = require("@luma.gl/gltools");
var _framebuffer = require("./framebuffer");
var _framebufferDefault = parcelHelpers.interopDefault(_framebuffer);
var _renderbuffer = require("./renderbuffer");
var _renderbufferDefault = parcelHelpers.interopDefault(_renderbuffer);
var _texture = require("./texture");
var _textureDefault = parcelHelpers.interopDefault(_texture);
var _assert = require("../utils/assert");
const UNIFORM_SETTERS = {
    [5126]: getArraySetter.bind(null, 'uniform1fv', toFloatArray, 1, setVectorUniform),
    [35664]: getArraySetter.bind(null, 'uniform2fv', toFloatArray, 2, setVectorUniform),
    [35665]: getArraySetter.bind(null, 'uniform3fv', toFloatArray, 3, setVectorUniform),
    [35666]: getArraySetter.bind(null, 'uniform4fv', toFloatArray, 4, setVectorUniform),
    [5124]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),
    [35667]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),
    [35668]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),
    [35669]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),
    [35670]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),
    [35671]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),
    [35672]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),
    [35673]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),
    [35674]: getArraySetter.bind(null, 'uniformMatrix2fv', toFloatArray, 4, setMatrixUniform),
    [35675]: getArraySetter.bind(null, 'uniformMatrix3fv', toFloatArray, 9, setMatrixUniform),
    [35676]: getArraySetter.bind(null, 'uniformMatrix4fv', toFloatArray, 16, setMatrixUniform),
    [35678]: getSamplerSetter,
    [35680]: getSamplerSetter,
    [5125]: getArraySetter.bind(null, 'uniform1uiv', toUIntArray, 1, setVectorUniform),
    [36294]: getArraySetter.bind(null, 'uniform2uiv', toUIntArray, 2, setVectorUniform),
    [36295]: getArraySetter.bind(null, 'uniform3uiv', toUIntArray, 3, setVectorUniform),
    [36296]: getArraySetter.bind(null, 'uniform4uiv', toUIntArray, 4, setVectorUniform),
    [35685]: getArraySetter.bind(null, 'uniformMatrix2x3fv', toFloatArray, 6, setMatrixUniform),
    [35686]: getArraySetter.bind(null, 'uniformMatrix2x4fv', toFloatArray, 8, setMatrixUniform),
    [35687]: getArraySetter.bind(null, 'uniformMatrix3x2fv', toFloatArray, 6, setMatrixUniform),
    [35688]: getArraySetter.bind(null, 'uniformMatrix3x4fv', toFloatArray, 12, setMatrixUniform),
    [35689]: getArraySetter.bind(null, 'uniformMatrix4x2fv', toFloatArray, 8, setMatrixUniform),
    [35690]: getArraySetter.bind(null, 'uniformMatrix4x3fv', toFloatArray, 12, setMatrixUniform),
    [35678]: getSamplerSetter,
    [35680]: getSamplerSetter,
    [35679]: getSamplerSetter,
    [35682]: getSamplerSetter,
    [36289]: getSamplerSetter,
    [36292]: getSamplerSetter,
    [36293]: getSamplerSetter,
    [36298]: getSamplerSetter,
    [36299]: getSamplerSetter,
    [36300]: getSamplerSetter,
    [36303]: getSamplerSetter,
    [36306]: getSamplerSetter,
    [36307]: getSamplerSetter,
    [36308]: getSamplerSetter,
    [36311]: getSamplerSetter
};
const FLOAT_ARRAY = {};
const INT_ARRAY = {};
const UINT_ARRAY = {};
const array1 = [
    0
];
function toTypedArray(value, uniformLength, Type, cache) {
    if (uniformLength === 1 && typeof value === 'boolean') value = value ? 1 : 0;
    if (Number.isFinite(value)) {
        array1[0] = value;
        value = array1;
    }
    const length = value.length;
    if (length % uniformLength) (0, _gltools.log).warn("Uniform size should be multiples of ".concat(uniformLength), value)();
    if (value instanceof Type) return value;
    let result = cache[length];
    if (!result) {
        result = new Type(length);
        cache[length] = result;
    }
    for(let i = 0; i < length; i++)result[i] = value[i];
    return result;
}
function toFloatArray(value, uniformLength) {
    return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);
}
function toIntArray(value, uniformLength) {
    return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);
}
function toUIntArray(value, uniformLength) {
    return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);
}
function getUniformSetter(gl, location, info) {
    const setter = UNIFORM_SETTERS[info.type];
    if (!setter) throw new Error("Unknown GLSL uniform type ".concat(info.type));
    return setter().bind(null, gl, location);
}
function parseUniformName(name) {
    if (name[name.length - 1] !== ']') return {
        name,
        length: 1,
        isArray: false
    };
    const UNIFORM_NAME_REGEXP = /([^[]*)(\[[0-9]+\])?/;
    const matches = name.match(UNIFORM_NAME_REGEXP);
    if (!matches || matches.length < 2) throw new Error("Failed to parse GLSL uniform name ".concat(name));
    return {
        name: matches[1],
        length: matches[2] || 1,
        isArray: Boolean(matches[2])
    };
}
function checkUniformValues(uniforms, source, uniformMap) {
    for(const uniformName in uniforms){
        const value = uniforms[uniformName];
        const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);
        if (shouldCheck && !checkUniformValue(value)) {
            source = source ? "".concat(source, " ") : '';
            console.error("".concat(source, " Bad uniform ").concat(uniformName), value);
            throw new Error("".concat(source, " Bad uniform ").concat(uniformName));
        }
    }
    return true;
}
function checkUniformValue(value) {
    if (Array.isArray(value) || ArrayBuffer.isView(value)) return checkUniformArray(value);
    if (isFinite(value)) return true;
    else if (value === true || value === false) return true;
    else if (value instanceof (0, _textureDefault.default)) return true;
    else if (value instanceof (0, _renderbufferDefault.default)) return true;
    else if (value instanceof (0, _framebufferDefault.default)) return Boolean(value.texture);
    return false;
}
function copyUniform(uniforms, key, value) {
    if (Array.isArray(value) || ArrayBuffer.isView(value)) {
        if (uniforms[key]) {
            const dest = uniforms[key];
            for(let i = 0, len = value.length; i < len; ++i)dest[i] = value[i];
        } else uniforms[key] = value.slice();
    } else uniforms[key] = value;
}
function checkUniformArray(value) {
    if (value.length === 0) return false;
    const checkLength = Math.min(value.length, 16);
    for(let i = 0; i < checkLength; ++i){
        if (!Number.isFinite(value[i])) return false;
    }
    return true;
}
function getSamplerSetter() {
    let cache = null;
    return (gl, location, value)=>{
        const update = cache !== value;
        if (update) {
            gl.uniform1i(location, value);
            cache = value;
        }
        return update;
    };
}
function getArraySetter(functionName, toArray, size, uniformSetter) {
    let cache = null;
    let cacheLength = null;
    return (gl, location, value)=>{
        const arrayValue = toArray(value, size);
        const length = arrayValue.length;
        let update = false;
        if (cache === null) {
            cache = new Float32Array(length);
            cacheLength = length;
            update = true;
        } else {
            (0, _assert.assert)(cacheLength === length, 'Uniform length cannot change.');
            for(let i = 0; i < length; ++i)if (arrayValue[i] !== cache[i]) {
                update = true;
                break;
            }
        }
        if (update) {
            uniformSetter(gl, functionName, location, arrayValue);
            cache.set(arrayValue);
        }
        return update;
    };
}
function setVectorUniform(gl, functionName, location, value) {
    gl[functionName](location, value);
}
function setMatrixUniform(gl, functionName, location, value) {
    gl[functionName](location, false, value);
}

},{"@luma.gl/gltools":"4jTOy","./framebuffer":"d8j9m","./renderbuffer":"9893Q","./texture":"2UaoF","../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6J655":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _accessor = require("./accessor");
var _accessorDefault = parcelHelpers.interopDefault(_accessor);
var _gltools = require("@luma.gl/gltools");
var _attributeUtils = require("../webgl-utils/attribute-utils");
class ProgramConfiguration {
    constructor(program){
        this.id = program.id;
        this.attributeInfos = [];
        this.attributeInfosByName = {};
        this.attributeInfosByLocation = [];
        this.varyingInfos = [];
        this.varyingInfosByName = {};
        Object.seal(this);
        this._readAttributesFromProgram(program);
        this._readVaryingsFromProgram(program);
    }
    getAttributeInfo(locationOrName) {
        const location = Number(locationOrName);
        if (Number.isFinite(location)) return this.attributeInfosByLocation[location];
        return this.attributeInfosByName[locationOrName] || null;
    }
    getAttributeLocation(locationOrName) {
        const attributeInfo = this.getAttributeInfo(locationOrName);
        return attributeInfo ? attributeInfo.location : -1;
    }
    getAttributeAccessor(locationOrName) {
        const attributeInfo = this.getAttributeInfo(locationOrName);
        return attributeInfo ? attributeInfo.accessor : null;
    }
    getVaryingInfo(locationOrName) {
        const location = Number(locationOrName);
        if (Number.isFinite(location)) return this.varyingInfos[location];
        return this.varyingInfosByName[locationOrName] || null;
    }
    getVaryingIndex(locationOrName) {
        const varying = this.getVaryingInfo();
        return varying ? varying.location : -1;
    }
    getVaryingAccessor(locationOrName) {
        const varying = this.getVaryingInfo();
        return varying ? varying.accessor : null;
    }
    _readAttributesFromProgram(program) {
        const { gl } = program;
        const count = gl.getProgramParameter(program.handle, 35721);
        for(let index = 0; index < count; index++){
            const { name, type, size } = gl.getActiveAttrib(program.handle, index);
            const location = gl.getAttribLocation(program.handle, name);
            if (location >= 0) this._addAttribute(location, name, type, size);
        }
        this.attributeInfos.sort((a, b)=>a.location - b.location);
    }
    _readVaryingsFromProgram(program) {
        const { gl } = program;
        if (!(0, _gltools.isWebGL2)(gl)) return;
        const count = gl.getProgramParameter(program.handle, 35971);
        for(let location = 0; location < count; location++){
            const { name, type, size } = gl.getTransformFeedbackVarying(program.handle, location);
            this._addVarying(location, name, type, size);
        }
        this.varyingInfos.sort((a, b)=>a.location - b.location);
    }
    _addAttribute(location, name, compositeType, size) {
        const { type, components } = (0, _attributeUtils.decomposeCompositeGLType)(compositeType);
        const accessor = {
            type,
            size: size * components
        };
        this._inferProperties(location, name, accessor);
        const attributeInfo = {
            location,
            name,
            accessor: new (0, _accessorDefault.default)(accessor)
        };
        this.attributeInfos.push(attributeInfo);
        this.attributeInfosByLocation[location] = attributeInfo;
        this.attributeInfosByName[attributeInfo.name] = attributeInfo;
    }
    _inferProperties(location, name, accessor) {
        if (/instance/i.test(name)) accessor.divisor = 1;
    }
    _addVarying(location, name, compositeType, size) {
        const { type, components } = (0, _attributeUtils.decomposeCompositeGLType)(compositeType);
        const accessor = new (0, _accessorDefault.default)({
            type,
            size: size * components
        });
        const varying = {
            location,
            name,
            accessor
        };
        this.varyingInfos.push(varying);
        this.varyingInfosByName[varying.name] = varying;
    }
}
exports.default = ProgramConfiguration;

},{"./accessor":"27K3L","@luma.gl/gltools":"4jTOy","../webgl-utils/attribute-utils":"8cHXG","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8cHXG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPrimitiveDrawMode", ()=>getPrimitiveDrawMode);
parcelHelpers.export(exports, "getPrimitiveCount", ()=>getPrimitiveCount);
parcelHelpers.export(exports, "getVertexCount", ()=>getVertexCount);
parcelHelpers.export(exports, "decomposeCompositeGLType", ()=>decomposeCompositeGLType);
parcelHelpers.export(exports, "getCompositeGLType", ()=>getCompositeGLType);
var _assert = require("../utils/assert");
const GL_BYTE = 0x1400;
const GL_UNSIGNED_BYTE = 0x1401;
const GL_SHORT = 0x1402;
const GL_UNSIGNED_SHORT = 0x1403;
const GL_POINTS = 0x0;
const GL_LINES = 0x1;
const GL_LINE_LOOP = 0x2;
const GL_LINE_STRIP = 0x3;
const GL_TRIANGLES = 0x4;
const GL_TRIANGLE_STRIP = 0x5;
const GL_TRIANGLE_FAN = 0x6;
const GL_FLOAT = 0x1406;
const GL_FLOAT_VEC2 = 0x8b50;
const GL_FLOAT_VEC3 = 0x8b51;
const GL_FLOAT_VEC4 = 0x8b52;
const GL_INT = 0x1404;
const GL_INT_VEC2 = 0x8b53;
const GL_INT_VEC3 = 0x8b54;
const GL_INT_VEC4 = 0x8b55;
const GL_UNSIGNED_INT = 0x1405;
const GL_UNSIGNED_INT_VEC2 = 0x8dc6;
const GL_UNSIGNED_INT_VEC3 = 0x8dc7;
const GL_UNSIGNED_INT_VEC4 = 0x8dc8;
const GL_BOOL = 0x8b56;
const GL_BOOL_VEC2 = 0x8b57;
const GL_BOOL_VEC3 = 0x8b58;
const GL_BOOL_VEC4 = 0x8b59;
const GL_FLOAT_MAT2 = 0x8b5a;
const GL_FLOAT_MAT3 = 0x8b5b;
const GL_FLOAT_MAT4 = 0x8b5c;
const GL_FLOAT_MAT2x3 = 0x8b65;
const GL_FLOAT_MAT2x4 = 0x8b66;
const GL_FLOAT_MAT3x2 = 0x8b67;
const GL_FLOAT_MAT3x4 = 0x8b68;
const GL_FLOAT_MAT4x2 = 0x8b69;
const GL_FLOAT_MAT4x3 = 0x8b6a;
const COMPOSITE_GL_TYPES = {
    [GL_FLOAT]: [
        GL_FLOAT,
        1,
        'float'
    ],
    [GL_FLOAT_VEC2]: [
        GL_FLOAT,
        2,
        'vec2'
    ],
    [GL_FLOAT_VEC3]: [
        GL_FLOAT,
        3,
        'vec3'
    ],
    [GL_FLOAT_VEC4]: [
        GL_FLOAT,
        4,
        'vec4'
    ],
    [GL_INT]: [
        GL_INT,
        1,
        'int'
    ],
    [GL_INT_VEC2]: [
        GL_INT,
        2,
        'ivec2'
    ],
    [GL_INT_VEC3]: [
        GL_INT,
        3,
        'ivec3'
    ],
    [GL_INT_VEC4]: [
        GL_INT,
        4,
        'ivec4'
    ],
    [GL_UNSIGNED_INT]: [
        GL_UNSIGNED_INT,
        1,
        'uint'
    ],
    [GL_UNSIGNED_INT_VEC2]: [
        GL_UNSIGNED_INT,
        2,
        'uvec2'
    ],
    [GL_UNSIGNED_INT_VEC3]: [
        GL_UNSIGNED_INT,
        3,
        'uvec3'
    ],
    [GL_UNSIGNED_INT_VEC4]: [
        GL_UNSIGNED_INT,
        4,
        'uvec4'
    ],
    [GL_BOOL]: [
        GL_FLOAT,
        1,
        'bool'
    ],
    [GL_BOOL_VEC2]: [
        GL_FLOAT,
        2,
        'bvec2'
    ],
    [GL_BOOL_VEC3]: [
        GL_FLOAT,
        3,
        'bvec3'
    ],
    [GL_BOOL_VEC4]: [
        GL_FLOAT,
        4,
        'bvec4'
    ],
    [GL_FLOAT_MAT2]: [
        GL_FLOAT,
        8,
        'mat2'
    ],
    [GL_FLOAT_MAT2x3]: [
        GL_FLOAT,
        8,
        'mat2x3'
    ],
    [GL_FLOAT_MAT2x4]: [
        GL_FLOAT,
        8,
        'mat2x4'
    ],
    [GL_FLOAT_MAT3]: [
        GL_FLOAT,
        12,
        'mat3'
    ],
    [GL_FLOAT_MAT3x2]: [
        GL_FLOAT,
        12,
        'mat3x2'
    ],
    [GL_FLOAT_MAT3x4]: [
        GL_FLOAT,
        12,
        'mat3x4'
    ],
    [GL_FLOAT_MAT4]: [
        GL_FLOAT,
        16,
        'mat4'
    ],
    [GL_FLOAT_MAT4x2]: [
        GL_FLOAT,
        16,
        'mat4x2'
    ],
    [GL_FLOAT_MAT4x3]: [
        GL_FLOAT,
        16,
        'mat4x3'
    ]
};
function getPrimitiveDrawMode(drawMode) {
    switch(drawMode){
        case GL_POINTS:
            return GL_POINTS;
        case GL_LINES:
            return GL_LINES;
        case GL_LINE_STRIP:
            return GL_LINES;
        case GL_LINE_LOOP:
            return GL_LINES;
        case GL_TRIANGLES:
            return GL_TRIANGLES;
        case GL_TRIANGLE_STRIP:
            return GL_TRIANGLES;
        case GL_TRIANGLE_FAN:
            return GL_TRIANGLES;
        default:
            (0, _assert.assert)(false);
            return 0;
    }
}
function getPrimitiveCount(_ref) {
    let { drawMode, vertexCount } = _ref;
    switch(drawMode){
        case GL_POINTS:
        case GL_LINE_LOOP:
            return vertexCount;
        case GL_LINES:
            return vertexCount / 2;
        case GL_LINE_STRIP:
            return vertexCount - 1;
        case GL_TRIANGLES:
            return vertexCount / 3;
        case GL_TRIANGLE_STRIP:
        case GL_TRIANGLE_FAN:
            return vertexCount - 2;
        default:
            (0, _assert.assert)(false);
            return 0;
    }
}
function getVertexCount(_ref2) {
    let { drawMode, vertexCount } = _ref2;
    const primitiveCount = getPrimitiveCount({
        drawMode,
        vertexCount
    });
    switch(getPrimitiveDrawMode(drawMode)){
        case GL_POINTS:
            return primitiveCount;
        case GL_LINES:
            return primitiveCount * 2;
        case GL_TRIANGLES:
            return primitiveCount * 3;
        default:
            (0, _assert.assert)(false);
            return 0;
    }
}
function decomposeCompositeGLType(compositeGLType) {
    const typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];
    if (!typeAndSize) return null;
    const [type, components] = typeAndSize;
    return {
        type,
        components
    };
}
function getCompositeGLType(type, components) {
    switch(type){
        case GL_BYTE:
        case GL_UNSIGNED_BYTE:
        case GL_SHORT:
        case GL_UNSIGNED_SHORT:
            type = GL_FLOAT;
            break;
        default:
    }
    for(const glType in COMPOSITE_GL_TYPES){
        const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];
        if (compType === type && compComponents === components) return {
            glType,
            name
        };
    }
    return null;
}

},{"../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6DyFC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
var _features = require("../features");
var _gltools = require("@luma.gl/gltools");
var _assert = require("../utils/assert");
const GL_QUERY_RESULT = 0x8866;
const GL_QUERY_RESULT_AVAILABLE = 0x8867;
const GL_TIME_ELAPSED_EXT = 0x88bf;
const GL_GPU_DISJOINT_EXT = 0x8fbb;
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88;
const GL_ANY_SAMPLES_PASSED = 0x8c2f;
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a;
class Query extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'Query';
    }
    static isSupported(gl) {
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        const webgl2 = (0, _gltools.isWebGL2)(gl);
        const hasTimerQuery = (0, _features.hasFeatures)(gl, (0, _features.FEATURES).TIMER_QUERY);
        let supported = webgl2 || hasTimerQuery;
        for (const key of opts)switch(key){
            case 'queries':
                supported = supported && webgl2;
                break;
            case 'timers':
                supported = supported && hasTimerQuery;
                break;
            default:
                (0, _assert.assert)(false);
        }
        return supported;
    }
    constructor(gl){
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        super(gl, opts);
        this.target = null;
        this._queryPending = false;
        this._pollingPromise = null;
        Object.seal(this);
    }
    beginTimeElapsedQuery() {
        return this.begin(GL_TIME_ELAPSED_EXT);
    }
    beginOcclusionQuery() {
        let { conservative = false } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);
    }
    beginTransformFeedbackQuery() {
        return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
    }
    begin(target) {
        if (this._queryPending) return this;
        this.target = target;
        this.gl2.beginQuery(this.target, this.handle);
        return this;
    }
    end() {
        if (this._queryPending) return this;
        if (this.target) {
            this.gl2.endQuery(this.target);
            this.target = null;
            this._queryPending = true;
        }
        return this;
    }
    isResultAvailable() {
        if (!this._queryPending) return false;
        const resultAvailable = this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);
        if (resultAvailable) this._queryPending = false;
        return resultAvailable;
    }
    isTimerDisjoint() {
        return this.gl2.getParameter(GL_GPU_DISJOINT_EXT);
    }
    getResult() {
        return this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT);
    }
    getTimerMilliseconds() {
        return this.getResult() / 1e6;
    }
    createPoll() {
        let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
        if (this._pollingPromise) return this._pollingPromise;
        let counter = 0;
        this._pollingPromise = new Promise((resolve, reject)=>{
            const poll = ()=>{
                if (this.isResultAvailable()) {
                    resolve(this.getResult());
                    this._pollingPromise = null;
                } else if (counter++ > limit) {
                    reject('Timed out');
                    this._pollingPromise = null;
                } else requestAnimationFrame(poll);
            };
            requestAnimationFrame(poll);
        });
        return this._pollingPromise;
    }
    _createHandle() {
        return Query.isSupported(this.gl) ? this.gl2.createQuery() : null;
    }
    _deleteHandle() {
        this.gl2.deleteQuery(this.handle);
    }
}
exports.default = Query;

},{"./resource":"99wyj","../features":"jUhDA","@luma.gl/gltools":"4jTOy","../utils/assert":"8HI0c","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2fR4f":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
var _buffer = require("./buffer");
var _bufferDefault = parcelHelpers.interopDefault(_buffer);
var _utils = require("../utils/utils");
class TransformFeedback extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'TransformFeedback';
    }
    static isSupported(gl) {
        return (0, _gltools.isWebGL2)(gl);
    }
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _gltools.assertWebGL2Context)(gl);
        super(gl, props);
        this.initialize(props);
        this.stubRemovedMethods('TransformFeedback', 'v6.0', [
            'pause',
            'resume'
        ]);
        Object.seal(this);
    }
    initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.buffers = {};
        this.unused = {};
        this.configuration = null;
        this.bindOnUse = true;
        if (!(0, _utils.isObjectEmpty)(this.buffers)) this.bind(()=>this._unbindBuffers());
        this.setProps(props);
        return this;
    }
    setProps(props) {
        if ('program' in props) this.configuration = props.program && props.program.configuration;
        if ('configuration' in props) this.configuration = props.configuration;
        if ('bindOnUse' in props) props = props.bindOnUse;
        if ('buffers' in props) this.setBuffers(props.buffers);
    }
    setBuffers() {
        let buffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.bind(()=>{
            for(const bufferName in buffers)this.setBuffer(bufferName, buffers[bufferName]);
        });
        return this;
    }
    setBuffer(locationOrName, bufferOrParams) {
        const location = this._getVaryingIndex(locationOrName);
        const { buffer, byteSize, byteOffset } = this._getBufferParams(bufferOrParams);
        if (location < 0) {
            this.unused[locationOrName] = buffer;
            (0, _gltools.log).warn("".concat(this.id, " unused varying buffer ").concat(locationOrName))();
            return this;
        }
        this.buffers[location] = bufferOrParams;
        if (!this.bindOnUse) this._bindBuffer(location, buffer, byteOffset, byteSize);
        return this;
    }
    begin() {
        let primitiveMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        this.gl.bindTransformFeedback(36386, this.handle);
        this._bindBuffers();
        this.gl.beginTransformFeedback(primitiveMode);
        return this;
    }
    end() {
        this.gl.endTransformFeedback();
        this._unbindBuffers();
        this.gl.bindTransformFeedback(36386, null);
        return this;
    }
    _getBufferParams(bufferOrParams) {
        let byteOffset;
        let byteSize;
        let buffer;
        if (bufferOrParams instanceof (0, _bufferDefault.default) === false) {
            buffer = bufferOrParams.buffer;
            byteSize = bufferOrParams.byteSize;
            byteOffset = bufferOrParams.byteOffset;
        } else buffer = bufferOrParams;
        if (byteOffset !== undefined || byteSize !== undefined) {
            byteOffset = byteOffset || 0;
            byteSize = byteSize || buffer.byteLength - byteOffset;
        }
        return {
            buffer,
            byteOffset,
            byteSize
        };
    }
    _getVaryingInfo(locationOrName) {
        return this.configuration && this.configuration.getVaryingInfo(locationOrName);
    }
    _getVaryingIndex(locationOrName) {
        if (this.configuration) return this.configuration.getVaryingInfo(locationOrName).location;
        const location = Number(locationOrName);
        return Number.isFinite(location) ? location : -1;
    }
    _bindBuffers() {
        if (this.bindOnUse) for(const bufferIndex in this.buffers){
            const { buffer, byteSize, byteOffset } = this._getBufferParams(this.buffers[bufferIndex]);
            this._bindBuffer(bufferIndex, buffer, byteOffset, byteSize);
        }
    }
    _unbindBuffers() {
        if (this.bindOnUse) for(const bufferIndex in this.buffers)this._bindBuffer(bufferIndex, null);
    }
    _bindBuffer(index, buffer) {
        let byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        let byteSize = arguments.length > 3 ? arguments[3] : undefined;
        const handle = buffer && buffer.handle;
        if (!handle || byteSize === undefined) this.gl.bindBufferBase(35982, index, handle);
        else this.gl.bindBufferRange(35982, index, handle, byteOffset, byteSize);
        return this;
    }
    _createHandle() {
        return this.gl.createTransformFeedback();
    }
    _deleteHandle() {
        this.gl.deleteTransformFeedback(this.handle);
    }
    _bindHandle(handle) {
        this.gl.bindTransformFeedback(36386, this.handle);
    }
}
exports.default = TransformFeedback;

},{"@luma.gl/gltools":"4jTOy","./resource":"99wyj","./buffer":"kpTpO","../utils/utils":"3ygCB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gL3Nw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
var _buffer = require("./buffer");
var _bufferDefault = parcelHelpers.interopDefault(_buffer);
var _gltools = require("@luma.gl/gltools");
var _arrayUtilsFlat = require("../utils/array-utils-flat");
var _assert = require("../utils/assert");
var _env = require("@probe.gl/env");
const ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';
class VertexArrayObject extends (0, _resourceDefault.default) {
    get [Symbol.toStringTag]() {
        return 'VertexArrayObject';
    }
    static isSupported(gl) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (options.constantAttributeZero) return (0, _gltools.isWebGL2)(gl) || (0, _env.getBrowser)() === 'Chrome';
        return true;
    }
    static getDefaultArray(gl) {
        gl.luma = gl.luma || {};
        if (!gl.luma.defaultVertexArray) gl.luma.defaultVertexArray = new VertexArrayObject(gl, {
            handle: null,
            isDefaultArray: true
        });
        return gl.luma.defaultVertexArray;
    }
    static getMaxAttributes(gl) {
        VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);
        return VertexArrayObject.MAX_ATTRIBUTES;
    }
    static setConstant(gl, location, array) {
        switch(array.constructor){
            case Float32Array:
                VertexArrayObject._setConstantFloatArray(gl, location, array);
                break;
            case Int32Array:
                VertexArrayObject._setConstantIntArray(gl, location, array);
                break;
            case Uint32Array:
                VertexArrayObject._setConstantUintArray(gl, location, array);
                break;
            default:
                (0, _assert.assert)(false);
        }
    }
    constructor(gl){
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const id = opts.id || opts.program && opts.program.id;
        super(gl, Object.assign({}, opts, {
            id
        }));
        this.buffer = null;
        this.bufferValue = null;
        this.isDefaultArray = opts.isDefaultArray || false;
        this.gl2 = gl;
        this.initialize(opts);
        Object.seal(this);
    }
    delete() {
        super.delete();
        if (this.buffer) this.buffer.delete();
        return this;
    }
    get MAX_ATTRIBUTES() {
        return VertexArrayObject.getMaxAttributes(this.gl);
    }
    initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this.setProps(props);
    }
    setProps(props) {
        return this;
    }
    setElementBuffer() {
        let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _assert.assert)(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS);
        this.bind(()=>{
            this.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);
        });
        return this;
    }
    setBuffer(location, buffer, accessor) {
        if (buffer.target === 34963) return this.setElementBuffer(buffer, accessor);
        const { size, type, stride, offset, normalized, integer, divisor } = accessor;
        const { gl, gl2 } = this;
        location = Number(location);
        this.bind(()=>{
            gl.bindBuffer(34962, buffer.handle);
            if (integer) {
                (0, _assert.assert)((0, _gltools.isWebGL2)(gl));
                gl2.vertexAttribIPointer(location, size, type, stride, offset);
            } else gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
            gl.enableVertexAttribArray(location);
            gl2.vertexAttribDivisor(location, divisor || 0);
        });
        return this;
    }
    enable(location) {
        let enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        const disablingAttributeZero = !enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {
            constantAttributeZero: true
        });
        if (!disablingAttributeZero) {
            location = Number(location);
            this.bind(()=>enable ? this.gl.enableVertexAttribArray(location) : this.gl.disableVertexAttribArray(location));
        }
        return this;
    }
    getConstantBuffer(elementCount, value) {
        const constantValue = this._normalizeConstantArrayValue(value);
        const byteLength = constantValue.byteLength * elementCount;
        const length = constantValue.length * elementCount;
        let updateNeeded = !this.buffer;
        this.buffer = this.buffer || new (0, _bufferDefault.default)(this.gl, byteLength);
        updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);
        updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);
        if (updateNeeded) {
            const typedArray = (0, _arrayUtilsFlat.getScratchArray)(value.constructor, length);
            (0, _arrayUtilsFlat.fillArray)({
                target: typedArray,
                source: constantValue,
                start: 0,
                count: length
            });
            this.buffer.subData(typedArray);
            this.bufferValue = value;
        }
        return this.buffer;
    }
    _normalizeConstantArrayValue(arrayValue) {
        if (Array.isArray(arrayValue)) return new Float32Array(arrayValue);
        return arrayValue;
    }
    _compareConstantArrayValues(v1, v2) {
        if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) return false;
        for(let i = 0; i < v1.length; ++i){
            if (v1[i] !== v2[i]) return false;
        }
        return true;
    }
    static _setConstantFloatArray(gl, location, array) {
        switch(array.length){
            case 1:
                gl.vertexAttrib1fv(location, array);
                break;
            case 2:
                gl.vertexAttrib2fv(location, array);
                break;
            case 3:
                gl.vertexAttrib3fv(location, array);
                break;
            case 4:
                gl.vertexAttrib4fv(location, array);
                break;
            default:
                (0, _assert.assert)(false);
        }
    }
    static _setConstantIntArray(gl, location, array) {
        (0, _assert.assert)((0, _gltools.isWebGL2)(gl));
        switch(array.length){
            case 1:
                gl.vertexAttribI1iv(location, array);
                break;
            case 2:
                gl.vertexAttribI2iv(location, array);
                break;
            case 3:
                gl.vertexAttribI3iv(location, array);
                break;
            case 4:
                gl.vertexAttribI4iv(location, array);
                break;
            default:
                (0, _assert.assert)(false);
        }
    }
    static _setConstantUintArray(gl, location, array) {
        (0, _assert.assert)((0, _gltools.isWebGL2)(gl));
        switch(array.length){
            case 1:
                gl.vertexAttribI1uiv(location, array);
                break;
            case 2:
                gl.vertexAttribI2uiv(location, array);
                break;
            case 3:
                gl.vertexAttribI3uiv(location, array);
                break;
            case 4:
                gl.vertexAttribI4uiv(location, array);
                break;
            default:
                (0, _assert.assert)(false);
        }
    }
    _createHandle() {
        const gl2 = this.gl;
        return gl2.createVertexArray();
    }
    _deleteHandle(handle) {
        this.gl2.deleteVertexArray(handle);
        return [
            this.elements
        ];
    }
    _bindHandle(handle) {
        this.gl2.bindVertexArray(handle);
    }
    _getParameter(pname, _ref) {
        let { location } = _ref;
        (0, _assert.assert)(Number.isFinite(location));
        return this.bind(()=>{
            switch(pname){
                case 34373:
                    return this.gl.getVertexAttribOffset(location, pname);
                default:
                    return this.gl.getVertexAttrib(location, pname);
            }
        });
    }
}
exports.default = VertexArrayObject;

},{"./resource":"99wyj","./buffer":"kpTpO","@luma.gl/gltools":"4jTOy","../utils/array-utils-flat":"aXCk0","../utils/assert":"8HI0c","@probe.gl/env":"f6Lpj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aXCk0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getScratchArrayBuffer", ()=>getScratchArrayBuffer);
parcelHelpers.export(exports, "getScratchArray", ()=>getScratchArray);
parcelHelpers.export(exports, "fillArray", ()=>fillArray);
let arrayBuffer = null;
function getScratchArrayBuffer(byteLength) {
    if (!arrayBuffer || arrayBuffer.byteLength < byteLength) arrayBuffer = new ArrayBuffer(byteLength);
    return arrayBuffer;
}
function getScratchArray(Type, length) {
    const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);
    return new Type(scratchArrayBuffer, 0, length);
}
function fillArray(_ref) {
    let { target, source, start = 0, count = 1 } = _ref;
    const length = source.length;
    const total = count * length;
    let copied = 0;
    for(let i = start; copied < length; copied++)target[i++] = source[copied];
    while(copied < total)if (copied < total - copied) {
        target.copyWithin(start + copied, start, start + copied);
        copied *= 2;
    } else {
        target.copyWithin(start + copied, start, start + total - copied);
        copied = total;
    }
    return target;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lSHsf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _accessor = require("./accessor");
var _accessorDefault = parcelHelpers.interopDefault(_accessor);
var _buffer = require("./buffer");
var _bufferDefault = parcelHelpers.interopDefault(_buffer);
var _vertexArrayObject = require("./vertex-array-object");
var _vertexArrayObjectDefault = parcelHelpers.interopDefault(_vertexArrayObject);
var _assert = require("../utils/assert");
var _stubMethods = require("../utils/stub-methods");
const ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffers or constants (i.e. typed array)';
const MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;
const DEPRECATIONS_V6 = [
    'setBuffers',
    'setGeneric',
    'clearBindings',
    'setLocations',
    'setGenericValues',
    'setDivisor',
    'enable',
    'disable'
];
class VertexArray {
    constructor(gl){
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const id = opts.id || opts.program && opts.program.id;
        this.id = id;
        this.gl = gl;
        this.configuration = null;
        this.elements = null;
        this.elementsAccessor = null;
        this.values = null;
        this.accessors = null;
        this.unused = null;
        this.drawParams = null;
        this.buffer = null;
        this.attributes = {};
        this.vertexArrayObject = new (0, _vertexArrayObjectDefault.default)(gl);
        (0, _stubMethods.stubRemovedMethods)(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);
        this.initialize(opts);
        Object.seal(this);
    }
    delete() {
        if (this.buffer) this.buffer.delete();
        this.vertexArrayObject.delete();
    }
    initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.reset();
        this.configuration = null;
        this.bindOnUse = false;
        return this.setProps(props);
    }
    reset() {
        this.elements = null;
        this.elementsAccessor = null;
        const { MAX_ATTRIBUTES } = this.vertexArrayObject;
        this.values = new Array(MAX_ATTRIBUTES).fill(null);
        this.accessors = new Array(MAX_ATTRIBUTES).fill(null);
        this.unused = {};
        this.drawParams = null;
        return this;
    }
    setProps(props) {
        if ('program' in props) this.configuration = props.program && props.program.configuration;
        if ('configuration' in props) this.configuration = props.configuration;
        if ('attributes' in props) this.setAttributes(props.attributes);
        if ('elements' in props) this.setElementBuffer(props.elements);
        if ('bindOnUse' in props) props = props.bindOnUse;
        return this;
    }
    clearDrawParams() {
        this.drawParams = null;
    }
    getDrawParams() {
        this.drawParams = this.drawParams || this._updateDrawParams();
        return this.drawParams;
    }
    setAttributes(attributes) {
        Object.assign(this.attributes, attributes);
        this.vertexArrayObject.bind(()=>{
            for(const locationOrName in attributes){
                const value = attributes[locationOrName];
                this._setAttribute(locationOrName, value);
            }
            this.gl.bindBuffer(34962, null);
        });
        return this;
    }
    setElementBuffer() {
        let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.elements = elementBuffer;
        this.elementsAccessor = accessor;
        this.clearDrawParams();
        this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);
        return this;
    }
    setBuffer(locationOrName, buffer) {
        let appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (buffer.target === 34963) return this.setElementBuffer(buffer, appAccessor);
        const { location, accessor } = this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor);
        if (location >= 0) {
            this.values[location] = buffer;
            this.accessors[location] = accessor;
            this.clearDrawParams();
            this.vertexArrayObject.setBuffer(location, buffer, accessor);
        }
        return this;
    }
    setConstant(locationOrName, arrayValue) {
        let appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        const { location, accessor } = this._resolveLocationAndAccessor(locationOrName, arrayValue, Object.assign({
            size: arrayValue.length
        }, appAccessor));
        if (location >= 0) {
            arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);
            this.values[location] = arrayValue;
            this.accessors[location] = accessor;
            this.clearDrawParams();
            this.vertexArrayObject.enable(location, false);
        }
        return this;
    }
    unbindBuffers() {
        this.vertexArrayObject.bind(()=>{
            if (this.elements) this.vertexArrayObject.setElementBuffer(null);
            this.buffer = this.buffer || new (0, _bufferDefault.default)(this.gl, {
                accessor: {
                    size: 4
                }
            });
            for(let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++)if (this.values[location] instanceof (0, _bufferDefault.default)) {
                this.gl.disableVertexAttribArray(location);
                this.gl.bindBuffer(34962, this.buffer.handle);
                this.gl.vertexAttribPointer(location, 1, 5126, false, 0, 0);
            }
        });
        return this;
    }
    bindBuffers() {
        this.vertexArrayObject.bind(()=>{
            if (this.elements) this.setElementBuffer(this.elements);
            for(let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++){
                const buffer = this.values[location];
                if (buffer instanceof (0, _bufferDefault.default)) this.setBuffer(location, buffer);
            }
        });
        return this;
    }
    bindForDraw(vertexCount, instanceCount, func) {
        let value;
        this.vertexArrayObject.bind(()=>{
            this._setConstantAttributes(vertexCount, instanceCount);
            value = func();
        });
        return value;
    }
    _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {
        const INVALID_RESULT = {
            location: -1,
            accessor: null
        };
        const { location, name } = this._getAttributeIndex(locationOrName);
        if (!Number.isFinite(location) || location < 0) {
            this.unused[locationOrName] = value;
            (0, _gltools.log).once(3, ()=>"unused value ".concat(locationOrName, " in ").concat(this.id))();
            return INVALID_RESULT;
        }
        const accessInfo = this._getAttributeInfo(name || location);
        if (!accessInfo) return INVALID_RESULT;
        const currentAccessor = this.accessors[location] || {};
        const accessor = (0, _accessorDefault.default).resolve(accessInfo.accessor, currentAccessor, valueAccessor, appAccessor);
        const { size, type } = accessor;
        (0, _assert.assert)(Number.isFinite(size) && Number.isFinite(type));
        return {
            location,
            accessor
        };
    }
    _getAttributeInfo(attributeName) {
        return this.configuration && this.configuration.getAttributeInfo(attributeName);
    }
    _getAttributeIndex(locationOrName) {
        const location = Number(locationOrName);
        if (Number.isFinite(location)) return {
            location
        };
        const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);
        const name = multiLocation ? multiLocation[1] : locationOrName;
        const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;
        if (this.configuration) return {
            location: this.configuration.getAttributeLocation(name) + locationOffset,
            name
        };
        return {
            location: -1
        };
    }
    _setAttribute(locationOrName, value) {
        if (value instanceof (0, _bufferDefault.default)) this.setBuffer(locationOrName, value);
        else if (Array.isArray(value) && value.length && value[0] instanceof (0, _bufferDefault.default)) {
            const buffer = value[0];
            const accessor = value[1];
            this.setBuffer(locationOrName, buffer, accessor);
        } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {
            const constant = value;
            this.setConstant(locationOrName, constant);
        } else if (value.buffer instanceof (0, _bufferDefault.default)) {
            const accessor = value;
            this.setBuffer(locationOrName, accessor.buffer, accessor);
        } else throw new Error(ERR_ATTRIBUTE_TYPE);
    }
    _setConstantAttributes(vertexCount, instanceCount) {
        const elementCount = Math.max(vertexCount | 0, instanceCount | 0);
        let constant = this.values[0];
        if (ArrayBuffer.isView(constant)) this._setConstantAttributeZero(constant, elementCount);
        for(let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++){
            constant = this.values[location];
            if (ArrayBuffer.isView(constant)) this._setConstantAttribute(location, constant);
        }
    }
    _setConstantAttributeZero(constant, elementCount) {
        if ((0, _vertexArrayObjectDefault.default).isSupported(this.gl, {
            constantAttributeZero: true
        })) {
            this._setConstantAttribute(0, constant);
            return;
        }
        const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);
        this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);
    }
    _setConstantAttribute(location, constant) {
        (0, _vertexArrayObjectDefault.default).setConstant(this.gl, location, constant);
    }
    _updateDrawParams() {
        const drawParams = {
            isIndexed: false,
            isInstanced: false,
            indexCount: Infinity,
            vertexCount: Infinity,
            instanceCount: Infinity
        };
        for(let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++)this._updateDrawParamsForLocation(drawParams, location);
        if (this.elements) {
            drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);
            drawParams.isIndexed = true;
            drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;
            drawParams.indexOffset = this.elementsAccessor.offset || 0;
        }
        if (drawParams.indexCount === Infinity) drawParams.indexCount = 0;
        if (drawParams.vertexCount === Infinity) drawParams.vertexCount = 0;
        if (drawParams.instanceCount === Infinity) drawParams.instanceCount = 0;
        return drawParams;
    }
    _updateDrawParamsForLocation(drawParams, location) {
        const value = this.values[location];
        const accessor = this.accessors[location];
        if (!value) return;
        const { divisor } = accessor;
        const isInstanced = divisor > 0;
        drawParams.isInstanced = drawParams.isInstanced || isInstanced;
        if (value instanceof (0, _bufferDefault.default)) {
            const buffer = value;
            if (isInstanced) {
                const instanceCount = buffer.getVertexCount(accessor);
                drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);
            } else {
                const vertexCount = buffer.getVertexCount(accessor);
                drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);
            }
        }
    }
    setElements() {
        let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _gltools.log).deprecated('setElements', 'setElementBuffer')();
        return this.setElementBuffer(elementBuffer, accessor);
    }
}
exports.default = VertexArray;

},{"@luma.gl/gltools":"4jTOy","./accessor":"27K3L","./buffer":"kpTpO","./vertex-array-object":"gL3Nw","../utils/assert":"8HI0c","../utils/stub-methods":"cU0FY","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5JM50":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDebugTableForUniforms", ()=>getDebugTableForUniforms);
var _assert = require("../utils/assert");
var _formatValue = require("../utils/format-value");
function getDebugTableForUniforms(_ref) {
    let { header = 'Uniforms', program, uniforms, undefinedOnly = false } = _ref;
    (0, _assert.assert)(program);
    const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';
    const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix';
    const uniformLocations = program._uniformSetters;
    const table = {};
    const uniformNames = Object.keys(uniformLocations).sort();
    let count = 0;
    for (const uniformName of uniformNames){
        if (!uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) && !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {
            if (addUniformToTable({
                table,
                header,
                uniforms,
                uniformName,
                undefinedOnly
            })) count++;
        }
    }
    for (const uniformName of uniformNames){
        if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {
            if (addUniformToTable({
                table,
                header,
                uniforms,
                uniformName,
                undefinedOnly
            })) count++;
        }
    }
    for (const uniformName of uniformNames){
        if (!table[uniformName]) {
            if (addUniformToTable({
                table,
                header,
                uniforms,
                uniformName,
                undefinedOnly
            })) count++;
        }
    }
    let unusedCount = 0;
    const unusedTable = {};
    if (!undefinedOnly) for(const uniformName in uniforms){
        const uniform = uniforms[uniformName];
        if (!table[uniformName]) {
            unusedCount++;
            unusedTable[uniformName] = {
                Type: "NOT USED: ".concat(uniform),
                [header]: (0, _formatValue.formatValue)(uniform)
            };
        }
    }
    return {
        table,
        count,
        unusedTable,
        unusedCount
    };
}
function addUniformToTable(_ref2) {
    let { table, header, uniforms, uniformName, undefinedOnly } = _ref2;
    const value = uniforms[uniformName];
    const isDefined = isUniformDefined(value);
    if (!undefinedOnly || !isDefined) {
        table[uniformName] = {
            [header]: isDefined ? (0, _formatValue.formatValue)(value) : 'N/A',
            'Uniform Type': isDefined ? value : 'NOT PROVIDED'
        };
        return true;
    }
    return false;
}
function isUniformDefined(value) {
    return value !== undefined && value !== null;
}

},{"../utils/assert":"8HI0c","../utils/format-value":"58WoH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"58WoH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatValue", ()=>formatValue);
function formatArrayValue(v, opts) {
    const { maxElts = 16, size = 1 } = opts;
    let string = '[';
    for(let i = 0; i < v.length && i < maxElts; ++i){
        if (i > 0) string += ",".concat(i % size === 0 ? ' ' : '');
        string += formatValue(v[i], opts);
    }
    const terminator = v.length > maxElts ? '...' : ']';
    return "".concat(string).concat(terminator);
}
function formatValue(v) {
    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const EPSILON = 1e-16;
    const { isInteger = false } = opts;
    if (Array.isArray(v) || ArrayBuffer.isView(v)) return formatArrayValue(v, opts);
    if (!Number.isFinite(v)) return String(v);
    if (Math.abs(v) < EPSILON) return isInteger ? '0' : '0.';
    if (isInteger) return v.toFixed(0);
    if (Math.abs(v) > 100 && Math.abs(v) < 10000) return v.toFixed(0);
    const string = v.toPrecision(2);
    const decimal = string.indexOf('.0');
    return decimal === string.length - 2 ? string.slice(0, -1) : string;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bEocD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDebugTableForVertexArray", ()=>getDebugTableForVertexArray);
var _buffer = require("../classes/buffer");
var _bufferDefault = parcelHelpers.interopDefault(_buffer);
var _constantsToKeys = require("../webgl-utils/constants-to-keys");
var _attributeUtils = require("../webgl-utils/attribute-utils");
var _formatValue = require("../utils/format-value");
function getDebugTableForVertexArray(_ref) {
    let { vertexArray, header = 'Attributes' } = _ref;
    if (!vertexArray.configuration) return {};
    const table = {};
    if (vertexArray.elements) table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);
    const attributes = vertexArray.values;
    for(const attributeLocation in attributes){
        const info = vertexArray._getAttributeInfo(attributeLocation);
        if (info) {
            let rowHeader = "".concat(attributeLocation, ": ").concat(info.name);
            const accessor = vertexArray.accessors[info.location];
            if (accessor) rowHeader = "".concat(attributeLocation, ": ").concat(getGLSLDeclaration(info.name, accessor));
            table[rowHeader] = getDebugTableRow(vertexArray, attributes[attributeLocation], accessor, header);
        }
    }
    return table;
}
function getDebugTableRow(vertexArray, attribute, accessor, header) {
    const { gl } = vertexArray;
    if (!attribute) return {
        [header]: 'null',
        'Format ': 'N/A'
    };
    let type = 'NOT PROVIDED';
    let size = 1;
    let verts = 0;
    let bytes = 0;
    let isInteger;
    let marker;
    let value;
    if (accessor) {
        type = accessor.type;
        size = accessor.size;
        type = String(type).replace('Array', '');
        isInteger = type.indexOf('nt') !== -1;
    }
    if (attribute instanceof (0, _bufferDefault.default)) {
        const buffer = attribute;
        const { data, changed } = buffer.getDebugData();
        marker = changed ? '*' : '';
        value = data;
        bytes = buffer.byteLength;
        verts = bytes / data.BYTES_PER_ELEMENT / size;
        let format;
        if (accessor) {
            const instanced = accessor.divisor > 0;
            format = "".concat(instanced ? 'I ' : 'P ', " ").concat(verts, " (x").concat(size, "=").concat(bytes, " bytes ").concat((0, _constantsToKeys.getKey)(gl, type), ")");
        } else {
            isInteger = true;
            format = "".concat(bytes, " bytes");
        }
        return {
            [header]: "".concat(marker).concat((0, _formatValue.formatValue)(value, {
                size,
                isInteger
            })),
            'Format ': format
        };
    }
    value = attribute;
    size = attribute.length;
    type = String(attribute.constructor.name).replace('Array', '');
    isInteger = type.indexOf('nt') !== -1;
    return {
        [header]: "".concat((0, _formatValue.formatValue)(value, {
            size,
            isInteger
        }), " (constant)"),
        'Format ': "".concat(size, "x").concat(type, " (constant)")
    };
}
function getGLSLDeclaration(name, accessor) {
    const { type, size } = accessor;
    const typeAndName = (0, _attributeUtils.getCompositeGLType)(type, size);
    return typeAndName ? "".concat(name, " (").concat(typeAndName.name, ")") : name;
}

},{"../classes/buffer":"kpTpO","../webgl-utils/constants-to-keys":"bDQE3","../webgl-utils/attribute-utils":"8cHXG","../utils/format-value":"58WoH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5erVJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDebugTableForProgramConfiguration", ()=>getDebugTableForProgramConfiguration);
var _attributeUtils = require("../webgl-utils/attribute-utils");
function getDebugTableForProgramConfiguration(config) {
    const table = {};
    const header = "Accessors for ".concat(config.id);
    for (const attributeInfo of config.attributeInfos)if (attributeInfo) {
        const glslDeclaration = getGLSLDeclaration(attributeInfo);
        table["in ".concat(glslDeclaration)] = {
            [header]: JSON.stringify(attributeInfo.accessor)
        };
    }
    for (const varyingInfo of config.varyingInfos)if (varyingInfo) {
        const glslDeclaration = getGLSLDeclaration(varyingInfo);
        table["out ".concat(glslDeclaration)] = {
            [header]: JSON.stringify(varyingInfo.accessor)
        };
    }
    return table;
}
function getGLSLDeclaration(attributeInfo) {
    const { type, size } = attributeInfo.accessor;
    const typeAndName = (0, _attributeUtils.getCompositeGLType)(type, size);
    if (typeAndName) return "".concat(typeAndName.name, " ").concat(attributeInfo.name);
    return attributeInfo.name;
}

},{"../webgl-utils/attribute-utils":"8cHXG","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7fyJq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AnimationLoop", ()=>(0, _animationLoopDefault.default));
parcelHelpers.export(exports, "Model", ()=>(0, _modelDefault.default));
parcelHelpers.export(exports, "ProgramManager", ()=>(0, _programManagerDefault.default));
parcelHelpers.export(exports, "Transform", ()=>(0, _transformDefault.default));
parcelHelpers.export(exports, "Geometry", ()=>(0, _geometryDefault.default));
parcelHelpers.export(exports, "ConeGeometry", ()=>(0, _coneGeometryDefault.default));
parcelHelpers.export(exports, "CubeGeometry", ()=>(0, _cubeGeometryDefault.default));
parcelHelpers.export(exports, "CylinderGeometry", ()=>(0, _cylinderGeometryDefault.default));
parcelHelpers.export(exports, "IcoSphereGeometry", ()=>(0, _icoSphereGeometryDefault.default));
parcelHelpers.export(exports, "PlaneGeometry", ()=>(0, _planeGeometryDefault.default));
parcelHelpers.export(exports, "SphereGeometry", ()=>(0, _sphereGeometryDefault.default));
parcelHelpers.export(exports, "TruncatedConeGeometry", ()=>(0, _truncatedConeGeometryDefault.default));
parcelHelpers.export(exports, "Timeline", ()=>(0, _timeline.Timeline));
parcelHelpers.export(exports, "KeyFrames", ()=>(0, _keyFrames.KeyFrames));
parcelHelpers.export(exports, "ClipSpace", ()=>(0, _clipSpaceDefault.default));
var _animationLoop = require("./lib/animation-loop");
var _animationLoopDefault = parcelHelpers.interopDefault(_animationLoop);
var _model = require("./lib/model");
var _modelDefault = parcelHelpers.interopDefault(_model);
var _programManager = require("./lib/program-manager");
var _programManagerDefault = parcelHelpers.interopDefault(_programManager);
var _transform = require("./transform/transform");
var _transformDefault = parcelHelpers.interopDefault(_transform);
var _geometry = require("./geometry/geometry");
var _geometryDefault = parcelHelpers.interopDefault(_geometry);
var _coneGeometry = require("./geometries/cone-geometry");
var _coneGeometryDefault = parcelHelpers.interopDefault(_coneGeometry);
var _cubeGeometry = require("./geometries/cube-geometry");
var _cubeGeometryDefault = parcelHelpers.interopDefault(_cubeGeometry);
var _cylinderGeometry = require("./geometries/cylinder-geometry");
var _cylinderGeometryDefault = parcelHelpers.interopDefault(_cylinderGeometry);
var _icoSphereGeometry = require("./geometries/ico-sphere-geometry");
var _icoSphereGeometryDefault = parcelHelpers.interopDefault(_icoSphereGeometry);
var _planeGeometry = require("./geometries/plane-geometry");
var _planeGeometryDefault = parcelHelpers.interopDefault(_planeGeometry);
var _sphereGeometry = require("./geometries/sphere-geometry");
var _sphereGeometryDefault = parcelHelpers.interopDefault(_sphereGeometry);
var _truncatedConeGeometry = require("./geometries/truncated-cone-geometry");
var _truncatedConeGeometryDefault = parcelHelpers.interopDefault(_truncatedConeGeometry);
var _timeline = require("./animation/timeline");
var _keyFrames = require("./animation/key-frames");
var _clipSpace = require("./utils/clip-space");
var _clipSpaceDefault = parcelHelpers.interopDefault(_clipSpace);

},{"./lib/animation-loop":"4ym7J","./lib/model":"VJAGH","./lib/program-manager":"f73eb","./transform/transform":"eK6GW","./geometry/geometry":"wKR1A","./geometries/cone-geometry":false,"./geometries/cube-geometry":false,"./geometries/cylinder-geometry":false,"./geometries/ico-sphere-geometry":false,"./geometries/plane-geometry":false,"./geometries/sphere-geometry":false,"./geometries/truncated-cone-geometry":false,"./animation/timeline":"1Elig","./animation/key-frames":false,"./utils/clip-space":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4ym7J":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _webgl = require("@luma.gl/webgl");
var _env = require("@probe.gl/env");
const isPage = (0, _env.isBrowser)() && typeof document !== 'undefined';
let statIdCounter = 0;
class AnimationLoop {
    constructor(){
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { onCreateContext = (opts)=>(0, _gltools.createGLContext)(opts), onAddHTML = null, onInitialize = ()=>{}, onRender = ()=>{}, onFinalize = ()=>{}, onError, gl = null, glOptions = {}, debug = false, createFramebuffer = false, autoResizeViewport = true, autoResizeDrawingBuffer = true, stats = (0, _webgl.lumaStats).get("animation-loop-".concat(statIdCounter++)) } = props;
        let { useDevicePixels = true } = props;
        if ('useDevicePixelRatio' in props) {
            (0, _webgl.log).deprecated('useDevicePixelRatio', 'useDevicePixels')();
            useDevicePixels = props.useDevicePixelRatio;
        }
        this.props = {
            onCreateContext,
            onAddHTML,
            onInitialize,
            onRender,
            onFinalize,
            onError,
            gl,
            glOptions,
            debug,
            createFramebuffer
        };
        this.gl = gl;
        this.needsRedraw = null;
        this.timeline = null;
        this.stats = stats;
        this.cpuTime = this.stats.get('CPU Time');
        this.gpuTime = this.stats.get('GPU Time');
        this.frameRate = this.stats.get('Frame Rate');
        this._initialized = false;
        this._running = false;
        this._animationFrameId = null;
        this._nextFramePromise = null;
        this._resolveNextFrame = null;
        this._cpuStartTime = 0;
        this.setProps({
            autoResizeViewport,
            autoResizeDrawingBuffer,
            useDevicePixels
        });
        this.start = this.start.bind(this);
        this.stop = this.stop.bind(this);
        this._pageLoadPromise = null;
        this._onMousemove = this._onMousemove.bind(this);
        this._onMouseleave = this._onMouseleave.bind(this);
    }
    delete() {
        this.stop();
        this._setDisplay(null);
    }
    setNeedsRedraw(reason) {
        (0, _webgl.assert)(typeof reason === 'string');
        this.needsRedraw = this.needsRedraw || reason;
        return this;
    }
    setProps(props) {
        if ('autoResizeViewport' in props) this.autoResizeViewport = props.autoResizeViewport;
        if ('autoResizeDrawingBuffer' in props) this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;
        if ('useDevicePixels' in props) this.useDevicePixels = props.useDevicePixels;
        return this;
    }
    start() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (this._running) return this;
        this._running = true;
        const startPromise = this._getPageLoadPromise().then(()=>{
            if (!this._running || this._initialized) return null;
            this._createWebGLContext(opts);
            this._createFramebuffer();
            this._startEventHandling();
            this._initializeCallbackData();
            this._updateCallbackData();
            this._resizeCanvasDrawingBuffer();
            this._resizeViewport();
            this._gpuTimeQuery = (0, _webgl.Query).isSupported(this.gl, [
                'timers'
            ]) ? new (0, _webgl.Query)(this.gl) : null;
            this._initialized = true;
            return this.onInitialize(this.animationProps);
        }).then((appContext)=>{
            if (this._running) {
                this._addCallbackData(appContext || {});
                if (appContext !== false) this._startLoop();
            }
        });
        if (this.props.onError) startPromise.catch(this.props.onError);
        return this;
    }
    redraw() {
        if (this.isContextLost()) return this;
        this._beginTimers();
        this._setupFrame();
        this._updateCallbackData();
        this._renderFrame(this.animationProps);
        this._clearNeedsRedraw();
        if (this.offScreen && this.gl.commit) this.gl.commit();
        if (this._resolveNextFrame) {
            this._resolveNextFrame(this);
            this._nextFramePromise = null;
            this._resolveNextFrame = null;
        }
        this._endTimers();
        return this;
    }
    stop() {
        if (this._running) {
            this._finalizeCallbackData();
            this._cancelAnimationFrame(this._animationFrameId);
            this._nextFramePromise = null;
            this._resolveNextFrame = null;
            this._animationFrameId = null;
            this._running = false;
        }
        return this;
    }
    attachTimeline(timeline) {
        this.timeline = timeline;
        return this.timeline;
    }
    detachTimeline() {
        this.timeline = null;
    }
    waitForRender() {
        this.setNeedsRedraw('waitForRender');
        if (!this._nextFramePromise) this._nextFramePromise = new Promise((resolve)=>{
            this._resolveNextFrame = resolve;
        });
        return this._nextFramePromise;
    }
    async toDataURL() {
        this.setNeedsRedraw('toDataURL');
        await this.waitForRender();
        return this.gl.canvas.toDataURL();
    }
    isContextLost() {
        return this.gl.isContextLost();
    }
    onCreateContext() {
        return this.props.onCreateContext(...arguments);
    }
    onInitialize() {
        return this.props.onInitialize(...arguments);
    }
    onRender() {
        return this.props.onRender(...arguments);
    }
    onFinalize() {
        return this.props.onFinalize(...arguments);
    }
    getHTMLControlValue(id) {
        let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        const element = document.getElementById(id);
        return element ? Number(element.value) : defaultValue;
    }
    setViewParameters() {
        (0, _webgl.log).removed('AnimationLoop.setViewParameters', 'AnimationLoop.setProps')();
        return this;
    }
    _startLoop() {
        const renderFrame = ()=>{
            if (!this._running) return;
            this.redraw();
            this._animationFrameId = this._requestAnimationFrame(renderFrame);
        };
        this._cancelAnimationFrame(this._animationFrameId);
        this._animationFrameId = this._requestAnimationFrame(renderFrame);
    }
    _getPageLoadPromise() {
        if (!this._pageLoadPromise) this._pageLoadPromise = isPage ? new Promise((resolve, reject)=>{
            if (isPage && document.readyState === 'complete') {
                resolve(document);
                return;
            }
            window.addEventListener('load', ()=>{
                resolve(document);
            });
        }) : Promise.resolve({});
        return this._pageLoadPromise;
    }
    _setDisplay(display) {
        if (this.display) {
            this.display.delete();
            this.display.animationLoop = null;
        }
        if (display) display.animationLoop = this;
        this.display = display;
    }
    _cancelAnimationFrame(animationFrameId) {
        if (this.display && this.display.cancelAnimationFrame) return this.display.cancelAnimationFrame(animationFrameId);
        return (0, _webgl.cancelAnimationFrame)(animationFrameId);
    }
    _requestAnimationFrame(renderFrameCallback) {
        if (this._running) {
            if (this.display && this.display.requestAnimationFrame) return this.display.requestAnimationFrame(renderFrameCallback);
            return (0, _webgl.requestAnimationFrame)(renderFrameCallback);
        }
        return undefined;
    }
    _renderFrame() {
        if (this.display) {
            this.display._renderFrame(...arguments);
            return;
        }
        this.onRender(...arguments);
    }
    _clearNeedsRedraw() {
        this.needsRedraw = null;
    }
    _setupFrame() {
        this._resizeCanvasDrawingBuffer();
        this._resizeViewport();
        this._resizeFramebuffer();
    }
    _initializeCallbackData() {
        this.animationProps = {
            gl: this.gl,
            stop: this.stop,
            canvas: this.gl.canvas,
            framebuffer: this.framebuffer,
            useDevicePixels: this.useDevicePixels,
            needsRedraw: null,
            startTime: Date.now(),
            engineTime: 0,
            tick: 0,
            tock: 0,
            time: 0,
            _timeline: this.timeline,
            _loop: this,
            _animationLoop: this,
            _mousePosition: null
        };
    }
    _updateCallbackData() {
        const { width, height, aspect } = this._getSizeAndAspect();
        if (width !== this.animationProps.width || height !== this.animationProps.height) this.setNeedsRedraw('drawing buffer resized');
        if (aspect !== this.animationProps.aspect) this.setNeedsRedraw('drawing buffer aspect changed');
        this.animationProps.width = width;
        this.animationProps.height = height;
        this.animationProps.aspect = aspect;
        this.animationProps.needsRedraw = this.needsRedraw;
        this.animationProps.engineTime = Date.now() - this.animationProps.startTime;
        if (this.timeline) this.timeline.update(this.animationProps.engineTime);
        this.animationProps.tick = Math.floor(this.animationProps.time / 1000 * 60);
        this.animationProps.tock++;
        this.animationProps.time = this.timeline ? this.timeline.getTime() : this.animationProps.engineTime;
        this.animationProps._offScreen = this.offScreen;
    }
    _finalizeCallbackData() {
        this.onFinalize(this.animationProps);
    }
    _addCallbackData(appContext) {
        if (typeof appContext === 'object' && appContext !== null) this.animationProps = Object.assign({}, this.animationProps, appContext);
    }
    _createWebGLContext(opts) {
        this.offScreen = opts.canvas && typeof OffscreenCanvas !== 'undefined' && opts.canvas instanceof OffscreenCanvas;
        opts = Object.assign({}, opts, this.props.glOptions);
        this.gl = this.props.gl ? (0, _gltools.instrumentGLContext)(this.props.gl, opts) : this.onCreateContext(opts);
        if (!(0, _gltools.isWebGL)(this.gl)) throw new Error('AnimationLoop.onCreateContext - illegal context returned');
        (0, _gltools.resetParameters)(this.gl);
        this._createInfoDiv();
    }
    _createInfoDiv() {
        if (this.gl.canvas && this.props.onAddHTML) {
            const wrapperDiv = document.createElement('div');
            document.body.appendChild(wrapperDiv);
            wrapperDiv.style.position = 'relative';
            const div = document.createElement('div');
            div.style.position = 'absolute';
            div.style.left = '10px';
            div.style.bottom = '10px';
            div.style.width = '300px';
            div.style.background = 'white';
            wrapperDiv.appendChild(this.gl.canvas);
            wrapperDiv.appendChild(div);
            const html = this.props.onAddHTML(div);
            if (html) div.innerHTML = html;
        }
    }
    _getSizeAndAspect() {
        const width = this.gl.drawingBufferWidth;
        const height = this.gl.drawingBufferHeight;
        let aspect = 1;
        const { canvas } = this.gl;
        if (canvas && canvas.clientHeight) aspect = canvas.clientWidth / canvas.clientHeight;
        else if (width > 0 && height > 0) aspect = width / height;
        return {
            width,
            height,
            aspect
        };
    }
    _resizeViewport() {
        if (this.autoResizeViewport) this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
    }
    _resizeCanvasDrawingBuffer() {
        if (this.autoResizeDrawingBuffer) (0, _gltools.resizeGLContext)(this.gl, {
            useDevicePixels: this.useDevicePixels
        });
    }
    _createFramebuffer() {
        if (this.props.createFramebuffer) this.framebuffer = new (0, _webgl.Framebuffer)(this.gl);
    }
    _resizeFramebuffer() {
        if (this.framebuffer) this.framebuffer.resize({
            width: this.gl.drawingBufferWidth,
            height: this.gl.drawingBufferHeight
        });
    }
    _beginTimers() {
        this.frameRate.timeEnd();
        this.frameRate.timeStart();
        if (this._gpuTimeQuery && this._gpuTimeQuery.isResultAvailable() && !this._gpuTimeQuery.isTimerDisjoint()) this.stats.get('GPU Time').addTime(this._gpuTimeQuery.getTimerMilliseconds());
        if (this._gpuTimeQuery) this._gpuTimeQuery.beginTimeElapsedQuery();
        this.cpuTime.timeStart();
    }
    _endTimers() {
        this.cpuTime.timeEnd();
        if (this._gpuTimeQuery) this._gpuTimeQuery.end();
    }
    _startEventHandling() {
        const { canvas } = this.gl;
        if (canvas) {
            canvas.addEventListener('mousemove', this._onMousemove);
            canvas.addEventListener('mouseleave', this._onMouseleave);
        }
    }
    _onMousemove(e) {
        this.animationProps._mousePosition = [
            e.offsetX,
            e.offsetY
        ];
    }
    _onMouseleave(e) {
        this.animationProps._mousePosition = null;
    }
}
exports.default = AnimationLoop;

},{"@luma.gl/gltools":"4jTOy","@luma.gl/webgl":"bcvb8","@probe.gl/env":"f6Lpj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"VJAGH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _programManager = require("./program-manager");
var _programManagerDefault = parcelHelpers.interopDefault(_programManager);
var _webgl = require("@luma.gl/webgl");
var _modelUtils = require("./model-utils");
const LOG_DRAW_PRIORITY = 2;
const LOG_DRAW_TIMEOUT = 10000;
const ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';
const NOOP = ()=>{};
const DRAW_PARAMS = {};
class Model {
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        const { id = (0, _webgl.uid)('model') } = props;
        (0, _webgl.assert)((0, _gltools.isWebGL)(gl));
        this.id = id;
        this.gl = gl;
        this.id = props.id || (0, _webgl.uid)('Model');
        this.lastLogTime = 0;
        this.animated = false;
        this.initialize(props);
    }
    initialize(props) {
        this.props = {};
        this.programManager = props.programManager || (0, _programManagerDefault.default).getDefaultProgramManager(this.gl);
        this._programManagerState = -1;
        this._managedProgram = false;
        const { program = null, vs, fs, modules, defines, inject, varyings, bufferMode, transpileToGLSL100 } = props;
        this.programProps = {
            program,
            vs,
            fs,
            modules,
            defines,
            inject,
            varyings,
            bufferMode,
            transpileToGLSL100
        };
        this.program = null;
        this.vertexArray = null;
        this._programDirty = true;
        this.userData = {};
        this.needsRedraw = true;
        this._attributes = {};
        this.attributes = {};
        this.uniforms = {};
        this.pickable = true;
        this._checkProgram();
        this.setUniforms(Object.assign({}, this.getModuleUniforms(props.moduleSettings)));
        this.drawMode = props.drawMode !== undefined ? props.drawMode : 4;
        this.vertexCount = props.vertexCount || 0;
        this.geometryBuffers = {};
        this.isInstanced = props.isInstanced || props.instanced || props.instanceCount > 0;
        this._setModelProps(props);
        this.geometry = {};
        (0, _webgl.assert)(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);
    }
    setProps(props) {
        this._setModelProps(props);
    }
    delete() {
        for(const key in this._attributes)if (this._attributes[key] !== this.attributes[key]) this._attributes[key].delete();
        if (this._managedProgram) {
            this.programManager.release(this.program);
            this._managedProgram = false;
        }
        this.vertexArray.delete();
        this._deleteGeometryBuffers();
    }
    getDrawMode() {
        return this.drawMode;
    }
    getVertexCount() {
        return this.vertexCount;
    }
    getInstanceCount() {
        return this.instanceCount;
    }
    getAttributes() {
        return this.attributes;
    }
    getProgram() {
        return this.program;
    }
    setProgram(props) {
        const { program, vs, fs, modules, defines, inject, varyings, bufferMode, transpileToGLSL100 } = props;
        this.programProps = {
            program,
            vs,
            fs,
            modules,
            defines,
            inject,
            varyings,
            bufferMode,
            transpileToGLSL100
        };
        this._programDirty = true;
    }
    getUniforms() {
        return this.uniforms;
    }
    setDrawMode(drawMode) {
        this.drawMode = drawMode;
        return this;
    }
    setVertexCount(vertexCount) {
        (0, _webgl.assert)(Number.isFinite(vertexCount));
        this.vertexCount = vertexCount;
        return this;
    }
    setInstanceCount(instanceCount) {
        (0, _webgl.assert)(Number.isFinite(instanceCount));
        this.instanceCount = instanceCount;
        return this;
    }
    setGeometry(geometry) {
        this.drawMode = geometry.drawMode;
        this.vertexCount = geometry.getVertexCount();
        this._deleteGeometryBuffers();
        this.geometryBuffers = (0, _modelUtils.getBuffersFromGeometry)(this.gl, geometry);
        this.vertexArray.setAttributes(this.geometryBuffers);
        return this;
    }
    setAttributes() {
        let attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if ((0, _webgl.isObjectEmpty)(attributes)) return this;
        const normalizedAttributes = {};
        for(const name in attributes){
            const attribute = attributes[name];
            normalizedAttributes[name] = attribute.getValue ? attribute.getValue() : attribute;
        }
        this.vertexArray.setAttributes(normalizedAttributes);
        return this;
    }
    setUniforms() {
        let uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        Object.assign(this.uniforms, uniforms);
        return this;
    }
    getModuleUniforms(opts) {
        this._checkProgram();
        const getUniforms = this.programManager.getUniforms(this.program);
        if (getUniforms) return getUniforms(opts);
        return {};
    }
    updateModuleSettings(opts) {
        const uniforms = this.getModuleUniforms(opts || {});
        return this.setUniforms(uniforms);
    }
    clear(opts) {
        (0, _webgl.clear)(this.program.gl, opts);
        return this;
    }
    draw() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this._checkProgram();
        const { moduleSettings = null, framebuffer, uniforms = {}, attributes = {}, transformFeedback = this.transformFeedback, parameters = {}, vertexArray = this.vertexArray } = opts;
        this.setAttributes(attributes);
        this.updateModuleSettings(moduleSettings);
        this.setUniforms(uniforms);
        let logPriority;
        if ((0, _webgl.log).priority >= LOG_DRAW_PRIORITY) logPriority = this._logDrawCallStart(LOG_DRAW_PRIORITY);
        const drawParams = this.vertexArray.getDrawParams();
        const { isIndexed = drawParams.isIndexed, indexType = drawParams.indexType, indexOffset = drawParams.indexOffset, vertexArrayInstanced = drawParams.isInstanced } = this.props;
        if (vertexArrayInstanced && !this.isInstanced) (0, _webgl.log).warn('Found instanced attributes on non-instanced model', this.id)();
        const { isInstanced, instanceCount } = this;
        const { onBeforeRender = NOOP, onAfterRender = NOOP } = this.props;
        onBeforeRender();
        this.program.setUniforms(this.uniforms);
        const didDraw = this.program.draw(Object.assign(DRAW_PARAMS, opts, {
            logPriority,
            uniforms: null,
            framebuffer,
            parameters,
            drawMode: this.getDrawMode(),
            vertexCount: this.getVertexCount(),
            vertexArray,
            transformFeedback,
            isIndexed,
            indexType,
            isInstanced,
            instanceCount,
            offset: isIndexed ? indexOffset : 0
        }));
        onAfterRender();
        if ((0, _webgl.log).priority >= LOG_DRAW_PRIORITY) this._logDrawCallEnd(logPriority, vertexArray, framebuffer);
        return didDraw;
    }
    transform() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { discard = true, feedbackBuffers, unbindModels = [] } = opts;
        let { parameters } = opts;
        if (feedbackBuffers) this._setFeedbackBuffers(feedbackBuffers);
        if (discard) parameters = Object.assign({}, parameters, {
            [35977]: discard
        });
        unbindModels.forEach((model)=>model.vertexArray.unbindBuffers());
        try {
            this.draw(Object.assign({}, opts, {
                parameters
            }));
        } finally{
            unbindModels.forEach((model)=>model.vertexArray.bindBuffers());
        }
        return this;
    }
    render() {
        let uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _webgl.log).warn('Model.render() is deprecated. Use Model.setUniforms() and Model.draw()')();
        return this.setUniforms(uniforms).draw();
    }
    _setModelProps(props) {
        Object.assign(this.props, props);
        if ('uniforms' in props) this.setUniforms(props.uniforms);
        if ('pickable' in props) this.pickable = props.pickable;
        if ('instanceCount' in props) this.instanceCount = props.instanceCount;
        if ('geometry' in props) this.setGeometry(props.geometry);
        if ('attributes' in props) this.setAttributes(props.attributes);
        if ('_feedbackBuffers' in props) this._setFeedbackBuffers(props._feedbackBuffers);
    }
    _checkProgram() {
        const needsUpdate = this._programDirty || this.programManager.stateHash !== this._programManagerState;
        if (!needsUpdate) return;
        let { program } = this.programProps;
        if (program) this._managedProgram = false;
        else {
            const { vs, fs, modules, inject, defines, varyings, bufferMode, transpileToGLSL100 } = this.programProps;
            program = this.programManager.get({
                vs,
                fs,
                modules,
                inject,
                defines,
                varyings,
                bufferMode,
                transpileToGLSL100
            });
            if (this.program && this._managedProgram) this.programManager.release(this.program);
            this._programManagerState = this.programManager.stateHash;
            this._managedProgram = true;
        }
        (0, _webgl.assert)(program instanceof (0, _webgl.Program), 'Model needs a program');
        this._programDirty = false;
        if (program === this.program) return;
        this.program = program;
        if (this.vertexArray) this.vertexArray.setProps({
            program: this.program,
            attributes: this.vertexArray.attributes
        });
        else this.vertexArray = new (0, _webgl.VertexArray)(this.gl, {
            program: this.program
        });
        this.setUniforms(Object.assign({}, this.getModuleUniforms()));
    }
    _deleteGeometryBuffers() {
        for(const name in this.geometryBuffers){
            const buffer = this.geometryBuffers[name][0] || this.geometryBuffers[name];
            if (buffer instanceof (0, _webgl.Buffer)) buffer.delete();
        }
    }
    _setAnimationProps(animationProps) {
        if (this.animated) (0, _webgl.assert)(animationProps, 'Model.draw(): animated uniforms but no animationProps');
    }
    _setFeedbackBuffers() {
        let feedbackBuffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if ((0, _webgl.isObjectEmpty)(feedbackBuffers)) return this;
        const { gl } = this.program;
        this.transformFeedback = this.transformFeedback || new (0, _webgl.TransformFeedback)(gl, {
            program: this.program
        });
        this.transformFeedback.setBuffers(feedbackBuffers);
        return this;
    }
    _logDrawCallStart(logLevel) {
        const logDrawTimeout = logLevel > 3 ? 0 : LOG_DRAW_TIMEOUT;
        if (Date.now() - this.lastLogTime < logDrawTimeout) return undefined;
        this.lastLogTime = Date.now();
        (0, _webgl.log).group(LOG_DRAW_PRIORITY, ">>> DRAWING MODEL ".concat(this.id), {
            collapsed: (0, _webgl.log).level <= 2
        })();
        return logLevel;
    }
    _logDrawCallEnd(logLevel, vertexArray, uniforms, framebuffer) {
        if (logLevel === undefined) return;
        const attributeTable = (0, _webgl.getDebugTableForVertexArray)({
            vertexArray,
            header: "".concat(this.id, " attributes"),
            attributes: this._attributes
        });
        const { table: uniformTable, unusedTable, unusedCount } = (0, _webgl.getDebugTableForUniforms)({
            header: "".concat(this.id, " uniforms"),
            program: this.program,
            uniforms: Object.assign({}, this.program.uniforms, uniforms)
        });
        const { table: missingTable, count: missingCount } = (0, _webgl.getDebugTableForUniforms)({
            header: "".concat(this.id, " uniforms"),
            program: this.program,
            uniforms: Object.assign({}, this.program.uniforms, uniforms),
            undefinedOnly: true
        });
        if (missingCount > 0) (0, _webgl.log).log('MISSING UNIFORMS', Object.keys(missingTable))();
        if (unusedCount > 0) (0, _webgl.log).log('UNUSED UNIFORMS', Object.keys(unusedTable))();
        const configTable = (0, _webgl.getDebugTableForProgramConfiguration)(this.vertexArray.configuration);
        (0, _webgl.log).table(logLevel, attributeTable)();
        (0, _webgl.log).table(logLevel, uniformTable)();
        (0, _webgl.log).table(logLevel + 1, configTable)();
        if (framebuffer) framebuffer.log({
            logLevel: LOG_DRAW_PRIORITY,
            message: "Rendered to ".concat(framebuffer.id)
        });
        (0, _webgl.log).groupEnd(LOG_DRAW_PRIORITY)();
    }
}
exports.default = Model;

},{"@luma.gl/gltools":"4jTOy","./program-manager":"f73eb","@luma.gl/webgl":"bcvb8","./model-utils":"ai5Ep","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"f73eb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _shadertools = require("@luma.gl/shadertools");
var _webgl = require("@luma.gl/webgl");
class ProgramManager {
    static getDefaultProgramManager(gl) {
        gl.luma = gl.luma || {};
        gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);
        return gl.luma.defaultProgramManager;
    }
    constructor(gl){
        this.gl = gl;
        this._programCache = {};
        this._getUniforms = {};
        this._registeredModules = {};
        this._hookFunctions = [];
        this._defaultModules = [];
        this._hashes = {};
        this._hashCounter = 0;
        this.stateHash = 0;
        this._useCounts = {};
    }
    addDefaultModule(module) {
        if (!this._defaultModules.find((m)=>m.name === module.name)) this._defaultModules.push(module);
        this.stateHash++;
    }
    removeDefaultModule(module) {
        const moduleName = typeof module === 'string' ? module : module.name;
        this._defaultModules = this._defaultModules.filter((m)=>m.name !== moduleName);
        this.stateHash++;
    }
    addShaderHook(hook, opts) {
        if (opts) hook = Object.assign(opts, {
            hook
        });
        this._hookFunctions.push(hook);
        this.stateHash++;
    }
    get() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { vs = '', fs = '', defines = {}, inject = {}, varyings = [], bufferMode = 0x8c8d, transpileToGLSL100 = false } = props;
        const modules = this._getModuleList(props.modules);
        const vsHash = this._getHash(vs);
        const fsHash = this._getHash(fs);
        const moduleHashes = modules.map((m)=>this._getHash(m.name)).sort();
        const varyingHashes = varyings.map((v)=>this._getHash(v));
        const defineKeys = Object.keys(defines).sort();
        const injectKeys = Object.keys(inject).sort();
        const defineHashes = [];
        const injectHashes = [];
        for (const key of defineKeys){
            defineHashes.push(this._getHash(key));
            defineHashes.push(this._getHash(defines[key]));
        }
        for (const key of injectKeys){
            injectHashes.push(this._getHash(key));
            injectHashes.push(this._getHash(inject[key]));
        }
        const hash = "".concat(vsHash, "/").concat(fsHash, "D").concat(defineHashes.join('/'), "M").concat(moduleHashes.join('/'), "I").concat(injectHashes.join('/'), "V").concat(varyingHashes.join('/'), "H").concat(this.stateHash, "B").concat(bufferMode).concat(transpileToGLSL100 ? 'T' : '');
        if (!this._programCache[hash]) {
            const assembled = (0, _shadertools.assembleShaders)(this.gl, {
                vs,
                fs,
                modules,
                inject,
                defines,
                hookFunctions: this._hookFunctions,
                transpileToGLSL100
            });
            this._programCache[hash] = new (0, _webgl.Program)(this.gl, {
                hash,
                vs: assembled.vs,
                fs: assembled.fs,
                varyings,
                bufferMode
            });
            this._getUniforms[hash] = assembled.getUniforms || ((x)=>{});
            this._useCounts[hash] = 0;
        }
        this._useCounts[hash]++;
        return this._programCache[hash];
    }
    getUniforms(program) {
        return this._getUniforms[program.hash] || null;
    }
    release(program) {
        const hash = program.hash;
        this._useCounts[hash]--;
        if (this._useCounts[hash] === 0) {
            this._programCache[hash].delete();
            delete this._programCache[hash];
            delete this._getUniforms[hash];
            delete this._useCounts[hash];
        }
    }
    _getHash(key) {
        if (this._hashes[key] === undefined) this._hashes[key] = this._hashCounter++;
        return this._hashes[key];
    }
    _getModuleList() {
        let appModules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        const modules = new Array(this._defaultModules.length + appModules.length);
        const seen = {};
        let count = 0;
        for(let i = 0, len = this._defaultModules.length; i < len; ++i){
            const module = this._defaultModules[i];
            const name = module.name;
            modules[count++] = module;
            seen[name] = true;
        }
        for(let i = 0, len = appModules.length; i < len; ++i){
            const module = appModules[i];
            const name = module.name;
            if (!seen[name]) {
                modules[count++] = module;
                seen[name] = true;
            }
        }
        modules.length = count;
        return modules;
    }
}
exports.default = ProgramManager;

},{"@luma.gl/shadertools":"4858B","@luma.gl/webgl":"bcvb8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4858B":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assembleShaders", ()=>(0, _assembleShaders.assembleShaders));
parcelHelpers.export(exports, "combineInjects", ()=>(0, _injectShader.combineInjects));
parcelHelpers.export(exports, "normalizeShaderModule", ()=>(0, _shaderModule.normalizeShaderModule));
parcelHelpers.export(exports, "getQualifierDetails", ()=>(0, _shaderUtils.getQualifierDetails));
parcelHelpers.export(exports, "getPassthroughFS", ()=>(0, _shaderUtils.getPassthroughFS));
parcelHelpers.export(exports, "typeToChannelSuffix", ()=>(0, _shaderUtils.typeToChannelSuffix));
parcelHelpers.export(exports, "typeToChannelCount", ()=>(0, _shaderUtils.typeToChannelCount));
parcelHelpers.export(exports, "convertToVec4", ()=>(0, _shaderUtils.convertToVec4));
var _assembleShaders = require("./lib/assemble-shaders");
var _injectShader = require("./lib/inject-shader");
var _shaderModule = require("./lib/shader-module");
var _shaderUtils = require("./utils/shader-utils");
var _modules = require("./modules");
parcelHelpers.exportAll(_modules, exports);

},{"./lib/assemble-shaders":"c8mMg","./lib/inject-shader":"4XY8n","./lib/shader-module":false,"./utils/shader-utils":"jPMRE","./modules":"dUBvg","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"c8mMg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assembleShaders", ()=>assembleShaders);
var _constants = require("./constants");
var _resolveModules = require("./resolve-modules");
var _platformDefines = require("./platform-defines");
var _injectShader = require("./inject-shader");
var _injectShaderDefault = parcelHelpers.interopDefault(_injectShader);
var _transpileShader = require("./transpile-shader");
var _transpileShaderDefault = parcelHelpers.interopDefault(_transpileShader);
var _utils = require("../utils");
const INJECT_SHADER_DECLARATIONS = "\n\n".concat((0, _injectShader.DECLARATION_INJECT_MARKER), "\n\n");
const SHADER_TYPE = {
    [(0, _constants.VERTEX_SHADER)]: 'vertex',
    [(0, _constants.FRAGMENT_SHADER)]: 'fragment'
};
const FRAGMENT_SHADER_PROLOGUE = "precision highp float;\n\n";
function assembleShaders(gl, opts) {
    const { vs, fs } = opts;
    const modules = (0, _resolveModules.resolveModules)(opts.modules || []);
    return {
        gl,
        vs: assembleShader(gl, Object.assign({}, opts, {
            source: vs,
            type: (0, _constants.VERTEX_SHADER),
            modules
        })),
        fs: assembleShader(gl, Object.assign({}, opts, {
            source: fs,
            type: (0, _constants.FRAGMENT_SHADER),
            modules
        })),
        getUniforms: assembleGetUniforms(modules)
    };
}
function assembleShader(gl, _ref) {
    let { id, source, type, modules, defines = {}, hookFunctions = [], inject = {}, transpileToGLSL100 = false, prologue = true, log } = _ref;
    (0, _utils.assert)(typeof source === 'string', 'shader source must be a string');
    const isVertex = type === (0, _constants.VERTEX_SHADER);
    const sourceLines = source.split('\n');
    let glslVersion = 100;
    let versionLine = '';
    let coreSource = source;
    if (sourceLines[0].indexOf('#version ') === 0) {
        glslVersion = 300;
        versionLine = sourceLines[0];
        coreSource = sourceLines.slice(1).join('\n');
    } else versionLine = "#version ".concat(glslVersion);
    const allDefines = {};
    modules.forEach((module)=>{
        Object.assign(allDefines, module.getDefines());
    });
    Object.assign(allDefines, defines);
    let assembledSource = prologue ? "".concat(versionLine, "\n").concat(getShaderName({
        id,
        source,
        type
    }), "\n").concat(getShaderType({
        type
    }), "\n").concat((0, _platformDefines.getPlatformShaderDefines)(gl), "\n").concat((0, _platformDefines.getVersionDefines)(gl, glslVersion, !isVertex), "\n").concat(getApplicationDefines(allDefines), "\n").concat(isVertex ? '' : FRAGMENT_SHADER_PROLOGUE, "\n") : "".concat(versionLine, "\n");
    const hookFunctionMap = normalizeHookFunctions(hookFunctions);
    const hookInjections = {};
    const declInjections = {};
    const mainInjections = {};
    for(const key in inject){
        const injection = typeof inject[key] === 'string' ? {
            injection: inject[key],
            order: 0
        } : inject[key];
        const match = key.match(/^(v|f)s:(#)?([\w-]+)$/);
        if (match) {
            const hash = match[2];
            const name = match[3];
            if (hash) {
                if (name === 'decl') declInjections[key] = [
                    injection
                ];
                else mainInjections[key] = [
                    injection
                ];
            } else hookInjections[key] = [
                injection
            ];
        } else mainInjections[key] = [
            injection
        ];
    }
    for (const module of modules){
        if (log) module.checkDeprecations(coreSource, log);
        const moduleSource = module.getModuleSource(type, glslVersion);
        assembledSource += moduleSource;
        const injections = module.injections[type];
        for(const key in injections){
            const match = key.match(/^(v|f)s:#([\w-]+)$/);
            if (match) {
                const name = match[2];
                const injectionType = name === 'decl' ? declInjections : mainInjections;
                injectionType[key] = injectionType[key] || [];
                injectionType[key].push(injections[key]);
            } else {
                hookInjections[key] = hookInjections[key] || [];
                hookInjections[key].push(injections[key]);
            }
        }
    }
    assembledSource += INJECT_SHADER_DECLARATIONS;
    assembledSource = (0, _injectShaderDefault.default)(assembledSource, type, declInjections);
    assembledSource += getHookFunctions(hookFunctionMap[type], hookInjections);
    assembledSource += coreSource;
    assembledSource = (0, _injectShaderDefault.default)(assembledSource, type, mainInjections);
    assembledSource = (0, _transpileShaderDefault.default)(assembledSource, transpileToGLSL100 ? 100 : glslVersion, isVertex);
    return assembledSource;
}
function assembleGetUniforms(modules) {
    return function getUniforms(opts) {
        const uniforms = {};
        for (const module of modules){
            const moduleUniforms = module.getUniforms(opts, uniforms);
            Object.assign(uniforms, moduleUniforms);
        }
        return uniforms;
    };
}
function getShaderType(_ref2) {
    let { type } = _ref2;
    return "\n#define SHADER_TYPE_".concat(SHADER_TYPE[type].toUpperCase(), "\n");
}
function getShaderName(_ref3) {
    let { id, source, type } = _ref3;
    const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;
    return injectShaderName ? "\n#define SHADER_NAME ".concat(id, "_").concat(SHADER_TYPE[type], "\n\n") : '';
}
function getApplicationDefines() {
    let defines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let count = 0;
    let sourceText = '';
    for(const define in defines){
        if (count === 0) sourceText += '\n// APPLICATION DEFINES\n';
        count++;
        const value = defines[define];
        if (value || Number.isFinite(value)) sourceText += "#define ".concat(define.toUpperCase(), " ").concat(defines[define], "\n");
    }
    if (count === 0) sourceText += '\n';
    return sourceText;
}
function getHookFunctions(hookFunctions, hookInjections) {
    let result = '';
    for(const hookName in hookFunctions){
        const hookFunction = hookFunctions[hookName];
        result += "void ".concat(hookFunction.signature, " {\n");
        if (hookFunction.header) result += "  ".concat(hookFunction.header);
        if (hookInjections[hookName]) {
            const injections = hookInjections[hookName];
            injections.sort((a, b)=>a.order - b.order);
            for (const injection of injections)result += "  ".concat(injection.injection, "\n");
        }
        if (hookFunction.footer) result += "  ".concat(hookFunction.footer);
        result += '}\n';
    }
    return result;
}
function normalizeHookFunctions(hookFunctions) {
    const result = {
        vs: {},
        fs: {}
    };
    hookFunctions.forEach((hook)=>{
        let opts;
        if (typeof hook !== 'string') {
            opts = hook;
            hook = opts.hook;
        } else opts = {};
        hook = hook.trim();
        const [stage, signature] = hook.split(':');
        const name = hook.replace(/\(.+/, '');
        result[stage][name] = Object.assign(opts, {
            signature
        });
    });
    return result;
}

},{"./constants":"c7pOh","./resolve-modules":"5qxlQ","./platform-defines":"7oiei","./inject-shader":"4XY8n","./transpile-shader":"cc1LW","../utils":"lYtr8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"c7pOh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VERTEX_SHADER", ()=>VERTEX_SHADER);
parcelHelpers.export(exports, "FRAGMENT_SHADER", ()=>FRAGMENT_SHADER);
const VERTEX_SHADER = 'vs';
const FRAGMENT_SHADER = 'fs';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5qxlQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveModules", ()=>resolveModules);
parcelHelpers.export(exports, "TEST_EXPORTS", ()=>TEST_EXPORTS);
var _shaderModule = require("./shader-module");
var _shaderModuleDefault = parcelHelpers.interopDefault(_shaderModule);
var _utils = require("../utils");
function resolveModules(modules) {
    return getShaderDependencies(instantiateModules(modules));
}
function getShaderDependencies(modules) {
    const moduleMap = {};
    const moduleDepth = {};
    getDependencyGraph({
        modules,
        level: 0,
        moduleMap,
        moduleDepth
    });
    return Object.keys(moduleDepth).sort((a, b)=>moduleDepth[b] - moduleDepth[a]).map((name)=>moduleMap[name]);
}
function getDependencyGraph(_ref) {
    let { modules, level, moduleMap, moduleDepth } = _ref;
    if (level >= 5) throw new Error('Possible loop in shader dependency graph');
    for (const module of modules){
        moduleMap[module.name] = module;
        if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) moduleDepth[module.name] = level;
    }
    for (const module of modules)if (module.dependencies) getDependencyGraph({
        modules: module.dependencies,
        level: level + 1,
        moduleMap,
        moduleDepth
    });
}
function instantiateModules(modules, seen) {
    return modules.map((module)=>{
        if (module instanceof (0, _shaderModuleDefault.default)) return module;
        (0, _utils.assert)(typeof module !== 'string', "Shader module use by name is deprecated. Import shader module '".concat(module, "' and use it directly."));
        (0, _utils.assert)(module.name, 'shader module has no name');
        module = new (0, _shaderModuleDefault.default)(module);
        module.dependencies = instantiateModules(module.dependencies);
        return module;
    });
}
const TEST_EXPORTS = {
    getShaderDependencies,
    getDependencyGraph
};

},{"./shader-module":"iNGuK","../utils":"lYtr8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iNGuK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normalizeShaderModule", ()=>normalizeShaderModule);
var _utils = require("../utils");
var _propTypes = require("./filters/prop-types");
const VERTEX_SHADER = 'vs';
const FRAGMENT_SHADER = 'fs';
class ShaderModule {
    constructor(_ref){
        let { name, vs, fs, dependencies = [], uniforms, getUniforms, deprecations = [], defines = {}, inject = {}, vertexShader, fragmentShader } = _ref;
        (0, _utils.assert)(typeof name === 'string');
        this.name = name;
        this.vs = vs || vertexShader;
        this.fs = fs || fragmentShader;
        this.getModuleUniforms = getUniforms;
        this.dependencies = dependencies;
        this.deprecations = this._parseDeprecationDefinitions(deprecations);
        this.defines = defines;
        this.injections = normalizeInjections(inject);
        if (uniforms) this.uniforms = (0, _propTypes.parsePropTypes)(uniforms);
    }
    getModuleSource(type) {
        let moduleSource;
        switch(type){
            case VERTEX_SHADER:
                moduleSource = this.vs || '';
                break;
            case FRAGMENT_SHADER:
                moduleSource = this.fs || '';
                break;
            default:
                (0, _utils.assert)(false);
        }
        return "#define MODULE_".concat(this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_'), "\n").concat(moduleSource, "// END MODULE_").concat(this.name, "\n\n");
    }
    getUniforms(opts, uniforms) {
        if (this.getModuleUniforms) return this.getModuleUniforms(opts, uniforms);
        if (this.uniforms) return this._defaultGetUniforms(opts);
        return {};
    }
    getDefines() {
        return this.defines;
    }
    checkDeprecations(shaderSource, log) {
        this.deprecations.forEach((def)=>{
            if (def.regex.test(shaderSource)) {
                if (def.deprecated) log.deprecated(def.old, def.new)();
                else log.removed(def.old, def.new)();
            }
        });
    }
    _parseDeprecationDefinitions(deprecations) {
        deprecations.forEach((def)=>{
            switch(def.type){
                case 'function':
                    def.regex = new RegExp("\\b".concat(def.old, "\\("));
                    break;
                default:
                    def.regex = new RegExp("".concat(def.type, " ").concat(def.old, ";"));
            }
        });
        return deprecations;
    }
    _defaultGetUniforms() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const uniforms = {};
        const propTypes = this.uniforms;
        for(const key in propTypes){
            const propDef = propTypes[key];
            if (key in opts && !propDef.private) {
                if (propDef.validate) (0, _utils.assert)(propDef.validate(opts[key], propDef), "".concat(this.name, ": invalid ").concat(key));
                uniforms[key] = opts[key];
            } else uniforms[key] = propDef.value;
        }
        return uniforms;
    }
}
exports.default = ShaderModule;
function normalizeShaderModule(module) {
    if (!module.normalized) {
        module.normalized = true;
        if (module.uniforms && !module.getUniforms) {
            const shaderModule = new ShaderModule(module);
            module.getUniforms = shaderModule.getUniforms.bind(shaderModule);
        }
    }
    return module;
}
function normalizeInjections(injections) {
    const result = {
        vs: {},
        fs: {}
    };
    for(const hook in injections){
        let injection = injections[hook];
        const stage = hook.slice(0, 2);
        if (typeof injection === 'string') injection = {
            order: 0,
            injection
        };
        result[stage][hook] = injection;
    }
    return result;
}

},{"../utils":"lYtr8","./filters/prop-types":"4rKrj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lYtr8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>(0, _assertDefault.default));
var _assert = require("./assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);

},{"./assert":"iBDBa","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iBDBa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message || 'shadertools: assertion failed.');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4rKrj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parsePropTypes", ()=>parsePropTypes);
const TYPE_DEFINITIONS = {
    number: {
        validate (value, propType) {
            return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);
        }
    },
    array: {
        validate (value, propType) {
            return Array.isArray(value) || ArrayBuffer.isView(value);
        }
    }
};
function parsePropTypes(propDefs) {
    const propTypes = {};
    for(const propName in propDefs){
        const propDef = propDefs[propName];
        const propType = parsePropType(propDef);
        propTypes[propName] = propType;
    }
    return propTypes;
}
function parsePropType(propDef) {
    let type = getTypeOf(propDef);
    if (type === 'object') {
        if (!propDef) return {
            type: 'object',
            value: null
        };
        if ('type' in propDef) return Object.assign({}, propDef, TYPE_DEFINITIONS[propDef.type]);
        if (!('value' in propDef)) return {
            type: 'object',
            value: propDef
        };
        type = getTypeOf(propDef.value);
        return Object.assign({
            type
        }, propDef, TYPE_DEFINITIONS[type]);
    }
    return Object.assign({
        type,
        value: propDef
    }, TYPE_DEFINITIONS[type]);
}
function getTypeOf(value) {
    if (Array.isArray(value) || ArrayBuffer.isView(value)) return 'array';
    return typeof value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7oiei":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPlatformShaderDefines", ()=>getPlatformShaderDefines);
parcelHelpers.export(exports, "getVersionDefines", ()=>getVersionDefines);
var _webglInfo = require("../utils/webgl-info");
function getPlatformShaderDefines(gl) {
    const debugInfo = (0, _webglInfo.getContextInfo)(gl);
    switch(debugInfo.gpuVendor.toLowerCase()){
        case 'nvidia':
            return "#define NVIDIA_GPU\n// Nvidia optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n";
        case 'intel':
            return "#define INTEL_GPU\n// Intel optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n";
        case 'amd':
            return "#define AMD_GPU\n";
        default:
            return "#define DEFAULT_GPU\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n";
    }
}
function getVersionDefines(gl, glslVersion, isFragment) {
    let versionDefines = "#if (__VERSION__ > 120)\n\n# define FEATURE_GLSL_DERIVATIVES\n# define FEATURE_GLSL_DRAW_BUFFERS\n# define FEATURE_GLSL_FRAG_DEPTH\n# define FEATURE_GLSL_TEXTURE_LOD\n\n// DEPRECATED FLAGS, remove in v9\n# define FRAG_DEPTH\n# define DERIVATIVES\n# define DRAW_BUFFERS\n# define TEXTURE_LOD\n\n#endif // __VERSION\n";
    if ((0, _webglInfo.hasFeatures)(gl, (0, _webglInfo.FEATURES).GLSL_FRAG_DEPTH)) versionDefines += "\n// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FEATURE_GLSL_FRAG_DEPTH\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n";
    if ((0, _webglInfo.hasFeatures)(gl, (0, _webglInfo.FEATURES).GLSL_DERIVATIVES) && (0, _webglInfo.canCompileGLGSExtension)(gl, (0, _webglInfo.FEATURES).GLSL_DERIVATIVES)) versionDefines += "\n// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define FEATURE_GLSL_DERIVATIVES\n# define DERIVATIVES\n#endif\n";
    if ((0, _webglInfo.hasFeatures)(gl, (0, _webglInfo.FEATURES).GLSL_FRAG_DATA) && (0, _webglInfo.canCompileGLGSExtension)(gl, (0, _webglInfo.FEATURES).GLSL_FRAG_DATA, {
        behavior: 'require'
    })) versionDefines += "\n// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define FEATURE_GLSL_DRAW_BUFFERS\n#define DRAW_BUFFERS\n#endif\n";
    if ((0, _webglInfo.hasFeatures)(gl, (0, _webglInfo.FEATURES).GLSL_TEXTURE_LOD)) versionDefines += "// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n\n# define FEATURE_GLSL_TEXTURE_LOD\n# define TEXTURE_LOD\n\n#endif\n";
    return versionDefines;
}

},{"../utils/webgl-info":"1EA7m","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1EA7m":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FEATURES", ()=>FEATURES);
parcelHelpers.export(exports, "getContextInfo", ()=>getContextInfo);
parcelHelpers.export(exports, "canCompileGLGSExtension", ()=>canCompileGLGSExtension);
parcelHelpers.export(exports, "hasFeatures", ()=>hasFeatures);
var _isOldIe = require("./is-old-ie");
var _isOldIeDefault = parcelHelpers.interopDefault(_isOldIe);
var _assert = require("./assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
const GL_VENDOR = 0x1f00;
const GL_RENDERER = 0x1f01;
const GL_VERSION = 0x1f02;
const GL_SHADING_LANGUAGE_VERSION = 0x8b8c;
const WEBGL_FEATURES = {
    GLSL_FRAG_DATA: [
        'WEBGL_draw_buffers',
        true
    ],
    GLSL_FRAG_DEPTH: [
        'EXT_frag_depth',
        true
    ],
    GLSL_DERIVATIVES: [
        'OES_standard_derivatives',
        true
    ],
    GLSL_TEXTURE_LOD: [
        'EXT_shader_texture_lod',
        true
    ]
};
const FEATURES = {};
Object.keys(WEBGL_FEATURES).forEach((key)=>{
    FEATURES[key] = key;
});
function isWebGL2(gl) {
    if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) return true;
    return Boolean(gl && gl._version === 2);
}
function getContextInfo(gl) {
    const info = gl.getExtension('WEBGL_debug_renderer_info');
    const vendor = gl.getParameter(info && info.UNMASKED_VENDOR_WEBGL || GL_VENDOR);
    const renderer = gl.getParameter(info && info.UNMASKED_RENDERER_WEBGL || GL_RENDERER);
    const gpuVendor = identifyGPUVendor(vendor, renderer);
    const gpuInfo = {
        gpuVendor,
        vendor,
        renderer,
        version: gl.getParameter(GL_VERSION),
        shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)
    };
    return gpuInfo;
}
function identifyGPUVendor(vendor, renderer) {
    if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) return 'NVIDIA';
    if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) return 'INTEL';
    if (vendor.match(/AMD/i) || renderer.match(/AMD/i) || vendor.match(/ATI/i) || renderer.match(/ATI/i)) return 'AMD';
    return 'UNKNOWN GPU';
}
const compiledGlslExtensions = {};
function canCompileGLGSExtension(gl, cap) {
    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const feature = WEBGL_FEATURES[cap];
    (0, _assertDefault.default)(feature, cap);
    if (!(0, _isOldIeDefault.default)(opts)) return true;
    if (cap in compiledGlslExtensions) return compiledGlslExtensions[cap];
    const extensionName = feature[0];
    const behavior = opts.behavior || 'enable';
    const source = "#extension GL_".concat(extensionName, " : ").concat(behavior, "\nvoid main(void) {}");
    const shader = gl.createShader(35633);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    const canCompile = gl.getShaderParameter(shader, 35713);
    gl.deleteShader(shader);
    compiledGlslExtensions[cap] = canCompile;
    return canCompile;
}
function getFeature(gl, cap) {
    const feature = WEBGL_FEATURES[cap];
    (0, _assertDefault.default)(feature, cap);
    const extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];
    const value = typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;
    (0, _assertDefault.default)(value === false || value === true);
    return value;
}
function hasFeatures(gl, features) {
    features = Array.isArray(features) ? features : [
        features
    ];
    return features.every((feature)=>getFeature(gl, feature));
}

},{"./is-old-ie":"durwp","./assert":"iBDBa","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"durwp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isOldIE);
function isOldIE() {
    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const navigator = typeof window !== 'undefined' ? window.navigator || {} : {};
    const userAgent = opts.userAgent || navigator.userAgent || '';
    const isMSIE = userAgent.indexOf('MSIE ') !== -1;
    const isTrident = userAgent.indexOf('Trident/') !== -1;
    return isMSIE || isTrident;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4XY8n":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DECLARATION_INJECT_MARKER", ()=>DECLARATION_INJECT_MARKER);
parcelHelpers.export(exports, "default", ()=>injectShader);
parcelHelpers.export(exports, "combineInjects", ()=>combineInjects);
var _moduleInjectors = require("../modules/module-injectors");
var _constants = require("./constants");
var _utils = require("../utils");
const MODULE_INJECTORS = {
    [(0, _constants.VERTEX_SHADER)]: (0, _moduleInjectors.MODULE_INJECTORS_VS),
    [(0, _constants.FRAGMENT_SHADER)]: (0, _moduleInjectors.MODULE_INJECTORS_FS)
};
const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';
const REGEX_START_OF_MAIN = /void\s+main\s*\([^)]*\)\s*\{\n?/;
const REGEX_END_OF_MAIN = /}\n?[^{}]*$/;
const fragments = [];
function injectShader(source, type, inject) {
    let injectStandardStubs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const isVertex = type === (0, _constants.VERTEX_SHADER);
    for(const key in inject){
        const fragmentData = inject[key];
        fragmentData.sort((a, b)=>a.order - b.order);
        fragments.length = fragmentData.length;
        for(let i = 0, len = fragmentData.length; i < len; ++i)fragments[i] = fragmentData[i].injection;
        const fragmentString = "".concat(fragments.join('\n'), "\n");
        switch(key){
            case 'vs:#decl':
                if (isVertex) source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);
                break;
            case 'vs:#main-start':
                if (isVertex) source = source.replace(REGEX_START_OF_MAIN, (match)=>match + fragmentString);
                break;
            case 'vs:#main-end':
                if (isVertex) source = source.replace(REGEX_END_OF_MAIN, (match)=>fragmentString + match);
                break;
            case 'fs:#decl':
                if (!isVertex) source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);
                break;
            case 'fs:#main-start':
                if (!isVertex) source = source.replace(REGEX_START_OF_MAIN, (match)=>match + fragmentString);
                break;
            case 'fs:#main-end':
                if (!isVertex) source = source.replace(REGEX_END_OF_MAIN, (match)=>fragmentString + match);
                break;
            default:
                source = source.replace(key, (match)=>match + fragmentString);
        }
    }
    source = source.replace(DECLARATION_INJECT_MARKER, '');
    if (injectStandardStubs) source = source.replace(/\}\s*$/, (match)=>match + MODULE_INJECTORS[type]);
    return source;
}
function combineInjects(injects) {
    const result = {};
    (0, _utils.assert)(Array.isArray(injects) && injects.length > 1);
    injects.forEach((inject)=>{
        for(const key in inject)result[key] = result[key] ? "".concat(result[key], "\n").concat(inject[key]) : inject[key];
    });
    return result;
}

},{"../modules/module-injectors":"laWZw","./constants":"c7pOh","../utils":"lYtr8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"laWZw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MODULE_INJECTORS_VS", ()=>MODULE_INJECTORS_VS);
parcelHelpers.export(exports, "MODULE_INJECTORS_FS", ()=>MODULE_INJECTORS_FS);
const MODULE_INJECTORS_VS = "#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n";
const MODULE_INJECTORS_FS = "#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth();\n#endif\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cc1LW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>transpileShader);
function testVariable(qualifier) {
    return new RegExp("\\b".concat(qualifier, "[ \\t]+(\\w+[ \\t]+\\w+(\\[\\w+\\])?;)"), 'g');
}
const ES300_REPLACEMENTS = [
    [
        /^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/,
        '#version 300 es\n'
    ],
    [
        /\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g,
        'textureLod('
    ],
    [
        /\btexture(2D|2DProj|Cube)(EXT)?\(/g,
        'texture('
    ]
];
const ES300_VERTEX_REPLACEMENTS = [
    ...ES300_REPLACEMENTS,
    [
        testVariable('attribute'),
        'in $1'
    ],
    [
        testVariable('varying'),
        'out $1'
    ]
];
const ES300_FRAGMENT_REPLACEMENTS = [
    ...ES300_REPLACEMENTS,
    [
        testVariable('varying'),
        'in $1'
    ]
];
const ES100_REPLACEMENTS = [
    [
        /^#version[ \t]+300[ \t]+es/,
        '#version 100'
    ],
    [
        /\btexture(2D|2DProj|Cube)Lod\(/g,
        'texture$1LodEXT('
    ],
    [
        /\btexture\(/g,
        'texture2D('
    ],
    [
        /\btextureLod\(/g,
        'texture2DLodEXT('
    ]
];
const ES100_VERTEX_REPLACEMENTS = [
    ...ES100_REPLACEMENTS,
    [
        testVariable('in'),
        'attribute $1'
    ],
    [
        testVariable('out'),
        'varying $1'
    ]
];
const ES100_FRAGMENT_REPLACEMENTS = [
    ...ES100_REPLACEMENTS,
    [
        testVariable('in'),
        'varying $1'
    ]
];
const ES100_FRAGMENT_OUTPUT_NAME = 'gl_FragColor';
const ES300_FRAGMENT_OUTPUT_REGEX = /\bout[ \t]+vec4[ \t]+(\w+)[ \t]*;\n?/;
const REGEX_START_OF_MAIN = /void\s+main\s*\([^)]*\)\s*\{\n?/;
function transpileShader(source, targetGLSLVersion, isVertex) {
    switch(targetGLSLVersion){
        case 300:
            return isVertex ? convertShader(source, ES300_VERTEX_REPLACEMENTS) : convertFragmentShaderTo300(source);
        case 100:
            return isVertex ? convertShader(source, ES100_VERTEX_REPLACEMENTS) : convertFragmentShaderTo100(source);
        default:
            throw new Error("unknown GLSL version ".concat(targetGLSLVersion));
    }
}
function convertShader(source, replacements) {
    for (const [pattern, replacement] of replacements)source = source.replace(pattern, replacement);
    return source;
}
function convertFragmentShaderTo300(source) {
    source = convertShader(source, ES300_FRAGMENT_REPLACEMENTS);
    const outputMatch = source.match(ES300_FRAGMENT_OUTPUT_REGEX);
    if (outputMatch) {
        const outputName = outputMatch[1];
        source = source.replace(new RegExp("\\b".concat(ES100_FRAGMENT_OUTPUT_NAME, "\\b"), 'g'), outputName);
    } else {
        const outputName = 'fragmentColor';
        source = source.replace(REGEX_START_OF_MAIN, (match)=>"out vec4 ".concat(outputName, ";\n").concat(match)).replace(new RegExp("\\b".concat(ES100_FRAGMENT_OUTPUT_NAME, "\\b"), 'g'), outputName);
    }
    return source;
}
function convertFragmentShaderTo100(source) {
    source = convertShader(source, ES100_FRAGMENT_REPLACEMENTS);
    const outputMatch = source.match(ES300_FRAGMENT_OUTPUT_REGEX);
    if (outputMatch) {
        const outputName = outputMatch[1];
        source = source.replace(ES300_FRAGMENT_OUTPUT_REGEX, '').replace(new RegExp("\\b".concat(outputName, "\\b"), 'g'), ES100_FRAGMENT_OUTPUT_NAME);
    }
    return source;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jPMRE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getQualifierDetails", ()=>getQualifierDetails);
parcelHelpers.export(exports, "getPassthroughFS", ()=>getPassthroughFS);
parcelHelpers.export(exports, "typeToChannelSuffix", ()=>typeToChannelSuffix);
parcelHelpers.export(exports, "typeToChannelCount", ()=>typeToChannelCount);
parcelHelpers.export(exports, "convertToVec4", ()=>convertToVec4);
var _utils = require("../utils");
const FS100 = "void main() {gl_FragColor = vec4(0);}";
const FS_GLES = "out vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}";
const FS300 = "#version 300 es\n".concat(FS_GLES);
function getQualifierDetails(line, qualifiers) {
    qualifiers = Array.isArray(qualifiers) ? qualifiers : [
        qualifiers
    ];
    const words = line.replace(/^\s+/, '').split(/\s+/);
    const [qualifier, type, definition] = words;
    if (!qualifiers.includes(qualifier) || !type || !definition) return null;
    const name = definition.split(';')[0];
    return {
        qualifier,
        type,
        name
    };
}
function getPassthroughFS() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const { version = 100, input, inputType, output } = options;
    if (!input) {
        if (version === 300) return FS300;
        else if (version > 300) return "#version ".concat(version, "\n").concat(FS_GLES);
        return FS100;
    }
    const outputValue = convertToVec4(input, inputType);
    if (version >= 300) return "#version ".concat(version, " ").concat(version === 300 ? 'es' : '', "\nin ").concat(inputType, " ").concat(input, ";\nout vec4 ").concat(output, ";\nvoid main() {\n  ").concat(output, " = ").concat(outputValue, ";\n}");
    return "varying ".concat(inputType, " ").concat(input, ";\nvoid main() {\n  gl_FragColor = ").concat(outputValue, ";\n}");
}
function typeToChannelSuffix(type) {
    switch(type){
        case 'float':
            return 'x';
        case 'vec2':
            return 'xy';
        case 'vec3':
            return 'xyz';
        case 'vec4':
            return 'xyzw';
        default:
            (0, _utils.assert)(false);
            return null;
    }
}
function typeToChannelCount(type) {
    switch(type){
        case 'float':
            return 1;
        case 'vec2':
            return 2;
        case 'vec3':
            return 3;
        case 'vec4':
            return 4;
        default:
            (0, _utils.assert)(false);
            return null;
    }
}
function convertToVec4(variable, type) {
    switch(type){
        case 'float':
            return "vec4(".concat(variable, ", 0.0, 0.0, 1.0)");
        case 'vec2':
            return "vec4(".concat(variable, ", 0.0, 1.0)");
        case 'vec3':
            return "vec4(".concat(variable, ", 1.0)");
        case 'vec4':
            return variable;
        default:
            (0, _utils.assert)(false);
            return null;
    }
}

},{"../utils":"lYtr8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dUBvg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "random", ()=>(0, _random.random));
parcelHelpers.export(exports, "fp32", ()=>(0, _fp32.fp32));
parcelHelpers.export(exports, "fp64", ()=>(0, _fp64.fp64));
parcelHelpers.export(exports, "fp64arithmetic", ()=>(0, _fp64.fp64arithmetic));
parcelHelpers.export(exports, "project", ()=>(0, _project.project));
parcelHelpers.export(exports, "lights", ()=>(0, _lights.lights));
parcelHelpers.export(exports, "dirlight", ()=>(0, _dirlight.dirlight));
parcelHelpers.export(exports, "picking", ()=>(0, _picking.picking));
parcelHelpers.export(exports, "gouraudLighting", ()=>(0, _phongLighting.gouraudLighting));
parcelHelpers.export(exports, "phongLighting", ()=>(0, _phongLighting.phongLighting));
parcelHelpers.export(exports, "pbr", ()=>(0, _pbr.pbr));
parcelHelpers.export(exports, "tiltShift", ()=>(0, _tiltshift.tiltShift));
parcelHelpers.export(exports, "triangleBlur", ()=>(0, _triangleblur.triangleBlur));
parcelHelpers.export(exports, "zoomBlur", ()=>(0, _zoomblur.zoomBlur));
parcelHelpers.export(exports, "brightnessContrast", ()=>(0, _brightnesscontrast.brightnessContrast));
parcelHelpers.export(exports, "denoise", ()=>(0, _denoise.denoise));
parcelHelpers.export(exports, "hueSaturation", ()=>(0, _huesaturation.hueSaturation));
parcelHelpers.export(exports, "noise", ()=>(0, _noise.noise));
parcelHelpers.export(exports, "sepia", ()=>(0, _sepia.sepia));
parcelHelpers.export(exports, "vibrance", ()=>(0, _vibrance.vibrance));
parcelHelpers.export(exports, "vignette", ()=>(0, _vignette.vignette));
parcelHelpers.export(exports, "colorHalftone", ()=>(0, _colorhalftone.colorHalftone));
parcelHelpers.export(exports, "dotScreen", ()=>(0, _dotscreen.dotScreen));
parcelHelpers.export(exports, "edgeWork", ()=>(0, _edgework.edgeWork));
parcelHelpers.export(exports, "hexagonalPixelate", ()=>(0, _hexagonalpixelate.hexagonalPixelate));
parcelHelpers.export(exports, "ink", ()=>(0, _ink.ink));
parcelHelpers.export(exports, "magnify", ()=>(0, _magnify.magnify));
parcelHelpers.export(exports, "bulgePinch", ()=>(0, _bulgepinch.bulgePinch));
parcelHelpers.export(exports, "swirl", ()=>(0, _swirl.swirl));
parcelHelpers.export(exports, "_warp", ()=>(0, _warp.warp));
parcelHelpers.export(exports, "fxaa", ()=>(0, _fxaa.fxaa));
parcelHelpers.export(exports, "_transform", ()=>(0, _transform.transform));
var _random = require("./utils/random");
var _fp32 = require("./fp32/fp32");
var _fp64 = require("./fp64/fp64");
var _project = require("./project/project");
var _lights = require("./lights/lights");
var _dirlight = require("./dirlight/dirlight");
var _picking = require("./picking/picking");
var _phongLighting = require("./phong-lighting/phong-lighting");
var _pbr = require("./pbr/pbr");
var _tiltshift = require("./image-blur-filters/tiltshift");
var _triangleblur = require("./image-blur-filters/triangleblur");
var _zoomblur = require("./image-blur-filters/zoomblur");
var _brightnesscontrast = require("./image-adjust-filters/brightnesscontrast");
var _denoise = require("./image-adjust-filters/denoise");
var _huesaturation = require("./image-adjust-filters/huesaturation");
var _noise = require("./image-adjust-filters/noise");
var _sepia = require("./image-adjust-filters/sepia");
var _vibrance = require("./image-adjust-filters/vibrance");
var _vignette = require("./image-adjust-filters/vignette");
var _colorhalftone = require("./image-fun-filters/colorhalftone");
var _dotscreen = require("./image-fun-filters/dotscreen");
var _edgework = require("./image-fun-filters/edgework");
var _hexagonalpixelate = require("./image-fun-filters/hexagonalpixelate");
var _ink = require("./image-fun-filters/ink");
var _magnify = require("./image-fun-filters/magnify");
var _bulgepinch = require("./image-warp-filters/bulgepinch");
var _swirl = require("./image-warp-filters/swirl");
var _warp = require("./image-warp-filters/warp");
var _fxaa = require("./fxaa/fxaa");
var _transform = require("./transform/transform");

},{"./utils/random":false,"./fp32/fp32":"fHnCA","./fp64/fp64":false,"./project/project":false,"./lights/lights":false,"./dirlight/dirlight":false,"./picking/picking":"3MJOV","./phong-lighting/phong-lighting":"kMxM3","./pbr/pbr":false,"./image-blur-filters/tiltshift":false,"./image-blur-filters/triangleblur":false,"./image-blur-filters/zoomblur":false,"./image-adjust-filters/brightnesscontrast":false,"./image-adjust-filters/denoise":false,"./image-adjust-filters/huesaturation":false,"./image-adjust-filters/noise":false,"./image-adjust-filters/sepia":false,"./image-adjust-filters/vibrance":false,"./image-adjust-filters/vignette":false,"./image-fun-filters/colorhalftone":false,"./image-fun-filters/dotscreen":false,"./image-fun-filters/edgework":false,"./image-fun-filters/hexagonalpixelate":false,"./image-fun-filters/ink":false,"./image-fun-filters/magnify":false,"./image-warp-filters/bulgepinch":false,"./image-warp-filters/swirl":false,"./image-warp-filters/warp":false,"./fxaa/fxaa":false,"./transform/transform":"kdWcD","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fHnCA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fp32", ()=>fp32);
const fp32shader = "#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\nconst float TWO_PI = 6.2831854820251465;\nconst float PI_2 = 1.5707963705062866;\nconst float PI_16 = 0.1963495463132858;\n\nconst float SIN_TABLE_0 = 0.19509032368659973;\nconst float SIN_TABLE_1 = 0.3826834261417389;\nconst float SIN_TABLE_2 = 0.5555702447891235;\nconst float SIN_TABLE_3 = 0.7071067690849304;\n\nconst float COS_TABLE_0 = 0.9807852506637573;\nconst float COS_TABLE_1 = 0.9238795042037964;\nconst float COS_TABLE_2 = 0.8314695954322815;\nconst float COS_TABLE_3 = 0.7071067690849304;\n\nconst float INVERSE_FACTORIAL_3 = 1.666666716337204e-01;\nconst float INVERSE_FACTORIAL_5 = 8.333333767950535e-03;\nconst float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04;\nconst float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06;\n\nfloat sin_taylor_fp32(float a) {\n  float r, s, t, x;\n\n  if (a == 0.0) {\n    return 0.0;\n  }\n\n  x = -a * a;\n  s = a;\n  r = a;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_3;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_5;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_7;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_9;\n  s = s + t;\n\n  return s;\n}\n\nvoid sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {\n  if (a == 0.0) {\n    sin_t = 0.0;\n    cos_t = 1.0;\n  }\n  sin_t = sin_taylor_fp32(a);\n  cos_t = sqrt(1.0 - sin_t * sin_t);\n}\n\nfloat tan_taylor_fp32(float a) {\n    float sin_a;\n    float cos_a;\n\n    if (a == 0.0) {\n        return 0.0;\n    }\n    float z = floor(a / TWO_PI);\n    float r = a - TWO_PI * z;\n\n    float t;\n    float q = floor(r / PI_2 + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return 1.0 / 0.0;\n    }\n\n    t = r - PI_2 * q;\n\n    q = floor(t / PI_16 + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return 1.0 / 0.0;\n    } else {\n        t = t - PI_16 * q;\n    }\n\n    float u = 0.0;\n    float v = 0.0;\n\n    float sin_t, cos_t;\n    float s, c;\n    sincos_taylor_fp32(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0;\n            v = SIN_TABLE_0;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1;\n            v = SIN_TABLE_1;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2;\n            v = SIN_TABLE_2;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3;\n            v = SIN_TABLE_3;\n        }\n        if (k > 0) {\n            s = u * sin_t + v * cos_t;\n            c = u * cos_t - v * sin_t;\n        } else {\n            s = u * sin_t - v * cos_t;\n            c = u * cos_t + v * sin_t;\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return sin_a / cos_a;\n}\n#endif\n\nfloat tan_fp32(float a) {\n#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\n  return tan_taylor_fp32(a);\n#else\n  return tan(a);\n#endif\n}\n";
const fp32 = {
    name: 'fp32',
    vs: fp32shader,
    fs: null
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cn5yE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lights", ()=>lights);
var _lightsGlsl = require("./lights.glsl");
var _lightsGlslDefault = parcelHelpers.interopDefault(_lightsGlsl);
const INITIAL_MODULE_OPTIONS = {
    lightSources: {}
};
function convertColor() {
    let { color = [
        0,
        0,
        0
    ], intensity = 1.0 } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return color.map((component)=>component * intensity / 255.0);
}
function getLightSourceUniforms(_ref) {
    let { ambientLight, pointLights = [], directionalLights = [] } = _ref;
    const lightSourceUniforms = {};
    if (ambientLight) lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);
    else lightSourceUniforms['lighting_uAmbientLight.color'] = [
        0,
        0,
        0
    ];
    pointLights.forEach((pointLight, index)=>{
        lightSourceUniforms["lighting_uPointLight[".concat(index, "].color")] = convertColor(pointLight);
        lightSourceUniforms["lighting_uPointLight[".concat(index, "].position")] = pointLight.position;
        lightSourceUniforms["lighting_uPointLight[".concat(index, "].attenuation")] = pointLight.attenuation || [
            1,
            0,
            0
        ];
    });
    lightSourceUniforms.lighting_uPointLightCount = pointLights.length;
    directionalLights.forEach((directionalLight, index)=>{
        lightSourceUniforms["lighting_uDirectionalLight[".concat(index, "].color")] = convertColor(directionalLight);
        lightSourceUniforms["lighting_uDirectionalLight[".concat(index, "].direction")] = directionalLight.direction;
    });
    lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;
    return lightSourceUniforms;
}
function getUniforms() {
    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;
    if ('lightSources' in opts) {
        const { ambientLight, pointLights, directionalLights } = opts.lightSources || {};
        const hasLights = ambientLight || pointLights && pointLights.length > 0 || directionalLights && directionalLights.length > 0;
        if (!hasLights) return {
            lighting_uEnabled: false
        };
        return Object.assign({}, getLightSourceUniforms({
            ambientLight,
            pointLights,
            directionalLights
        }), {
            lighting_uEnabled: true
        });
    }
    if ('lights' in opts) {
        const lightSources = {
            pointLights: [],
            directionalLights: []
        };
        for (const light of opts.lights || [])switch(light.type){
            case 'ambient':
                lightSources.ambientLight = light;
                break;
            case 'directional':
                lightSources.directionalLights.push(light);
                break;
            case 'point':
                lightSources.pointLights.push(light);
                break;
            default:
        }
        return getUniforms({
            lightSources
        });
    }
    return {};
}
const lights = {
    name: 'lights',
    vs: (0, _lightsGlslDefault.default),
    fs: (0, _lightsGlslDefault.default),
    getUniforms,
    defines: {
        MAX_LIGHTS: 3
    }
};

},{"./lights.glsl":"jVEJu","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jVEJu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\n\nstruct AmbientLight {\n vec3 color;\n};\n\nstruct PointLight {\n vec3 color;\n vec3 position;\n vec3 attenuation;\n};\n\nstruct DirectionalLight {\n  vec3 color;\n  vec3 direction;\n};\n\nuniform AmbientLight lighting_uAmbientLight;\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\nuniform int lighting_uPointLightCount;\nuniform int lighting_uDirectionalLightCount;\n\nuniform bool lighting_uEnabled;\n\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n\n#endif\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3MJOV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "picking", ()=>picking);
const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([
    0,
    255,
    255,
    255
]);
const DEFAULT_MODULE_OPTIONS = {
    pickingSelectedColor: null,
    pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR,
    pickingActive: false,
    pickingAttribute: false
};
function getUniforms() {
    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;
    const uniforms = {};
    if (opts.pickingSelectedColor !== undefined) {
        if (!opts.pickingSelectedColor) uniforms.picking_uSelectedColorValid = 0;
        else {
            const selectedColor = opts.pickingSelectedColor.slice(0, 3);
            uniforms.picking_uSelectedColorValid = 1;
            uniforms.picking_uSelectedColor = selectedColor;
        }
    }
    if (opts.pickingHighlightColor) {
        const color = Array.from(opts.pickingHighlightColor, (x)=>x / 255);
        if (!Number.isFinite(color[3])) color[3] = 1;
        uniforms.picking_uHighlightColor = color;
    }
    if (opts.pickingActive !== undefined) {
        uniforms.picking_uActive = Boolean(opts.pickingActive);
        uniforms.picking_uAttribute = Boolean(opts.pickingAttribute);
    }
    return uniforms;
}
const vs = "uniform bool picking_uActive;\nuniform bool picking_uAttribute;\nuniform vec3 picking_uSelectedColor;\nuniform bool picking_uSelectedColorValid;\n\nout vec4 picking_vRGBcolor_Avalid;\n\nconst float COLOR_SCALE = 1. / 255.;\n\nbool picking_isColorValid(vec3 color) {\n  return dot(color, vec3(1.0)) > 0.001;\n}\n\nbool isVertexPicked(vec3 vertexColor) {\n  return\n    picking_uSelectedColorValid &&\n    !picking_isColorValid(abs(vertexColor - picking_uSelectedColor));\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  if (picking_uActive) {\n    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\n\n    if (!picking_uAttribute) {\n      picking_vRGBcolor_Avalid.rgb = pickingColor * COLOR_SCALE;\n    }\n  } else {\n    picking_vRGBcolor_Avalid.a = float(isVertexPicked(pickingColor));\n  }\n}\n\nvoid picking_setPickingAttribute(float value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.r = value;\n  }\n}\nvoid picking_setPickingAttribute(vec2 value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.rg = value;\n  }\n}\nvoid picking_setPickingAttribute(vec3 value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.rgb = value;\n  }\n}\n";
const fs = "uniform bool picking_uActive;\nuniform vec3 picking_uSelectedColor;\nuniform vec4 picking_uHighlightColor;\n\nin vec4 picking_vRGBcolor_Avalid;\nvec4 picking_filterHighlightColor(vec4 color) {\n  if (picking_uActive) {\n    return color;\n  }\n  bool selected = bool(picking_vRGBcolor_Avalid.a);\n\n  if (selected) {\n    float highLightAlpha = picking_uHighlightColor.a;\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\n    float highLightRatio = highLightAlpha / blendedAlpha;\n\n    vec3 blendedRGB = mix(color.rgb, picking_uHighlightColor.rgb, highLightRatio);\n    return vec4(blendedRGB, blendedAlpha);\n  } else {\n    return color;\n  }\n}\nvec4 picking_filterPickingColor(vec4 color) {\n  if (picking_uActive) {\n    if (picking_vRGBcolor_Avalid.a == 0.0) {\n      discard;\n    }\n    return picking_vRGBcolor_Avalid;\n  }\n  return color;\n}\nvec4 picking_filterColor(vec4 color) {\n  vec4 highightColor = picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highightColor);\n}\n\n";
const picking = {
    name: 'picking',
    vs,
    fs,
    getUniforms
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kMxM3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gouraudLighting", ()=>gouraudLighting);
parcelHelpers.export(exports, "phongLighting", ()=>phongLighting);
var _lights = require("../lights/lights");
var _phongLightingGlsl = require("./phong-lighting.glsl");
var _phongLightingGlslDefault = parcelHelpers.interopDefault(_phongLightingGlsl);
const INITIAL_MODULE_OPTIONS = {};
function getMaterialUniforms(material) {
    const { ambient = 0.35, diffuse = 0.6, shininess = 32, specularColor = [
        30,
        30,
        30
    ] } = material;
    return {
        lighting_uAmbient: ambient,
        lighting_uDiffuse: diffuse,
        lighting_uShininess: shininess,
        lighting_uSpecularColor: specularColor.map((x)=>x / 255)
    };
}
function getUniforms() {
    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;
    if (!('material' in opts)) return {};
    const { material } = opts;
    if (!material) return {
        lighting_uEnabled: false
    };
    return getMaterialUniforms(material);
}
const gouraudLighting = {
    name: 'gouraud-lighting',
    dependencies: [
        (0, _lights.lights)
    ],
    vs: (0, _phongLightingGlslDefault.default),
    defines: {
        LIGHTING_VERTEX: 1
    },
    getUniforms
};
const phongLighting = {
    name: 'phong-lighting',
    dependencies: [
        (0, _lights.lights)
    ],
    fs: (0, _phongLightingGlslDefault.default),
    defines: {
        LIGHTING_FRAGMENT: 1
    },
    getUniforms
};

},{"../lights/lights":"cn5yE","./phong-lighting.glsl":"bIN5G","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bIN5G":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "\nuniform float lighting_uAmbient;\nuniform float lighting_uDiffuse;\nuniform float lighting_uShininess;\nuniform vec3  lighting_uSpecularColor;\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\n    vec3 halfway_direction = normalize(light_direction + view_direction);\n    float lambertian = dot(light_direction, normal_worldspace);\n    float specular = 0.0;\n    if (lambertian > 0.0) {\n      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n      specular = pow(specular_angle, lighting_uShininess);\n    }\n    lambertian = max(lambertian, 0.0);\n    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;\n}\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = surfaceColor;\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = vec3(0, 0, 0);\n  vec3 surfaceColor = vec3(0, 0, 0);\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kdWcD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transform", ()=>transform);
const vs = "attribute float transform_elementID;\nvec2 transform_getPixelSizeHalf(vec2 size) {\n  return vec2(1.) / (2. * size);\n}\n\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\n  return vec2(xIndex, yIndex);\n}\nvec2 transform_getTexCoord(vec2 size) {\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\n  vec2 coord = indices / size + pixelSizeHalf;\n  return coord;\n}\nvec2 transform_getPos(vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\n  return pos;\n}\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec4 textureColor = texture2D(texSampler, texCoord);\n  return textureColor;\n}\n";
const transform = {
    name: 'transform',
    vs,
    fs: null
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ai5Ep":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBuffersFromGeometry", ()=>getBuffersFromGeometry);
parcelHelpers.export(exports, "inferAttributeAccessor", ()=>inferAttributeAccessor);
var _webgl = require("@luma.gl/webgl");
const GLTF_TO_LUMA_ATTRIBUTE_MAP = {
    POSITION: 'positions',
    NORMAL: 'normals',
    COLOR_0: 'colors',
    TEXCOORD_0: 'texCoords',
    TEXCOORD_1: 'texCoords1',
    TEXCOORD_2: 'texCoords2'
};
function getBuffersFromGeometry(gl, geometry, options) {
    const buffers = {};
    let indices = geometry.indices;
    for(const name in geometry.attributes){
        const attribute = geometry.attributes[name];
        const remappedName = mapAttributeName(name, options);
        if (name === 'indices') indices = attribute;
        else if (attribute.constant) buffers[remappedName] = attribute.value;
        else {
            const typedArray = attribute.value;
            const accessor = {
                ...attribute
            };
            delete accessor.value;
            buffers[remappedName] = [
                new (0, _webgl.Buffer)(gl, typedArray),
                accessor
            ];
            inferAttributeAccessor(name, accessor);
        }
    }
    if (indices) {
        const data = indices.value || indices;
        (0, _webgl.assert)(data instanceof Uint16Array || data instanceof Uint32Array, 'attribute array for "indices" must be of integer type');
        const accessor = {
            size: 1,
            isIndexed: indices.isIndexed === undefined ? true : indices.isIndexed
        };
        buffers.indices = [
            new (0, _webgl.Buffer)(gl, {
                data,
                target: 34963
            }),
            accessor
        ];
    }
    return buffers;
}
function mapAttributeName(name, options) {
    const { attributeMap = GLTF_TO_LUMA_ATTRIBUTE_MAP } = options || {};
    return attributeMap && attributeMap[name] || name;
}
function inferAttributeAccessor(attributeName, attribute) {
    let category;
    switch(attributeName){
        case 'texCoords':
        case 'texCoord1':
        case 'texCoord2':
        case 'texCoord3':
            category = 'uvs';
            break;
        case 'vertices':
        case 'positions':
        case 'normals':
        case 'pickingColors':
            category = 'vectors';
            break;
        default:
    }
    switch(category){
        case 'vectors':
            attribute.size = attribute.size || 3;
            break;
        case 'uvs':
            attribute.size = attribute.size || 2;
            break;
        default:
    }
    (0, _webgl.assert)(Number.isFinite(attribute.size), "attribute ".concat(attributeName, " needs size"));
}

},{"@luma.gl/webgl":"bcvb8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eK6GW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _shadertools = require("@luma.gl/shadertools");
var _bufferTransform = require("./buffer-transform");
var _bufferTransformDefault = parcelHelpers.interopDefault(_bufferTransform);
var _textureTransform = require("./texture-transform");
var _textureTransformDefault = parcelHelpers.interopDefault(_textureTransform);
var _gltools = require("@luma.gl/gltools");
var _webgl = require("@luma.gl/webgl");
var _model = require("../lib/model");
var _modelDefault = parcelHelpers.interopDefault(_model);
class Transform {
    static isSupported(gl) {
        return (0, _gltools.isWebGL2)(gl);
    }
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.gl = gl;
        this.model = null;
        this.elementCount = 0;
        this.bufferTransform = null;
        this.textureTransform = null;
        this.elementIDBuffer = null;
        this._initialize(props);
        Object.seal(this);
    }
    delete() {
        const { model, bufferTransform, textureTransform } = this;
        if (model) model.delete();
        if (bufferTransform) bufferTransform.delete();
        if (textureTransform) textureTransform.delete();
    }
    run() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { clearRenderTarget = true } = opts;
        const updatedOpts = this._updateDrawOptions(opts);
        if (clearRenderTarget && updatedOpts.framebuffer) updatedOpts.framebuffer.clear({
            color: true
        });
        this.model.transform(updatedOpts);
    }
    swap() {
        let swapped = false;
        const resourceTransforms = [
            this.bufferTransform,
            this.textureTransform
        ].filter(Boolean);
        for (const resourceTransform of resourceTransforms)swapped = swapped || resourceTransform.swap();
        (0, _webgl.assert)(swapped, 'Nothing to swap');
    }
    getBuffer() {
        let varyingName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return this.bufferTransform && this.bufferTransform.getBuffer(varyingName);
    }
    getData() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const resourceTransforms = [
            this.bufferTransform,
            this.textureTransform
        ].filter(Boolean);
        for (const resourceTransform of resourceTransforms){
            const data = resourceTransform.getData(opts);
            if (data) return data;
        }
        return null;
    }
    getFramebuffer() {
        return this.textureTransform && this.textureTransform.getFramebuffer();
    }
    update() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if ('elementCount' in opts) this.model.setVertexCount(opts.elementCount);
        const resourceTransforms = [
            this.bufferTransform,
            this.textureTransform
        ].filter(Boolean);
        for (const resourceTransform of resourceTransforms)resourceTransform.update(opts);
    }
    _initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { gl } = this;
        this._buildResourceTransforms(gl, props);
        props = this._updateModelProps(props);
        this.model = new (0, _modelDefault.default)(gl, Object.assign({}, props, {
            fs: props.fs || (0, _shadertools.getPassthroughFS)({
                version: (0, _webgl.getShaderVersion)(props.vs)
            }),
            id: props.id || 'transform-model',
            drawMode: props.drawMode || 0,
            vertexCount: props.elementCount
        }));
        this.bufferTransform && this.bufferTransform.setupResources({
            model: this.model
        });
    }
    _updateModelProps(props) {
        let updatedProps = Object.assign({}, props);
        const resourceTransforms = [
            this.bufferTransform,
            this.textureTransform
        ].filter(Boolean);
        for (const resourceTransform of resourceTransforms)updatedProps = resourceTransform.updateModelProps(updatedProps);
        return updatedProps;
    }
    _buildResourceTransforms(gl, props) {
        if (canCreateBufferTransform(props)) this.bufferTransform = new (0, _bufferTransformDefault.default)(gl, props);
        if (canCreateTextureTransform(props)) this.textureTransform = new (0, _textureTransformDefault.default)(gl, props);
        (0, _webgl.assert)(this.bufferTransform || this.textureTransform, 'must provide source/feedback buffers or source/target textures');
    }
    _updateDrawOptions(opts) {
        let updatedOpts = Object.assign({}, opts);
        const resourceTransforms = [
            this.bufferTransform,
            this.textureTransform
        ].filter(Boolean);
        for (const resourceTransform of resourceTransforms)updatedOpts = Object.assign(updatedOpts, resourceTransform.getDrawOptions(updatedOpts));
        return updatedOpts;
    }
}
exports.default = Transform;
function canCreateBufferTransform(props) {
    if (!(0, _webgl.isObjectEmpty)(props.feedbackBuffers) || !(0, _webgl.isObjectEmpty)(props.feedbackMap) || props.varyings && props.varyings.length > 0) return true;
    return false;
}
function canCreateTextureTransform(props) {
    if (!(0, _webgl.isObjectEmpty)(props._sourceTextures) || props._targetTexture || props._targetTextureVarying) return true;
    return false;
}

},{"@luma.gl/shadertools":"4858B","./buffer-transform":"eJ2Co","./texture-transform":"bH6tp","@luma.gl/gltools":"4jTOy","@luma.gl/webgl":"bcvb8","../lib/model":"VJAGH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eJ2Co":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gltools = require("@luma.gl/gltools");
var _webgl = require("@luma.gl/webgl");
class BufferTransform {
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.gl = gl;
        this.currentIndex = 0;
        this.feedbackMap = {};
        this.varyings = null;
        this.bindings = [];
        this.resources = {};
        this._initialize(props);
        Object.seal(this);
    }
    setupResources(opts) {
        for (const binding of this.bindings)this._setupTransformFeedback(binding, opts);
    }
    updateModelProps() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { varyings } = this;
        if (varyings.length > 0) props = Object.assign({}, props, {
            varyings
        });
        return props;
    }
    getDrawOptions() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const binding = this.bindings[this.currentIndex];
        const { sourceBuffers, transformFeedback } = binding;
        const attributes = Object.assign({}, sourceBuffers, opts.attributes);
        return {
            attributes,
            transformFeedback
        };
    }
    swap() {
        if (this.feedbackMap) {
            this.currentIndex = this._getNextIndex();
            return true;
        }
        return false;
    }
    update() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this._setupBuffers(opts);
    }
    getBuffer(varyingName) {
        const { feedbackBuffers } = this.bindings[this.currentIndex];
        const bufferOrParams = varyingName ? feedbackBuffers[varyingName] : null;
        if (!bufferOrParams) return null;
        return bufferOrParams instanceof (0, _webgl.Buffer) ? bufferOrParams : bufferOrParams.buffer;
    }
    getData() {
        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { varyingName } = options;
        const buffer = this.getBuffer(varyingName);
        if (buffer) return buffer.getData();
        return null;
    }
    delete() {
        for(const name in this.resources)this.resources[name].delete();
    }
    _initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this._setupBuffers(props);
        this.varyings = props.varyings || Object.keys(this.bindings[this.currentIndex].feedbackBuffers);
        if (this.varyings.length > 0) (0, _webgl.assert)((0, _gltools.isWebGL2)(this.gl));
    }
    _getFeedbackBuffers(props) {
        const { sourceBuffers = {} } = props;
        const feedbackBuffers = {};
        if (this.bindings[this.currentIndex]) Object.assign(feedbackBuffers, this.bindings[this.currentIndex].feedbackBuffers);
        if (this.feedbackMap) for(const sourceName in this.feedbackMap){
            const feedbackName = this.feedbackMap[sourceName];
            if (sourceName in sourceBuffers) feedbackBuffers[feedbackName] = sourceName;
        }
        Object.assign(feedbackBuffers, props.feedbackBuffers);
        for(const bufferName in feedbackBuffers){
            const bufferOrRef = feedbackBuffers[bufferName];
            if (typeof bufferOrRef === 'string') {
                const sourceBuffer = sourceBuffers[bufferOrRef];
                const { byteLength, usage, accessor } = sourceBuffer;
                feedbackBuffers[bufferName] = this._createNewBuffer(bufferName, {
                    byteLength,
                    usage,
                    accessor
                });
            }
        }
        return feedbackBuffers;
    }
    _setupBuffers() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { sourceBuffers = null } = props;
        Object.assign(this.feedbackMap, props.feedbackMap);
        const feedbackBuffers = this._getFeedbackBuffers(props);
        this._updateBindings({
            sourceBuffers,
            feedbackBuffers
        });
    }
    _setupTransformFeedback(binding, _ref) {
        let { model } = _ref;
        const { program } = model;
        binding.transformFeedback = new (0, _webgl.TransformFeedback)(this.gl, {
            program,
            buffers: binding.feedbackBuffers
        });
    }
    _updateBindings(opts) {
        this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);
        if (this.feedbackMap) {
            const { sourceBuffers, feedbackBuffers } = this._swapBuffers(this.bindings[this.currentIndex]);
            const nextIndex = this._getNextIndex();
            this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {
                sourceBuffers,
                feedbackBuffers
            });
        }
    }
    _updateBinding(binding, opts) {
        if (!binding) return {
            sourceBuffers: Object.assign({}, opts.sourceBuffers),
            feedbackBuffers: Object.assign({}, opts.feedbackBuffers)
        };
        Object.assign(binding.sourceBuffers, opts.sourceBuffers);
        Object.assign(binding.feedbackBuffers, opts.feedbackBuffers);
        if (binding.transformFeedback) binding.transformFeedback.setBuffers(binding.feedbackBuffers);
        return binding;
    }
    _swapBuffers(opts) {
        if (!this.feedbackMap) return null;
        const sourceBuffers = Object.assign({}, opts.sourceBuffers);
        const feedbackBuffers = Object.assign({}, opts.feedbackBuffers);
        for(const srcName in this.feedbackMap){
            const dstName = this.feedbackMap[srcName];
            sourceBuffers[srcName] = opts.feedbackBuffers[dstName];
            feedbackBuffers[dstName] = opts.sourceBuffers[srcName];
            (0, _webgl.assert)(feedbackBuffers[dstName] instanceof (0, _webgl.Buffer));
        }
        return {
            sourceBuffers,
            feedbackBuffers
        };
    }
    _createNewBuffer(name, opts) {
        const buffer = new (0, _webgl.Buffer)(this.gl, opts);
        if (this.resources[name]) this.resources[name].delete();
        this.resources[name] = buffer;
        return buffer;
    }
    _getNextIndex() {
        return (this.currentIndex + 1) % 2;
    }
}
exports.default = BufferTransform;

},{"@luma.gl/gltools":"4jTOy","@luma.gl/webgl":"bcvb8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bH6tp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webgl = require("@luma.gl/webgl");
var _shadertools = require("@luma.gl/shadertools");
var _transformShaderUtils = require("./transform-shader-utils");
const SRC_TEX_PARAMETER_OVERRIDES = {
    [10241]: 9728,
    [10240]: 9728,
    [10242]: 33071,
    [10243]: 33071
};
const FS_OUTPUT_VARIABLE = 'transform_output';
class TextureTransform {
    constructor(gl){
        let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.gl = gl;
        this.id = this.currentIndex = 0;
        this._swapTexture = null;
        this.targetTextureVarying = null;
        this.targetTextureType = null;
        this.samplerTextureMap = null;
        this.bindings = [];
        this.resources = {};
        this._initialize(props);
        Object.seal(this);
    }
    updateModelProps() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const updatedModelProps = this._processVertexShader(props);
        return Object.assign({}, props, updatedModelProps);
    }
    getDrawOptions() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { sourceBuffers, sourceTextures, framebuffer, targetTexture } = this.bindings[this.currentIndex];
        const attributes = Object.assign({}, sourceBuffers, opts.attributes);
        const uniforms = Object.assign({}, opts.uniforms);
        const parameters = Object.assign({}, opts.parameters);
        let discard = opts.discard;
        if (this.hasSourceTextures || this.hasTargetTexture) {
            attributes.transform_elementID = this.elementIDBuffer;
            for(const sampler in this.samplerTextureMap){
                const textureName = this.samplerTextureMap[sampler];
                uniforms[sampler] = sourceTextures[textureName];
            }
            this._setSourceTextureParameters();
            const sizeUniforms = (0, _transformShaderUtils.getSizeUniforms)({
                sourceTextureMap: sourceTextures,
                targetTextureVarying: this.targetTextureVarying,
                targetTexture
            });
            Object.assign(uniforms, sizeUniforms);
        }
        if (this.hasTargetTexture) {
            discard = false;
            parameters.viewport = [
                0,
                0,
                framebuffer.width,
                framebuffer.height
            ];
        }
        return {
            attributes,
            framebuffer,
            uniforms,
            discard,
            parameters
        };
    }
    swap() {
        if (this._swapTexture) {
            this.currentIndex = this._getNextIndex();
            return true;
        }
        return false;
    }
    update() {
        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this._setupTextures(opts);
    }
    getTargetTexture() {
        const { targetTexture } = this.bindings[this.currentIndex];
        return targetTexture;
    }
    getData() {
        let { packed = false } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { framebuffer } = this.bindings[this.currentIndex];
        const pixels = (0, _webgl.readPixelsToArray)(framebuffer);
        if (!packed) return pixels;
        const ArrayType = pixels.constructor;
        const channelCount = (0, _shadertools.typeToChannelCount)(this.targetTextureType);
        const packedPixels = new ArrayType(pixels.length * channelCount / 4);
        let packCount = 0;
        for(let i = 0; i < pixels.length; i += 4)for(let j = 0; j < channelCount; j++)packedPixels[packCount++] = pixels[i + j];
        return packedPixels;
    }
    getFramebuffer() {
        const currentResources = this.bindings[this.currentIndex];
        return currentResources.framebuffer;
    }
    delete() {
        if (this.ownTexture) this.ownTexture.delete();
        if (this.elementIDBuffer) this.elementIDBuffer.delete();
    }
    _initialize() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { _targetTextureVarying, _swapTexture } = props;
        this._swapTexture = _swapTexture;
        this.targetTextureVarying = _targetTextureVarying;
        this.hasTargetTexture = _targetTextureVarying;
        this._setupTextures(props);
    }
    _createTargetTexture(props) {
        const { sourceTextures, textureOrReference } = props;
        if (textureOrReference instanceof (0, _webgl.Texture2D)) return textureOrReference;
        const refTexture = sourceTextures[textureOrReference];
        if (!refTexture) return null;
        this._targetRefTexName = textureOrReference;
        return this._createNewTexture(refTexture);
    }
    _setupTextures() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { sourceBuffers, _sourceTextures = {}, _targetTexture } = props;
        const targetTexture = this._createTargetTexture({
            sourceTextures: _sourceTextures,
            textureOrReference: _targetTexture
        });
        this.hasSourceTextures = this.hasSourceTextures || _sourceTextures && Object.keys(_sourceTextures).length > 0;
        this._updateBindings({
            sourceBuffers,
            sourceTextures: _sourceTextures,
            targetTexture
        });
        if ('elementCount' in props) this._updateElementIDBuffer(props.elementCount);
    }
    _updateElementIDBuffer(elementCount) {
        if (typeof elementCount !== 'number' || this.elementCount >= elementCount) return;
        const elementIds = new Float32Array(elementCount);
        elementIds.forEach((_, index, array)=>{
            array[index] = index;
        });
        if (!this.elementIDBuffer) this.elementIDBuffer = new (0, _webgl.Buffer)(this.gl, {
            data: elementIds,
            accessor: {
                size: 1
            }
        });
        else this.elementIDBuffer.setData({
            data: elementIds
        });
        this.elementCount = elementCount;
    }
    _updateBindings(opts) {
        this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);
        if (this._swapTexture) {
            const { sourceTextures, targetTexture } = this._swapTextures(this.bindings[this.currentIndex]);
            const nextIndex = this._getNextIndex();
            this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {
                sourceTextures,
                targetTexture
            });
        }
    }
    _updateBinding(binding, opts) {
        const { sourceBuffers, sourceTextures, targetTexture } = opts;
        if (!binding) binding = {
            sourceBuffers: {},
            sourceTextures: {},
            targetTexture: null
        };
        Object.assign(binding.sourceTextures, sourceTextures);
        Object.assign(binding.sourceBuffers, sourceBuffers);
        if (targetTexture) {
            binding.targetTexture = targetTexture;
            const { width, height } = targetTexture;
            const { framebuffer } = binding;
            if (framebuffer) {
                framebuffer.update({
                    attachments: {
                        [36064]: targetTexture
                    },
                    resizeAttachments: false
                });
                framebuffer.resize({
                    width,
                    height
                });
            } else binding.framebuffer = new (0, _webgl.Framebuffer)(this.gl, {
                id: "transform-framebuffer",
                width,
                height,
                attachments: {
                    [36064]: targetTexture
                }
            });
        }
        return binding;
    }
    _setSourceTextureParameters() {
        const index = this.currentIndex;
        const { sourceTextures } = this.bindings[index];
        for(const name in sourceTextures)sourceTextures[name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);
    }
    _swapTextures(opts) {
        if (!this._swapTexture) return null;
        const sourceTextures = Object.assign({}, opts.sourceTextures);
        sourceTextures[this._swapTexture] = opts.targetTexture;
        const targetTexture = opts.sourceTextures[this._swapTexture];
        return {
            sourceTextures,
            targetTexture
        };
    }
    _createNewTexture(refTexture) {
        const texture = (0, _webgl.cloneTextureFrom)(refTexture, {
            parameters: {
                [10241]: 9728,
                [10240]: 9728,
                [10242]: 33071,
                [10243]: 33071
            },
            pixelStore: {
                [37440]: false
            }
        });
        if (this.ownTexture) this.ownTexture.delete();
        this.ownTexture = texture;
        return texture;
    }
    _getNextIndex() {
        return (this.currentIndex + 1) % 2;
    }
    _processVertexShader() {
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { sourceTextures, targetTexture } = this.bindings[this.currentIndex];
        const { vs, uniforms, targetTextureType, inject, samplerTextureMap } = (0, _transformShaderUtils.updateForTextures)({
            vs: props.vs,
            sourceTextureMap: sourceTextures,
            targetTextureVarying: this.targetTextureVarying,
            targetTexture
        });
        const combinedInject = (0, _shadertools.combineInjects)([
            props.inject || {},
            inject
        ]);
        this.targetTextureType = targetTextureType;
        this.samplerTextureMap = samplerTextureMap;
        const fs = props._fs || (0, _shadertools.getPassthroughFS)({
            version: (0, _webgl.getShaderVersion)(vs),
            input: this.targetTextureVarying,
            inputType: targetTextureType,
            output: FS_OUTPUT_VARIABLE
        });
        const modules = this.hasSourceTextures || this.targetTextureVarying ? [
            (0, _shadertools._transform)
        ].concat(props.modules || []) : props.modules;
        return {
            vs,
            fs,
            modules,
            uniforms,
            inject: combinedInject
        };
    }
}
exports.default = TextureTransform;

},{"@luma.gl/webgl":"bcvb8","@luma.gl/shadertools":"4858B","./transform-shader-utils":"77svH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"77svH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateForTextures", ()=>updateForTextures);
parcelHelpers.export(exports, "getSizeUniforms", ()=>getSizeUniforms);
parcelHelpers.export(exports, "getVaryingType", ()=>getVaryingType);
parcelHelpers.export(exports, "processAttributeDefinition", ()=>processAttributeDefinition);
var _webgl = require("@luma.gl/webgl");
var _shadertools = require("@luma.gl/shadertools");
const SAMPLER_UNIFORM_PREFIX = 'transform_uSampler_';
const SIZE_UNIFORM_PREFIX = 'transform_uSize_';
const VS_POS_VARIABLE = 'transform_position';
function updateForTextures(_ref) {
    let { vs, sourceTextureMap, targetTextureVarying, targetTexture } = _ref;
    const texAttributeNames = Object.keys(sourceTextureMap);
    let sourceCount = texAttributeNames.length;
    let targetTextureType = null;
    const samplerTextureMap = {};
    let updatedVs = vs;
    let finalInject = {};
    if (sourceCount > 0 || targetTextureVarying) {
        const vsLines = updatedVs.split('\n');
        const updateVsLines = vsLines.slice();
        vsLines.forEach((line, index, lines)=>{
            if (sourceCount > 0) {
                const updated = processAttributeDefinition(line, sourceTextureMap);
                if (updated) {
                    const { updatedLine, inject } = updated;
                    updateVsLines[index] = updatedLine;
                    finalInject = (0, _shadertools.combineInjects)([
                        finalInject,
                        inject
                    ]);
                    Object.assign(samplerTextureMap, updated.samplerTextureMap);
                    sourceCount--;
                }
            }
            if (targetTextureVarying && !targetTextureType) targetTextureType = getVaryingType(line, targetTextureVarying);
        });
        if (targetTextureVarying) {
            (0, _webgl.assert)(targetTexture);
            const sizeName = "".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying);
            const uniformDeclaration = "uniform vec2 ".concat(sizeName, ";\n");
            const posInstructions = "     vec2 ".concat(VS_POS_VARIABLE, " = transform_getPos(").concat(sizeName, ");\n     gl_Position = vec4(").concat(VS_POS_VARIABLE, ", 0, 1.);\n");
            const inject = {
                'vs:#decl': uniformDeclaration,
                'vs:#main-start': posInstructions
            };
            finalInject = (0, _shadertools.combineInjects)([
                finalInject,
                inject
            ]);
        }
        updatedVs = updateVsLines.join('\n');
    }
    return {
        vs: updatedVs,
        targetTextureType,
        inject: finalInject,
        samplerTextureMap
    };
}
function getSizeUniforms(_ref2) {
    let { sourceTextureMap, targetTextureVarying, targetTexture } = _ref2;
    const uniforms = {};
    let width;
    let height;
    if (targetTextureVarying) {
        ({ width, height } = targetTexture);
        uniforms["".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying)] = [
            width,
            height
        ];
    }
    for(const textureName in sourceTextureMap){
        ({ width, height } = sourceTextureMap[textureName]);
        uniforms["".concat(SIZE_UNIFORM_PREFIX).concat(textureName)] = [
            width,
            height
        ];
    }
    return uniforms;
}
function getAttributeDefinition(line) {
    return (0, _shadertools.getQualifierDetails)(line, [
        'attribute',
        'in'
    ]);
}
function getSamplerDeclerations(textureName) {
    const samplerName = "".concat(SAMPLER_UNIFORM_PREFIX).concat(textureName);
    const sizeName = "".concat(SIZE_UNIFORM_PREFIX).concat(textureName);
    const uniformDeclerations = "  uniform sampler2D ".concat(samplerName, ";\n  uniform vec2 ").concat(sizeName, ";");
    return {
        samplerName,
        sizeName,
        uniformDeclerations
    };
}
function getVaryingType(line, varying) {
    const qualaiferDetails = (0, _shadertools.getQualifierDetails)(line, [
        'varying',
        'out'
    ]);
    if (!qualaiferDetails) return null;
    return qualaiferDetails.name === varying ? qualaiferDetails.type : null;
}
function processAttributeDefinition(line, textureMap) {
    const samplerTextureMap = {};
    const attributeData = getAttributeDefinition(line);
    if (!attributeData) return null;
    const { type, name } = attributeData;
    if (name && textureMap[name]) {
        const updatedLine = "// ".concat(line, " => Replaced by Transform with a sampler");
        const { samplerName, sizeName, uniformDeclerations } = getSamplerDeclerations(name);
        const channels = (0, _shadertools.typeToChannelSuffix)(type);
        const sampleInstruction = "  ".concat(type, " ").concat(name, " = transform_getInput(").concat(samplerName, ", ").concat(sizeName, ").").concat(channels, ";\n");
        samplerTextureMap[samplerName] = name;
        const inject = {
            'vs:#decl': uniformDeclerations,
            'vs:#main-start': sampleInstruction
        };
        return {
            updatedLine,
            inject,
            samplerTextureMap
        };
    }
    return null;
}

},{"@luma.gl/webgl":"bcvb8","@luma.gl/shadertools":"4858B","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"wKR1A":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DRAW_MODE", ()=>DRAW_MODE);
var _webgl = require("@luma.gl/webgl");
const DRAW_MODE = {
    POINTS: 0x0000,
    LINES: 0x0001,
    LINE_LOOP: 0x0002,
    LINE_STRIP: 0x0003,
    TRIANGLES: 0x0004,
    TRIANGLE_STRIP: 0x0005,
    TRIANGLE_FAN: 0x0006
};
class Geometry {
    static get DRAW_MODE() {
        return DRAW_MODE;
    }
    constructor(){
        let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const { id = (0, _webgl.uid)('geometry'), drawMode = DRAW_MODE.TRIANGLES, attributes = {}, indices = null, vertexCount = null } = props;
        this.id = id;
        this.drawMode = drawMode | 0;
        this.attributes = {};
        this.userData = {};
        this._setAttributes(attributes, indices);
        this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);
    }
    get mode() {
        return this.drawMode;
    }
    getVertexCount() {
        return this.vertexCount;
    }
    getAttributes() {
        return this.indices ? {
            indices: this.indices,
            ...this.attributes
        } : this.attributes;
    }
    _print(attributeName) {
        return "Geometry ".concat(this.id, " attribute ").concat(attributeName);
    }
    _setAttributes(attributes, indices) {
        if (indices) this.indices = ArrayBuffer.isView(indices) ? {
            value: indices,
            size: 1
        } : indices;
        for(const attributeName in attributes){
            let attribute = attributes[attributeName];
            attribute = ArrayBuffer.isView(attribute) ? {
                value: attribute
            } : attribute;
            (0, _webgl.assert)(ArrayBuffer.isView(attribute.value), "".concat(this._print(attributeName), ": must be typed array or object with value as typed array"));
            if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) attribute.size = 3;
            if (attributeName === 'indices') {
                (0, _webgl.assert)(!this.indices);
                this.indices = attribute;
            } else this.attributes[attributeName] = attribute;
        }
        if (this.indices && this.indices.isIndexed !== undefined) {
            this.indices = Object.assign({}, this.indices);
            delete this.indices.isIndexed;
        }
        return this;
    }
    _calculateVertexCount(attributes, indices) {
        if (indices) return indices.value.length;
        let vertexCount = Infinity;
        for(const attributeName in attributes){
            const attribute = attributes[attributeName];
            const { value, size, constant } = attribute;
            if (!constant && value && size >= 1) vertexCount = Math.min(vertexCount, value.length / size);
        }
        (0, _webgl.assert)(Number.isFinite(vertexCount));
        return vertexCount;
    }
}
exports.default = Geometry;

},{"@luma.gl/webgl":"bcvb8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1Elig":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Timeline", ()=>Timeline);
let channelHandles = 1;
let animationHandles = 1;
class Timeline {
    constructor(){
        this.time = 0;
        this.channels = new Map();
        this.animations = new Map();
        this.playing = false;
        this.lastEngineTime = -1;
    }
    addChannel(props) {
        const { delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1 } = props;
        const handle = channelHandles++;
        const channel = {
            time: 0,
            delay,
            duration,
            rate,
            repeat
        };
        this._setChannelTime(channel, this.time);
        this.channels.set(handle, channel);
        return handle;
    }
    removeChannel(handle) {
        this.channels.delete(handle);
        for (const [animationHandle, animation] of this.animations)if (animation.channel === handle) this.detachAnimation(animationHandle);
    }
    isFinished(handle) {
        const channel = this.channels.get(handle);
        if (channel === undefined) return false;
        return this.time >= channel.delay + channel.duration * channel.repeat;
    }
    getTime(handle) {
        if (handle === undefined) return this.time;
        const channel = this.channels.get(handle);
        if (channel === undefined) return -1;
        return channel.time;
    }
    setTime(time) {
        this.time = Math.max(0, time);
        const channels = this.channels.values();
        for (const channel of channels)this._setChannelTime(channel, this.time);
        const animations = this.animations.values();
        for (const animationData of animations){
            const { animation, channel } = animationData;
            animation.setTime(this.getTime(channel));
        }
    }
    play() {
        this.playing = true;
    }
    pause() {
        this.playing = false;
        this.lastEngineTime = -1;
    }
    reset() {
        this.setTime(0);
    }
    attachAnimation(animation, channelHandle) {
        const animationHandle = animationHandles++;
        this.animations.set(animationHandle, {
            animation,
            channel: channelHandle
        });
        animation.setTime(this.getTime(channelHandle));
        return animationHandle;
    }
    detachAnimation(handle) {
        this.animations.delete(handle);
    }
    update(engineTime) {
        if (this.playing) {
            if (this.lastEngineTime === -1) this.lastEngineTime = engineTime;
            this.setTime(this.time + (engineTime - this.lastEngineTime));
            this.lastEngineTime = engineTime;
        }
    }
    _setChannelTime(channel, time) {
        const offsetTime = time - channel.delay;
        const totalDuration = channel.duration * channel.repeat;
        if (offsetTime >= totalDuration) channel.time = channel.duration * channel.rate;
        else {
            channel.time = Math.max(0, offsetTime) % channel.duration;
            channel.time *= channel.rate;
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ddOfn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmbientLight", ()=>AmbientLight);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
const DEFAULT_LIGHT_COLOR = [
    255,
    255,
    255
];
const DEFAULT_LIGHT_INTENSITY = 1.0;
let idCount = 0;
class AmbientLight {
    constructor(props = {}){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "color", void 0);
        (0, _definePropertyDefault.default)(this, "intensity", void 0);
        (0, _definePropertyDefault.default)(this, "type", 'ambient');
        const { color = DEFAULT_LIGHT_COLOR } = props;
        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;
        this.id = props.id || "ambient-".concat(idCount++);
        this.color = color;
        this.intensity = intensity;
    }
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6dzYa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DirectionalLight", ()=>DirectionalLight);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@math.gl/core");
const DEFAULT_LIGHT_COLOR = [
    255,
    255,
    255
];
const DEFAULT_LIGHT_INTENSITY = 1.0;
const DEFAULT_LIGHT_DIRECTION = [
    0.0,
    0.0,
    -1
];
let idCount = 0;
class DirectionalLight {
    constructor(props = {}){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "color", void 0);
        (0, _definePropertyDefault.default)(this, "intensity", void 0);
        (0, _definePropertyDefault.default)(this, "type", 'directional');
        (0, _definePropertyDefault.default)(this, "direction", void 0);
        (0, _definePropertyDefault.default)(this, "shadow", void 0);
        const { color = DEFAULT_LIGHT_COLOR } = props;
        const { intensity = DEFAULT_LIGHT_INTENSITY } = props;
        const { direction = DEFAULT_LIGHT_DIRECTION } = props;
        const { _shadow = false } = props;
        this.id = props.id || "directional-".concat(idCount++);
        this.color = color;
        this.intensity = intensity;
        this.type = 'directional';
        this.direction = new (0, _core.Vector3)(direction).normalize().toArray();
        this.shadow = _shadow;
    }
    getProjectedLight(opts) {
        return this;
    }
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@math.gl/core":"e2A67","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"e2A67":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Vector2", ()=>(0, _vector2Default.default));
parcelHelpers.export(exports, "Vector3", ()=>(0, _vector3Default.default));
parcelHelpers.export(exports, "Vector4", ()=>(0, _vector4Default.default));
parcelHelpers.export(exports, "Matrix3", ()=>(0, _matrix3Default.default));
parcelHelpers.export(exports, "Matrix4", ()=>(0, _matrix4Default.default));
parcelHelpers.export(exports, "Quaternion", ()=>(0, _quaternionDefault.default));
parcelHelpers.export(exports, "SphericalCoordinates", ()=>(0, _sphericalCoordinatesDefault.default));
parcelHelpers.export(exports, "Pose", ()=>(0, _poseDefault.default));
parcelHelpers.export(exports, "Euler", ()=>(0, _eulerDefault.default));
parcelHelpers.export(exports, "_MathUtils", ()=>(0, _mathUtilsDefault.default));
parcelHelpers.export(exports, "assert", ()=>(0, _assertDefault.default));
parcelHelpers.export(exports, "config", ()=>(0, _common.config));
parcelHelpers.export(exports, "configure", ()=>(0, _common.configure));
parcelHelpers.export(exports, "formatValue", ()=>(0, _common.formatValue));
parcelHelpers.export(exports, "isArray", ()=>(0, _common.isArray));
parcelHelpers.export(exports, "clone", ()=>(0, _common.clone));
parcelHelpers.export(exports, "equals", ()=>(0, _common.equals));
parcelHelpers.export(exports, "exactEquals", ()=>(0, _common.exactEquals));
parcelHelpers.export(exports, "toRadians", ()=>(0, _common.toRadians));
parcelHelpers.export(exports, "toDegrees", ()=>(0, _common.toDegrees));
parcelHelpers.export(exports, "radians", ()=>(0, _common.radians));
parcelHelpers.export(exports, "degrees", ()=>(0, _common.degrees));
parcelHelpers.export(exports, "sin", ()=>(0, _common.sin));
parcelHelpers.export(exports, "cos", ()=>(0, _common.cos));
parcelHelpers.export(exports, "tan", ()=>(0, _common.tan));
parcelHelpers.export(exports, "asin", ()=>(0, _common.asin));
parcelHelpers.export(exports, "acos", ()=>(0, _common.acos));
parcelHelpers.export(exports, "atan", ()=>(0, _common.atan));
parcelHelpers.export(exports, "clamp", ()=>(0, _common.clamp));
parcelHelpers.export(exports, "lerp", ()=>(0, _common.lerp));
parcelHelpers.export(exports, "withEpsilon", ()=>(0, _common.withEpsilon));
parcelHelpers.export(exports, "_SphericalCoordinates", ()=>(0, _sphericalCoordinatesDefault.default));
parcelHelpers.export(exports, "_Pose", ()=>(0, _poseDefault.default));
parcelHelpers.export(exports, "_Euler", ()=>(0, _eulerDefault.default));
var _vector2 = require("./classes/vector2");
var _vector2Default = parcelHelpers.interopDefault(_vector2);
var _vector3 = require("./classes/vector3");
var _vector3Default = parcelHelpers.interopDefault(_vector3);
var _vector4 = require("./classes/vector4");
var _vector4Default = parcelHelpers.interopDefault(_vector4);
var _matrix3 = require("./classes/matrix3");
var _matrix3Default = parcelHelpers.interopDefault(_matrix3);
var _matrix4 = require("./classes/matrix4");
var _matrix4Default = parcelHelpers.interopDefault(_matrix4);
var _quaternion = require("./classes/quaternion");
var _quaternionDefault = parcelHelpers.interopDefault(_quaternion);
var _sphericalCoordinates = require("./classes/spherical-coordinates");
var _sphericalCoordinatesDefault = parcelHelpers.interopDefault(_sphericalCoordinates);
var _pose = require("./classes/pose");
var _poseDefault = parcelHelpers.interopDefault(_pose);
var _euler = require("./classes/euler");
var _eulerDefault = parcelHelpers.interopDefault(_euler);
var _mathUtils = require("./lib/math-utils");
var _mathUtilsDefault = parcelHelpers.interopDefault(_mathUtils);
var _assert = require("./lib/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _common = require("./lib/common");

},{"./classes/vector2":false,"./classes/vector3":"bNYZC","./classes/vector4":false,"./classes/matrix3":false,"./classes/matrix4":"d2UjV","./classes/quaternion":false,"./classes/spherical-coordinates":false,"./classes/pose":false,"./classes/euler":false,"./lib/math-utils":false,"./lib/assert":false,"./lib/common":"jTTQ7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bNYZC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vector = require("./base/vector");
var _vectorDefault = parcelHelpers.interopDefault(_vector);
var _common = require("../lib/common");
var _validators = require("../lib/validators");
var _vec3 = require("gl-matrix/vec3");
var _glMatrixExtras = require("../lib/gl-matrix-extras");
const ORIGIN = [
    0,
    0,
    0
];
let ZERO;
class Vector3 extends (0, _vectorDefault.default) {
    static get ZERO() {
        if (!ZERO) {
            ZERO = new Vector3(0, 0, 0);
            Object.freeze(ZERO);
        }
        return ZERO;
    }
    constructor(x = 0, y = 0, z = 0){
        super(-0, -0, -0);
        if (arguments.length === 1 && (0, _common.isArray)(x)) this.copy(x);
        else {
            if ((0, _common.config).debug) {
                (0, _validators.checkNumber)(x);
                (0, _validators.checkNumber)(y);
                (0, _validators.checkNumber)(z);
            }
            this[0] = x;
            this[1] = y;
            this[2] = z;
        }
    }
    set(x, y, z) {
        this[0] = x;
        this[1] = y;
        this[2] = z;
        return this.check();
    }
    copy(array) {
        this[0] = array[0];
        this[1] = array[1];
        this[2] = array[2];
        return this.check();
    }
    fromObject(object) {
        if ((0, _common.config).debug) {
            (0, _validators.checkNumber)(object.x);
            (0, _validators.checkNumber)(object.y);
            (0, _validators.checkNumber)(object.z);
        }
        this[0] = object.x;
        this[1] = object.y;
        this[2] = object.z;
        return this.check();
    }
    toObject(object) {
        object.x = this[0];
        object.y = this[1];
        object.z = this[2];
        return object;
    }
    get ELEMENTS() {
        return 3;
    }
    get z() {
        return this[2];
    }
    set z(value) {
        this[2] = (0, _validators.checkNumber)(value);
    }
    angle(vector) {
        return _vec3.angle(this, vector);
    }
    cross(vector) {
        _vec3.cross(this, this, vector);
        return this.check();
    }
    rotateX({ radians, origin = ORIGIN }) {
        _vec3.rotateX(this, this, origin, radians);
        return this.check();
    }
    rotateY({ radians, origin = ORIGIN }) {
        _vec3.rotateY(this, this, origin, radians);
        return this.check();
    }
    rotateZ({ radians, origin = ORIGIN }) {
        _vec3.rotateZ(this, this, origin, radians);
        return this.check();
    }
    transform(matrix4) {
        return this.transformAsPoint(matrix4);
    }
    transformAsPoint(matrix4) {
        _vec3.transformMat4(this, this, matrix4);
        return this.check();
    }
    transformAsVector(matrix4) {
        (0, _glMatrixExtras.vec3_transformMat4AsVector)(this, this, matrix4);
        return this.check();
    }
    transformByMatrix3(matrix3) {
        _vec3.transformMat3(this, this, matrix3);
        return this.check();
    }
    transformByMatrix2(matrix2) {
        (0, _glMatrixExtras.vec3_transformMat2)(this, this, matrix2);
        return this.check();
    }
    transformByQuaternion(quaternion) {
        _vec3.transformQuat(this, this, quaternion);
        return this.check();
    }
}
exports.default = Vector3;

},{"./base/vector":"fiZT7","../lib/common":"jTTQ7","../lib/validators":"jQJtu","gl-matrix/vec3":"5UKYl","../lib/gl-matrix-extras":"dVbmq","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fiZT7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathArray = require("./math-array");
var _mathArrayDefault = parcelHelpers.interopDefault(_mathArray);
var _validators = require("../../lib/validators");
var _assert = require("../../lib/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
class Vector extends (0, _mathArrayDefault.default) {
    get x() {
        return this[0];
    }
    set x(value) {
        this[0] = (0, _validators.checkNumber)(value);
    }
    get y() {
        return this[1];
    }
    set y(value) {
        this[1] = (0, _validators.checkNumber)(value);
    }
    len() {
        return Math.sqrt(this.lengthSquared());
    }
    magnitude() {
        return this.len();
    }
    lengthSquared() {
        let length = 0;
        for(let i = 0; i < this.ELEMENTS; ++i)length += this[i] * this[i];
        return length;
    }
    magnitudeSquared() {
        return this.lengthSquared();
    }
    distance(mathArray) {
        return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
        let length = 0;
        for(let i = 0; i < this.ELEMENTS; ++i){
            const dist = this[i] - mathArray[i];
            length += dist * dist;
        }
        return (0, _validators.checkNumber)(length);
    }
    dot(mathArray) {
        let product = 0;
        for(let i = 0; i < this.ELEMENTS; ++i)product += this[i] * mathArray[i];
        return (0, _validators.checkNumber)(product);
    }
    normalize() {
        const length = this.magnitude();
        if (length !== 0) for(let i = 0; i < this.ELEMENTS; ++i)this[i] /= length;
        return this.check();
    }
    multiply(...vectors) {
        for (const vector of vectors)for(let i = 0; i < this.ELEMENTS; ++i)this[i] *= vector[i];
        return this.check();
    }
    divide(...vectors) {
        for (const vector of vectors)for(let i = 0; i < this.ELEMENTS; ++i)this[i] /= vector[i];
        return this.check();
    }
    lengthSq() {
        return this.lengthSquared();
    }
    distanceTo(vector) {
        return this.distance(vector);
    }
    distanceToSquared(vector) {
        return this.distanceSquared(vector);
    }
    getComponent(i) {
        (0, _assertDefault.default)(i >= 0 && i < this.ELEMENTS, 'index is out of range');
        return (0, _validators.checkNumber)(this[i]);
    }
    setComponent(i, value) {
        (0, _assertDefault.default)(i >= 0 && i < this.ELEMENTS, 'index is out of range');
        this[i] = value;
        return this.check();
    }
    addVectors(a, b) {
        return this.copy(a).add(b);
    }
    subVectors(a, b) {
        return this.copy(a).subtract(b);
    }
    multiplyVectors(a, b) {
        return this.copy(a).multiply(b);
    }
    addScaledVector(a, b) {
        return this.add(new this.constructor(a).multiplyScalar(b));
    }
}
exports.default = Vector;

},{"./math-array":"cfOFy","../../lib/validators":"jQJtu","../../lib/assert":"kx6fT","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cfOFy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _common = require("../../lib/common");
function _extendableBuiltin(cls) {
    function ExtendableBuiltin() {
        var instance = Reflect.construct(cls, Array.from(arguments));
        Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
        return instance;
    }
    ExtendableBuiltin.prototype = Object.create(cls.prototype, {
        constructor: {
            value: cls,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (Object.setPrototypeOf) Object.setPrototypeOf(ExtendableBuiltin, cls);
    else ExtendableBuiltin.__proto__ = cls;
    return ExtendableBuiltin;
}
class MathArray extends _extendableBuiltin(Array) {
    clone() {
        return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] = array[i + offset];
        return this.check();
    }
    toArray(targetArray = [], offset = 0) {
        for(let i = 0; i < this.ELEMENTS; ++i)targetArray[offset + i] = this[i];
        return targetArray;
    }
    from(arrayOrObject) {
        return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);
    }
    to(arrayOrObject) {
        if (arrayOrObject === this) return this;
        return (0, _common.isArray)(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target) {
        return target ? this.to(target) : this;
    }
    toFloat32Array() {
        return new Float32Array(this);
    }
    toString() {
        return this.formatString((0, _common.config));
    }
    formatString(opts) {
        let string = '';
        for(let i = 0; i < this.ELEMENTS; ++i)string += (i > 0 ? ', ' : '') + (0, _common.formatValue)(this[i], opts);
        return "".concat(opts.printTypes ? this.constructor.name : '', "[").concat(string, "]");
    }
    equals(array) {
        if (!array || this.length !== array.length) return false;
        for(let i = 0; i < this.ELEMENTS; ++i){
            if (!(0, _common.equals)(this[i], array[i])) return false;
        }
        return true;
    }
    exactEquals(array) {
        if (!array || this.length !== array.length) return false;
        for(let i = 0; i < this.ELEMENTS; ++i){
            if (this[i] !== array[i]) return false;
        }
        return true;
    }
    negate() {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] = -this[i];
        return this.check();
    }
    lerp(a, b, t) {
        if (t === undefined) return this.lerp(this, a, b);
        for(let i = 0; i < this.ELEMENTS; ++i){
            const ai = a[i];
            this[i] = ai + t * (b[i] - ai);
        }
        return this.check();
    }
    min(vector) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] = Math.min(vector[i], this[i]);
        return this.check();
    }
    max(vector) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] = Math.max(vector[i], this[i]);
        return this.check();
    }
    clamp(minVector, maxVector) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);
        return this.check();
    }
    add(...vectors) {
        for (const vector of vectors)for(let i = 0; i < this.ELEMENTS; ++i)this[i] += vector[i];
        return this.check();
    }
    subtract(...vectors) {
        for (const vector of vectors)for(let i = 0; i < this.ELEMENTS; ++i)this[i] -= vector[i];
        return this.check();
    }
    scale(scale) {
        if (typeof scale === 'number') for(let i = 0; i < this.ELEMENTS; ++i)this[i] *= scale;
        else for(let i = 0; i < this.ELEMENTS && i < scale.length; ++i)this[i] *= scale[i];
        return this.check();
    }
    multiplyByScalar(scalar) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] *= scalar;
        return this.check();
    }
    check() {
        if ((0, _common.config).debug && !this.validate()) throw new Error("math.gl: ".concat(this.constructor.name, " some fields set to invalid numbers'"));
        return this;
    }
    validate() {
        let valid = this.length === this.ELEMENTS;
        for(let i = 0; i < this.ELEMENTS; ++i)valid = valid && Number.isFinite(this[i]);
        return valid;
    }
    sub(a) {
        return this.subtract(a);
    }
    setScalar(a) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] = a;
        return this.check();
    }
    addScalar(a) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] += a;
        return this.check();
    }
    subScalar(a) {
        return this.addScalar(-a);
    }
    multiplyScalar(scalar) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] *= scalar;
        return this.check();
    }
    divideScalar(a) {
        return this.multiplyByScalar(1 / a);
    }
    clampScalar(min, max) {
        for(let i = 0; i < this.ELEMENTS; ++i)this[i] = Math.min(Math.max(this[i], min), max);
        return this.check();
    }
    get elements() {
        return this;
    }
}
exports.default = MathArray;

},{"../../lib/common":"jTTQ7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jTTQ7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "config", ()=>config);
parcelHelpers.export(exports, "configure", ()=>configure);
parcelHelpers.export(exports, "formatValue", ()=>formatValue);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "clone", ()=>clone);
parcelHelpers.export(exports, "toRadians", ()=>toRadians);
parcelHelpers.export(exports, "toDegrees", ()=>toDegrees);
parcelHelpers.export(exports, "radians", ()=>radians);
parcelHelpers.export(exports, "degrees", ()=>degrees);
parcelHelpers.export(exports, "sin", ()=>sin);
parcelHelpers.export(exports, "cos", ()=>cos);
parcelHelpers.export(exports, "tan", ()=>tan);
parcelHelpers.export(exports, "asin", ()=>asin);
parcelHelpers.export(exports, "acos", ()=>acos);
parcelHelpers.export(exports, "atan", ()=>atan);
parcelHelpers.export(exports, "clamp", ()=>clamp);
parcelHelpers.export(exports, "lerp", ()=>lerp);
parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
parcelHelpers.export(exports, "withEpsilon", ()=>withEpsilon);
var _assert = require("./assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
const RADIANS_TO_DEGREES = 1 / Math.PI * 180;
const DEGREES_TO_RADIANS = 1 / 180 * Math.PI;
const config = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true
};
function configure(options) {
    for(const key in options){
        (0, _assertDefault.default)(key in config);
        config[key] = options[key];
    }
    return config;
}
function formatValue(value, { precision = config.precision } = {}) {
    value = round(value);
    return "".concat(parseFloat(value.toPrecision(precision)));
}
function isArray(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
}
function clone(array) {
    return 'clone' in array ? array.clone() : array.slice();
}
function toRadians(degrees) {
    return radians(degrees);
}
function toDegrees(radians) {
    return degrees(radians);
}
function radians(degrees, result) {
    return map(degrees, (degrees)=>degrees * DEGREES_TO_RADIANS, result);
}
function degrees(radians, result) {
    return map(radians, (radians)=>radians * RADIANS_TO_DEGREES, result);
}
function sin(radians, result) {
    return map(radians, (angle)=>Math.sin(angle), result);
}
function cos(radians, result) {
    return map(radians, (angle)=>Math.cos(angle), result);
}
function tan(radians, result) {
    return map(radians, (angle)=>Math.tan(angle), result);
}
function asin(radians, result) {
    return map(radians, (angle)=>Math.asin(angle), result);
}
function acos(radians, result) {
    return map(radians, (angle)=>Math.acos(angle), result);
}
function atan(radians, result) {
    return map(radians, (angle)=>Math.atan(angle), result);
}
function clamp(value, min, max) {
    return map(value, (value)=>Math.max(min, Math.min(max, value)));
}
function lerp(a, b, t) {
    if (isArray(a)) return a.map((ai, i)=>lerp(ai, b[i], t));
    return t * b + (1 - t) * a;
}
function equals(a, b, epsilon) {
    const oldEpsilon = config.EPSILON;
    if (epsilon) config.EPSILON = epsilon;
    try {
        if (a === b) return true;
        if (isArray(a) && isArray(b)) {
            if (a.length !== b.length) return false;
            for(let i = 0; i < a.length; ++i){
                if (!equals(a[i], b[i])) return false;
            }
            return true;
        }
        if (a && a.equals) return a.equals(b);
        if (b && b.equals) return b.equals(a);
        if (typeof a === 'number' && typeof b === 'number') return Math.abs(a - b) <= config.EPSILON * Math.max(1, Math.abs(a), Math.abs(b));
        return false;
    } finally{
        config.EPSILON = oldEpsilon;
    }
}
function exactEquals(a, b) {
    if (a === b) return true;
    if (a && typeof a === 'object' && b && typeof b === 'object') {
        if (a.constructor !== b.constructor) return false;
        if (a.exactEquals) return a.exactEquals(b);
    }
    if (isArray(a) && isArray(b)) {
        if (a.length !== b.length) return false;
        for(let i = 0; i < a.length; ++i){
            if (!exactEquals(a[i], b[i])) return false;
        }
        return true;
    }
    return false;
}
function withEpsilon(epsilon, func) {
    const oldPrecision = config.EPSILON;
    config.EPSILON = epsilon;
    let value;
    try {
        value = func();
    } finally{
        config.EPSILON = oldPrecision;
    }
    return value;
}
function round(value) {
    return Math.round(value / config.EPSILON) * config.EPSILON;
}
function duplicateArray(array) {
    return array.clone ? array.clone() : new Array(array.length);
}
function map(value, func, result) {
    if (isArray(value)) {
        const array = value;
        result = result || duplicateArray(array);
        for(let i = 0; i < result.length && i < array.length; ++i)result[i] = func(value[i], i, result);
        return result;
    }
    return func(value);
}

},{"./assert":"kx6fT","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kx6fT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error("math.gl assertion ".concat(message));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jQJtu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validateVector", ()=>validateVector);
parcelHelpers.export(exports, "checkNumber", ()=>checkNumber);
parcelHelpers.export(exports, "checkVector", ()=>checkVector);
parcelHelpers.export(exports, "deprecated", ()=>deprecated);
var _common = require("./common");
function validateVector(v, length) {
    if (v.length !== length) return false;
    for(let i = 0; i < v.length; ++i){
        if (!Number.isFinite(v[i])) return false;
    }
    return true;
}
function checkNumber(value) {
    if (!Number.isFinite(value)) throw new Error("Invalid number ".concat(value));
    return value;
}
function checkVector(v, length, callerName = '') {
    if ((0, _common.config).debug && !validateVector(v, length)) throw new Error("math.gl: ".concat(callerName, " some fields set to invalid numbers'"));
    return v;
}
const map = {};
function deprecated(method, version) {
    if (!map[method]) {
        map[method] = true;
        console.warn("".concat(method, " has been removed in version ").concat(version, ", see upgrade guide for more information"));
    }
}

},{"./common":"jTTQ7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5UKYl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 3 Dimensional Vector
 * @module vec3
 */ /**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */ parcelHelpers.export(exports, "length", ()=>length);
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "divide", ()=>divide);
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "ceil", ()=>ceil);
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "floor", ()=>floor);
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "min", ()=>min);
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "max", ()=>max);
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "round", ()=>round);
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "scaleAndAdd", ()=>scaleAndAdd);
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */ parcelHelpers.export(exports, "distance", ()=>distance);
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */ parcelHelpers.export(exports, "squaredDistance", ()=>squaredDistance);
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ parcelHelpers.export(exports, "squaredLength", ()=>squaredLength);
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "negate", ()=>negate);
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "inverse", ()=>inverse);
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */ parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "cross", ()=>cross);
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "lerp", ()=>lerp);
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "hermite", ()=>hermite);
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "bezier", ()=>bezier);
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "random", ()=>random);
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "transformMat4", ()=>transformMat4);
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "transformMat3", ()=>transformMat3);
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "transformQuat", ()=>transformQuat);
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "rotateX", ()=>rotateX);
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "rotateY", ()=>rotateY);
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "rotateZ", ()=>rotateZ);
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */ parcelHelpers.export(exports, "angle", ()=>angle);
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "zero", ()=>zero);
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "sub", ()=>sub);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "div", ()=>div);
parcelHelpers.export(exports, "dist", ()=>dist);
parcelHelpers.export(exports, "sqrDist", ()=>sqrDist);
parcelHelpers.export(exports, "len", ()=>len);
parcelHelpers.export(exports, "sqrLen", ()=>sqrLen);
parcelHelpers.export(exports, "forEach", ()=>forEach);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(3);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
    }
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
}
function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return Math.hypot(x, y, z);
}
function fromValues(x, y, z) {
    var out = new _commonJs.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
}
function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
}
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
}
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
}
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
}
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
}
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
}
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
}
function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
}
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
}
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    return out;
}
function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return Math.hypot(x, y, z);
}
function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return x * x + y * y + z * z;
}
function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return x * x + y * y + z * z;
}
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
}
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    return out;
}
function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var len = x * x + y * y + z * z;
    if (len > 0) //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
    return out;
}
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2];
    var bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
}
function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
}
function hermite(out, a, b, c, d, t) {
    var factorTimes2 = t * t;
    var factor1 = factorTimes2 * (2 * t - 3) + 1;
    var factor2 = factorTimes2 * (t - 2) + t;
    var factor3 = factorTimes2 * (t - 1);
    var factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
}
function bezier(out, a, b, c, d, t) {
    var inverseFactor = 1 - t;
    var inverseFactorTimesTwo = inverseFactor * inverseFactor;
    var factorTimes2 = t * t;
    var factor1 = inverseFactorTimesTwo * inverseFactor;
    var factor2 = 3 * t * inverseFactorTimesTwo;
    var factor3 = 3 * factorTimes2 * inverseFactor;
    var factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
}
function random(out, scale) {
    scale = scale || 1.0;
    var r = _commonJs.RANDOM() * 2.0 * Math.PI;
    var z = _commonJs.RANDOM() * 2.0 - 1.0;
    var zScale = Math.sqrt(1.0 - z * z) * scale;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
}
function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    var w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
}
function transformMat3(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
}
function transformQuat(out, a, q) {
    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
    var x = a[0], y = a[1], z = a[2]; // var qvec = [qx, qy, qz];
    // var uv = vec3.cross([], qvec, a);
    var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);
    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);
    var w2 = qw * 2;
    uvx *= w2;
    uvy *= w2;
    uvz *= w2; // vec3.scale(uuv, uuv, 2);
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));
    out[0] = x + uvx + uuvx;
    out[1] = y + uvy + uuvy;
    out[2] = z + uvz + uuvz;
    return out;
}
function rotateX(out, a, b, rad) {
    var p = [], r = []; //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2]; //perform rotation
    r[0] = p[0];
    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
function rotateY(out, a, b, rad) {
    var p = [], r = []; //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2]; //perform rotation
    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
function rotateZ(out, a, b, rad) {
    var p = [], r = []; //Translate point to the origin
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2]; //perform rotation
    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
    r[2] = p[2]; //translate to correct position
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
}
function angle(a, b) {
    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    out[2] = 0.0;
    return out;
}
function str(a) {
    return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
var sub = subtract;
var mul = multiply;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var len = length;
var sqrLen = squaredLength;
var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) stride = 3;
        if (!offset) offset = 0;
        if (count) l = Math.min(count * stride + offset, a.length);
        else l = a.length;
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            vec[2] = a[i + 2];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
            a[i + 2] = vec[2];
        }
        return a;
    };
}();

},{"./common.js":"5cWd7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5cWd7":[function(require,module,exports,__globalThis) {
/**
 * Common utilities
 * @module glMatrix
 */ // Configuration Constants
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EPSILON", ()=>EPSILON);
parcelHelpers.export(exports, "ARRAY_TYPE", ()=>ARRAY_TYPE);
parcelHelpers.export(exports, "RANDOM", ()=>RANDOM);
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */ parcelHelpers.export(exports, "setMatrixArrayType", ()=>setMatrixArrayType);
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */ parcelHelpers.export(exports, "toRadian", ()=>toRadian);
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
function setMatrixArrayType(type) {
    ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
function toRadian(a) {
    return a * degree;
}
function equals(a, b) {
    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function() {
    var y = 0, i = arguments.length;
    while(i--)y += arguments[i] * arguments[i];
    return Math.sqrt(y);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dVbmq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "vec2_transformMat4AsVector", ()=>vec2_transformMat4AsVector);
parcelHelpers.export(exports, "vec3_transformMat4AsVector", ()=>vec3_transformMat4AsVector);
parcelHelpers.export(exports, "vec3_transformMat2", ()=>vec3_transformMat2);
parcelHelpers.export(exports, "vec4_transformMat2", ()=>vec4_transformMat2);
parcelHelpers.export(exports, "vec4_transformMat3", ()=>vec4_transformMat3);
function vec2_transformMat4AsVector(out, a, m) {
    const x = a[0];
    const y = a[1];
    const w = m[3] * x + m[7] * y || 1.0;
    out[0] = (m[0] * x + m[4] * y) / w;
    out[1] = (m[1] * x + m[5] * y) / w;
    return out;
}
function vec3_transformMat4AsVector(out, a, m) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const w = m[3] * x + m[7] * y + m[11] * z || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;
    return out;
}
function vec3_transformMat2(out, a, m) {
    const x = a[0];
    const y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    out[2] = a[2];
    return out;
}
function vec4_transformMat2(out, a, m) {
    const x = a[0];
    const y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
function vec4_transformMat3(out, a, m) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    out[0] = m[0] * x + m[3] * y + m[6] * z;
    out[1] = m[1] * x + m[4] * y + m[7] * z;
    out[2] = m[2] * x + m[5] * y + m[8] * z;
    out[3] = a[3];
    return out;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"d2UjV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _matrix = require("./base/matrix");
var _matrixDefault = parcelHelpers.interopDefault(_matrix);
var _validators = require("../lib/validators");
var _glMatrixExtras = require("../lib/gl-matrix-extras");
var _mat4 = require("gl-matrix/mat4");
var _vec2 = require("gl-matrix/vec2");
var _vec3 = require("gl-matrix/vec3");
var _vec4 = require("gl-matrix/vec4");
var INDICES;
(function(INDICES) {
    INDICES[INDICES["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES[INDICES["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES[INDICES["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES[INDICES["COL0ROW3"] = 3] = "COL0ROW3";
    INDICES[INDICES["COL1ROW0"] = 4] = "COL1ROW0";
    INDICES[INDICES["COL1ROW1"] = 5] = "COL1ROW1";
    INDICES[INDICES["COL1ROW2"] = 6] = "COL1ROW2";
    INDICES[INDICES["COL1ROW3"] = 7] = "COL1ROW3";
    INDICES[INDICES["COL2ROW0"] = 8] = "COL2ROW0";
    INDICES[INDICES["COL2ROW1"] = 9] = "COL2ROW1";
    INDICES[INDICES["COL2ROW2"] = 10] = "COL2ROW2";
    INDICES[INDICES["COL2ROW3"] = 11] = "COL2ROW3";
    INDICES[INDICES["COL3ROW0"] = 12] = "COL3ROW0";
    INDICES[INDICES["COL3ROW1"] = 13] = "COL3ROW1";
    INDICES[INDICES["COL3ROW2"] = 14] = "COL3ROW2";
    INDICES[INDICES["COL3ROW3"] = 15] = "COL3ROW3";
})(INDICES || (INDICES = {}));
const DEFAULT_FOVY = 45 * Math.PI / 180;
const DEFAULT_ASPECT = 1;
const DEFAULT_NEAR = 0.1;
const DEFAULT_FAR = 500;
const IDENTITY_MATRIX = Object.freeze([
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
]);
class Matrix4 extends (0, _matrixDefault.default) {
    static get IDENTITY() {
        return getIdentityMatrix();
    }
    static get ZERO() {
        return getZeroMatrix();
    }
    get ELEMENTS() {
        return 16;
    }
    get RANK() {
        return 4;
    }
    get INDICES() {
        return INDICES;
    }
    constructor(array){
        super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);
        if (arguments.length === 1 && Array.isArray(array)) this.copy(array);
        else this.identity();
    }
    copy(array) {
        this[0] = array[0];
        this[1] = array[1];
        this[2] = array[2];
        this[3] = array[3];
        this[4] = array[4];
        this[5] = array[5];
        this[6] = array[6];
        this[7] = array[7];
        this[8] = array[8];
        this[9] = array[9];
        this[10] = array[10];
        this[11] = array[11];
        this[12] = array[12];
        this[13] = array[13];
        this[14] = array[14];
        this[15] = array[15];
        return this.check();
    }
    set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {
        this[0] = m00;
        this[1] = m10;
        this[2] = m20;
        this[3] = m30;
        this[4] = m01;
        this[5] = m11;
        this[6] = m21;
        this[7] = m31;
        this[8] = m02;
        this[9] = m12;
        this[10] = m22;
        this[11] = m32;
        this[12] = m03;
        this[13] = m13;
        this[14] = m23;
        this[15] = m33;
        return this.check();
    }
    setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        this[0] = m00;
        this[1] = m10;
        this[2] = m20;
        this[3] = m30;
        this[4] = m01;
        this[5] = m11;
        this[6] = m21;
        this[7] = m31;
        this[8] = m02;
        this[9] = m12;
        this[10] = m22;
        this[11] = m32;
        this[12] = m03;
        this[13] = m13;
        this[14] = m23;
        this[15] = m33;
        return this.check();
    }
    toRowMajor(result) {
        result[0] = this[0];
        result[1] = this[4];
        result[2] = this[8];
        result[3] = this[12];
        result[4] = this[1];
        result[5] = this[5];
        result[6] = this[9];
        result[7] = this[13];
        result[8] = this[2];
        result[9] = this[6];
        result[10] = this[10];
        result[11] = this[14];
        result[12] = this[3];
        result[13] = this[7];
        result[14] = this[11];
        result[15] = this[15];
        return result;
    }
    identity() {
        return this.copy(IDENTITY_MATRIX);
    }
    fromObject(object) {
        return this.check();
    }
    fromQuaternion(quaternion) {
        _mat4.fromQuat(this, quaternion);
        return this.check();
    }
    frustum(view) {
        const { left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
        if (far === Infinity) computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);
        else _mat4.frustum(this, left, right, bottom, top, near, far);
        return this.check();
    }
    lookAt(view) {
        const { eye, center = [
            0,
            0,
            0
        ], up = [
            0,
            1,
            0
        ] } = view;
        _mat4.lookAt(this, eye, center, up);
        return this.check();
    }
    ortho(view) {
        const { left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
        _mat4.ortho(this, left, right, bottom, top, near, far);
        return this.check();
    }
    orthographic(view) {
        const { fovy = DEFAULT_FOVY, aspect = DEFAULT_ASPECT, focalDistance = 1, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
        checkRadians(fovy);
        const halfY = fovy / 2;
        const top = focalDistance * Math.tan(halfY);
        const right = top * aspect;
        return this.ortho({
            left: -right,
            right,
            bottom: -top,
            top,
            near,
            far
        });
    }
    perspective(view) {
        const { fovy = 45 * Math.PI / 180, aspect = 1, near = 0.1, far = 500 } = view;
        checkRadians(fovy);
        _mat4.perspective(this, fovy, aspect, near, far);
        return this.check();
    }
    determinant() {
        return _mat4.determinant(this);
    }
    getScale(result = [
        -0,
        -0,
        -0
    ]) {
        result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);
        result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);
        result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);
        return result;
    }
    getTranslation(result = [
        -0,
        -0,
        -0
    ]) {
        result[0] = this[12];
        result[1] = this[13];
        result[2] = this[14];
        return result;
    }
    getRotation(result, scaleResult) {
        result = result || [
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0
        ];
        scaleResult = scaleResult || [
            -0,
            -0,
            -0
        ];
        const scale = this.getScale(scaleResult);
        const inverseScale0 = 1 / scale[0];
        const inverseScale1 = 1 / scale[1];
        const inverseScale2 = 1 / scale[2];
        result[0] = this[0] * inverseScale0;
        result[1] = this[1] * inverseScale1;
        result[2] = this[2] * inverseScale2;
        result[3] = 0;
        result[4] = this[4] * inverseScale0;
        result[5] = this[5] * inverseScale1;
        result[6] = this[6] * inverseScale2;
        result[7] = 0;
        result[8] = this[8] * inverseScale0;
        result[9] = this[9] * inverseScale1;
        result[10] = this[10] * inverseScale2;
        result[11] = 0;
        result[12] = 0;
        result[13] = 0;
        result[14] = 0;
        result[15] = 1;
        return result;
    }
    getRotationMatrix3(result, scaleResult) {
        result = result || [
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0,
            -0
        ];
        scaleResult = scaleResult || [
            -0,
            -0,
            -0
        ];
        const scale = this.getScale(scaleResult);
        const inverseScale0 = 1 / scale[0];
        const inverseScale1 = 1 / scale[1];
        const inverseScale2 = 1 / scale[2];
        result[0] = this[0] * inverseScale0;
        result[1] = this[1] * inverseScale1;
        result[2] = this[2] * inverseScale2;
        result[3] = this[4] * inverseScale0;
        result[4] = this[5] * inverseScale1;
        result[5] = this[6] * inverseScale2;
        result[6] = this[8] * inverseScale0;
        result[7] = this[9] * inverseScale1;
        result[8] = this[10] * inverseScale2;
        return result;
    }
    transpose() {
        _mat4.transpose(this, this);
        return this.check();
    }
    invert() {
        _mat4.invert(this, this);
        return this.check();
    }
    multiplyLeft(a) {
        _mat4.multiply(this, a, this);
        return this.check();
    }
    multiplyRight(a) {
        _mat4.multiply(this, this, a);
        return this.check();
    }
    rotateX(radians) {
        _mat4.rotateX(this, this, radians);
        return this.check();
    }
    rotateY(radians) {
        _mat4.rotateY(this, this, radians);
        return this.check();
    }
    rotateZ(radians) {
        _mat4.rotateZ(this, this, radians);
        return this.check();
    }
    rotateXYZ(angleXYZ) {
        return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);
    }
    rotateAxis(radians, axis) {
        _mat4.rotate(this, this, radians, axis);
        return this.check();
    }
    scale(factor) {
        _mat4.scale(this, this, Array.isArray(factor) ? factor : [
            factor,
            factor,
            factor
        ]);
        return this.check();
    }
    translate(vector) {
        _mat4.translate(this, this, vector);
        return this.check();
    }
    transform(vector, result) {
        if (vector.length === 4) {
            result = _vec4.transformMat4(result || [
                -0,
                -0,
                -0,
                -0
            ], vector, this);
            (0, _validators.checkVector)(result, 4);
            return result;
        }
        return this.transformAsPoint(vector, result);
    }
    transformAsPoint(vector, result) {
        const { length } = vector;
        let out;
        switch(length){
            case 2:
                out = _vec2.transformMat4(result || [
                    -0,
                    -0
                ], vector, this);
                break;
            case 3:
                out = _vec3.transformMat4(result || [
                    -0,
                    -0,
                    -0
                ], vector, this);
                break;
            default:
                throw new Error('Illegal vector');
        }
        (0, _validators.checkVector)(out, vector.length);
        return out;
    }
    transformAsVector(vector, result) {
        let out;
        switch(vector.length){
            case 2:
                out = (0, _glMatrixExtras.vec2_transformMat4AsVector)(result || [
                    -0,
                    -0
                ], vector, this);
                break;
            case 3:
                out = (0, _glMatrixExtras.vec3_transformMat4AsVector)(result || [
                    -0,
                    -0,
                    -0
                ], vector, this);
                break;
            default:
                throw new Error('Illegal vector');
        }
        (0, _validators.checkVector)(out, vector.length);
        return out;
    }
    transformPoint(vector, result) {
        return this.transformAsPoint(vector, result);
    }
    transformVector(vector, result) {
        return this.transformAsPoint(vector, result);
    }
    transformDirection(vector, result) {
        return this.transformAsVector(vector, result);
    }
    makeRotationX(radians) {
        return this.identity().rotateX(radians);
    }
    makeTranslation(x, y, z) {
        return this.identity().translate([
            x,
            y,
            z
        ]);
    }
}
exports.default = Matrix4;
let ZERO;
let IDENTITY;
function getZeroMatrix() {
    if (!ZERO) {
        ZERO = new Matrix4([
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]);
        Object.freeze(ZERO);
    }
    return ZERO;
}
function getIdentityMatrix() {
    if (!IDENTITY) {
        IDENTITY = new Matrix4();
        Object.freeze(IDENTITY);
    }
    return IDENTITY;
}
function checkRadians(possiblyDegrees) {
    if (possiblyDegrees > Math.PI * 2) throw Error('expected radians');
}
function computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {
    const column0Row0 = 2 * near / (right - left);
    const column1Row1 = 2 * near / (top - bottom);
    const column2Row0 = (right + left) / (right - left);
    const column2Row1 = (top + bottom) / (top - bottom);
    const column2Row2 = -1;
    const column2Row3 = -1;
    const column3Row2 = -2 * near;
    result[0] = column0Row0;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
    result[5] = column1Row1;
    result[6] = 0;
    result[7] = 0;
    result[8] = column2Row0;
    result[9] = column2Row1;
    result[10] = column2Row2;
    result[11] = column2Row3;
    result[12] = 0;
    result[13] = 0;
    result[14] = column3Row2;
    result[15] = 0;
    return result;
}

},{"./base/matrix":"TeiX5","../lib/validators":"jQJtu","../lib/gl-matrix-extras":"dVbmq","gl-matrix/mat4":"bkNpn","gl-matrix/vec2":"yiZrJ","gl-matrix/vec3":"5UKYl","gl-matrix/vec4":"9jhlX","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"TeiX5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathArray = require("./math-array");
var _mathArrayDefault = parcelHelpers.interopDefault(_mathArray);
var _validators = require("../../lib/validators");
var _common = require("../../lib/common");
class Matrix extends (0, _mathArrayDefault.default) {
    toString() {
        let string = '[';
        if ((0, _common.config).printRowMajor) {
            string += 'row-major:';
            for(let row = 0; row < this.RANK; ++row)for(let col = 0; col < this.RANK; ++col)string += " ".concat(this[col * this.RANK + row]);
        } else {
            string += 'column-major:';
            for(let i = 0; i < this.ELEMENTS; ++i)string += " ".concat(this[i]);
        }
        string += ']';
        return string;
    }
    getElementIndex(row, col) {
        return col * this.RANK + row;
    }
    getElement(row, col) {
        return this[col * this.RANK + row];
    }
    setElement(row, col, value) {
        this[col * this.RANK + row] = (0, _validators.checkNumber)(value);
        return this;
    }
    getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
        const firstIndex = columnIndex * this.RANK;
        for(let i = 0; i < this.RANK; ++i)result[i] = this[firstIndex + i];
        return result;
    }
    setColumn(columnIndex, columnVector) {
        const firstIndex = columnIndex * this.RANK;
        for(let i = 0; i < this.RANK; ++i)this[firstIndex + i] = columnVector[i];
        return this;
    }
}
exports.default = Matrix;

},{"./math-array":"cfOFy","../../lib/validators":"jQJtu","../../lib/common":"jTTQ7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bkNpn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */ /**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "transpose", ()=>transpose);
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "invert", ()=>invert);
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "adjoint", ()=>adjoint);
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */ parcelHelpers.export(exports, "determinant", ()=>determinant);
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "translate", ()=>translate);
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "rotateX", ()=>rotateX);
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "rotateY", ()=>rotateY);
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "rotateZ", ()=>rotateZ);
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromTranslation", ()=>fromTranslation);
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromScaling", ()=>fromScaling);
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromRotation", ()=>fromRotation);
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromXRotation", ()=>fromXRotation);
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromYRotation", ()=>fromYRotation);
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromZRotation", ()=>fromZRotation);
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromRotationTranslation", ()=>fromRotationTranslation);
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */ parcelHelpers.export(exports, "fromQuat2", ()=>fromQuat2);
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */ parcelHelpers.export(exports, "getTranslation", ()=>getTranslation);
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */ parcelHelpers.export(exports, "getScaling", ()=>getScaling);
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */ parcelHelpers.export(exports, "getRotation", ()=>getRotation);
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromRotationTranslationScale", ()=>fromRotationTranslationScale);
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromRotationTranslationScaleOrigin", ()=>fromRotationTranslationScaleOrigin);
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "fromQuat", ()=>fromQuat);
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "frustum", ()=>frustum);
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "perspectiveNO", ()=>perspectiveNO);
parcelHelpers.export(exports, "perspective", ()=>perspective);
/**
 * Generates a perspective projection matrix suitable for WebGPU with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "perspectiveZO", ()=>perspectiveZO);
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "perspectiveFromFieldOfView", ()=>perspectiveFromFieldOfView);
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "orthoNO", ()=>orthoNO);
parcelHelpers.export(exports, "ortho", ()=>ortho);
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "orthoZO", ()=>orthoZO);
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "lookAt", ()=>lookAt);
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "targetTo", ()=>targetTo);
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */ parcelHelpers.export(exports, "frob", ()=>frob);
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "multiplyScalar", ()=>multiplyScalar);
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */ parcelHelpers.export(exports, "multiplyScalarAndAdd", ()=>multiplyScalarAndAdd);
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "sub", ()=>sub);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(16);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new _commonJs.ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
}
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
}
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3];
        var a12 = a[6], a13 = a[7];
        var a23 = a[11];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    return out;
}
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) return null;
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
}
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
    return out;
}
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15]; // Cache only the current line of the second matrix
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
}
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a03;
        out[4] = a10;
        out[5] = a11;
        out[6] = a12;
        out[7] = a13;
        out[8] = a20;
        out[9] = a21;
        out[10] = a22;
        out[11] = a23;
        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
}
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    var b00, b01, b02;
    var b10, b11, b12;
    var b20, b21, b22;
    if (len < _commonJs.EPSILON) return null;
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11]; // Construct the elements of the rotation matrix
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c; // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
}
function rotateX(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    } // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
}
function rotateY(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    } // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
}
function rotateZ(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    } // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
}
function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromRotation(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    if (len < _commonJs.EPSILON) return null;
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c; // Perform rotation-specific matrix multiplication
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromXRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromYRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromZRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
function fromQuat2(out, a) {
    var translation = new _commonJs.ARRAY_TYPE(3);
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
    var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense
    if (magnitude > 0) {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation(out, a, translation);
    return out;
}
function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
}
function getScaling(out, mat) {
    var m11 = mat[0];
    var m12 = mat[1];
    var m13 = mat[2];
    var m21 = mat[4];
    var m22 = mat[5];
    var m23 = mat[6];
    var m31 = mat[8];
    var m32 = mat[9];
    var m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
}
function getRotation(out, mat) {
    var scaling = new _commonJs.ARRAY_TYPE(3);
    getScaling(scaling, mat);
    var is1 = 1 / scaling[0];
    var is2 = 1 / scaling[1];
    var is3 = 1 / scaling[2];
    var sm11 = mat[0] * is1;
    var sm12 = mat[1] * is2;
    var sm13 = mat[2] * is3;
    var sm21 = mat[4] * is1;
    var sm22 = mat[5] * is2;
    var sm23 = mat[6] * is3;
    var sm31 = mat[8] * is1;
    var sm32 = mat[9] * is2;
    var sm33 = mat[10] * is3;
    var trace = sm11 + sm22 + sm33;
    var S = 0;
    if (trace > 0) {
        S = Math.sqrt(trace + 1.0) * 2;
        out[3] = 0.25 * S;
        out[0] = (sm23 - sm32) / S;
        out[1] = (sm31 - sm13) / S;
        out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
        S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
        out[3] = (sm23 - sm32) / S;
        out[0] = 0.25 * S;
        out[1] = (sm12 + sm21) / S;
        out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
        S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
        out[3] = (sm31 - sm13) / S;
        out[0] = (sm12 + sm21) / S;
        out[1] = 0.25 * S;
        out[2] = (sm23 + sm32) / S;
    } else {
        S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
        out[3] = (sm12 - sm21) / S;
        out[0] = (sm31 + sm13) / S;
        out[1] = (sm23 + sm32) / S;
        out[2] = 0.25 * S;
    }
    return out;
}
function fromRotationTranslationScale(out, q, v, s) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    var ox = o[0];
    var oy = o[1];
    var oz = o[2];
    var out0 = (1 - (yy + zz)) * sx;
    var out1 = (xy + wz) * sx;
    var out2 = (xz - wy) * sx;
    var out4 = (xy - wz) * sy;
    var out5 = (1 - (xx + zz)) * sy;
    var out6 = (yz + wx) * sy;
    var out8 = (xz + wy) * sz;
    var out9 = (yz - wx) * sz;
    var out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
}
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left);
    var tb = 1 / (top - bottom);
    var nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
}
function perspectiveNO(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
        nf = 1 / (near - far);
        out[10] = (far + near) * nf;
        out[14] = 2 * far * near * nf;
    } else {
        out[10] = -1;
        out[14] = -2 * near;
    }
    return out;
}
var perspective = perspectiveNO;
function perspectiveZO(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
        nf = 1 / (near - far);
        out[10] = far * nf;
        out[14] = far * near * nf;
    } else {
        out[10] = -1;
        out[14] = -near;
    }
    return out;
}
function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
    var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
    var xScale = 2.0 / (leftTan + rightTan);
    var yScale = 2.0 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = far * near / (near - far);
    out[15] = 0.0;
    return out;
}
function orthoNO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
}
var ortho = orthoNO;
function orthoZO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
}
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
    var eyex = eye[0];
    var eyey = eye[1];
    var eyez = eye[2];
    var upx = up[0];
    var upy = up[1];
    var upz = up[2];
    var centerx = center[0];
    var centery = center[1];
    var centerz = center[2];
    if (Math.abs(eyex - centerx) < _commonJs.EPSILON && Math.abs(eyey - centery) < _commonJs.EPSILON && Math.abs(eyez - centerz) < _commonJs.EPSILON) return identity(out);
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.hypot(z0, z1, z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.hypot(x0, x1, x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.hypot(y0, y1, y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
}
function targetTo(out, eye, target, up) {
    var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
    var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
    var len = z0 * z0 + z1 * z1 + z2 * z2;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        z0 *= len;
        z1 *= len;
        z2 *= len;
    }
    var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
    len = x0 * x0 + x1 * x1 + x2 * x2;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x2;
    out[3] = 0;
    out[4] = z1 * x2 - z2 * x1;
    out[5] = z2 * x0 - z0 * x2;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z2;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
}
function str(a) {
    return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
}
function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
}
function multiplyScalarAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    out[4] = a[4] + b[4] * scale;
    out[5] = a[5] + b[5] * scale;
    out[6] = a[6] + b[6] * scale;
    out[7] = a[7] + b[7] * scale;
    out[8] = a[8] + b[8] * scale;
    out[9] = a[9] + b[9] * scale;
    out[10] = a[10] + b[10] * scale;
    out[11] = a[11] + b[11] * scale;
    out[12] = a[12] + b[12] * scale;
    out[13] = a[13] + b[13] * scale;
    out[14] = a[14] + b[14] * scale;
    out[15] = a[15] + b[15] * scale;
    return out;
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
    var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
    var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
var mul = multiply;
var sub = subtract;

},{"./common.js":"5cWd7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"yiZrJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 2 Dimensional Vector
 * @module vec2
 */ /**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {ReadonlyVec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the source vector
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "divide", ()=>divide);
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to ceil
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "ceil", ()=>ceil);
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to floor
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "floor", ()=>floor);
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "min", ()=>min);
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "max", ()=>max);
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to round
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "round", ()=>round);
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "scaleAndAdd", ()=>scaleAndAdd);
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} distance between a and b
 */ parcelHelpers.export(exports, "distance", ()=>distance);
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} squared distance between a and b
 */ parcelHelpers.export(exports, "squaredDistance", ()=>squaredDistance);
/**
 * Calculates the length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate length of
 * @returns {Number} length of a
 */ parcelHelpers.export(exports, "length", ()=>length);
/**
 * Calculates the squared length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ parcelHelpers.export(exports, "squaredLength", ()=>squaredLength);
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to negate
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "negate", ()=>negate);
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to invert
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "inverse", ()=>inverse);
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to normalize
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * Calculates the dot product of two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} dot product of a and b
 */ parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec3} out
 */ parcelHelpers.export(exports, "cross", ()=>cross);
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "lerp", ()=>lerp);
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "random", ()=>random);
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2} m matrix to transform with
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "transformMat2", ()=>transformMat2);
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2d} m matrix to transform with
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "transformMat2d", ()=>transformMat2d);
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat3} m matrix to transform with
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "transformMat3", ()=>transformMat3);
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "transformMat4", ()=>transformMat4);
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {ReadonlyVec2} a The vec2 point to rotate
 * @param {ReadonlyVec2} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Get the angle between two 2D vectors
 * @param {ReadonlyVec2} a The first operand
 * @param {ReadonlyVec2} b The second operand
 * @returns {Number} The angle in radians
 */ parcelHelpers.export(exports, "angle", ()=>angle);
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */ parcelHelpers.export(exports, "zero", ()=>zero);
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "len", ()=>len);
parcelHelpers.export(exports, "sub", ()=>sub);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "div", ()=>div);
parcelHelpers.export(exports, "dist", ()=>dist);
parcelHelpers.export(exports, "sqrDist", ()=>sqrDist);
parcelHelpers.export(exports, "sqrLen", ()=>sqrLen);
parcelHelpers.export(exports, "forEach", ()=>forEach);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(2);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
    }
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
}
function fromValues(x, y) {
    var out = new _commonJs.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
}
function set(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
}
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
}
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
}
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
}
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
}
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
}
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
}
function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    return out;
}
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
}
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    return out;
}
function distance(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return Math.hypot(x, y);
}
function squaredDistance(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return x * x + y * y;
}
function length(a) {
    var x = a[0], y = a[1];
    return Math.hypot(x, y);
}
function squaredLength(a) {
    var x = a[0], y = a[1];
    return x * x + y * y;
}
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
}
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    return out;
}
function normalize(out, a) {
    var x = a[0], y = a[1];
    var len = x * x + y * y;
    if (len > 0) //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    return out;
}
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
}
function cross(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
}
function lerp(out, a, b, t) {
    var ax = a[0], ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
}
function random(out, scale) {
    scale = scale || 1.0;
    var r = _commonJs.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
}
function transformMat2(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
}
function transformMat2d(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
}
function transformMat3(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
}
function transformMat4(out, a, m) {
    var x = a[0];
    var y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
}
function rotate(out, a, b, rad) {
    //Translate point to the origin
    var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad); //perform rotation and translate to correct position
    out[0] = p0 * cosC - p1 * sinC + b[0];
    out[1] = p0 * sinC + p1 * cosC + b[1];
    return out;
}
function angle(a, b) {
    var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], // mag is the product of the magnitudes of a and b
    mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), // mag &&.. short circuits if mag == 0
    cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    return out;
}
function str(a) {
    return "vec2(" + a[0] + ", " + a[1] + ")";
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1];
    var b0 = b[0], b1 = b[1];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
var len = length;
var sub = subtract;
var mul = multiply;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var sqrLen = squaredLength;
var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) stride = 2;
        if (!offset) offset = 0;
        if (count) l = Math.min(count * stride + offset, a.length);
        else l = a.length;
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
        }
        return a;
    };
}();

},{"./common.js":"5cWd7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9jhlX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 4 Dimensional Vector
 * @module vec4
 */ /**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */ parcelHelpers.export(exports, "fromValues", ()=>fromValues);
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "copy", ()=>copy);
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "subtract", ()=>subtract);
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "divide", ()=>divide);
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to ceil
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "ceil", ()=>ceil);
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to floor
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "floor", ()=>floor);
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "min", ()=>min);
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "max", ()=>max);
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to round
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "round", ()=>round);
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "scaleAndAdd", ()=>scaleAndAdd);
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} distance between a and b
 */ parcelHelpers.export(exports, "distance", ()=>distance);
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} squared distance between a and b
 */ parcelHelpers.export(exports, "squaredDistance", ()=>squaredDistance);
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */ parcelHelpers.export(exports, "length", ()=>length);
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */ parcelHelpers.export(exports, "squaredLength", ()=>squaredLength);
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to negate
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "negate", ()=>negate);
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to invert
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "inverse", ()=>inverse);
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */ parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {ReadonlyVec4} result the receiving vector
 * @param {ReadonlyVec4} U the first vector
 * @param {ReadonlyVec4} V the second vector
 * @param {ReadonlyVec4} W the third vector
 * @returns {vec4} result
 */ parcelHelpers.export(exports, "cross", ()=>cross);
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "lerp", ()=>lerp);
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "random", ()=>random);
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "transformMat4", ()=>transformMat4);
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "transformQuat", ()=>transformQuat);
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */ parcelHelpers.export(exports, "zero", ()=>zero);
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */ parcelHelpers.export(exports, "str", ()=>str);
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "exactEquals", ()=>exactEquals);
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
parcelHelpers.export(exports, "sub", ()=>sub);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "div", ()=>div);
parcelHelpers.export(exports, "dist", ()=>dist);
parcelHelpers.export(exports, "sqrDist", ()=>sqrDist);
parcelHelpers.export(exports, "len", ()=>len);
parcelHelpers.export(exports, "sqrLen", ()=>sqrLen);
parcelHelpers.export(exports, "forEach", ()=>forEach);
var _commonJs = require("./common.js");
function create() {
    var out = new _commonJs.ARRAY_TYPE(4);
    if (_commonJs.ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
    }
    return out;
}
function clone(a) {
    var out = new _commonJs.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
function fromValues(x, y, z, w) {
    var out = new _commonJs.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
function set(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
}
function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
}
function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
}
function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
}
function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    out[3] = Math.ceil(a[3]);
    return out;
}
function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    out[3] = Math.floor(a[3]);
    return out;
}
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
}
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
}
function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    out[3] = Math.round(a[3]);
    return out;
}
function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
}
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    return out;
}
function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    var w = b[3] - a[3];
    return Math.hypot(x, y, z, w);
}
function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    var w = b[3] - a[3];
    return x * x + y * y + z * z + w * w;
}
function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return Math.hypot(x, y, z, w);
}
function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return x * x + y * y + z * z + w * w;
}
function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
}
function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    out[3] = 1.0 / a[3];
    return out;
}
function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    var len = x * x + y * y + z * z + w * w;
    if (len > 0) len = 1 / Math.sqrt(len);
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
    return out;
}
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
function cross(out, u, v, w) {
    var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
    var G = u[0];
    var H = u[1];
    var I = u[2];
    var J = u[3];
    out[0] = H * F - I * E + J * D;
    out[1] = -(G * F) + I * C - J * B;
    out[2] = G * E - H * C + J * A;
    out[3] = -(G * D) + H * B - I * A;
    return out;
}
function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    var aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
}
function random(out, scale) {
    scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
    // http://projecteuclid.org/euclid.aoms/1177692644;
    var v1, v2, v3, v4;
    var s1, s2;
    do {
        v1 = _commonJs.RANDOM() * 2 - 1;
        v2 = _commonJs.RANDOM() * 2 - 1;
        s1 = v1 * v1 + v2 * v2;
    }while (s1 >= 1);
    do {
        v3 = _commonJs.RANDOM() * 2 - 1;
        v4 = _commonJs.RANDOM() * 2 - 1;
        s2 = v3 * v3 + v4 * v4;
    }while (s2 >= 1);
    var d = Math.sqrt((1 - s1) / s2);
    out[0] = scale * v1;
    out[1] = scale * v2;
    out[2] = scale * v3 * d;
    out[3] = scale * v4 * d;
    return out;
}
function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
}
function transformQuat(out, a, q) {
    var x = a[0], y = a[1], z = a[2];
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3]; // calculate quat * vec
    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
}
function zero(out) {
    out[0] = 0.0;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    return out;
}
function str(a) {
    return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _commonJs.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
var sub = subtract;
var mul = multiply;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var len = length;
var sqrLen = squaredLength;
var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if (!stride) stride = 4;
        if (!offset) offset = 0;
        if (count) l = Math.min(count * stride + offset, a.length);
        else l = a.length;
        for(i = offset; i < l; i += stride){
            vec[0] = a[i];
            vec[1] = a[i + 1];
            vec[2] = a[i + 2];
            vec[3] = a[i + 3];
            fn(vec, vec, arg);
            a[i] = vec[0];
            a[i + 1] = vec[1];
            a[i + 2] = vec[2];
            a[i + 3] = vec[3];
        }
        return a;
    };
}();

},{"./common.js":"5cWd7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"24bSq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _layersPass = require("./layers-pass");
var _layersPassDefault = parcelHelpers.interopDefault(_layersPass);
var _core = require("@luma.gl/core");
class ShadowPass extends (0, _layersPassDefault.default) {
    constructor(gl, props){
        super(gl, props);
        (0, _definePropertyDefault.default)(this, "shadowMap", void 0);
        (0, _definePropertyDefault.default)(this, "depthBuffer", void 0);
        (0, _definePropertyDefault.default)(this, "fbo", void 0);
        this.shadowMap = new (0, _core.Texture2D)(gl, {
            width: 1,
            height: 1,
            parameters: {
                [10241]: 9729,
                [10240]: 9729,
                [10242]: 33071,
                [10243]: 33071
            }
        });
        this.depthBuffer = new (0, _core.Renderbuffer)(gl, {
            format: 33189,
            width: 1,
            height: 1
        });
        this.fbo = new (0, _core.Framebuffer)(gl, {
            id: 'shadowmap',
            width: 1,
            height: 1,
            attachments: {
                [36064]: this.shadowMap,
                [36096]: this.depthBuffer
            }
        });
    }
    render(params) {
        const target = this.fbo;
        (0, _core.withParameters)(this.gl, {
            depthRange: [
                0,
                1
            ],
            depthTest: true,
            blend: false,
            clearColor: [
                1,
                1,
                1,
                1
            ]
        }, ()=>{
            const viewport = params.viewports[0];
            const pixelRatio = (0, _core.cssToDeviceRatio)(this.gl);
            const width = viewport.width * pixelRatio;
            const height = viewport.height * pixelRatio;
            if (width !== target.width || height !== target.height) target.resize({
                width,
                height
            });
            super.render({
                ...params,
                target,
                pass: 'shadow'
            });
        });
    }
    shouldDrawLayer(layer) {
        return layer.props.shadowEnabled !== false;
    }
    getModuleParameters() {
        return {
            drawToShadowMap: true
        };
    }
    delete() {
        if (this.fbo) {
            this.fbo.delete();
            this.fbo = null;
        }
        if (this.shadowMap) {
            this.shadowMap.delete();
            this.shadowMap = null;
        }
        if (this.depthBuffer) {
            this.depthBuffer.delete();
            this.depthBuffer = null;
        }
    }
}
exports.default = ShadowPass;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./layers-pass":"lr0ce","@luma.gl/core":"9rnrC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lr0ce":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "layerIndexResolver", ()=>layerIndexResolver);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _pass = require("./pass");
var _passDefault = parcelHelpers.interopDefault(_pass);
var _core = require("@luma.gl/core");
class LayersPass extends (0, _passDefault.default) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "_lastRenderIndex", -1);
    }
    render(options) {
        const gl = this.gl;
        (0, _core.setParameters)(gl, {
            framebuffer: options.target
        });
        return this._drawLayers(options);
    }
    _drawLayers(options) {
        const { target, moduleParameters, viewports, views, onViewportActive, clearStack = true, clearCanvas = true } = options;
        options.pass = options.pass || 'unknown';
        const gl = this.gl;
        if (clearCanvas) clearGLCanvas(gl, target);
        if (clearStack) this._lastRenderIndex = -1;
        const renderStats = [];
        for (const viewport of viewports){
            const view = views && views[viewport.id];
            onViewportActive === null || onViewportActive === void 0 || onViewportActive(viewport);
            const drawLayerParams = this._getDrawLayerParams(viewport, options);
            const subViewports = viewport.subViewports || [
                viewport
            ];
            for (const subViewport of subViewports){
                const stats = this._drawLayersInViewport(gl, {
                    target,
                    moduleParameters,
                    viewport: subViewport,
                    view,
                    pass: options.pass,
                    layers: options.layers
                }, drawLayerParams);
                renderStats.push(stats);
            }
        }
        return renderStats;
    }
    _getDrawLayerParams(viewport, { layers, pass, isPicking = false, layerFilter, cullRect, effects, moduleParameters }, evaluateShouldDrawOnly = false) {
        const drawLayerParams = [];
        const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);
        const drawContext = {
            layer: layers[0],
            viewport,
            isPicking,
            renderPass: pass,
            cullRect
        };
        const layerFilterCache = {};
        for(let layerIndex = 0; layerIndex < layers.length; layerIndex++){
            const layer = layers[layerIndex];
            const shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);
            const layerParam = {
                shouldDrawLayer
            };
            if (shouldDrawLayer && !evaluateShouldDrawOnly) {
                layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);
                layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);
                layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);
            }
            drawLayerParams[layerIndex] = layerParam;
        }
        return drawLayerParams;
    }
    _drawLayersInViewport(gl, { layers, moduleParameters: globalModuleParameters, pass, target, viewport, view }, drawLayerParams) {
        const glViewport = getGLViewport(gl, {
            moduleParameters: globalModuleParameters,
            target,
            viewport
        });
        if (view && view.props.clear) {
            const clearOpts = view.props.clear === true ? {
                color: true,
                depth: true
            } : view.props.clear;
            (0, _core.withParameters)(gl, {
                scissorTest: true,
                scissor: glViewport
            }, ()=>(0, _core.clear)(gl, clearOpts));
        }
        const renderStatus = {
            totalCount: layers.length,
            visibleCount: 0,
            compositeCount: 0,
            pickableCount: 0
        };
        (0, _core.setParameters)(gl, {
            viewport: glViewport
        });
        for(let layerIndex = 0; layerIndex < layers.length; layerIndex++){
            const layer = layers[layerIndex];
            const { shouldDrawLayer, layerRenderIndex, moduleParameters, layerParameters } = drawLayerParams[layerIndex];
            if (shouldDrawLayer && layer.props.pickable) renderStatus.pickableCount++;
            if (layer.isComposite) renderStatus.compositeCount++;
            else if (shouldDrawLayer) {
                renderStatus.visibleCount++;
                this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);
                moduleParameters.viewport = viewport;
                try {
                    layer._drawLayer({
                        moduleParameters,
                        uniforms: {
                            layerIndex: layerRenderIndex
                        },
                        parameters: layerParameters
                    });
                } catch (err) {
                    layer.raiseError(err, "drawing ".concat(layer, " to ").concat(pass));
                }
            }
        }
        return renderStatus;
    }
    shouldDrawLayer(layer) {
        return true;
    }
    getModuleParameters(layer, effects) {
        return null;
    }
    getLayerParameters(layer, layerIndex, viewport) {
        return layer.props.parameters;
    }
    _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {
        const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);
        if (!shouldDrawLayer) return false;
        drawContext.layer = layer;
        let parent = layer.parent;
        while(parent){
            if (!parent.props.visible || !parent.filterSubLayer(drawContext)) return false;
            drawContext.layer = parent;
            parent = parent.parent;
        }
        if (layerFilter) {
            const rootLayerId = drawContext.layer.id;
            if (!(rootLayerId in layerFilterCache)) layerFilterCache[rootLayerId] = layerFilter(drawContext);
            if (!layerFilterCache[rootLayerId]) return false;
        }
        layer.activateViewport(drawContext.viewport);
        return true;
    }
    _getModuleParameters(layer, effects, pass, overrides) {
        var _layer$internalState;
        const moduleParameters = Object.assign(Object.create(((_layer$internalState = layer.internalState) === null || _layer$internalState === void 0 ? void 0 : _layer$internalState.propsInTransition) || layer.props), {
            autoWrapLongitude: layer.wrapLongitude,
            viewport: layer.context.viewport,
            mousePosition: layer.context.mousePosition,
            pickingActive: 0,
            devicePixelRatio: (0, _core.cssToDeviceRatio)(this.gl)
        });
        if (effects) for (const effect of effects){
            var _effect$getModulePara;
            Object.assign(moduleParameters, (_effect$getModulePara = effect.getModuleParameters) === null || _effect$getModulePara === void 0 ? void 0 : _effect$getModulePara.call(effect, layer));
        }
        return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);
    }
}
exports.default = LayersPass;
function layerIndexResolver(startIndex = 0, layerIndices = {}) {
    const resolvers = {};
    const resolveLayerIndex = (layer, isDrawn)=>{
        const indexOverride = layer.props._offset;
        const layerId = layer.id;
        const parentId = layer.parent && layer.parent.id;
        let index;
        if (parentId && !(parentId in layerIndices)) resolveLayerIndex(layer.parent, false);
        if (parentId in resolvers) {
            const resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);
            index = resolver(layer, isDrawn);
            resolvers[layerId] = resolver;
        } else if (Number.isFinite(indexOverride)) {
            index = indexOverride + (layerIndices[parentId] || 0);
            resolvers[layerId] = null;
        } else index = startIndex;
        if (isDrawn && index >= startIndex) startIndex = index + 1;
        layerIndices[layerId] = index;
        return index;
    };
    return resolveLayerIndex;
}
function getGLViewport(gl, { moduleParameters, target, viewport }) {
    const useTarget = target && target.id !== 'default-framebuffer';
    const pixelRatio = moduleParameters && moduleParameters.devicePixelRatio || (0, _core.cssToDeviceRatio)(gl);
    const height = useTarget ? target.height : gl.drawingBufferHeight;
    const dimensions = viewport;
    return [
        dimensions.x * pixelRatio,
        height - (dimensions.y + dimensions.height) * pixelRatio,
        dimensions.width * pixelRatio,
        dimensions.height * pixelRatio
    ];
}
function clearGLCanvas(gl, targetFramebuffer) {
    const width = targetFramebuffer ? targetFramebuffer.width : gl.drawingBufferWidth;
    const height = targetFramebuffer ? targetFramebuffer.height : gl.drawingBufferHeight;
    (0, _core.setParameters)(gl, {
        viewport: [
            0,
            0,
            width,
            height
        ]
    });
    gl.clear(16640);
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./pass":"5Fb92","@luma.gl/core":"9rnrC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5Fb92":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
class Pass {
    constructor(gl, props = {
        id: 'pass'
    }){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "props", void 0);
        const { id } = props;
        this.id = id;
        this.gl = gl;
        this.props = {
            ...props
        };
    }
    setProps(props) {
        Object.assign(this.props, props);
    }
    render(params) {}
    cleanup() {}
}
exports.default = Pass;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4AbP4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constants = require("../../lib/constants");
var _project = require("../project/project");
var _projectDefault = parcelHelpers.interopDefault(_project);
var _core = require("@math.gl/core");
var _memoize = require("../../utils/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var _webMercator = require("@math.gl/web-mercator");
const vs = "\nconst int max_lights = 2;\nuniform mat4 shadow_uViewProjectionMatrices[max_lights];\nuniform vec4 shadow_uProjectCenters[max_lights];\nuniform bool shadow_uDrawShadowMap;\nuniform bool shadow_uUseShadowMap;\nuniform int shadow_uLightId;\nuniform float shadow_uLightCount;\n\nvarying vec3 shadow_vPosition[max_lights];\n\nvec4 shadow_setVertexPosition(vec4 position_commonspace) {\n  if (shadow_uDrawShadowMap) {\n    return project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[shadow_uLightId], shadow_uProjectCenters[shadow_uLightId]);\n  }\n  if (shadow_uUseShadowMap) {\n    for (int i = 0; i < max_lights; i++) {\n      if(i < int(shadow_uLightCount)) {\n        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[i], shadow_uProjectCenters[i]);\n        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;\n      }\n    }\n  }\n  return gl_Position;\n}\n";
const fs = "\nconst int max_lights = 2;\nuniform bool shadow_uDrawShadowMap;\nuniform bool shadow_uUseShadowMap;\nuniform sampler2D shadow_uShadowMap0;\nuniform sampler2D shadow_uShadowMap1;\nuniform vec4 shadow_uColor;\nuniform float shadow_uLightCount;\n\nvarying vec3 shadow_vPosition[max_lights];\n\nconst vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);\nconst vec4 bitUnpackShift = 1.0 / bitPackShift;\nconst vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);\n\nfloat shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {\n  vec4 rgbaDepth = texture2D(shadowMap, position.xy);\n\n  float z = dot(rgbaDepth, bitUnpackShift);\n  return smoothstep(0.001, 0.01, position.z - z);\n}\n\nvec4 shadow_filterShadowColor(vec4 color) {\n  if (shadow_uDrawShadowMap) {\n    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);\n    rgbaDepth -= rgbaDepth.gbaa * bitMask;\n    return rgbaDepth;\n  }\n  if (shadow_uUseShadowMap) {\n    float shadowAlpha = 0.0;\n    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);\n    if(shadow_uLightCount > 1.0) {\n      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);\n    }\n    shadowAlpha *= shadow_uColor.a / shadow_uLightCount;\n    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);\n\n    return vec4(\n      mix(color.rgb, shadow_uColor.rgb, shadowAlpha / blendedAlpha),\n      blendedAlpha\n    );\n  }\n  return color;\n}\n";
const getMemoizedViewportCenterPosition = (0, _memoizeDefault.default)(getViewportCenterPosition);
const getMemoizedViewProjectionMatrices = (0, _memoizeDefault.default)(getViewProjectionMatrices);
const DEFAULT_SHADOW_COLOR = [
    0,
    0,
    0,
    1.0
];
const VECTOR_TO_POINT_MATRIX = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0
];
function screenToCommonSpace(xyz, pixelUnprojectionMatrix) {
    const [x, y, z] = xyz;
    const coord = (0, _webMercator.pixelsToWorld)([
        x,
        y,
        z
    ], pixelUnprojectionMatrix);
    if (Number.isFinite(z)) return coord;
    return [
        coord[0],
        coord[1],
        0
    ];
}
function getViewportCenterPosition({ viewport, center }) {
    return new (0, _core.Matrix4)(viewport.viewProjectionMatrix).invert().transform(center);
}
function getViewProjectionMatrices({ viewport, shadowMatrices }) {
    const projectionMatrices = [];
    const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;
    const farZ = viewport.isGeospatial ? undefined : 1;
    const corners = [
        [
            0,
            0,
            farZ
        ],
        [
            viewport.width,
            0,
            farZ
        ],
        [
            0,
            viewport.height,
            farZ
        ],
        [
            viewport.width,
            viewport.height,
            farZ
        ],
        [
            0,
            0,
            -1
        ],
        [
            viewport.width,
            0,
            -1
        ],
        [
            0,
            viewport.height,
            -1
        ],
        [
            viewport.width,
            viewport.height,
            -1
        ]
    ].map((pixel)=>screenToCommonSpace(pixel, pixelUnprojectionMatrix));
    for (const shadowMatrix of shadowMatrices){
        const viewMatrix = shadowMatrix.clone().translate(new (0, _core.Vector3)(viewport.center).negate());
        const positions = corners.map((corner)=>viewMatrix.transform(corner));
        const projectionMatrix = new (0, _core.Matrix4)().ortho({
            left: Math.min(...positions.map((position)=>position[0])),
            right: Math.max(...positions.map((position)=>position[0])),
            bottom: Math.min(...positions.map((position)=>position[1])),
            top: Math.max(...positions.map((position)=>position[1])),
            near: Math.min(...positions.map((position)=>-position[2])),
            far: Math.max(...positions.map((position)=>-position[2]))
        });
        projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));
    }
    return projectionMatrices;
}
function createShadowUniforms(opts, context) {
    const { shadowEnabled = true } = opts;
    if (!shadowEnabled || !opts.shadowMatrices || !opts.shadowMatrices.length) return {
        shadow_uDrawShadowMap: false,
        shadow_uUseShadowMap: false
    };
    const uniforms = {
        shadow_uDrawShadowMap: Boolean(opts.drawToShadowMap),
        shadow_uUseShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,
        shadow_uColor: opts.shadowColor || DEFAULT_SHADOW_COLOR,
        shadow_uLightId: opts.shadowLightId || 0,
        shadow_uLightCount: opts.shadowMatrices.length
    };
    const center = getMemoizedViewportCenterPosition({
        viewport: opts.viewport,
        center: context.project_uCenter
    });
    const projectCenters = [];
    const viewProjectionMatrices = getMemoizedViewProjectionMatrices({
        shadowMatrices: opts.shadowMatrices,
        viewport: opts.viewport
    }).slice();
    for(let i = 0; i < opts.shadowMatrices.length; i++){
        const viewProjectionMatrix = viewProjectionMatrices[i];
        const viewProjectionMatrixCentered = viewProjectionMatrix.clone().translate(new (0, _core.Vector3)(opts.viewport.center).negate());
        if (context.project_uCoordinateSystem === (0, _constants.COORDINATE_SYSTEM).LNGLAT && context.project_uProjectionMode === (0, _constants.PROJECTION_MODE).WEB_MERCATOR) {
            viewProjectionMatrices[i] = viewProjectionMatrixCentered;
            projectCenters[i] = center;
        } else {
            viewProjectionMatrices[i] = viewProjectionMatrix.clone().multiplyRight(VECTOR_TO_POINT_MATRIX);
            projectCenters[i] = viewProjectionMatrixCentered.transform(center);
        }
    }
    for(let i = 0; i < viewProjectionMatrices.length; i++){
        uniforms["shadow_uViewProjectionMatrices[".concat(i, "]")] = viewProjectionMatrices[i];
        uniforms["shadow_uProjectCenters[".concat(i, "]")] = projectCenters[i];
        if (opts.shadowMaps && opts.shadowMaps.length > 0) uniforms["shadow_uShadowMap".concat(i)] = opts.shadowMaps[i];
        else uniforms["shadow_uShadowMap".concat(i)] = opts.dummyShadowMap;
    }
    return uniforms;
}
exports.default = {
    name: 'shadow',
    dependencies: [
        (0, _projectDefault.default)
    ],
    vs,
    fs,
    inject: {
        'vs:DECKGL_FILTER_GL_POSITION': "\n    position = shadow_setVertexPosition(geometry.position);\n    ",
        'fs:DECKGL_FILTER_COLOR': "\n    color = shadow_filterShadowColor(color);\n    "
    },
    getUniforms: (opts = {}, context = {})=>{
        if ('viewport' in opts && (opts.drawToShadowMap || opts.shadowMaps && opts.shadowMaps.length > 0)) return createShadowUniforms(opts, context);
        return {};
    }
};

},{"../../lib/constants":"lSdwU","../project/project":"637To","@math.gl/core":"e2A67","../../utils/memoize":"1xMVQ","@math.gl/web-mercator":"gDT8w","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"637To":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _core = require("@luma.gl/core");
var _geometry = require("../misc/geometry");
var _geometryDefault = parcelHelpers.interopDefault(_geometry);
var _projectGlsl = require("./project.glsl");
var _projectGlslDefault = parcelHelpers.interopDefault(_projectGlsl);
var _viewportUniforms = require("./viewport-uniforms");
const INITIAL_MODULE_OPTIONS = {};
function getUniforms(opts = INITIAL_MODULE_OPTIONS) {
    if ('viewport' in opts) return (0, _viewportUniforms.getUniformsFromViewport)(opts);
    return {};
}
exports.default = {
    name: 'project',
    dependencies: [
        (0, _core.fp32),
        (0, _geometryDefault.default)
    ],
    vs: (0, _projectGlslDefault.default),
    getUniforms
};

},{"@luma.gl/core":"9rnrC","../misc/geometry":"hU4mO","./project.glsl":"7R4AR","./viewport-uniforms":"9RcvD","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hU4mO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const defines = '#define SMOOTH_EDGE_RADIUS 0.5';
const vs = "\n".concat(defines, "\n\nstruct VertexGeometry {\n  vec4 position;\n  vec3 worldPosition;\n  vec3 worldPositionAlt;\n  vec3 normal;\n  vec2 uv;\n  vec3 pickingColor;\n} geometry = VertexGeometry(\n  vec4(0.0, 0.0, 1.0, 0.0),\n  vec3(0.0),\n  vec3(0.0),\n  vec3(0.0),\n  vec2(0.0),\n  vec3(0.0)\n);\n");
const fs = "\n".concat(defines, "\n\nstruct FragmentGeometry {\n  vec2 uv;\n} geometry;\n\nfloat smoothedge(float edge, float x) {\n  return smoothstep(edge - SMOOTH_EDGE_RADIUS, edge + SMOOTH_EDGE_RADIUS, x);\n}\n");
exports.default = {
    name: 'geometry',
    vs,
    fs
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7R4AR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constants = require("../../lib/constants");
const COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys((0, _constants.COORDINATE_SYSTEM)).map((key)=>"const int COORDINATE_SYSTEM_".concat(key, " = ").concat((0, _constants.COORDINATE_SYSTEM)[key], ";")).join('');
const PROJECTION_MODE_GLSL_CONSTANTS = Object.keys((0, _constants.PROJECTION_MODE)).map((key)=>"const int PROJECTION_MODE_".concat(key, " = ").concat((0, _constants.PROJECTION_MODE)[key], ";")).join('');
const UNIT_GLSL_CONSTANTS = Object.keys((0, _constants.UNIT)).map((key)=>"const int UNIT_".concat(key.toUpperCase(), " = ").concat((0, _constants.UNIT)[key], ";")).join('');
exports.default = "".concat(COORDINATE_SYSTEM_GLSL_CONSTANTS, "\n").concat(PROJECTION_MODE_GLSL_CONSTANTS, "\n").concat(UNIT_GLSL_CONSTANTS, "\n\nuniform int project_uCoordinateSystem;\nuniform int project_uProjectionMode;\nuniform float project_uScale;\nuniform bool project_uWrapLongitude;\nuniform vec3 project_uCommonUnitsPerMeter;\nuniform vec3 project_uCommonUnitsPerWorldUnit;\nuniform vec3 project_uCommonUnitsPerWorldUnit2;\nuniform vec4 project_uCenter;\nuniform mat4 project_uModelMatrix;\nuniform mat4 project_uViewProjectionMatrix;\nuniform vec2 project_uViewportSize;\nuniform float project_uDevicePixelRatio;\nuniform float project_uFocalDistance;\nuniform vec3 project_uCameraPosition;\nuniform vec3 project_uCoordinateOrigin;\nuniform vec3 project_uCommonOrigin;\nuniform bool project_uPseudoMeters;\n\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\nconst vec3 ZERO_64_LOW = vec3(0.0);\nconst float EARTH_RADIUS = 6370972.0;\nconst float GLOBE_RADIUS = 256.0;\nfloat project_size_at_latitude(float lat) {\n  float y = clamp(lat, -89.9, 89.9);\n  return 1.0 / cos(radians(y));\n}\n\nfloat project_size() {\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR &&\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT &&\n    project_uPseudoMeters == false) {\n    \n    if (geometry.position.w == 0.0) {\n      return project_size_at_latitude(geometry.worldPosition.y);\n    }\n  \n    float y = geometry.position.y / TILE_SIZE * 2.0 - 1.0;\n    float y2 = y * y;\n    float y4 = y2 * y2;\n    float y6 = y4 * y2;\n    return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;\n  }\n  return 1.0;\n}\n\nfloat project_size_at_latitude(float meters, float lat) {\n  return meters * project_uCommonUnitsPerMeter.z * project_size_at_latitude(lat);\n}\nfloat project_size(float meters) {\n  return meters * project_uCommonUnitsPerMeter.z * project_size();\n}\n\nvec2 project_size(vec2 meters) {\n  return meters * project_uCommonUnitsPerMeter.xy * project_size();\n}\n\nvec3 project_size(vec3 meters) {\n  return meters * project_uCommonUnitsPerMeter * project_size();\n}\n\nvec4 project_size(vec4 meters) {\n  return vec4(meters.xyz * project_uCommonUnitsPerMeter, meters.w);\n}\nmat3 project_get_orientation_matrix(vec3 up) {\n  vec3 uz = normalize(up);\n  vec3 ux = abs(uz.z) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(vec3(uz.y, -uz.x, 0));\n  vec3 uy = cross(uz, ux);\n  return mat3(ux, uy, uz);\n}\n\nbool project_needs_rotation(vec3 commonPosition, out mat3 transform) {\n  if (project_uProjectionMode == PROJECTION_MODE_GLOBE) {\n    transform = project_get_orientation_matrix(commonPosition);\n    return true;\n  }\n  return false;\n}\nvec3 project_normal(vec3 vector) {\n  vec4 normal_modelspace = project_uModelMatrix * vec4(vector, 0.0);\n  vec3 n = normalize(normal_modelspace.xyz * project_uCommonUnitsPerMeter);\n  mat3 rotation;\n  if (project_needs_rotation(geometry.position.xyz, rotation)) {\n    n = rotation * n;\n  }\n  return n;\n}\n\nvec4 project_offset_(vec4 offset) {\n  float dy = offset.y;\n  vec3 commonUnitsPerWorldUnit = project_uCommonUnitsPerWorldUnit + project_uCommonUnitsPerWorldUnit2 * dy;\n  return vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);\n}\nvec2 project_mercator_(vec2 lnglat) {\n  float x = lnglat.x;\n  if (project_uWrapLongitude) {\n    x = mod(x + 180., 360.0) - 180.;\n  }\n  float y = clamp(lnglat.y, -89.9, 89.9);\n  return vec2(\n    radians(x) + PI,\n    PI + log(tan_fp32(PI * 0.25 + radians(y) * 0.5))\n  ) * WORLD_SCALE;\n}\n\nvec3 project_globe_(vec3 lnglatz) {\n  float lambda = radians(lnglatz.x);\n  float phi = radians(lnglatz.y);\n  float cosPhi = cos(phi);\n  float D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;\n\n  return vec3(\n    sin(lambda) * cosPhi,\n    -cos(lambda) * cosPhi,\n    sin(phi)\n  ) * D;\n}\nvec4 project_position(vec4 position, vec3 position64Low) {\n  vec4 position_world = project_uModelMatrix * position;\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR) {\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n      return vec4(\n        project_mercator_(position_world.xy),\n        project_size_at_latitude(position_world.z, position_world.y),\n        position_world.w\n      );\n    }\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {\n      position_world.xyz += project_uCoordinateOrigin;\n    }\n  }\n  if (project_uProjectionMode == PROJECTION_MODE_GLOBE) {\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n      return vec4(\n        project_globe_(position_world.xyz),\n        position_world.w\n      );\n    }\n  }\n  if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {\n    if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n      if (abs(position_world.y - project_uCoordinateOrigin.y) > 0.25) {\n        return vec4(\n          project_mercator_(position_world.xy) - project_uCommonOrigin.xy,\n          project_size(position_world.z),\n          position_world.w\n        );\n      }\n    }\n  }\n  if (project_uProjectionMode == PROJECTION_MODE_IDENTITY ||\n    (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&\n    (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n     project_uCoordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {\n    position_world.xyz -= project_uCoordinateOrigin;\n  }\n  return project_offset_(position_world) + project_offset_(project_uModelMatrix * vec4(position64Low, 0.0));\n}\n\nvec4 project_position(vec4 position) {\n  return project_position(position, ZERO_64_LOW);\n}\n\nvec3 project_position(vec3 position, vec3 position64Low) {\n  vec4 projected_position = project_position(vec4(position, 1.0), position64Low);\n  return projected_position.xyz;\n}\n\nvec3 project_position(vec3 position) {\n  vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_LOW);\n  return projected_position.xyz;\n}\n\nvec2 project_position(vec2 position) {\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_LOW);\n  return projected_position.xy;\n}\n\nvec4 project_common_position_to_clipspace(vec4 position, mat4 viewProjectionMatrix, vec4 center) {\n  return viewProjectionMatrix * position + center;\n}\nvec4 project_common_position_to_clipspace(vec4 position) {\n  return project_common_position_to_clipspace(position, project_uViewProjectionMatrix, project_uCenter);\n}\nvec2 project_pixel_size_to_clipspace(vec2 pixels) {\n  vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio * 2.0;\n  return offset * project_uFocalDistance;\n}\n\nfloat project_size_to_pixel(float meters) {\n  return project_size(meters) * project_uScale;\n}\nfloat project_size_to_pixel(float size, int unit) {\n  if (unit == UNIT_METERS) return project_size_to_pixel(size);\n  if (unit == UNIT_COMMON) return size * project_uScale;\n  return size;\n}\nfloat project_pixel_size(float pixels) {\n  return pixels / project_uScale;\n}\nvec2 project_pixel_size(vec2 pixels) {\n  return pixels / project_uScale;\n}\n");

},{"../../lib/constants":"lSdwU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9RcvD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOffsetOrigin", ()=>getOffsetOrigin);
parcelHelpers.export(exports, "getUniformsFromViewport", ()=>getUniformsFromViewport);
var _mat4 = require("gl-matrix/mat4");
var _vec4 = require("gl-matrix/vec4");
var _constants = require("../../lib/constants");
var _memoize = require("../../utils/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
const ZERO_VECTOR = [
    0,
    0,
    0,
    0
];
const VECTOR_TO_POINT_MATRIX = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0
];
const IDENTITY_MATRIX = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
];
const DEFAULT_PIXELS_PER_UNIT2 = [
    0,
    0,
    0
];
const DEFAULT_COORDINATE_ORIGIN = [
    0,
    0,
    0
];
const getMemoizedViewportUniforms = (0, _memoizeDefault.default)(calculateViewportUniforms);
function getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN) {
    if (coordinateOrigin.length < 3) coordinateOrigin = [
        coordinateOrigin[0],
        coordinateOrigin[1],
        0
    ];
    let shaderCoordinateOrigin = coordinateOrigin;
    let geospatialOrigin;
    let offsetMode = true;
    if (coordinateSystem === (0, _constants.COORDINATE_SYSTEM).LNGLAT_OFFSETS || coordinateSystem === (0, _constants.COORDINATE_SYSTEM).METER_OFFSETS) geospatialOrigin = coordinateOrigin;
    else geospatialOrigin = viewport.isGeospatial ? [
        Math.fround(viewport.longitude),
        Math.fround(viewport.latitude),
        0
    ] : null;
    switch(viewport.projectionMode){
        case (0, _constants.PROJECTION_MODE).WEB_MERCATOR:
            if (coordinateSystem === (0, _constants.COORDINATE_SYSTEM).LNGLAT || coordinateSystem === (0, _constants.COORDINATE_SYSTEM).CARTESIAN) {
                geospatialOrigin = [
                    0,
                    0,
                    0
                ];
                offsetMode = false;
            }
            break;
        case (0, _constants.PROJECTION_MODE).WEB_MERCATOR_AUTO_OFFSET:
            if (coordinateSystem === (0, _constants.COORDINATE_SYSTEM).LNGLAT) shaderCoordinateOrigin = geospatialOrigin;
            else if (coordinateSystem === (0, _constants.COORDINATE_SYSTEM).CARTESIAN) {
                shaderCoordinateOrigin = [
                    Math.fround(viewport.center[0]),
                    Math.fround(viewport.center[1]),
                    0
                ];
                geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);
                shaderCoordinateOrigin[0] -= coordinateOrigin[0];
                shaderCoordinateOrigin[1] -= coordinateOrigin[1];
                shaderCoordinateOrigin[2] -= coordinateOrigin[2];
            }
            break;
        case (0, _constants.PROJECTION_MODE).IDENTITY:
            shaderCoordinateOrigin = viewport.position.map(Math.fround);
            shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;
            break;
        case (0, _constants.PROJECTION_MODE).GLOBE:
            offsetMode = false;
            geospatialOrigin = null;
            break;
        default:
            offsetMode = false;
    }
    return {
        geospatialOrigin,
        shaderCoordinateOrigin,
        offsetMode
    };
}
function calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {
    const { viewMatrixUncentered, projectionMatrix } = viewport;
    let { viewMatrix, viewProjectionMatrix } = viewport;
    let projectionCenter = ZERO_VECTOR;
    let originCommon = ZERO_VECTOR;
    let cameraPosCommon = viewport.cameraPosition;
    const { geospatialOrigin, shaderCoordinateOrigin, offsetMode } = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin);
    if (offsetMode) {
        originCommon = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
        cameraPosCommon = [
            cameraPosCommon[0] - originCommon[0],
            cameraPosCommon[1] - originCommon[1],
            cameraPosCommon[2] - originCommon[2]
        ];
        originCommon[3] = 1;
        projectionCenter = _vec4.transformMat4([], originCommon, viewProjectionMatrix);
        viewMatrix = viewMatrixUncentered || viewMatrix;
        viewProjectionMatrix = _mat4.multiply([], projectionMatrix, viewMatrix);
        viewProjectionMatrix = _mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);
    }
    return {
        viewMatrix,
        viewProjectionMatrix,
        projectionCenter,
        originCommon,
        cameraPosCommon,
        shaderCoordinateOrigin,
        geospatialOrigin
    };
}
function getUniformsFromViewport({ viewport, devicePixelRatio = 1, modelMatrix = null, coordinateSystem = (0, _constants.COORDINATE_SYSTEM).DEFAULT, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN, autoWrapLongitude = false }) {
    if (coordinateSystem === (0, _constants.COORDINATE_SYSTEM).DEFAULT) coordinateSystem = viewport.isGeospatial ? (0, _constants.COORDINATE_SYSTEM).LNGLAT : (0, _constants.COORDINATE_SYSTEM).CARTESIAN;
    const uniforms = getMemoizedViewportUniforms({
        viewport,
        devicePixelRatio,
        coordinateSystem,
        coordinateOrigin
    });
    uniforms.project_uWrapLongitude = autoWrapLongitude;
    uniforms.project_uModelMatrix = modelMatrix || IDENTITY_MATRIX;
    return uniforms;
}
function calculateViewportUniforms({ viewport, devicePixelRatio, coordinateSystem, coordinateOrigin }) {
    const { projectionCenter, viewProjectionMatrix, originCommon, cameraPosCommon, shaderCoordinateOrigin, geospatialOrigin } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);
    const distanceScales = viewport.getDistanceScales();
    const viewportSize = [
        viewport.width * devicePixelRatio,
        viewport.height * devicePixelRatio
    ];
    const focalDistance = _vec4.transformMat4([], [
        0,
        0,
        -viewport.focalDistance,
        1
    ], viewport.projectionMatrix)[3] || 1;
    const uniforms = {
        project_uCoordinateSystem: coordinateSystem,
        project_uProjectionMode: viewport.projectionMode,
        project_uCoordinateOrigin: shaderCoordinateOrigin,
        project_uCommonOrigin: originCommon.slice(0, 3),
        project_uCenter: projectionCenter,
        project_uPseudoMeters: Boolean(viewport._pseudoMeters),
        project_uViewportSize: viewportSize,
        project_uDevicePixelRatio: devicePixelRatio,
        project_uFocalDistance: focalDistance,
        project_uCommonUnitsPerMeter: distanceScales.unitsPerMeter,
        project_uCommonUnitsPerWorldUnit: distanceScales.unitsPerMeter,
        project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,
        project_uScale: viewport.scale,
        project_uWrapLongitude: false,
        project_uViewProjectionMatrix: viewProjectionMatrix,
        project_uModelMatrix: IDENTITY_MATRIX,
        project_uCameraPosition: cameraPosCommon
    };
    if (geospatialOrigin) {
        const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);
        switch(coordinateSystem){
            case (0, _constants.COORDINATE_SYSTEM).METER_OFFSETS:
                uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;
                uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;
                break;
            case (0, _constants.COORDINATE_SYSTEM).LNGLAT:
            case (0, _constants.COORDINATE_SYSTEM).LNGLAT_OFFSETS:
                if (!viewport._pseudoMeters) uniforms.project_uCommonUnitsPerMeter = distanceScalesAtOrigin.unitsPerMeter;
                uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;
                uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;
                break;
            case (0, _constants.COORDINATE_SYSTEM).CARTESIAN:
                uniforms.project_uCommonUnitsPerWorldUnit = [
                    1,
                    1,
                    distanceScalesAtOrigin.unitsPerMeter[2]
                ];
                uniforms.project_uCommonUnitsPerWorldUnit2 = [
                    0,
                    0,
                    distanceScalesAtOrigin.unitsPerMeter2[2]
                ];
                break;
            default:
                break;
        }
    }
    return uniforms;
}

},{"gl-matrix/mat4":"bkNpn","gl-matrix/vec4":"9jhlX","../../lib/constants":"lSdwU","../../utils/memoize":"1xMVQ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1xMVQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>memoize);
function isEqual(a, b) {
    if (a === b) return true;
    if (Array.isArray(a)) {
        const len = a.length;
        if (!b || b.length !== len) return false;
        for(let i = 0; i < len; i++){
            if (a[i] !== b[i]) return false;
        }
        return true;
    }
    return false;
}
function memoize(compute) {
    let cachedArgs = {};
    let cachedResult;
    return (args)=>{
        for(const key in args)if (!isEqual(args[key], cachedArgs[key])) {
            cachedResult = compute(args);
            cachedArgs = args;
            break;
        }
        return cachedResult;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gDT8w":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _webMercatorViewportDefault.default));
parcelHelpers.export(exports, "WebMercatorViewport", ()=>(0, _webMercatorViewportDefault.default));
parcelHelpers.export(exports, "getBounds", ()=>(0, _getBoundsDefault.default));
parcelHelpers.export(exports, "fitBounds", ()=>(0, _fitBoundsDefault.default));
parcelHelpers.export(exports, "normalizeViewportProps", ()=>(0, _normalizeViewportPropsDefault.default));
parcelHelpers.export(exports, "flyToViewport", ()=>(0, _flyToViewportDefault.default));
parcelHelpers.export(exports, "getFlyToDuration", ()=>(0, _flyToViewport.getFlyToDuration));
parcelHelpers.export(exports, "MAX_LATITUDE", ()=>(0, _webMercatorUtils.MAX_LATITUDE));
parcelHelpers.export(exports, "lngLatToWorld", ()=>(0, _webMercatorUtils.lngLatToWorld));
parcelHelpers.export(exports, "worldToLngLat", ()=>(0, _webMercatorUtils.worldToLngLat));
parcelHelpers.export(exports, "worldToPixels", ()=>(0, _webMercatorUtils.worldToPixels));
parcelHelpers.export(exports, "pixelsToWorld", ()=>(0, _webMercatorUtils.pixelsToWorld));
parcelHelpers.export(exports, "zoomToScale", ()=>(0, _webMercatorUtils.zoomToScale));
parcelHelpers.export(exports, "scaleToZoom", ()=>(0, _webMercatorUtils.scaleToZoom));
parcelHelpers.export(exports, "altitudeToFovy", ()=>(0, _webMercatorUtils.altitudeToFovy));
parcelHelpers.export(exports, "fovyToAltitude", ()=>(0, _webMercatorUtils.fovyToAltitude));
parcelHelpers.export(exports, "getMeterZoom", ()=>(0, _webMercatorUtils.getMeterZoom));
parcelHelpers.export(exports, "unitsPerMeter", ()=>(0, _webMercatorUtils.unitsPerMeter));
parcelHelpers.export(exports, "getDistanceScales", ()=>(0, _webMercatorUtils.getDistanceScales));
parcelHelpers.export(exports, "addMetersToLngLat", ()=>(0, _webMercatorUtils.addMetersToLngLat));
parcelHelpers.export(exports, "getViewMatrix", ()=>(0, _webMercatorUtils.getViewMatrix));
parcelHelpers.export(exports, "getProjectionMatrix", ()=>(0, _webMercatorUtils.getProjectionMatrix));
parcelHelpers.export(exports, "getProjectionParameters", ()=>(0, _webMercatorUtils.getProjectionParameters));
var _webMercatorViewport = require("./web-mercator-viewport");
var _webMercatorViewportDefault = parcelHelpers.interopDefault(_webMercatorViewport);
var _getBounds = require("./get-bounds");
var _getBoundsDefault = parcelHelpers.interopDefault(_getBounds);
var _fitBounds = require("./fit-bounds");
var _fitBoundsDefault = parcelHelpers.interopDefault(_fitBounds);
var _normalizeViewportProps = require("./normalize-viewport-props");
var _normalizeViewportPropsDefault = parcelHelpers.interopDefault(_normalizeViewportProps);
var _flyToViewport = require("./fly-to-viewport");
var _flyToViewportDefault = parcelHelpers.interopDefault(_flyToViewport);
var _webMercatorUtils = require("./web-mercator-utils");

},{"./web-mercator-viewport":"4zeoP","./get-bounds":"fDq1V","./fit-bounds":"7JLPa","./normalize-viewport-props":"fyVIR","./fly-to-viewport":"93djh","./web-mercator-utils":"2ZhHM","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4zeoP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _mathUtils = require("./math-utils");
var _webMercatorUtils = require("./web-mercator-utils");
var _fitBounds = require("./fit-bounds");
var _fitBoundsDefault = parcelHelpers.interopDefault(_fitBounds);
var _getBounds = require("./get-bounds");
var _getBoundsDefault = parcelHelpers.interopDefault(_getBounds);
var _mat4 = require("gl-matrix/mat4");
var _vec2 = require("gl-matrix/vec2");
var _vec3 = require("gl-matrix/vec3");
class WebMercatorViewport {
    constructor(props = {
        width: 1,
        height: 1
    }){
        (0, _definePropertyDefault.default)(this, "latitude", void 0);
        (0, _definePropertyDefault.default)(this, "longitude", void 0);
        (0, _definePropertyDefault.default)(this, "zoom", void 0);
        (0, _definePropertyDefault.default)(this, "pitch", void 0);
        (0, _definePropertyDefault.default)(this, "bearing", void 0);
        (0, _definePropertyDefault.default)(this, "altitude", void 0);
        (0, _definePropertyDefault.default)(this, "fovy", void 0);
        (0, _definePropertyDefault.default)(this, "meterOffset", void 0);
        (0, _definePropertyDefault.default)(this, "center", void 0);
        (0, _definePropertyDefault.default)(this, "width", void 0);
        (0, _definePropertyDefault.default)(this, "height", void 0);
        (0, _definePropertyDefault.default)(this, "scale", void 0);
        (0, _definePropertyDefault.default)(this, "distanceScales", void 0);
        (0, _definePropertyDefault.default)(this, "viewMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "projectionMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "viewProjectionMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "pixelProjectionMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "pixelUnprojectionMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "equals", (viewport)=>{
            if (!(viewport instanceof WebMercatorViewport)) return false;
            return viewport.width === this.width && viewport.height === this.height && _mat4.equals(viewport.projectionMatrix, this.projectionMatrix) && _mat4.equals(viewport.viewMatrix, this.viewMatrix);
        });
        (0, _definePropertyDefault.default)(this, "project", (lngLatZ, options = {})=>{
            const { topLeft = true } = options;
            const worldPosition = this.projectPosition(lngLatZ);
            const coord = (0, _webMercatorUtils.worldToPixels)(worldPosition, this.pixelProjectionMatrix);
            const [x, y] = coord;
            const y2 = topLeft ? y : this.height - y;
            return lngLatZ.length === 2 ? [
                x,
                y2
            ] : [
                x,
                y2,
                coord[2]
            ];
        });
        (0, _definePropertyDefault.default)(this, "unproject", (xyz, options = {})=>{
            const { topLeft = true, targetZ } = options;
            const [x, y, z] = xyz;
            const y2 = topLeft ? y : this.height - y;
            const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];
            const coord = (0, _webMercatorUtils.pixelsToWorld)([
                x,
                y2,
                z
            ], this.pixelUnprojectionMatrix, targetZWorld);
            const [X, Y, Z] = this.unprojectPosition(coord);
            if (Number.isFinite(z)) return [
                X,
                Y,
                Z
            ];
            return Number.isFinite(targetZ) ? [
                X,
                Y,
                targetZ
            ] : [
                X,
                Y
            ];
        });
        (0, _definePropertyDefault.default)(this, "projectPosition", (xyz)=>{
            const [X, Y] = (0, _webMercatorUtils.lngLatToWorld)(xyz);
            const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];
            return [
                X,
                Y,
                Z
            ];
        });
        (0, _definePropertyDefault.default)(this, "unprojectPosition", (xyz)=>{
            const [X, Y] = (0, _webMercatorUtils.worldToLngLat)(xyz);
            const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];
            return [
                X,
                Y,
                Z
            ];
        });
        let { width, height, altitude = null, fovy = null } = props;
        const { latitude = 0, longitude = 0, zoom = 0, pitch = 0, bearing = 0, position = null, nearZMultiplier = 0.02, farZMultiplier = 1.01 } = props;
        width = width || 1;
        height = height || 1;
        if (fovy === null && altitude === null) {
            altitude = (0, _webMercatorUtils.DEFAULT_ALTITUDE);
            fovy = (0, _webMercatorUtils.altitudeToFovy)(altitude);
        } else if (fovy === null) fovy = (0, _webMercatorUtils.altitudeToFovy)(altitude);
        else if (altitude === null) altitude = (0, _webMercatorUtils.fovyToAltitude)(fovy);
        const scale = (0, _webMercatorUtils.zoomToScale)(zoom);
        altitude = Math.max(0.75, altitude);
        const distanceScales = (0, _webMercatorUtils.getDistanceScales)({
            longitude,
            latitude
        });
        const center = (0, _webMercatorUtils.lngLatToWorld)([
            longitude,
            latitude
        ]);
        center.push(0);
        if (position) _vec3.add(center, center, _vec3.mul([], position, distanceScales.unitsPerMeter));
        this.projectionMatrix = (0, _webMercatorUtils.getProjectionMatrix)({
            width,
            height,
            scale,
            center,
            pitch,
            fovy,
            nearZMultiplier,
            farZMultiplier
        });
        this.viewMatrix = (0, _webMercatorUtils.getViewMatrix)({
            height,
            scale,
            center,
            pitch,
            bearing,
            altitude
        });
        this.width = width;
        this.height = height;
        this.scale = scale;
        this.latitude = latitude;
        this.longitude = longitude;
        this.zoom = zoom;
        this.pitch = pitch;
        this.bearing = bearing;
        this.altitude = altitude;
        this.fovy = fovy;
        this.center = center;
        this.meterOffset = position || [
            0,
            0,
            0
        ];
        this.distanceScales = distanceScales;
        this._initMatrices();
        Object.freeze(this);
    }
    _initMatrices() {
        const { width, height, projectionMatrix, viewMatrix } = this;
        const vpm = (0, _mathUtils.createMat4)();
        _mat4.multiply(vpm, vpm, projectionMatrix);
        _mat4.multiply(vpm, vpm, viewMatrix);
        this.viewProjectionMatrix = vpm;
        const m = (0, _mathUtils.createMat4)();
        _mat4.scale(m, m, [
            width / 2,
            -height / 2,
            1
        ]);
        _mat4.translate(m, m, [
            1,
            -1,
            0
        ]);
        _mat4.multiply(m, m, vpm);
        const mInverse = _mat4.invert((0, _mathUtils.createMat4)(), m);
        if (!mInverse) throw new Error('Pixel project matrix not invertible');
        this.pixelProjectionMatrix = m;
        this.pixelUnprojectionMatrix = mInverse;
    }
    projectFlat(lngLat) {
        return (0, _webMercatorUtils.lngLatToWorld)(lngLat);
    }
    unprojectFlat(xy) {
        return (0, _webMercatorUtils.worldToLngLat)(xy);
    }
    getMapCenterByLngLatPosition({ lngLat, pos }) {
        const fromLocation = (0, _webMercatorUtils.pixelsToWorld)(pos, this.pixelUnprojectionMatrix);
        const toLocation = (0, _webMercatorUtils.lngLatToWorld)(lngLat);
        const translate = _vec2.add([], toLocation, _vec2.negate([], fromLocation));
        const newCenter = _vec2.add([], this.center, translate);
        return (0, _webMercatorUtils.worldToLngLat)(newCenter);
    }
    fitBounds(bounds, options = {}) {
        const { width, height } = this;
        const { longitude, latitude, zoom } = (0, _fitBoundsDefault.default)(Object.assign({
            width,
            height,
            bounds
        }, options));
        return new WebMercatorViewport({
            width,
            height,
            longitude,
            latitude,
            zoom
        });
    }
    getBounds(options) {
        const corners = this.getBoundingRegion(options);
        const west = Math.min(...corners.map((p)=>p[0]));
        const east = Math.max(...corners.map((p)=>p[0]));
        const south = Math.min(...corners.map((p)=>p[1]));
        const north = Math.max(...corners.map((p)=>p[1]));
        return [
            [
                west,
                south
            ],
            [
                east,
                north
            ]
        ];
    }
    getBoundingRegion(options = {}) {
        return (0, _getBoundsDefault.default)(this, options.z || 0);
    }
    getLocationAtPoint({ lngLat, pos }) {
        return this.getMapCenterByLngLatPosition({
            lngLat,
            pos
        });
    }
}
exports.default = WebMercatorViewport;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./math-utils":"hj8Go","./web-mercator-utils":"2ZhHM","./fit-bounds":"7JLPa","./get-bounds":"fDq1V","gl-matrix/mat4":"bkNpn","gl-matrix/vec2":"yiZrJ","gl-matrix/vec3":"5UKYl","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hj8Go":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMat4", ()=>createMat4);
parcelHelpers.export(exports, "transformVector", ()=>transformVector);
parcelHelpers.export(exports, "mod", ()=>mod);
parcelHelpers.export(exports, "lerp", ()=>lerp);
parcelHelpers.export(exports, "clamp", ()=>clamp);
parcelHelpers.export(exports, "log2", ()=>log2);
var _vec4 = require("gl-matrix/vec4");
function createMat4() {
    return [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
    ];
}
function transformVector(matrix, vector) {
    const result = (0, _vec4.transformMat4)([], vector, matrix);
    (0, _vec4.scale)(result, result, 1 / result[3]);
    return result;
}
function mod(value, divisor) {
    const modulus = value % divisor;
    return modulus < 0 ? divisor + modulus : modulus;
}
function lerp(start, end, step) {
    return step * end + (1 - step) * start;
}
function clamp(x, min, max) {
    return x < min ? min : x > max ? max : x;
}
function ieLog2(x) {
    return Math.log(x) * Math.LOG2E;
}
const log2 = Math.log2 || ieLog2;

},{"gl-matrix/vec4":"9jhlX","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2ZhHM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MAX_LATITUDE", ()=>MAX_LATITUDE);
parcelHelpers.export(exports, "DEFAULT_ALTITUDE", ()=>DEFAULT_ALTITUDE);
parcelHelpers.export(exports, "zoomToScale", ()=>zoomToScale);
parcelHelpers.export(exports, "scaleToZoom", ()=>scaleToZoom);
parcelHelpers.export(exports, "lngLatToWorld", ()=>lngLatToWorld);
parcelHelpers.export(exports, "worldToLngLat", ()=>worldToLngLat);
parcelHelpers.export(exports, "getMeterZoom", ()=>getMeterZoom);
parcelHelpers.export(exports, "unitsPerMeter", ()=>unitsPerMeter);
parcelHelpers.export(exports, "getDistanceScales", ()=>getDistanceScales);
parcelHelpers.export(exports, "addMetersToLngLat", ()=>addMetersToLngLat);
parcelHelpers.export(exports, "getViewMatrix", ()=>getViewMatrix);
parcelHelpers.export(exports, "getProjectionParameters", ()=>getProjectionParameters);
parcelHelpers.export(exports, "getProjectionMatrix", ()=>getProjectionMatrix);
parcelHelpers.export(exports, "altitudeToFovy", ()=>altitudeToFovy);
parcelHelpers.export(exports, "fovyToAltitude", ()=>fovyToAltitude);
parcelHelpers.export(exports, "worldToPixels", ()=>worldToPixels);
parcelHelpers.export(exports, "pixelsToWorld", ()=>pixelsToWorld);
var _mathUtils = require("./math-utils");
var _mat4 = require("gl-matrix/mat4");
var _vec2 = require("gl-matrix/vec2");
var _vec3 = require("gl-matrix/vec3");
var _assert = require("./assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
const PI = Math.PI;
const PI_4 = PI / 4;
const DEGREES_TO_RADIANS = PI / 180;
const RADIANS_TO_DEGREES = 180 / PI;
const TILE_SIZE = 512;
const EARTH_CIRCUMFERENCE = 40.03e6;
const MAX_LATITUDE = 85.051129;
const DEFAULT_ALTITUDE = 1.5;
function zoomToScale(zoom) {
    return Math.pow(2, zoom);
}
function scaleToZoom(scale) {
    return (0, _mathUtils.log2)(scale);
}
function lngLatToWorld(lngLat) {
    const [lng, lat] = lngLat;
    (0, _assertDefault.default)(Number.isFinite(lng));
    (0, _assertDefault.default)(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');
    const lambda2 = lng * DEGREES_TO_RADIANS;
    const phi2 = lat * DEGREES_TO_RADIANS;
    const x = TILE_SIZE * (lambda2 + PI) / (2 * PI);
    const y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);
    return [
        x,
        y
    ];
}
function worldToLngLat(xy) {
    const [x, y] = xy;
    const lambda2 = x / TILE_SIZE * (2 * PI) - PI;
    const phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);
    return [
        lambda2 * RADIANS_TO_DEGREES,
        phi2 * RADIANS_TO_DEGREES
    ];
}
function getMeterZoom(options) {
    const { latitude } = options;
    (0, _assertDefault.default)(Number.isFinite(latitude));
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);
    return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;
}
function unitsPerMeter(latitude) {
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);
    return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;
}
function getDistanceScales(options) {
    const { latitude, longitude, highPrecision = false } = options;
    (0, _assertDefault.default)(Number.isFinite(latitude) && Number.isFinite(longitude));
    const worldSize = TILE_SIZE;
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);
    const unitsPerDegreeX = worldSize / 360;
    const unitsPerDegreeY = unitsPerDegreeX / latCosine;
    const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;
    const result = {
        unitsPerMeter: [
            altUnitsPerMeter,
            altUnitsPerMeter,
            altUnitsPerMeter
        ],
        metersPerUnit: [
            1 / altUnitsPerMeter,
            1 / altUnitsPerMeter,
            1 / altUnitsPerMeter
        ],
        unitsPerDegree: [
            unitsPerDegreeX,
            unitsPerDegreeY,
            altUnitsPerMeter
        ],
        degreesPerUnit: [
            1 / unitsPerDegreeX,
            1 / unitsPerDegreeY,
            1 / altUnitsPerMeter
        ]
    };
    if (highPrecision) {
        const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;
        const unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;
        const altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;
        const altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;
        result.unitsPerDegree2 = [
            0,
            unitsPerDegreeY2,
            altUnitsPerDegree2
        ];
        result.unitsPerMeter2 = [
            altUnitsPerMeter2,
            0,
            altUnitsPerMeter2
        ];
    }
    return result;
}
function addMetersToLngLat(lngLatZ, xyz) {
    const [longitude, latitude, z0] = lngLatZ;
    const [x, y, z] = xyz;
    const { unitsPerMeter, unitsPerMeter2 } = getDistanceScales({
        longitude,
        latitude,
        highPrecision: true
    });
    const worldspace = lngLatToWorld(lngLatZ);
    worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);
    worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);
    const newLngLat = worldToLngLat(worldspace);
    const newZ = (z0 || 0) + (z || 0);
    return Number.isFinite(z0) || Number.isFinite(z) ? [
        newLngLat[0],
        newLngLat[1],
        newZ
    ] : newLngLat;
}
function getViewMatrix(options) {
    const { height, pitch, bearing, altitude, scale, center } = options;
    const vm = (0, _mathUtils.createMat4)();
    _mat4.translate(vm, vm, [
        0,
        0,
        -altitude
    ]);
    _mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);
    _mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);
    const relativeScale = scale / height;
    _mat4.scale(vm, vm, [
        relativeScale,
        relativeScale,
        relativeScale
    ]);
    if (center) _mat4.translate(vm, vm, _vec3.negate([], center));
    return vm;
}
function getProjectionParameters(options) {
    const { width, height, altitude, pitch = 0, offset, center, scale, nearZMultiplier = 1, farZMultiplier = 1 } = options;
    let { fovy = altitudeToFovy(DEFAULT_ALTITUDE) } = options;
    if (altitude !== undefined) fovy = altitudeToFovy(altitude);
    const fovRadians = fovy * DEGREES_TO_RADIANS;
    const pitchRadians = pitch * DEGREES_TO_RADIANS;
    const focalDistance = fovyToAltitude(fovy);
    let cameraToSeaLevelDistance = focalDistance;
    if (center) cameraToSeaLevelDistance += center[2] * scale / Math.cos(pitchRadians) / height;
    const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);
    const topHalfSurfaceDistance = Math.sin(fovAboveCenter) * cameraToSeaLevelDistance / Math.sin((0, _mathUtils.clamp)(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));
    const furthestDistance = Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;
    const horizonDistance = cameraToSeaLevelDistance * 10;
    const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);
    return {
        fov: fovRadians,
        aspect: width / height,
        focalDistance,
        near: nearZMultiplier,
        far: farZ
    };
}
function getProjectionMatrix(options) {
    const { fov, aspect, near, far } = getProjectionParameters(options);
    const projectionMatrix = _mat4.perspective([], fov, aspect, near, far);
    return projectionMatrix;
}
function altitudeToFovy(altitude) {
    return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;
}
function fovyToAltitude(fovy) {
    return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);
}
function worldToPixels(xyz, pixelProjectionMatrix) {
    const [x, y, z = 0] = xyz;
    (0, _assertDefault.default)(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));
    return (0, _mathUtils.transformVector)(pixelProjectionMatrix, [
        x,
        y,
        z,
        1
    ]);
}
function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {
    const [x, y, z] = xyz;
    (0, _assertDefault.default)(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');
    if (Number.isFinite(z)) {
        const coord = (0, _mathUtils.transformVector)(pixelUnprojectionMatrix, [
            x,
            y,
            z,
            1
        ]);
        return coord;
    }
    const coord0 = (0, _mathUtils.transformVector)(pixelUnprojectionMatrix, [
        x,
        y,
        0,
        1
    ]);
    const coord1 = (0, _mathUtils.transformVector)(pixelUnprojectionMatrix, [
        x,
        y,
        1,
        1
    ]);
    const z0 = coord0[2];
    const z1 = coord1[2];
    const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);
    return _vec2.lerp([], coord0, coord1, t);
}

},{"./math-utils":"hj8Go","gl-matrix/mat4":"bkNpn","gl-matrix/vec2":"yiZrJ","gl-matrix/vec3":"5UKYl","./assert":"1I91g","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1I91g":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message || '@math.gl/web-mercator: assertion failed.');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7JLPa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>fitBounds);
var _assert = require("./assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _mathUtils = require("./math-utils");
var _webMercatorUtils = require("./web-mercator-utils");
function fitBounds(options) {
    const { width, height, bounds, minExtent = 0, maxZoom = 24, offset = [
        0,
        0
    ] } = options;
    const [[west, south], [east, north]] = bounds;
    const padding = getPaddingObject(options.padding);
    const nw = (0, _webMercatorUtils.lngLatToWorld)([
        west,
        (0, _mathUtils.clamp)(north, -(0, _webMercatorUtils.MAX_LATITUDE), (0, _webMercatorUtils.MAX_LATITUDE))
    ]);
    const se = (0, _webMercatorUtils.lngLatToWorld)([
        east,
        (0, _mathUtils.clamp)(south, -(0, _webMercatorUtils.MAX_LATITUDE), (0, _webMercatorUtils.MAX_LATITUDE))
    ]);
    const size = [
        Math.max(Math.abs(se[0] - nw[0]), minExtent),
        Math.max(Math.abs(se[1] - nw[1]), minExtent)
    ];
    const targetSize = [
        width - padding.left - padding.right - Math.abs(offset[0]) * 2,
        height - padding.top - padding.bottom - Math.abs(offset[1]) * 2
    ];
    (0, _assertDefault.default)(targetSize[0] > 0 && targetSize[1] > 0);
    const scaleX = targetSize[0] / size[0];
    const scaleY = targetSize[1] / size[1];
    const offsetX = (padding.right - padding.left) / 2 / scaleX;
    const offsetY = (padding.top - padding.bottom) / 2 / scaleY;
    const center = [
        (se[0] + nw[0]) / 2 + offsetX,
        (se[1] + nw[1]) / 2 + offsetY
    ];
    const centerLngLat = (0, _webMercatorUtils.worldToLngLat)(center);
    const zoom = Math.min(maxZoom, (0, _mathUtils.log2)(Math.abs(Math.min(scaleX, scaleY))));
    (0, _assertDefault.default)(Number.isFinite(zoom));
    return {
        longitude: centerLngLat[0],
        latitude: centerLngLat[1],
        zoom
    };
}
function getPaddingObject(padding = 0) {
    if (typeof padding === 'number') return {
        top: padding,
        bottom: padding,
        left: padding,
        right: padding
    };
    (0, _assertDefault.default)(Number.isFinite(padding.top) && Number.isFinite(padding.bottom) && Number.isFinite(padding.left) && Number.isFinite(padding.right));
    return padding;
}

},{"./assert":"1I91g","./math-utils":"hj8Go","./web-mercator-utils":"2ZhHM","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fDq1V":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBounds);
var _webMercatorUtils = require("./web-mercator-utils");
var _vec2 = require("gl-matrix/vec2");
var _mathUtils = require("./math-utils");
const DEGREES_TO_RADIANS = Math.PI / 180;
function getBounds(viewport, z = 0) {
    const { width, height, unproject } = viewport;
    const unprojectOps = {
        targetZ: z
    };
    const bottomLeft = unproject([
        0,
        height
    ], unprojectOps);
    const bottomRight = unproject([
        width,
        height
    ], unprojectOps);
    let topLeft;
    let topRight;
    const halfFov = viewport.fovy ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS : Math.atan(0.5 / viewport.altitude);
    const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;
    if (halfFov > angleToGround - 0.01) {
        topLeft = unprojectOnFarPlane(viewport, 0, z);
        topRight = unprojectOnFarPlane(viewport, width, z);
    } else {
        topLeft = unproject([
            0,
            0
        ], unprojectOps);
        topRight = unproject([
            width,
            0
        ], unprojectOps);
    }
    return [
        bottomLeft,
        bottomRight,
        topRight,
        topLeft
    ];
}
function unprojectOnFarPlane(viewport, x, targetZ) {
    const { pixelUnprojectionMatrix } = viewport;
    const coord0 = (0, _mathUtils.transformVector)(pixelUnprojectionMatrix, [
        x,
        0,
        1,
        1
    ]);
    const coord1 = (0, _mathUtils.transformVector)(pixelUnprojectionMatrix, [
        x,
        viewport.height,
        1,
        1
    ]);
    const z = targetZ * viewport.distanceScales.unitsPerMeter[2];
    const t = (z - coord0[2]) / (coord1[2] - coord0[2]);
    const coord = _vec2.lerp([], coord0, coord1, t);
    const result = (0, _webMercatorUtils.worldToLngLat)(coord);
    result.push(targetZ);
    return result;
}

},{"./web-mercator-utils":"2ZhHM","gl-matrix/vec2":"yiZrJ","./math-utils":"hj8Go","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fyVIR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>normalizeViewportProps);
var _webMercatorUtils = require("./web-mercator-utils");
var _mathUtils = require("./math-utils");
const TILE_SIZE = 512;
function normalizeViewportProps(props) {
    const { width, height, pitch = 0 } = props;
    let { longitude, latitude, zoom, bearing = 0 } = props;
    if (longitude < -180 || longitude > 180) longitude = (0, _mathUtils.mod)(longitude + 180, 360) - 180;
    if (bearing < -180 || bearing > 180) bearing = (0, _mathUtils.mod)(bearing + 180, 360) - 180;
    const minZoom = (0, _mathUtils.log2)(height / TILE_SIZE);
    if (zoom <= minZoom) {
        zoom = minZoom;
        latitude = 0;
    } else {
        const halfHeightPixels = height / 2 / Math.pow(2, zoom);
        const minLatitude = (0, _webMercatorUtils.worldToLngLat)([
            0,
            halfHeightPixels
        ])[1];
        if (latitude < minLatitude) latitude = minLatitude;
        else {
            const maxLatitude = (0, _webMercatorUtils.worldToLngLat)([
                0,
                TILE_SIZE - halfHeightPixels
            ])[1];
            if (latitude > maxLatitude) latitude = maxLatitude;
        }
    }
    return {
        width,
        height,
        longitude,
        latitude,
        zoom,
        pitch,
        bearing
    };
}

},{"./web-mercator-utils":"2ZhHM","./math-utils":"hj8Go","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"93djh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>flyToViewport);
parcelHelpers.export(exports, "getFlyToDuration", ()=>getFlyToDuration);
var _mathUtils = require("./math-utils");
var _webMercatorUtils = require("./web-mercator-utils");
var _vec2 = require("gl-matrix/vec2");
const EPSILON = 0.01;
const VIEWPORT_TRANSITION_PROPS = [
    'longitude',
    'latitude',
    'zoom'
];
const DEFAULT_OPTS = {
    curve: 1.414,
    speed: 1.2
};
function flyToViewport(startProps, endProps, t, options) {
    const { startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0 } = getFlyToTransitionParams(startProps, endProps, options);
    if (u1 < EPSILON) {
        const viewport = {};
        for (const key of VIEWPORT_TRANSITION_PROPS){
            const startValue = startProps[key];
            const endValue = endProps[key];
            viewport[key] = (0, _mathUtils.lerp)(startValue, endValue, t);
        }
        return viewport;
    }
    const s = t * S;
    const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);
    const u = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;
    const scaleIncrement = 1 / w;
    const newZoom = startZoom + (0, _webMercatorUtils.scaleToZoom)(scaleIncrement);
    const newCenterWorld = _vec2.scale([], uDelta, u);
    _vec2.add(newCenterWorld, newCenterWorld, startCenterXY);
    const newCenter = (0, _webMercatorUtils.worldToLngLat)(newCenterWorld);
    return {
        longitude: newCenter[0],
        latitude: newCenter[1],
        zoom: newZoom
    };
}
function getFlyToDuration(startProps, endProps, options) {
    const opts = {
        ...DEFAULT_OPTS,
        ...options
    };
    const { screenSpeed, speed, maxDuration } = opts;
    const { S, rho } = getFlyToTransitionParams(startProps, endProps, opts);
    const length = 1000 * S;
    let duration;
    if (Number.isFinite(screenSpeed)) duration = length / (screenSpeed / rho);
    else duration = length / speed;
    return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;
}
function getFlyToTransitionParams(startProps, endProps, opts) {
    opts = Object.assign({}, DEFAULT_OPTS, opts);
    const rho = opts.curve;
    const startZoom = startProps.zoom;
    const startCenter = [
        startProps.longitude,
        startProps.latitude
    ];
    const startScale = (0, _webMercatorUtils.zoomToScale)(startZoom);
    const endZoom = endProps.zoom;
    const endCenter = [
        endProps.longitude,
        endProps.latitude
    ];
    const scale = (0, _webMercatorUtils.zoomToScale)(endZoom - startZoom);
    const startCenterXY = (0, _webMercatorUtils.lngLatToWorld)(startCenter);
    const endCenterXY = (0, _webMercatorUtils.lngLatToWorld)(endCenter);
    const uDelta = _vec2.sub([], endCenterXY, startCenterXY);
    const w0 = Math.max(startProps.width, startProps.height);
    const w1 = w0 / scale;
    const u1 = _vec2.length(uDelta) * startScale;
    const _u1 = Math.max(u1, EPSILON);
    const rho2 = rho * rho;
    const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);
    const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);
    const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);
    const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    const S = (r1 - r0) / rho;
    return {
        startZoom,
        startCenterXY,
        uDelta,
        w0,
        u1,
        S,
        rho,
        rho2,
        r0,
        r1
    };
}

},{"./math-utils":"hj8Go","./web-mercator-utils":"2ZhHM","gl-matrix/vec2":"yiZrJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"drceY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _layersPass = require("./layers-pass");
var _layersPassDefault = parcelHelpers.interopDefault(_layersPass);
var _core = require("@luma.gl/core");
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
const PICKING_PARAMETERS = {
    blendFunc: [
        1,
        0,
        32771,
        0
    ],
    blendEquation: 32774
};
class PickLayersPass extends (0, _layersPassDefault.default) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "pickZ", void 0);
        (0, _definePropertyDefault.default)(this, "_colorEncoderState", null);
    }
    render(props) {
        if ('pickingFBO' in props) return this._drawPickingBuffer(props);
        return super.render(props);
    }
    _drawPickingBuffer({ layers, layerFilter, views, viewports, onViewportActive, pickingFBO, deviceRect: { x, y, width, height }, cullRect, effects, pass = 'picking', pickZ, moduleParameters }) {
        const gl = this.gl;
        this.pickZ = pickZ;
        const colorEncoderState = this._resetColorEncoder(pickZ);
        const renderStatus = (0, _core.withParameters)(gl, {
            scissorTest: true,
            scissor: [
                x,
                y,
                width,
                height
            ],
            clearColor: [
                0,
                0,
                0,
                0
            ],
            depthMask: true,
            depthTest: true,
            depthRange: [
                0,
                1
            ],
            colorMask: [
                true,
                true,
                true,
                true
            ],
            ...PICKING_PARAMETERS,
            blend: !pickZ
        }, ()=>super.render({
                target: pickingFBO,
                layers,
                layerFilter,
                views,
                viewports,
                onViewportActive,
                cullRect,
                effects: effects === null || effects === void 0 ? void 0 : effects.filter((e)=>e.useInPicking),
                pass,
                isPicking: true,
                moduleParameters
            }));
        this._colorEncoderState = null;
        const decodePickingColor = colorEncoderState && decodeColor.bind(null, colorEncoderState);
        return {
            decodePickingColor,
            stats: renderStatus
        };
    }
    shouldDrawLayer(layer) {
        const { pickable, operation } = layer.props;
        return pickable && operation.includes('draw') || operation.includes('terrain') || operation.includes('mask');
    }
    getModuleParameters() {
        return {
            pickingActive: 1,
            pickingAttribute: this.pickZ,
            lightSources: {}
        };
    }
    getLayerParameters(layer, layerIndex, viewport) {
        const pickParameters = {
            ...layer.props.parameters
        };
        const { pickable, operation } = layer.props;
        if (!this._colorEncoderState) pickParameters.blend = false;
        else if (pickable && operation.includes('draw')) {
            Object.assign(pickParameters, PICKING_PARAMETERS);
            pickParameters.blend = true;
            pickParameters.blendColor = encodeColor(this._colorEncoderState, layer, viewport);
        }
        if (operation.includes('terrain')) pickParameters.blend = false;
        return pickParameters;
    }
    _resetColorEncoder(pickZ) {
        this._colorEncoderState = pickZ ? null : {
            byLayer: new Map(),
            byAlpha: []
        };
        return this._colorEncoderState;
    }
}
exports.default = PickLayersPass;
function encodeColor(encoded, layer, viewport) {
    const { byLayer, byAlpha } = encoded;
    let a;
    let entry = byLayer.get(layer);
    if (entry) {
        entry.viewports.push(viewport);
        a = entry.a;
    } else {
        a = byLayer.size + 1;
        if (a <= 255) {
            entry = {
                a,
                layer,
                viewports: [
                    viewport
                ]
            };
            byLayer.set(layer, entry);
            byAlpha[a] = entry;
        } else {
            (0, _logDefault.default).warn('Too many pickable layers, only picking the first 255')();
            a = 0;
        }
    }
    return [
        0,
        0,
        0,
        a / 255
    ];
}
function decodeColor(encoded, pickedColor) {
    const entry = encoded.byAlpha[pickedColor[3]];
    return entry && {
        pickedLayer: entry.layer,
        pickedViewports: entry.viewports,
        pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)
    };
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./layers-pass":"lr0ce","@luma.gl/core":"9rnrC","../utils/log":"GqqVU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1qiBO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _layerManager = require("./layer-manager");
var _layerManagerDefault = parcelHelpers.interopDefault(_layerManager);
var _viewManager = require("./view-manager");
var _viewManagerDefault = parcelHelpers.interopDefault(_viewManager);
var _mapView = require("../views/map-view");
var _mapViewDefault = parcelHelpers.interopDefault(_mapView);
var _effectManager = require("./effect-manager");
var _effectManagerDefault = parcelHelpers.interopDefault(_effectManager);
var _deckRenderer = require("./deck-renderer");
var _deckRendererDefault = parcelHelpers.interopDefault(_deckRenderer);
var _deckPicker = require("./deck-picker");
var _deckPickerDefault = parcelHelpers.interopDefault(_deckPicker);
var _tooltip = require("./tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _deepEqual = require("../utils/deep-equal");
var _typedArrayManager = require("../utils/typed-array-manager");
var _typedArrayManagerDefault = parcelHelpers.interopDefault(_typedArrayManager);
var _init = require("./init");
var _env = require("@probe.gl/env");
var _core = require("@luma.gl/core");
var _stats = require("@probe.gl/stats");
var _mjolnirJs = require("mjolnir.js");
var _assert = require("../utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _constants = require("./constants");
function noop() {}
const getCursor = ({ isDragging })=>isDragging ? 'grabbing' : 'grab';
const defaultProps = {
    id: '',
    width: '100%',
    height: '100%',
    style: null,
    viewState: null,
    initialViewState: null,
    pickingRadius: 0,
    layerFilter: null,
    glOptions: {},
    parameters: {},
    parent: null,
    gl: null,
    canvas: null,
    layers: [],
    effects: [],
    views: null,
    controller: null,
    useDevicePixels: true,
    touchAction: 'none',
    eventRecognizerOptions: {},
    _framebuffer: null,
    _animate: false,
    _pickable: true,
    _typedArrayManagerProps: {},
    _customRender: null,
    onWebGLInitialized: noop,
    onResize: noop,
    onViewStateChange: noop,
    onInteractionStateChange: noop,
    onBeforeRender: noop,
    onAfterRender: noop,
    onLoad: noop,
    onError: (error)=>(0, _logDefault.default).error(error.message, error.cause)(),
    onHover: null,
    onClick: null,
    onDragStart: null,
    onDrag: null,
    onDragEnd: null,
    _onMetrics: null,
    getCursor,
    getTooltip: null,
    debug: false,
    drawPickingColors: false
};
class Deck {
    constructor(props){
        (0, _definePropertyDefault.default)(this, "props", void 0);
        (0, _definePropertyDefault.default)(this, "width", 0);
        (0, _definePropertyDefault.default)(this, "height", 0);
        (0, _definePropertyDefault.default)(this, "userData", {});
        (0, _definePropertyDefault.default)(this, "canvas", null);
        (0, _definePropertyDefault.default)(this, "viewManager", null);
        (0, _definePropertyDefault.default)(this, "layerManager", null);
        (0, _definePropertyDefault.default)(this, "effectManager", null);
        (0, _definePropertyDefault.default)(this, "deckRenderer", null);
        (0, _definePropertyDefault.default)(this, "deckPicker", null);
        (0, _definePropertyDefault.default)(this, "eventManager", null);
        (0, _definePropertyDefault.default)(this, "tooltip", null);
        (0, _definePropertyDefault.default)(this, "metrics", void 0);
        (0, _definePropertyDefault.default)(this, "animationLoop", void 0);
        (0, _definePropertyDefault.default)(this, "stats", void 0);
        (0, _definePropertyDefault.default)(this, "viewState", void 0);
        (0, _definePropertyDefault.default)(this, "cursorState", void 0);
        (0, _definePropertyDefault.default)(this, "_needsRedraw", void 0);
        (0, _definePropertyDefault.default)(this, "_pickRequest", void 0);
        (0, _definePropertyDefault.default)(this, "_lastPointerDownInfo", null);
        (0, _definePropertyDefault.default)(this, "_metricsCounter", void 0);
        (0, _definePropertyDefault.default)(this, "_onPointerMove", (event)=>{
            const { _pickRequest } = this;
            if (event.type === 'pointerleave') {
                _pickRequest.x = -1;
                _pickRequest.y = -1;
                _pickRequest.radius = 0;
            } else if (event.leftButton || event.rightButton) return;
            else {
                const pos = event.offsetCenter;
                if (!pos) return;
                _pickRequest.x = pos.x;
                _pickRequest.y = pos.y;
                _pickRequest.radius = this.props.pickingRadius;
            }
            if (this.layerManager) this.layerManager.context.mousePosition = {
                x: _pickRequest.x,
                y: _pickRequest.y
            };
            _pickRequest.event = event;
        });
        (0, _definePropertyDefault.default)(this, "_onEvent", (event)=>{
            const eventOptions = (0, _constants.EVENTS)[event.type];
            const pos = event.offsetCenter;
            if (!eventOptions || !pos || !this.layerManager) return;
            const layers = this.layerManager.getLayers();
            const info = this.deckPicker.getLastPickedObject({
                x: pos.x,
                y: pos.y,
                layers,
                viewports: this.getViewports(pos)
            }, this._lastPointerDownInfo);
            const { layer } = info;
            const layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);
            const rootHandler = this.props[eventOptions.handler];
            let handled = false;
            if (layerHandler) handled = layerHandler.call(layer, info, event);
            if (!handled && rootHandler) rootHandler(info, event);
        });
        (0, _definePropertyDefault.default)(this, "_onPointerDown", (event)=>{
            const pos = event.offsetCenter;
            const pickedInfo = this._pick('pickObject', 'pickObject Time', {
                x: pos.x,
                y: pos.y,
                radius: this.props.pickingRadius
            });
            this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;
        });
        this.props = {
            ...defaultProps,
            ...props
        };
        props = this.props;
        this._needsRedraw = 'Initial render';
        this._pickRequest = {
            mode: 'hover',
            x: -1,
            y: -1,
            radius: 0,
            event: null
        };
        this.cursorState = {
            isHovering: false,
            isDragging: false
        };
        if (props.viewState && props.initialViewState) (0, _logDefault.default).warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();
        if ((0, _env.getBrowser)() === 'IE') (0, _logDefault.default).warn('IE 11 is not supported')();
        this.viewState = props.initialViewState;
        if (!props.gl) {
            if (typeof document !== 'undefined') this.canvas = this._createCanvas(props);
        }
        this.animationLoop = this._createAnimationLoop(props);
        this.stats = new (0, _stats.Stats)({
            id: 'deck.gl'
        });
        this.metrics = {
            fps: 0,
            setPropsTime: 0,
            updateAttributesTime: 0,
            framesRedrawn: 0,
            pickTime: 0,
            pickCount: 0,
            gpuTime: 0,
            gpuTimePerFrame: 0,
            cpuTime: 0,
            cpuTimePerFrame: 0,
            bufferMemory: 0,
            textureMemory: 0,
            renderbufferMemory: 0,
            gpuMemory: 0
        };
        this._metricsCounter = 0;
        this.setProps(props);
        if (props._typedArrayManagerProps) (0, _typedArrayManagerDefault.default).setOptions(props._typedArrayManagerProps);
        this.animationLoop.start();
    }
    finalize() {
        var _this$animationLoop, _this$layerManager, _this$viewManager, _this$effectManager, _this$deckRenderer, _this$deckPicker, _this$eventManager, _this$tooltip;
        (_this$animationLoop = this.animationLoop) === null || _this$animationLoop === void 0 || _this$animationLoop.stop();
        this.animationLoop = null;
        this._lastPointerDownInfo = null;
        (_this$layerManager = this.layerManager) === null || _this$layerManager === void 0 || _this$layerManager.finalize();
        this.layerManager = null;
        (_this$viewManager = this.viewManager) === null || _this$viewManager === void 0 || _this$viewManager.finalize();
        this.viewManager = null;
        (_this$effectManager = this.effectManager) === null || _this$effectManager === void 0 || _this$effectManager.finalize();
        this.effectManager = null;
        (_this$deckRenderer = this.deckRenderer) === null || _this$deckRenderer === void 0 || _this$deckRenderer.finalize();
        this.deckRenderer = null;
        (_this$deckPicker = this.deckPicker) === null || _this$deckPicker === void 0 || _this$deckPicker.finalize();
        this.deckPicker = null;
        (_this$eventManager = this.eventManager) === null || _this$eventManager === void 0 || _this$eventManager.destroy();
        this.eventManager = null;
        (_this$tooltip = this.tooltip) === null || _this$tooltip === void 0 || _this$tooltip.remove();
        this.tooltip = null;
        if (!this.props.canvas && !this.props.gl && this.canvas) {
            var _this$canvas$parentEl;
            (_this$canvas$parentEl = this.canvas.parentElement) === null || _this$canvas$parentEl === void 0 || _this$canvas$parentEl.removeChild(this.canvas);
            this.canvas = null;
        }
    }
    setProps(props) {
        this.stats.get('setProps Time').timeStart();
        if ('onLayerHover' in props) (0, _logDefault.default).removed('onLayerHover', 'onHover')();
        if ('onLayerClick' in props) (0, _logDefault.default).removed('onLayerClick', 'onClick')();
        if (props.initialViewState && !(0, _deepEqual.deepEqual)(this.props.initialViewState, props.initialViewState, 3)) this.viewState = props.initialViewState;
        Object.assign(this.props, props);
        this._setCanvasSize(this.props);
        const resolvedProps = Object.create(this.props);
        Object.assign(resolvedProps, {
            views: this._getViews(),
            width: this.width,
            height: this.height,
            viewState: this._getViewState()
        });
        this.animationLoop.setProps(resolvedProps);
        if (this.layerManager) {
            this.viewManager.setProps(resolvedProps);
            this.layerManager.activateViewport(this.getViewports()[0]);
            this.layerManager.setProps(resolvedProps);
            this.effectManager.setProps(resolvedProps);
            this.deckRenderer.setProps(resolvedProps);
            this.deckPicker.setProps(resolvedProps);
        }
        this.stats.get('setProps Time').timeEnd();
    }
    needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        if (!this.layerManager) return false;
        if (this.props._animate) return 'Deck._animate';
        let redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) this._needsRedraw = false;
        const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);
        const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);
        const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);
        const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);
        redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;
        return redraw;
    }
    redraw(reason) {
        if (!this.layerManager) return;
        let redrawReason = this.needsRedraw({
            clearRedrawFlags: true
        });
        redrawReason = reason || redrawReason;
        if (!redrawReason) return;
        this.stats.get('Redraw Count').incrementCount();
        if (this.props._customRender) this.props._customRender(redrawReason);
        else this._drawLayers(redrawReason);
    }
    get isInitialized() {
        return this.viewManager !== null;
    }
    getViews() {
        (0, _assertDefault.default)(this.viewManager);
        return this.viewManager.views;
    }
    getViewports(rect) {
        (0, _assertDefault.default)(this.viewManager);
        return this.viewManager.getViewports(rect);
    }
    getCanvas() {
        return this.canvas;
    }
    pickObject(opts) {
        const infos = this._pick('pickObject', 'pickObject Time', opts).result;
        return infos.length ? infos[0] : null;
    }
    pickMultipleObjects(opts) {
        opts.depth = opts.depth || 10;
        return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;
    }
    pickObjects(opts) {
        return this._pick('pickObjects', 'pickObjects Time', opts);
    }
    _addResources(resources, forceUpdate = false) {
        for(const id in resources)this.layerManager.resourceManager.add({
            resourceId: id,
            data: resources[id],
            forceUpdate
        });
    }
    _removeResources(resourceIds) {
        for (const id of resourceIds)this.layerManager.resourceManager.remove(id);
    }
    _addDefaultEffect(effect) {
        this.effectManager.addDefaultEffect(effect);
    }
    _pick(method, statKey, opts) {
        (0, _assertDefault.default)(this.deckPicker);
        const { stats } = this;
        stats.get('Pick Count').incrementCount();
        stats.get(statKey).timeStart();
        const infos = this.deckPicker[method]({
            layers: this.layerManager.getLayers(opts),
            views: this.viewManager.getViews(),
            viewports: this.getViewports(opts),
            onViewportActive: this.layerManager.activateViewport,
            effects: this.effectManager.getEffects(),
            ...opts
        });
        stats.get(statKey).timeEnd();
        return infos;
    }
    _createCanvas(props) {
        let canvas = props.canvas;
        if (typeof canvas === 'string') {
            canvas = document.getElementById(canvas);
            (0, _assertDefault.default)(canvas);
        }
        if (!canvas) {
            canvas = document.createElement('canvas');
            canvas.id = props.id || 'deckgl-overlay';
            const parent = props.parent || document.body;
            parent.appendChild(canvas);
        }
        Object.assign(canvas.style, props.style);
        return canvas;
    }
    _setCanvasSize(props) {
        if (!this.canvas) return;
        const { width, height } = props;
        if (width || width === 0) {
            const cssWidth = Number.isFinite(width) ? "".concat(width, "px") : width;
            this.canvas.style.width = cssWidth;
        }
        if (height || height === 0) {
            var _props$style;
            const cssHeight = Number.isFinite(height) ? "".concat(height, "px") : height;
            this.canvas.style.position = ((_props$style = props.style) === null || _props$style === void 0 ? void 0 : _props$style.position) || 'absolute';
            this.canvas.style.height = cssHeight;
        }
    }
    _updateCanvasSize() {
        var _canvas$clientWidth, _canvas$clientHeight;
        const { canvas } = this;
        if (!canvas) return;
        const newWidth = (_canvas$clientWidth = canvas.clientWidth) !== null && _canvas$clientWidth !== void 0 ? _canvas$clientWidth : canvas.width;
        const newHeight = (_canvas$clientHeight = canvas.clientHeight) !== null && _canvas$clientHeight !== void 0 ? _canvas$clientHeight : canvas.height;
        if (newWidth !== this.width || newHeight !== this.height) {
            var _this$viewManager2, _this$layerManager2;
            this.width = newWidth;
            this.height = newHeight;
            (_this$viewManager2 = this.viewManager) === null || _this$viewManager2 === void 0 || _this$viewManager2.setProps({
                width: newWidth,
                height: newHeight
            });
            (_this$layerManager2 = this.layerManager) === null || _this$layerManager2 === void 0 || _this$layerManager2.activateViewport(this.getViewports()[0]);
            this.props.onResize({
                width: newWidth,
                height: newHeight
            });
        }
    }
    _createAnimationLoop(props) {
        const { width, height, gl, glOptions, debug, onError, onBeforeRender, onAfterRender, useDevicePixels } = props;
        return new (0, _core.AnimationLoop)({
            width,
            height,
            useDevicePixels,
            autoResizeDrawingBuffer: !gl,
            autoResizeViewport: false,
            gl,
            onCreateContext: (opts)=>(0, _core.createGLContext)({
                    ...glOptions,
                    ...opts,
                    canvas: this.canvas,
                    debug,
                    onContextLost: ()=>this._onContextLost()
                }),
            onInitialize: (context)=>this._setGLContext(context.gl),
            onRender: this._onRenderFrame.bind(this),
            onBeforeRender,
            onAfterRender,
            onError
        });
    }
    _getViewState() {
        return this.props.viewState || this.viewState;
    }
    _getViews() {
        let views = this.props.views || [
            new (0, _mapViewDefault.default)({
                id: 'default-view'
            })
        ];
        views = Array.isArray(views) ? views : [
            views
        ];
        if (views.length && this.props.controller) views[0].props.controller = this.props.controller;
        return views;
    }
    _onContextLost() {
        const { onError } = this.props;
        if (this.animationLoop && onError) onError(new Error('WebGL context is lost'));
    }
    _pickAndCallback() {
        const { _pickRequest } = this;
        if (_pickRequest.event) {
            const { result, emptyInfo } = this._pick('pickObject', 'pickObject Time', _pickRequest);
            this.cursorState.isHovering = result.length > 0;
            let pickedInfo = emptyInfo;
            let handled = false;
            for (const info of result){
                var _info$layer;
                pickedInfo = info;
                handled = ((_info$layer = info.layer) === null || _info$layer === void 0 ? void 0 : _info$layer.onHover(info, _pickRequest.event)) || handled;
            }
            if (!handled && this.props.onHover) this.props.onHover(pickedInfo, _pickRequest.event);
            if (this.props.getTooltip && this.tooltip) {
                const displayInfo = this.props.getTooltip(pickedInfo);
                this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);
            }
            _pickRequest.event = null;
        }
    }
    _updateCursor() {
        const container = this.props.parent || this.canvas;
        if (container) container.style.cursor = this.props.getCursor(this.cursorState);
    }
    _setGLContext(gl) {
        if (this.layerManager) return;
        if (!this.canvas) {
            this.canvas = gl.canvas;
            (0, _core.instrumentGLContext)(gl, {
                enable: true,
                copyState: true
            });
        }
        this.tooltip = new (0, _tooltipDefault.default)(this.canvas);
        (0, _core.setParameters)(gl, {
            blend: true,
            blendFunc: [
                770,
                771,
                1,
                771
            ],
            polygonOffsetFill: true,
            depthTest: true,
            depthFunc: 515
        });
        this.props.onWebGLInitialized(gl);
        const timeline = new (0, _core.Timeline)();
        timeline.play();
        this.animationLoop.attachTimeline(timeline);
        this.eventManager = new (0, _mjolnirJs.EventManager)(this.props.parent || gl.canvas, {
            touchAction: this.props.touchAction,
            recognizerOptions: this.props.eventRecognizerOptions,
            events: {
                pointerdown: this._onPointerDown,
                pointermove: this._onPointerMove,
                pointerleave: this._onPointerMove
            }
        });
        for(const eventType in 0, _constants.EVENTS)this.eventManager.on(eventType, this._onEvent);
        this.viewManager = new (0, _viewManagerDefault.default)({
            timeline,
            eventManager: this.eventManager,
            onViewStateChange: this._onViewStateChange.bind(this),
            onInteractionStateChange: this._onInteractionStateChange.bind(this),
            views: this._getViews(),
            viewState: this._getViewState(),
            width: this.width,
            height: this.height
        });
        const viewport = this.viewManager.getViewports()[0];
        this.layerManager = new (0, _layerManagerDefault.default)(gl, {
            deck: this,
            stats: this.stats,
            viewport,
            timeline
        });
        this.effectManager = new (0, _effectManagerDefault.default)();
        this.deckRenderer = new (0, _deckRendererDefault.default)(gl);
        this.deckPicker = new (0, _deckPickerDefault.default)(gl);
        this.setProps(this.props);
        this._updateCanvasSize();
        this.props.onLoad();
    }
    _drawLayers(redrawReason, renderOptions) {
        const { gl } = this.layerManager.context;
        (0, _core.setParameters)(gl, this.props.parameters);
        this.props.onBeforeRender({
            gl
        });
        this.deckRenderer.renderLayers({
            target: this.props._framebuffer,
            layers: this.layerManager.getLayers(),
            viewports: this.viewManager.getViewports(),
            onViewportActive: this.layerManager.activateViewport,
            views: this.viewManager.getViews(),
            pass: 'screen',
            effects: this.effectManager.getEffects(),
            ...renderOptions
        });
        this.props.onAfterRender({
            gl
        });
    }
    _onRenderFrame(animationProps) {
        this._getFrameStats();
        if (this._metricsCounter++ % 60 === 0) {
            this._getMetrics();
            this.stats.reset();
            (0, _logDefault.default).table(4, this.metrics)();
            if (this.props._onMetrics) this.props._onMetrics(this.metrics);
        }
        this._updateCanvasSize();
        this._updateCursor();
        if (this.tooltip.isVisible && this.viewManager.needsRedraw()) this.tooltip.setTooltip(null);
        this.layerManager.updateLayers();
        this._pickAndCallback();
        this.redraw();
        if (this.viewManager) this.viewManager.updateViewStates();
    }
    _onViewStateChange(params) {
        const viewState = this.props.onViewStateChange(params) || params.viewState;
        if (this.viewState) {
            this.viewState = {
                ...this.viewState,
                [params.viewId]: viewState
            };
            if (!this.props.viewState) {
                if (this.viewManager) this.viewManager.setProps({
                    viewState: this.viewState
                });
            }
        }
    }
    _onInteractionStateChange(interactionState) {
        this.cursorState.isDragging = interactionState.isDragging || false;
        this.props.onInteractionStateChange(interactionState);
    }
    _getFrameStats() {
        const { stats } = this;
        stats.get('frameRate').timeEnd();
        stats.get('frameRate').timeStart();
        const animationLoopStats = this.animationLoop.stats;
        stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);
        stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);
    }
    _getMetrics() {
        const { metrics, stats } = this;
        metrics.fps = stats.get('frameRate').getHz();
        metrics.setPropsTime = stats.get('setProps Time').time;
        metrics.updateAttributesTime = stats.get('Update Attributes').time;
        metrics.framesRedrawn = stats.get('Redraw Count').count;
        metrics.pickTime = stats.get('pickObject Time').time + stats.get('pickMultipleObjects Time').time + stats.get('pickObjects Time').time;
        metrics.pickCount = stats.get('Pick Count').count;
        metrics.gpuTime = stats.get('GPU Time').time;
        metrics.cpuTime = stats.get('CPU Time').time;
        metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();
        metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();
        const memoryStats = (0, _core.lumaStats).get('Memory Usage');
        metrics.bufferMemory = memoryStats.get('Buffer Memory').count;
        metrics.textureMemory = memoryStats.get('Texture Memory').count;
        metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;
        metrics.gpuMemory = memoryStats.get('GPU Memory').count;
    }
}
exports.default = Deck;
(0, _definePropertyDefault.default)(Deck, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(Deck, "VERSION", (0, _init.VERSION));

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./layer-manager":"kDCAm","./view-manager":"jTfdV","../views/map-view":"7jplJ","./effect-manager":"jex2M","./deck-renderer":"aE6ja","./deck-picker":"bR2LH","./tooltip":"iMHIa","../utils/log":"GqqVU","../utils/deep-equal":"5Dkfj","../utils/typed-array-manager":"1iupO","./init":"lHvsz","@probe.gl/env":"f6Lpj","@luma.gl/core":"9rnrC","@probe.gl/stats":"4VIFo","mjolnir.js":"a1GsX","../utils/assert":"8E3uE","./constants":"lSdwU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kDCAm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@luma.gl/core");
var _constants = require("../lifecycle/constants");
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _debug = require("../debug");
var _debugDefault = parcelHelpers.interopDefault(_debug);
var _flatten = require("../utils/flatten");
var _stats = require("@probe.gl/stats");
var _resourceManager = require("./resource/resource-manager");
var _resourceManagerDefault = parcelHelpers.interopDefault(_resourceManager);
var _viewport = require("../viewports/viewport");
var _viewportDefault = parcelHelpers.interopDefault(_viewport);
var _shaderlib = require("../shaderlib");
const TRACE_SET_LAYERS = 'layerManager.setLayers';
const TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';
class LayerManager {
    constructor(gl, { deck, stats, viewport: _viewport, timeline } = {}){
        (0, _definePropertyDefault.default)(this, "layers", void 0);
        (0, _definePropertyDefault.default)(this, "context", void 0);
        (0, _definePropertyDefault.default)(this, "resourceManager", void 0);
        (0, _definePropertyDefault.default)(this, "_lastRenderedLayers", []);
        (0, _definePropertyDefault.default)(this, "_needsRedraw", false);
        (0, _definePropertyDefault.default)(this, "_needsUpdate", false);
        (0, _definePropertyDefault.default)(this, "_nextLayers", null);
        (0, _definePropertyDefault.default)(this, "_debug", false);
        (0, _definePropertyDefault.default)(this, "activateViewport", (viewport)=>{
            (0, _debugDefault.default)(TRACE_ACTIVATE_VIEWPORT, this, viewport);
            if (viewport) this.context.viewport = viewport;
        });
        this.layers = [];
        this.resourceManager = new (0, _resourceManagerDefault.default)({
            gl,
            protocol: 'deck://'
        });
        this.context = {
            mousePosition: null,
            userData: {},
            layerManager: this,
            gl,
            deck,
            programManager: gl && (0, _shaderlib.createProgramManager)(gl),
            stats: stats || new (0, _stats.Stats)({
                id: 'deck.gl'
            }),
            viewport: _viewport || new (0, _viewportDefault.default)({
                id: 'DEFAULT-INITIAL-VIEWPORT'
            }),
            timeline: timeline || new (0, _core.Timeline)(),
            resourceManager: this.resourceManager,
            onError: undefined
        };
        Object.seal(this);
    }
    finalize() {
        this.resourceManager.finalize();
        for (const layer of this.layers)this._finalizeLayer(layer);
    }
    needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        let redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) this._needsRedraw = false;
        for (const layer of this.layers){
            const layerNeedsRedraw = layer.getNeedsRedraw(opts);
            redraw = redraw || layerNeedsRedraw;
        }
        return redraw;
    }
    needsUpdate() {
        if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) return 'layers changed';
        return this._needsUpdate;
    }
    setNeedsRedraw(reason) {
        this._needsRedraw = this._needsRedraw || reason;
    }
    setNeedsUpdate(reason) {
        this._needsUpdate = this._needsUpdate || reason;
    }
    getLayers({ layerIds } = {}) {
        return layerIds ? this.layers.filter((layer)=>layerIds.find((layerId)=>layer.id.indexOf(layerId) === 0)) : this.layers;
    }
    setProps(props) {
        if ('debug' in props) this._debug = props.debug;
        if ('userData' in props) this.context.userData = props.userData;
        if ('layers' in props) this._nextLayers = props.layers;
        if ('onError' in props) this.context.onError = props.onError;
    }
    setLayers(newLayers, reason) {
        (0, _debugDefault.default)(TRACE_SET_LAYERS, this, reason, newLayers);
        this._lastRenderedLayers = newLayers;
        const flatLayers = (0, _flatten.flatten)(newLayers, Boolean);
        for (const layer of flatLayers)layer.context = this.context;
        this._updateLayers(this.layers, flatLayers);
    }
    updateLayers() {
        const reason = this.needsUpdate();
        if (reason) {
            this.setNeedsRedraw("updating layers: ".concat(reason));
            this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);
        }
        this._nextLayers = null;
    }
    _handleError(stage, error, layer) {
        layer.raiseError(error, "".concat(stage, " of ").concat(layer));
    }
    _updateLayers(oldLayers, newLayers) {
        const oldLayerMap = {};
        for (const oldLayer of oldLayers)if (oldLayerMap[oldLayer.id]) (0, _logDefault.default).warn("Multiple old layers with same id ".concat(oldLayer.id))();
        else oldLayerMap[oldLayer.id] = oldLayer;
        const generatedLayers = [];
        this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);
        this._finalizeOldLayers(oldLayerMap);
        let needsUpdate = false;
        for (const layer of generatedLayers)if (layer.hasUniformTransition()) {
            needsUpdate = "Uniform transition in ".concat(layer);
            break;
        }
        this._needsUpdate = needsUpdate;
        this.layers = generatedLayers;
    }
    _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {
        for (const newLayer of newLayers){
            newLayer.context = this.context;
            const oldLayer = oldLayerMap[newLayer.id];
            if (oldLayer === null) (0, _logDefault.default).warn("Multiple new layers with same id ".concat(newLayer.id))();
            oldLayerMap[newLayer.id] = null;
            let sublayers = null;
            try {
                if (this._debug && oldLayer !== newLayer) newLayer.validateProps();
                if (!oldLayer) this._initializeLayer(newLayer);
                else {
                    this._transferLayerState(oldLayer, newLayer);
                    this._updateLayer(newLayer);
                }
                generatedLayers.push(newLayer);
                sublayers = newLayer.isComposite ? newLayer.getSubLayers() : null;
            } catch (err) {
                this._handleError('matching', err, newLayer);
            }
            if (sublayers) this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);
        }
    }
    _finalizeOldLayers(oldLayerMap) {
        for(const layerId in oldLayerMap){
            const layer = oldLayerMap[layerId];
            if (layer) this._finalizeLayer(layer);
        }
    }
    _initializeLayer(layer) {
        try {
            layer._initialize();
            layer.lifecycle = (0, _constants.LIFECYCLE).INITIALIZED;
        } catch (err) {
            this._handleError('initialization', err, layer);
        }
    }
    _transferLayerState(oldLayer, newLayer) {
        newLayer._transferState(oldLayer);
        newLayer.lifecycle = (0, _constants.LIFECYCLE).MATCHED;
        if (newLayer !== oldLayer) oldLayer.lifecycle = (0, _constants.LIFECYCLE).AWAITING_GC;
    }
    _updateLayer(layer) {
        try {
            layer._update();
        } catch (err) {
            this._handleError('update', err, layer);
        }
    }
    _finalizeLayer(layer) {
        this._needsRedraw = this._needsRedraw || "finalized ".concat(layer);
        layer.lifecycle = (0, _constants.LIFECYCLE).AWAITING_FINALIZATION;
        try {
            layer._finalize();
            layer.lifecycle = (0, _constants.LIFECYCLE).FINALIZED;
        } catch (err) {
            this._handleError('finalization', err, layer);
        }
    }
}
exports.default = LayerManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@luma.gl/core":"9rnrC","../lifecycle/constants":"iXzSV","../utils/log":"GqqVU","../debug":"h4a5l","../utils/flatten":"cUPbX","@probe.gl/stats":"4VIFo","./resource/resource-manager":"fg8XB","../viewports/viewport":"aU7ZS","../shaderlib":"gcBB9","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iXzSV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LIFECYCLE", ()=>LIFECYCLE);
parcelHelpers.export(exports, "COMPONENT_SYMBOL", ()=>COMPONENT_SYMBOL);
parcelHelpers.export(exports, "PROP_TYPES_SYMBOL", ()=>PROP_TYPES_SYMBOL);
parcelHelpers.export(exports, "DEPRECATED_PROPS_SYMBOL", ()=>DEPRECATED_PROPS_SYMBOL);
parcelHelpers.export(exports, "ASYNC_DEFAULTS_SYMBOL", ()=>ASYNC_DEFAULTS_SYMBOL);
parcelHelpers.export(exports, "ASYNC_ORIGINAL_SYMBOL", ()=>ASYNC_ORIGINAL_SYMBOL);
parcelHelpers.export(exports, "ASYNC_RESOLVED_SYMBOL", ()=>ASYNC_RESOLVED_SYMBOL);
const LIFECYCLE = {
    NO_STATE: 'Awaiting state',
    MATCHED: 'Matched. State transferred from previous layer',
    INITIALIZED: 'Initialized',
    AWAITING_GC: 'Discarded. Awaiting garbage collection',
    AWAITING_FINALIZATION: 'No longer matched. Awaiting garbage collection',
    FINALIZED: 'Finalized! Awaiting garbage collection'
};
const COMPONENT_SYMBOL = Symbol.for('component');
const PROP_TYPES_SYMBOL = Symbol.for('propTypes');
const DEPRECATED_PROPS_SYMBOL = Symbol.for('deprecatedProps');
const ASYNC_DEFAULTS_SYMBOL = Symbol.for('asyncPropDefaults');
const ASYNC_ORIGINAL_SYMBOL = Symbol.for('asyncPropOriginal');
const ASYNC_RESOLVED_SYMBOL = Symbol.for('asyncPropResolved');

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cUPbX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flatten", ()=>flatten);
parcelHelpers.export(exports, "fillArray", ()=>fillArray);
function flatten(array, filter = ()=>true) {
    if (!Array.isArray(array)) return filter(array) ? [
        array
    ] : [];
    return flattenArray(array, filter, []);
}
function flattenArray(array, filter, result) {
    let index = -1;
    while(++index < array.length){
        const value = array[index];
        if (Array.isArray(value)) flattenArray(value, filter, result);
        else if (filter(value)) result.push(value);
    }
    return result;
}
function fillArray({ target, source, start = 0, count = 1 }) {
    const length = source.length;
    const total = count * length;
    let copied = 0;
    for(let i = start; copied < length; copied++)target[i++] = source[copied];
    while(copied < total)if (copied < total - copied) {
        target.copyWithin(start + copied, start, start + copied);
        copied *= 2;
    } else {
        target.copyWithin(start + copied, start, start + total - copied);
        copied = total;
    }
    return target;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fg8XB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _resource = require("./resource");
var _resourceDefault = parcelHelpers.interopDefault(_resource);
class ResourceManager {
    constructor({ gl, protocol }){
        (0, _definePropertyDefault.default)(this, "protocol", void 0);
        (0, _definePropertyDefault.default)(this, "_context", void 0);
        (0, _definePropertyDefault.default)(this, "_resources", void 0);
        (0, _definePropertyDefault.default)(this, "_consumers", void 0);
        (0, _definePropertyDefault.default)(this, "_pruneRequest", void 0);
        this.protocol = protocol || 'resource://';
        this._context = {
            gl,
            resourceManager: this
        };
        this._resources = {};
        this._consumers = {};
        this._pruneRequest = null;
    }
    contains(resourceId) {
        if (resourceId.startsWith(this.protocol)) return true;
        return resourceId in this._resources;
    }
    add({ resourceId, data, forceUpdate = false, persistent = true }) {
        let res = this._resources[resourceId];
        if (res) res.setData(data, forceUpdate);
        else {
            res = new (0, _resourceDefault.default)(resourceId, data, this._context);
            this._resources[resourceId] = res;
        }
        res.persistent = persistent;
    }
    remove(resourceId) {
        const res = this._resources[resourceId];
        if (res) {
            res.delete();
            delete this._resources[resourceId];
        }
    }
    unsubscribe({ consumerId }) {
        const consumer = this._consumers[consumerId];
        if (consumer) {
            for(const requestId in consumer){
                const request = consumer[requestId];
                const resource = this._resources[request.resourceId];
                if (resource) resource.unsubscribe(request);
            }
            delete this._consumers[consumerId];
            this.prune();
        }
    }
    subscribe({ resourceId, onChange, consumerId, requestId = 'default' }) {
        const { _resources: resources, protocol } = this;
        if (resourceId.startsWith(protocol)) {
            resourceId = resourceId.replace(protocol, '');
            if (!resources[resourceId]) this.add({
                resourceId,
                data: null,
                persistent: false
            });
        }
        const res = resources[resourceId];
        this._track(consumerId, requestId, res, onChange);
        if (res) return res.getData();
        return undefined;
    }
    prune() {
        if (!this._pruneRequest) this._pruneRequest = setTimeout(()=>this._prune(), 0);
    }
    finalize() {
        for(const key in this._resources)this._resources[key].delete();
    }
    _track(consumerId, requestId, resource, onChange) {
        const consumers = this._consumers;
        const consumer = consumers[consumerId] = consumers[consumerId] || {};
        const request = consumer[requestId] || {};
        const oldResource = request.resourceId && this._resources[request.resourceId];
        if (oldResource) {
            oldResource.unsubscribe(request);
            this.prune();
        }
        if (resource) {
            consumer[requestId] = request;
            request.onChange = onChange;
            request.resourceId = resource.id;
            resource.subscribe(request);
        }
    }
    _prune() {
        this._pruneRequest = null;
        for (const key of Object.keys(this._resources)){
            const res = this._resources[key];
            if (!res.persistent && !res.inUse()) {
                res.delete();
                delete this._resources[key];
            }
        }
    }
}
exports.default = ResourceManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./resource":"kh5al","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kh5al":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@loaders.gl/core");
class Resource {
    constructor(id, data, context){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "context", void 0);
        (0, _definePropertyDefault.default)(this, "isLoaded", void 0);
        (0, _definePropertyDefault.default)(this, "persistent", void 0);
        (0, _definePropertyDefault.default)(this, "_loadCount", 0);
        (0, _definePropertyDefault.default)(this, "_subscribers", new Set());
        (0, _definePropertyDefault.default)(this, "_data", void 0);
        (0, _definePropertyDefault.default)(this, "_loader", void 0);
        (0, _definePropertyDefault.default)(this, "_error", void 0);
        (0, _definePropertyDefault.default)(this, "_content", void 0);
        this.id = id;
        this.context = context;
        this.setData(data);
    }
    subscribe(consumer) {
        this._subscribers.add(consumer);
    }
    unsubscribe(consumer) {
        this._subscribers.delete(consumer);
    }
    inUse() {
        return this._subscribers.size > 0;
    }
    delete() {}
    getData() {
        return this.isLoaded ? this._error ? Promise.reject(this._error) : this._content : this._loader.then(()=>this.getData());
    }
    setData(data, forceUpdate) {
        if (data === this._data && !forceUpdate) return;
        this._data = data;
        const loadCount = ++this._loadCount;
        let loader = data;
        if (typeof data === 'string') loader = (0, _core.load)(data);
        if (loader instanceof Promise) {
            this.isLoaded = false;
            this._loader = loader.then((result)=>{
                if (this._loadCount === loadCount) {
                    this.isLoaded = true;
                    this._error = undefined;
                    this._content = result;
                }
            }).catch((error)=>{
                if (this._loadCount === loadCount) {
                    this.isLoaded = true;
                    this._error = error || true;
                }
            });
        } else {
            this.isLoaded = true;
            this._error = undefined;
            this._content = data;
        }
        for (const subscriber of this._subscribers)subscriber.onChange(this.getData());
    }
}
exports.default = Resource;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@loaders.gl/core":"9tqNe","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aU7ZS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _mathUtils = require("../utils/math-utils");
var _core = require("@math.gl/core");
var _mat4 = require("gl-matrix/mat4");
var _webMercator = require("@math.gl/web-mercator");
var _constants = require("../lib/constants");
const DEGREES_TO_RADIANS = Math.PI / 180;
const IDENTITY = (0, _mathUtils.createMat4)();
const ZERO_VECTOR = [
    0,
    0,
    0
];
const DEFAULT_DISTANCE_SCALES = {
    unitsPerMeter: [
        1,
        1,
        1
    ],
    metersPerUnit: [
        1,
        1,
        1
    ]
};
function createProjectionMatrix({ width, height, orthographic, fovyRadians, focalDistance, padding, near, far }) {
    const aspect = width / height;
    const matrix = orthographic ? new (0, _core.Matrix4)().orthographic({
        fovy: fovyRadians,
        aspect,
        focalDistance,
        near,
        far
    }) : new (0, _core.Matrix4)().perspective({
        fovy: fovyRadians,
        aspect,
        near,
        far
    });
    if (padding) {
        const { left = 0, right = 0, top = 0, bottom = 0 } = padding;
        const offsetX = (0, _core.clamp)((left + width - right) / 2, 0, width) - width / 2;
        const offsetY = (0, _core.clamp)((top + height - bottom) / 2, 0, height) - height / 2;
        matrix[8] -= offsetX * 2 / width;
        matrix[9] += offsetY * 2 / height;
    }
    return matrix;
}
class Viewport {
    constructor(opts = {}){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "x", void 0);
        (0, _definePropertyDefault.default)(this, "y", void 0);
        (0, _definePropertyDefault.default)(this, "width", void 0);
        (0, _definePropertyDefault.default)(this, "height", void 0);
        (0, _definePropertyDefault.default)(this, "padding", void 0);
        (0, _definePropertyDefault.default)(this, "isGeospatial", void 0);
        (0, _definePropertyDefault.default)(this, "zoom", void 0);
        (0, _definePropertyDefault.default)(this, "focalDistance", void 0);
        (0, _definePropertyDefault.default)(this, "position", void 0);
        (0, _definePropertyDefault.default)(this, "modelMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "distanceScales", void 0);
        (0, _definePropertyDefault.default)(this, "scale", void 0);
        (0, _definePropertyDefault.default)(this, "center", void 0);
        (0, _definePropertyDefault.default)(this, "cameraPosition", void 0);
        (0, _definePropertyDefault.default)(this, "projectionMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "viewMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "viewMatrixUncentered", void 0);
        (0, _definePropertyDefault.default)(this, "viewMatrixInverse", void 0);
        (0, _definePropertyDefault.default)(this, "viewProjectionMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "pixelProjectionMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "pixelUnprojectionMatrix", void 0);
        (0, _definePropertyDefault.default)(this, "resolution", void 0);
        (0, _definePropertyDefault.default)(this, "_frustumPlanes", {});
        this.id = opts.id || this.constructor.displayName || 'viewport';
        this.x = opts.x || 0;
        this.y = opts.y || 0;
        this.width = opts.width || 1;
        this.height = opts.height || 1;
        this.zoom = opts.zoom || 0;
        this.padding = opts.padding;
        this.distanceScales = opts.distanceScales || DEFAULT_DISTANCE_SCALES;
        this.focalDistance = opts.focalDistance || 1;
        this.position = opts.position || ZERO_VECTOR;
        this.modelMatrix = opts.modelMatrix || null;
        const { longitude, latitude } = opts;
        this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);
        this._initProps(opts);
        this._initMatrices(opts);
        this.equals = this.equals.bind(this);
        this.project = this.project.bind(this);
        this.unproject = this.unproject.bind(this);
        this.projectPosition = this.projectPosition.bind(this);
        this.unprojectPosition = this.unprojectPosition.bind(this);
        this.projectFlat = this.projectFlat.bind(this);
        this.unprojectFlat = this.unprojectFlat.bind(this);
    }
    get subViewports() {
        return null;
    }
    get metersPerPixel() {
        return this.distanceScales.metersPerUnit[2] / this.scale;
    }
    get projectionMode() {
        if (this.isGeospatial) return this.zoom < 12 ? (0, _constants.PROJECTION_MODE).WEB_MERCATOR : (0, _constants.PROJECTION_MODE).WEB_MERCATOR_AUTO_OFFSET;
        return (0, _constants.PROJECTION_MODE).IDENTITY;
    }
    equals(viewport) {
        if (!(viewport instanceof Viewport)) return false;
        if (this === viewport) return true;
        return viewport.width === this.width && viewport.height === this.height && viewport.scale === this.scale && (0, _core.equals)(viewport.projectionMatrix, this.projectionMatrix) && (0, _core.equals)(viewport.viewMatrix, this.viewMatrix);
    }
    project(xyz, { topLeft = true } = {}) {
        const worldPosition = this.projectPosition(xyz);
        const coord = (0, _webMercator.worldToPixels)(worldPosition, this.pixelProjectionMatrix);
        const [x, y] = coord;
        const y2 = topLeft ? y : this.height - y;
        return xyz.length === 2 ? [
            x,
            y2
        ] : [
            x,
            y2,
            coord[2]
        ];
    }
    unproject(xyz, { topLeft = true, targetZ } = {}) {
        const [x, y, z] = xyz;
        const y2 = topLeft ? y : this.height - y;
        const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];
        const coord = (0, _webMercator.pixelsToWorld)([
            x,
            y2,
            z
        ], this.pixelUnprojectionMatrix, targetZWorld);
        const [X, Y, Z] = this.unprojectPosition(coord);
        if (Number.isFinite(z)) return [
            X,
            Y,
            Z
        ];
        return Number.isFinite(targetZ) ? [
            X,
            Y,
            targetZ
        ] : [
            X,
            Y
        ];
    }
    projectPosition(xyz) {
        const [X, Y] = this.projectFlat(xyz);
        const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];
        return [
            X,
            Y,
            Z
        ];
    }
    unprojectPosition(xyz) {
        const [X, Y] = this.unprojectFlat(xyz);
        const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];
        return [
            X,
            Y,
            Z
        ];
    }
    projectFlat(xyz) {
        if (this.isGeospatial) {
            const result = (0, _webMercator.lngLatToWorld)(xyz);
            result[1] = (0, _core.clamp)(result[1], -318, 830);
            return result;
        }
        return xyz;
    }
    unprojectFlat(xyz) {
        if (this.isGeospatial) return (0, _webMercator.worldToLngLat)(xyz);
        return xyz;
    }
    getBounds(options = {}) {
        const unprojectOption = {
            targetZ: options.z || 0
        };
        const topLeft = this.unproject([
            0,
            0
        ], unprojectOption);
        const topRight = this.unproject([
            this.width,
            0
        ], unprojectOption);
        const bottomLeft = this.unproject([
            0,
            this.height
        ], unprojectOption);
        const bottomRight = this.unproject([
            this.width,
            this.height
        ], unprojectOption);
        return [
            Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
            Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),
            Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
            Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])
        ];
    }
    getDistanceScales(coordinateOrigin) {
        if (coordinateOrigin) return (0, _webMercator.getDistanceScales)({
            longitude: coordinateOrigin[0],
            latitude: coordinateOrigin[1],
            highPrecision: true
        });
        return this.distanceScales;
    }
    containsPixel({ x, y, width = 1, height = 1 }) {
        return x < this.x + this.width && this.x < x + width && y < this.y + this.height && this.y < y + height;
    }
    getFrustumPlanes() {
        if (this._frustumPlanes.near) return this._frustumPlanes;
        Object.assign(this._frustumPlanes, (0, _mathUtils.getFrustumPlanes)(this.viewProjectionMatrix));
        return this._frustumPlanes;
    }
    panByPosition(coords, pixel) {
        return null;
    }
    _initProps(opts) {
        const longitude = opts.longitude;
        const latitude = opts.latitude;
        if (this.isGeospatial) {
            if (!Number.isFinite(opts.zoom)) this.zoom = (0, _webMercator.getMeterZoom)({
                latitude
            }) + Math.log2(this.focalDistance);
            this.distanceScales = opts.distanceScales || (0, _webMercator.getDistanceScales)({
                latitude,
                longitude
            });
        }
        const scale = Math.pow(2, this.zoom);
        this.scale = scale;
        const { position, modelMatrix } = opts;
        let meterOffset = ZERO_VECTOR;
        if (position) meterOffset = modelMatrix ? new (0, _core.Matrix4)(modelMatrix).transformAsVector(position, []) : position;
        if (this.isGeospatial) {
            const center = this.projectPosition([
                longitude,
                latitude,
                0
            ]);
            this.center = new (0, _core.Vector3)(meterOffset).scale(this.distanceScales.unitsPerMeter).add(center);
        } else this.center = this.projectPosition(meterOffset);
    }
    _initMatrices(opts) {
        const { viewMatrix = IDENTITY, projectionMatrix = null, orthographic = false, fovyRadians, fovy = 75, near = 0.1, far = 1000, padding = null, focalDistance = 1 } = opts;
        this.viewMatrixUncentered = viewMatrix;
        this.viewMatrix = new (0, _core.Matrix4)().multiplyRight(viewMatrix).translate(new (0, _core.Vector3)(this.center).negate());
        this.projectionMatrix = projectionMatrix || createProjectionMatrix({
            width: this.width,
            height: this.height,
            orthographic,
            fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,
            focalDistance,
            padding,
            near,
            far
        });
        const vpm = (0, _mathUtils.createMat4)();
        _mat4.multiply(vpm, vpm, this.projectionMatrix);
        _mat4.multiply(vpm, vpm, this.viewMatrix);
        this.viewProjectionMatrix = vpm;
        this.viewMatrixInverse = _mat4.invert([], this.viewMatrix) || this.viewMatrix;
        this.cameraPosition = (0, _mathUtils.getCameraPosition)(this.viewMatrixInverse);
        const viewportMatrix = (0, _mathUtils.createMat4)();
        const pixelProjectionMatrix = (0, _mathUtils.createMat4)();
        _mat4.scale(viewportMatrix, viewportMatrix, [
            this.width / 2,
            -this.height / 2,
            1
        ]);
        _mat4.translate(viewportMatrix, viewportMatrix, [
            1,
            -1,
            0
        ]);
        _mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);
        this.pixelProjectionMatrix = pixelProjectionMatrix;
        this.pixelUnprojectionMatrix = _mat4.invert((0, _mathUtils.createMat4)(), this.pixelProjectionMatrix);
        if (!this.pixelUnprojectionMatrix) (0, _logDefault.default).warn('Pixel project matrix not invertible')();
    }
}
exports.default = Viewport;
(0, _definePropertyDefault.default)(Viewport, "displayName", 'Viewport');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../utils/log":"GqqVU","../utils/math-utils":"31KJo","@math.gl/core":"e2A67","gl-matrix/mat4":"bkNpn","@math.gl/web-mercator":"gDT8w","../lib/constants":"lSdwU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"31KJo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMat4", ()=>createMat4);
parcelHelpers.export(exports, "mod", ()=>mod);
parcelHelpers.export(exports, "getCameraPosition", ()=>getCameraPosition);
parcelHelpers.export(exports, "getFrustumPlanes", ()=>getFrustumPlanes);
parcelHelpers.export(exports, "fp64LowPart", ()=>fp64LowPart);
parcelHelpers.export(exports, "toDoublePrecisionArray", ()=>toDoublePrecisionArray);
parcelHelpers.export(exports, "mergeBounds", ()=>mergeBounds);
var _typedArrayManager = require("./typed-array-manager");
var _typedArrayManagerDefault = parcelHelpers.interopDefault(_typedArrayManager);
var _core = require("@math.gl/core");
function createMat4() {
    return [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
    ];
}
function mod(value, divisor) {
    const modulus = value % divisor;
    return modulus < 0 ? divisor + modulus : modulus;
}
function getCameraPosition(viewMatrixInverse) {
    return [
        viewMatrixInverse[12],
        viewMatrixInverse[13],
        viewMatrixInverse[14]
    ];
}
function getFrustumPlanes(viewProjectionMatrix) {
    return {
        left: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[0], viewProjectionMatrix[7] + viewProjectionMatrix[4], viewProjectionMatrix[11] + viewProjectionMatrix[8], viewProjectionMatrix[15] + viewProjectionMatrix[12]),
        right: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[0], viewProjectionMatrix[7] - viewProjectionMatrix[4], viewProjectionMatrix[11] - viewProjectionMatrix[8], viewProjectionMatrix[15] - viewProjectionMatrix[12]),
        bottom: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[1], viewProjectionMatrix[7] + viewProjectionMatrix[5], viewProjectionMatrix[11] + viewProjectionMatrix[9], viewProjectionMatrix[15] + viewProjectionMatrix[13]),
        top: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[1], viewProjectionMatrix[7] - viewProjectionMatrix[5], viewProjectionMatrix[11] - viewProjectionMatrix[9], viewProjectionMatrix[15] - viewProjectionMatrix[13]),
        near: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[2], viewProjectionMatrix[7] + viewProjectionMatrix[6], viewProjectionMatrix[11] + viewProjectionMatrix[10], viewProjectionMatrix[15] + viewProjectionMatrix[14]),
        far: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[2], viewProjectionMatrix[7] - viewProjectionMatrix[6], viewProjectionMatrix[11] - viewProjectionMatrix[10], viewProjectionMatrix[15] - viewProjectionMatrix[14])
    };
}
const scratchVector = new (0, _core.Vector3)();
function getFrustumPlane(a, b, c, d) {
    scratchVector.set(a, b, c);
    const L = scratchVector.len();
    return {
        distance: d / L,
        normal: new (0, _core.Vector3)(-a / L, -b / L, -c / L)
    };
}
function fp64LowPart(x) {
    return x - Math.fround(x);
}
let scratchArray;
function toDoublePrecisionArray(typedArray, options) {
    const { size = 1, startIndex = 0 } = options;
    const endIndex = options.endIndex !== undefined ? options.endIndex : typedArray.length;
    const count = (endIndex - startIndex) / size;
    scratchArray = (0, _typedArrayManagerDefault.default).allocate(scratchArray, count, {
        type: Float32Array,
        size: size * 2
    });
    let sourceIndex = startIndex;
    let targetIndex = 0;
    while(sourceIndex < endIndex){
        for(let j = 0; j < size; j++){
            const value = typedArray[sourceIndex++];
            scratchArray[targetIndex + j] = value;
            scratchArray[targetIndex + j + size] = fp64LowPart(value);
        }
        targetIndex += size * 2;
    }
    return scratchArray.subarray(0, count * size * 2);
}
function mergeBounds(boundsList) {
    let mergedBounds = null;
    let isMerged = false;
    for (const bounds of boundsList){
        if (!bounds) continue;
        if (!mergedBounds) mergedBounds = bounds;
        else {
            if (!isMerged) {
                mergedBounds = [
                    [
                        mergedBounds[0][0],
                        mergedBounds[0][1]
                    ],
                    [
                        mergedBounds[1][0],
                        mergedBounds[1][1]
                    ]
                ];
                isMerged = true;
            }
            mergedBounds[0][0] = Math.min(mergedBounds[0][0], bounds[0][0]);
            mergedBounds[0][1] = Math.min(mergedBounds[0][1], bounds[0][1]);
            mergedBounds[1][0] = Math.max(mergedBounds[1][0], bounds[1][0]);
            mergedBounds[1][1] = Math.max(mergedBounds[1][1], bounds[1][1]);
        }
    }
    return mergedBounds;
}

},{"./typed-array-manager":"1iupO","@math.gl/core":"e2A67","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1iupO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypedArrayManager", ()=>TypedArrayManager);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
class TypedArrayManager {
    constructor(options = {}){
        (0, _definePropertyDefault.default)(this, "_pool", []);
        (0, _definePropertyDefault.default)(this, "opts", {
            overAlloc: 2,
            poolSize: 100
        });
        this.setOptions(options);
    }
    setOptions(options) {
        Object.assign(this.opts, options);
    }
    allocate(typedArray, count, { size = 1, type, padding = 0, copy = false, initialize = false, maxCount }) {
        const Type = type || typedArray && typedArray.constructor || Float32Array;
        const newSize = count * size + padding;
        if (ArrayBuffer.isView(typedArray)) {
            if (newSize <= typedArray.length) return typedArray;
            if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) return new Type(typedArray.buffer, 0, newSize);
        }
        let maxSize = Infinity;
        if (maxCount) maxSize = maxCount * size + padding;
        const newArray = this._allocate(Type, newSize, initialize, maxSize);
        if (typedArray && copy) newArray.set(typedArray);
        else if (!initialize) newArray.fill(0, 0, 4);
        this._release(typedArray);
        return newArray;
    }
    release(typedArray) {
        this._release(typedArray);
    }
    _allocate(Type, size, initialize, maxSize) {
        let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);
        if (sizeToAllocate > maxSize) sizeToAllocate = maxSize;
        const pool = this._pool;
        const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;
        const i = pool.findIndex((b)=>b.byteLength >= byteLength);
        if (i >= 0) {
            const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);
            if (initialize) array.fill(0);
            return array;
        }
        return new Type(sizeToAllocate);
    }
    _release(typedArray) {
        if (!ArrayBuffer.isView(typedArray)) return;
        const pool = this._pool;
        const { buffer } = typedArray;
        const { byteLength } = buffer;
        const i = pool.findIndex((b)=>b.byteLength >= byteLength);
        if (i < 0) pool.push(buffer);
        else if (i > 0 || pool.length < this.opts.poolSize) pool.splice(i, 0, buffer);
        if (pool.length > this.opts.poolSize) pool.shift();
    }
}
exports.default = new TypedArrayManager();

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gcBB9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createProgramManager", ()=>createProgramManager);
parcelHelpers.export(exports, "picking", ()=>(0, _pickingDefault.default));
parcelHelpers.export(exports, "project", ()=>(0, _projectDefault.default));
parcelHelpers.export(exports, "project32", ()=>(0, _project32Default.default));
parcelHelpers.export(exports, "gouraudLighting", ()=>(0, _core.gouraudLighting));
parcelHelpers.export(exports, "phongLighting", ()=>(0, _core.phongLighting));
parcelHelpers.export(exports, "shadow", ()=>(0, _shadowDefault.default));
var _core = require("@luma.gl/core");
var _project = require("./project/project");
var _projectDefault = parcelHelpers.interopDefault(_project);
var _project32 = require("./project32/project32");
var _project32Default = parcelHelpers.interopDefault(_project32);
var _shadow = require("./shadow/shadow");
var _shadowDefault = parcelHelpers.interopDefault(_shadow);
var _picking = require("./picking/picking");
var _pickingDefault = parcelHelpers.interopDefault(_picking);
const DEFAULT_MODULES = [
    (0, _projectDefault.default)
];
const SHADER_HOOKS = [
    'vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)',
    'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)',
    'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)',
    'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'
];
function createProgramManager(gl) {
    const programManager = (0, _core.ProgramManager).getDefaultProgramManager(gl);
    for (const shaderModule of DEFAULT_MODULES)programManager.addDefaultModule(shaderModule);
    for (const shaderHook of SHADER_HOOKS)programManager.addShaderHook(shaderHook);
    return programManager;
}

},{"@luma.gl/core":"9rnrC","./project/project":"637To","./project32/project32":"g7gRS","./shadow/shadow":false,"./picking/picking":"c561i","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"g7gRS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _project = require("../project/project");
var _projectDefault = parcelHelpers.interopDefault(_project);
const vs = "\nvec4 project_position_to_clipspace(\n  vec3 position, vec3 position64Low, vec3 offset, out vec4 commonPosition\n) {\n  vec3 projectedPosition = project_position(position, position64Low);\n  mat3 rotation;\n  if (project_needs_rotation(projectedPosition, rotation)) {\n    // offset is specified as ENU\n    // when in globe projection, rotate offset so that the ground alighs with the surface of the globe\n    offset = rotation * offset;\n  }\n  commonPosition = vec4(projectedPosition + offset, 1.0);\n  return project_common_position_to_clipspace(commonPosition);\n}\n\nvec4 project_position_to_clipspace(\n  vec3 position, vec3 position64Low, vec3 offset\n) {\n  vec4 commonPosition;\n  return project_position_to_clipspace(position, position64Low, offset, commonPosition);\n}\n";
exports.default = {
    name: 'project32',
    dependencies: [
        (0, _projectDefault.default)
    ],
    vs
};

},{"../project/project":"637To","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"c561i":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _core = require("@luma.gl/core");
exports.default = {
    inject: {
        'vs:DECKGL_FILTER_GL_POSITION': "\n    // for picking depth values\n    picking_setPickingAttribute(position.z / position.w);\n  ",
        'vs:DECKGL_FILTER_COLOR': "\n  picking_setPickingColor(geometry.pickingColor);\n  ",
        'fs:#decl': "\nuniform bool picking_uAttribute;\n  ",
        'fs:DECKGL_FILTER_COLOR': {
            order: 99,
            injection: "\n  // use highlight color if this fragment belongs to the selected object.\n  color = picking_filterHighlightColor(color);\n\n  // use picking color if rendering to picking FBO.\n  color = picking_filterPickingColor(color);\n    "
        }
    },
    ...(0, _core.picking)
};

},{"@luma.gl/core":"9rnrC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jTfdV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _deepEqual = require("../utils/deep-equal");
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _flatten = require("../utils/flatten");
class ViewManager {
    constructor(props){
        (0, _definePropertyDefault.default)(this, "width", void 0);
        (0, _definePropertyDefault.default)(this, "height", void 0);
        (0, _definePropertyDefault.default)(this, "views", void 0);
        (0, _definePropertyDefault.default)(this, "viewState", void 0);
        (0, _definePropertyDefault.default)(this, "controllers", void 0);
        (0, _definePropertyDefault.default)(this, "timeline", void 0);
        (0, _definePropertyDefault.default)(this, "_viewports", void 0);
        (0, _definePropertyDefault.default)(this, "_viewportMap", void 0);
        (0, _definePropertyDefault.default)(this, "_isUpdating", void 0);
        (0, _definePropertyDefault.default)(this, "_needsRedraw", void 0);
        (0, _definePropertyDefault.default)(this, "_needsUpdate", void 0);
        (0, _definePropertyDefault.default)(this, "_eventManager", void 0);
        (0, _definePropertyDefault.default)(this, "_eventCallbacks", void 0);
        this.views = [];
        this.width = 100;
        this.height = 100;
        this.viewState = {};
        this.controllers = {};
        this.timeline = props.timeline;
        this._viewports = [];
        this._viewportMap = {};
        this._isUpdating = false;
        this._needsRedraw = 'First render';
        this._needsUpdate = 'Initialize';
        this._eventManager = props.eventManager;
        this._eventCallbacks = {
            onViewStateChange: props.onViewStateChange,
            onInteractionStateChange: props.onInteractionStateChange
        };
        Object.seal(this);
        this.setProps(props);
    }
    finalize() {
        for(const key in this.controllers){
            const controller = this.controllers[key];
            if (controller) controller.finalize();
        }
        this.controllers = {};
    }
    needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) this._needsRedraw = false;
        return redraw;
    }
    setNeedsUpdate(reason) {
        this._needsUpdate = this._needsUpdate || reason;
        this._needsRedraw = this._needsRedraw || reason;
    }
    updateViewStates() {
        for(const viewId in this.controllers){
            const controller = this.controllers[viewId];
            if (controller) controller.updateTransition();
        }
    }
    getViewports(rect) {
        if (rect) return this._viewports.filter((viewport)=>viewport.containsPixel(rect));
        return this._viewports;
    }
    getViews() {
        const viewMap = {};
        this.views.forEach((view)=>{
            viewMap[view.id] = view;
        });
        return viewMap;
    }
    getView(viewId) {
        return this.views.find((view)=>view.id === viewId);
    }
    getViewState(viewOrViewId) {
        const view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;
        const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;
        return view ? view.filterViewState(viewState) : viewState;
    }
    getViewport(viewId) {
        return this._viewportMap[viewId];
    }
    unproject(xyz, opts) {
        const viewports = this.getViewports();
        const pixel = {
            x: xyz[0],
            y: xyz[1]
        };
        for(let i = viewports.length - 1; i >= 0; --i){
            const viewport = viewports[i];
            if (viewport.containsPixel(pixel)) {
                const p = xyz.slice();
                p[0] -= viewport.x;
                p[1] -= viewport.y;
                return viewport.unproject(p, opts);
            }
        }
        return null;
    }
    setProps(props) {
        if (props.views) this._setViews(props.views);
        if (props.viewState) this._setViewState(props.viewState);
        if ('width' in props || 'height' in props) this._setSize(props.width, props.height);
        if (!this._isUpdating) this._update();
    }
    _update() {
        this._isUpdating = true;
        if (this._needsUpdate) {
            this._needsUpdate = false;
            this._rebuildViewports();
        }
        if (this._needsUpdate) {
            this._needsUpdate = false;
            this._rebuildViewports();
        }
        this._isUpdating = false;
    }
    _setSize(width, height) {
        if (width !== this.width || height !== this.height) {
            this.width = width;
            this.height = height;
            this.setNeedsUpdate('Size changed');
        }
    }
    _setViews(views) {
        views = (0, _flatten.flatten)(views, Boolean);
        const viewsChanged = this._diffViews(views, this.views);
        if (viewsChanged) this.setNeedsUpdate('views changed');
        this.views = views;
    }
    _setViewState(viewState) {
        if (viewState) {
            const viewStateChanged = !(0, _deepEqual.deepEqual)(viewState, this.viewState, 3);
            if (viewStateChanged) this.setNeedsUpdate('viewState changed');
            this.viewState = viewState;
        } else (0, _logDefault.default).warn('missing `viewState` or `initialViewState`')();
    }
    _onViewStateChange(viewId, event) {
        if (this._eventCallbacks.onViewStateChange) this._eventCallbacks.onViewStateChange({
            ...event,
            viewId
        });
    }
    _createController(view, props) {
        const Controller = props.type;
        const controller = new Controller({
            timeline: this.timeline,
            eventManager: this._eventManager,
            onViewStateChange: this._onViewStateChange.bind(this, props.id),
            onStateChange: this._eventCallbacks.onInteractionStateChange,
            makeViewport: (viewState)=>{
                var _this$getView;
                return (_this$getView = this.getView(view.id)) === null || _this$getView === void 0 ? void 0 : _this$getView.makeViewport({
                    viewState,
                    width: this.width,
                    height: this.height
                });
            }
        });
        return controller;
    }
    _updateController(view, viewState, viewport, controller) {
        const controllerProps = view.controller;
        if (controllerProps && viewport) {
            const resolvedProps = {
                ...viewState,
                ...controllerProps,
                id: view.id,
                x: viewport.x,
                y: viewport.y,
                width: viewport.width,
                height: viewport.height
            };
            if (!controller || controller.constructor !== controllerProps.type) controller = this._createController(view, resolvedProps);
            if (controller) controller.setProps(resolvedProps);
            return controller;
        }
        return null;
    }
    _rebuildViewports() {
        const { views } = this;
        const oldControllers = this.controllers;
        this._viewports = [];
        this.controllers = {};
        let invalidateControllers = false;
        for(let i = views.length; i--;){
            const view = views[i];
            const viewState = this.getViewState(view);
            const viewport = view.makeViewport({
                viewState,
                width: this.width,
                height: this.height
            });
            let oldController = oldControllers[view.id];
            const hasController = Boolean(view.controller);
            if (hasController && !oldController) invalidateControllers = true;
            if ((invalidateControllers || !hasController) && oldController) {
                oldController.finalize();
                oldController = null;
            }
            this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);
            if (viewport) this._viewports.unshift(viewport);
        }
        for(const id in oldControllers){
            const oldController = oldControllers[id];
            if (oldController && !this.controllers[id]) oldController.finalize();
        }
        this._buildViewportMap();
    }
    _buildViewportMap() {
        this._viewportMap = {};
        this._viewports.forEach((viewport)=>{
            if (viewport.id) this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;
        });
    }
    _diffViews(newViews, oldViews) {
        if (newViews.length !== oldViews.length) return true;
        return newViews.some((_, i)=>!newViews[i].equals(oldViews[i]));
    }
}
exports.default = ViewManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../utils/deep-equal":"5Dkfj","../utils/log":"GqqVU","../utils/flatten":"cUPbX","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5Dkfj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deepEqual", ()=>deepEqual);
function deepEqual(a, b, depth) {
    if (a === b) return true;
    if (!depth || !a || !b) return false;
    if (Array.isArray(a)) {
        if (!Array.isArray(b) || a.length !== b.length) return false;
        for(let i = 0; i < a.length; i++){
            if (!deepEqual(a[i], b[i], depth - 1)) return false;
        }
        return true;
    }
    if (Array.isArray(b)) return false;
    if (typeof a === 'object' && typeof b === 'object') {
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) return false;
        for (const key of aKeys){
            if (!b.hasOwnProperty(key)) return false;
            if (!deepEqual(a[key], b[key], depth - 1)) return false;
        }
        return true;
    }
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7jplJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _view = require("./view");
var _viewDefault = parcelHelpers.interopDefault(_view);
var _webMercatorViewport = require("../viewports/web-mercator-viewport");
var _webMercatorViewportDefault = parcelHelpers.interopDefault(_webMercatorViewport);
var _mapController = require("../controllers/map-controller");
var _mapControllerDefault = parcelHelpers.interopDefault(_mapController);
class MapView extends (0, _viewDefault.default) {
    get ViewportType() {
        return 0, _webMercatorViewportDefault.default;
    }
    get ControllerType() {
        return 0, _mapControllerDefault.default;
    }
}
exports.default = MapView;
(0, _definePropertyDefault.default)(MapView, "displayName", 'MapView');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./view":"8zBpj","../viewports/web-mercator-viewport":"4S6HA","../controllers/map-controller":"hdeW7","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8zBpj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _viewport = require("../viewports/viewport");
var _viewportDefault = parcelHelpers.interopDefault(_viewport);
var _positions = require("../utils/positions");
var _deepEqual = require("../utils/deep-equal");
var _assert = require("../utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
class View {
    constructor(props){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "viewportInstance", void 0);
        (0, _definePropertyDefault.default)(this, "_x", void 0);
        (0, _definePropertyDefault.default)(this, "_y", void 0);
        (0, _definePropertyDefault.default)(this, "_width", void 0);
        (0, _definePropertyDefault.default)(this, "_height", void 0);
        (0, _definePropertyDefault.default)(this, "_padding", void 0);
        (0, _definePropertyDefault.default)(this, "props", void 0);
        const { id, x = 0, y = 0, width = '100%', height = '100%', padding = null, viewportInstance } = props || {};
        (0, _assertDefault.default)(!viewportInstance || viewportInstance instanceof (0, _viewportDefault.default));
        this.viewportInstance = viewportInstance;
        this.id = id || this.constructor.displayName || 'view';
        this.props = {
            ...props,
            id: this.id
        };
        this._x = (0, _positions.parsePosition)(x);
        this._y = (0, _positions.parsePosition)(y);
        this._width = (0, _positions.parsePosition)(width);
        this._height = (0, _positions.parsePosition)(height);
        this._padding = padding && {
            left: (0, _positions.parsePosition)(padding.left || 0),
            right: (0, _positions.parsePosition)(padding.right || 0),
            top: (0, _positions.parsePosition)(padding.top || 0),
            bottom: (0, _positions.parsePosition)(padding.bottom || 0)
        };
        this.equals = this.equals.bind(this);
        Object.seal(this);
    }
    equals(view) {
        if (this === view) return true;
        if (this.viewportInstance) return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;
        return this.ViewportType === view.ViewportType && (0, _deepEqual.deepEqual)(this.props, view.props, 2);
    }
    makeViewport({ width, height, viewState }) {
        if (this.viewportInstance) return this.viewportInstance;
        viewState = this.filterViewState(viewState);
        const viewportDimensions = this.getDimensions({
            width,
            height
        });
        if (!viewportDimensions.height || !viewportDimensions.width) return null;
        return new this.ViewportType({
            ...viewState,
            ...this.props,
            ...viewportDimensions
        });
    }
    getViewStateId() {
        const { viewState } = this.props;
        if (typeof viewState === 'string') return viewState;
        return (viewState === null || viewState === void 0 ? void 0 : viewState.id) || this.id;
    }
    filterViewState(viewState) {
        if (this.props.viewState && typeof this.props.viewState === 'object') {
            if (!this.props.viewState.id) return this.props.viewState;
            const newViewState = {
                ...viewState
            };
            for(const key in this.props.viewState)if (key !== 'id') newViewState[key] = this.props.viewState[key];
            return newViewState;
        }
        return viewState;
    }
    getDimensions({ width, height }) {
        const dimensions = {
            x: (0, _positions.getPosition)(this._x, width),
            y: (0, _positions.getPosition)(this._y, height),
            width: (0, _positions.getPosition)(this._width, width),
            height: (0, _positions.getPosition)(this._height, height)
        };
        if (this._padding) dimensions.padding = {
            left: (0, _positions.getPosition)(this._padding.left, width),
            top: (0, _positions.getPosition)(this._padding.top, height),
            right: (0, _positions.getPosition)(this._padding.right, width),
            bottom: (0, _positions.getPosition)(this._padding.bottom, height)
        };
        return dimensions;
    }
    get controller() {
        const opts = this.props.controller;
        if (!opts) return null;
        if (opts === true) return {
            type: this.ControllerType
        };
        if (typeof opts === 'function') return {
            type: opts
        };
        return {
            type: this.ControllerType,
            ...opts
        };
    }
}
exports.default = View;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../viewports/viewport":"aU7ZS","../utils/positions":"dUoK8","../utils/deep-equal":"5Dkfj","../utils/assert":"8E3uE","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dUoK8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parsePosition", ()=>parsePosition);
parcelHelpers.export(exports, "getPosition", ()=>getPosition);
const PERCENT_OR_PIXELS_REGEX = /([0-9]+\.?[0-9]*)(%|px)/;
function parsePosition(value) {
    switch(typeof value){
        case 'number':
            return {
                position: value,
                relative: false
            };
        case 'string':
            const match = PERCENT_OR_PIXELS_REGEX.exec(value);
            if (match && match.length >= 3) {
                const relative = match[2] === '%';
                const position = parseFloat(match[1]);
                return {
                    position: relative ? position / 100 : position,
                    relative
                };
            }
        default:
            throw new Error("Could not parse position string ".concat(value));
    }
}
function getPosition(position, extent) {
    return position.relative ? Math.round(position.position * extent) : position.position;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8E3uE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message || 'deck.gl: assertion failed.');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4S6HA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _viewport = require("./viewport");
var _viewportDefault = parcelHelpers.interopDefault(_viewport);
var _webMercator = require("@math.gl/web-mercator");
var _vec2 = require("gl-matrix/vec2");
var _core = require("@math.gl/core");
class WebMercatorViewport extends (0, _viewportDefault.default) {
    constructor(opts = {}){
        const { latitude = 0, longitude = 0, zoom = 0, pitch = 0, bearing = 0, nearZMultiplier = 0.1, farZMultiplier = 1.01, nearZ, farZ, orthographic = false, projectionMatrix, repeat = false, worldOffset = 0, position, padding, legacyMeterSizes = false } = opts;
        let { width, height, altitude = 1.5 } = opts;
        const scale = Math.pow(2, zoom);
        width = width || 1;
        height = height || 1;
        let fovy;
        let projectionParameters = null;
        if (projectionMatrix) {
            altitude = projectionMatrix[5] / 2;
            fovy = (0, _webMercator.altitudeToFovy)(altitude);
        } else {
            if (opts.fovy) {
                fovy = opts.fovy;
                altitude = (0, _webMercator.fovyToAltitude)(fovy);
            } else fovy = (0, _webMercator.altitudeToFovy)(altitude);
            let offset;
            if (padding) {
                const { top = 0, bottom = 0 } = padding;
                offset = [
                    0,
                    (0, _core.clamp)((top + height - bottom) / 2, 0, height) - height / 2
                ];
            }
            projectionParameters = (0, _webMercator.getProjectionParameters)({
                width,
                height,
                scale,
                center: position && [
                    0,
                    0,
                    position[2] * (0, _webMercator.unitsPerMeter)(latitude)
                ],
                offset,
                pitch,
                fovy,
                nearZMultiplier,
                farZMultiplier
            });
            if (Number.isFinite(nearZ)) projectionParameters.near = nearZ;
            if (Number.isFinite(farZ)) projectionParameters.far = farZ;
        }
        let viewMatrixUncentered = (0, _webMercator.getViewMatrix)({
            height,
            pitch,
            bearing,
            scale,
            altitude
        });
        if (worldOffset) {
            const viewOffset = new (0, _core.Matrix4)().translate([
                512 * worldOffset,
                0,
                0
            ]);
            viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);
        }
        super({
            ...opts,
            width,
            height,
            viewMatrix: viewMatrixUncentered,
            longitude,
            latitude,
            zoom,
            ...projectionParameters,
            fovy,
            focalDistance: altitude
        });
        (0, _definePropertyDefault.default)(this, "longitude", void 0);
        (0, _definePropertyDefault.default)(this, "latitude", void 0);
        (0, _definePropertyDefault.default)(this, "pitch", void 0);
        (0, _definePropertyDefault.default)(this, "bearing", void 0);
        (0, _definePropertyDefault.default)(this, "altitude", void 0);
        (0, _definePropertyDefault.default)(this, "fovy", void 0);
        (0, _definePropertyDefault.default)(this, "orthographic", void 0);
        (0, _definePropertyDefault.default)(this, "_subViewports", void 0);
        (0, _definePropertyDefault.default)(this, "_pseudoMeters", void 0);
        this.latitude = latitude;
        this.longitude = longitude;
        this.zoom = zoom;
        this.pitch = pitch;
        this.bearing = bearing;
        this.altitude = altitude;
        this.fovy = fovy;
        this.orthographic = orthographic;
        this._subViewports = repeat ? [] : null;
        this._pseudoMeters = legacyMeterSizes;
        Object.freeze(this);
    }
    get subViewports() {
        if (this._subViewports && !this._subViewports.length) {
            const bounds = this.getBounds();
            const minOffset = Math.floor((bounds[0] + 180) / 360);
            const maxOffset = Math.ceil((bounds[2] - 180) / 360);
            for(let x = minOffset; x <= maxOffset; x++){
                const offsetViewport = x ? new WebMercatorViewport({
                    ...this,
                    worldOffset: x
                }) : this;
                this._subViewports.push(offsetViewport);
            }
        }
        return this._subViewports;
    }
    projectPosition(xyz) {
        if (this._pseudoMeters) return super.projectPosition(xyz);
        const [X, Y] = this.projectFlat(xyz);
        const Z = (xyz[2] || 0) * (0, _webMercator.unitsPerMeter)(xyz[1]);
        return [
            X,
            Y,
            Z
        ];
    }
    unprojectPosition(xyz) {
        if (this._pseudoMeters) return super.unprojectPosition(xyz);
        const [X, Y] = this.unprojectFlat(xyz);
        const Z = (xyz[2] || 0) / (0, _webMercator.unitsPerMeter)(Y);
        return [
            X,
            Y,
            Z
        ];
    }
    addMetersToLngLat(lngLatZ, xyz) {
        return (0, _webMercator.addMetersToLngLat)(lngLatZ, xyz);
    }
    panByPosition(coords, pixel) {
        const fromLocation = (0, _webMercator.pixelsToWorld)(pixel, this.pixelUnprojectionMatrix);
        const toLocation = this.projectFlat(coords);
        const translate = _vec2.add([], toLocation, _vec2.negate([], fromLocation));
        const newCenter = _vec2.add([], this.center, translate);
        const [longitude, latitude] = this.unprojectFlat(newCenter);
        return {
            longitude,
            latitude
        };
    }
    getBounds(options = {}) {
        const corners = (0, _webMercator.getBounds)(this, options.z || 0);
        return [
            Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
            Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),
            Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
            Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])
        ];
    }
    fitBounds(bounds, options = {}) {
        const { width, height } = this;
        const { longitude, latitude, zoom } = (0, _webMercator.fitBounds)({
            width,
            height,
            bounds,
            ...options
        });
        return new WebMercatorViewport({
            width,
            height,
            longitude,
            latitude,
            zoom
        });
    }
}
exports.default = WebMercatorViewport;
(0, _definePropertyDefault.default)(WebMercatorViewport, "displayName", 'WebMercatorViewport');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./viewport":"aU7ZS","@math.gl/web-mercator":"gDT8w","gl-matrix/vec2":"yiZrJ","@math.gl/core":"e2A67","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hdeW7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MapState", ()=>MapState);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@math.gl/core");
var _controller = require("./controller");
var _controllerDefault = parcelHelpers.interopDefault(_controller);
var _viewState = require("./view-state");
var _viewStateDefault = parcelHelpers.interopDefault(_viewState);
var _webMercator = require("@math.gl/web-mercator");
var _assert = require("../utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _linearInterpolator = require("../transitions/linear-interpolator");
var _linearInterpolatorDefault = parcelHelpers.interopDefault(_linearInterpolator);
const PITCH_MOUSE_THRESHOLD = 5;
const PITCH_ACCEL = 1.2;
class MapState extends (0, _viewStateDefault.default) {
    constructor(options){
        const { width, height, latitude, longitude, zoom, bearing = 0, pitch = 0, altitude = 1.5, position = [
            0,
            0,
            0
        ], maxZoom = 20, minZoom = 0, maxPitch = 60, minPitch = 0, startPanLngLat, startZoomLngLat, startRotatePos, startBearing, startPitch, startZoom, normalize = true } = options;
        (0, _assertDefault.default)(Number.isFinite(longitude));
        (0, _assertDefault.default)(Number.isFinite(latitude));
        (0, _assertDefault.default)(Number.isFinite(zoom));
        super({
            width,
            height,
            latitude,
            longitude,
            zoom,
            bearing,
            pitch,
            altitude,
            maxZoom,
            minZoom,
            maxPitch,
            minPitch,
            normalize,
            position
        }, {
            startPanLngLat,
            startZoomLngLat,
            startRotatePos,
            startBearing,
            startPitch,
            startZoom
        });
        (0, _definePropertyDefault.default)(this, "makeViewport", void 0);
        this.makeViewport = options.makeViewport;
    }
    panStart({ pos }) {
        return this._getUpdatedState({
            startPanLngLat: this._unproject(pos)
        });
    }
    pan({ pos, startPos }) {
        const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);
        if (!startPanLngLat) return this;
        const viewport = this.makeViewport(this.getViewportProps());
        const newProps = viewport.panByPosition(startPanLngLat, pos);
        return this._getUpdatedState(newProps);
    }
    panEnd() {
        return this._getUpdatedState({
            startPanLngLat: null
        });
    }
    rotateStart({ pos }) {
        return this._getUpdatedState({
            startRotatePos: pos,
            startBearing: this.getViewportProps().bearing,
            startPitch: this.getViewportProps().pitch
        });
    }
    rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {
        const { startRotatePos, startBearing, startPitch } = this.getState();
        if (!startRotatePos || startBearing === undefined || startPitch === undefined) return this;
        let newRotation;
        if (pos) newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);
        else newRotation = {
            bearing: startBearing + deltaAngleX,
            pitch: startPitch + deltaAngleY
        };
        return this._getUpdatedState(newRotation);
    }
    rotateEnd() {
        return this._getUpdatedState({
            startBearing: null,
            startPitch: null
        });
    }
    zoomStart({ pos }) {
        return this._getUpdatedState({
            startZoomLngLat: this._unproject(pos),
            startZoom: this.getViewportProps().zoom
        });
    }
    zoom({ pos, startPos, scale }) {
        let { startZoom, startZoomLngLat } = this.getState();
        if (!startZoomLngLat) {
            startZoom = this.getViewportProps().zoom;
            startZoomLngLat = this._unproject(startPos) || this._unproject(pos);
        }
        if (!startZoomLngLat) return this;
        const { maxZoom, minZoom } = this.getViewportProps();
        let zoom = startZoom + Math.log2(scale);
        zoom = (0, _core.clamp)(zoom, minZoom, maxZoom);
        const zoomedViewport = this.makeViewport({
            ...this.getViewportProps(),
            zoom
        });
        return this._getUpdatedState({
            zoom,
            ...zoomedViewport.panByPosition(startZoomLngLat, pos)
        });
    }
    zoomEnd() {
        return this._getUpdatedState({
            startZoomLngLat: null,
            startZoom: null
        });
    }
    zoomIn(speed = 2) {
        return this._zoomFromCenter(speed);
    }
    zoomOut(speed = 2) {
        return this._zoomFromCenter(1 / speed);
    }
    moveLeft(speed = 100) {
        return this._panFromCenter([
            speed,
            0
        ]);
    }
    moveRight(speed = 100) {
        return this._panFromCenter([
            -speed,
            0
        ]);
    }
    moveUp(speed = 100) {
        return this._panFromCenter([
            0,
            speed
        ]);
    }
    moveDown(speed = 100) {
        return this._panFromCenter([
            0,
            -speed
        ]);
    }
    rotateLeft(speed = 15) {
        return this._getUpdatedState({
            bearing: this.getViewportProps().bearing - speed
        });
    }
    rotateRight(speed = 15) {
        return this._getUpdatedState({
            bearing: this.getViewportProps().bearing + speed
        });
    }
    rotateUp(speed = 10) {
        return this._getUpdatedState({
            pitch: this.getViewportProps().pitch + speed
        });
    }
    rotateDown(speed = 10) {
        return this._getUpdatedState({
            pitch: this.getViewportProps().pitch - speed
        });
    }
    shortestPathFrom(viewState) {
        const fromProps = viewState.getViewportProps();
        const props = {
            ...this.getViewportProps()
        };
        const { bearing, longitude } = props;
        if (Math.abs(bearing - fromProps.bearing) > 180) props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
        if (Math.abs(longitude - fromProps.longitude) > 180) props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
        return props;
    }
    applyConstraints(props) {
        const { maxZoom, minZoom, zoom } = props;
        props.zoom = (0, _core.clamp)(zoom, minZoom, maxZoom);
        const { maxPitch, minPitch, pitch } = props;
        props.pitch = (0, _core.clamp)(pitch, minPitch, maxPitch);
        const { normalize = true } = props;
        if (normalize) Object.assign(props, (0, _webMercator.normalizeViewportProps)(props));
        return props;
    }
    _zoomFromCenter(scale) {
        const { width, height } = this.getViewportProps();
        return this.zoom({
            pos: [
                width / 2,
                height / 2
            ],
            scale
        });
    }
    _panFromCenter(offset) {
        const { width, height } = this.getViewportProps();
        return this.pan({
            startPos: [
                width / 2,
                height / 2
            ],
            pos: [
                width / 2 + offset[0],
                height / 2 + offset[1]
            ]
        });
    }
    _getUpdatedState(newProps) {
        return new this.constructor({
            makeViewport: this.makeViewport,
            ...this.getViewportProps(),
            ...this.getState(),
            ...newProps
        });
    }
    _unproject(pos) {
        const viewport = this.makeViewport(this.getViewportProps());
        return pos && viewport.unproject(pos);
    }
    _getNewRotation(pos, startPos, startPitch, startBearing) {
        const deltaX = pos[0] - startPos[0];
        const deltaY = pos[1] - startPos[1];
        const centerY = pos[1];
        const startY = startPos[1];
        const { width, height } = this.getViewportProps();
        const deltaScaleX = deltaX / width;
        let deltaScaleY = 0;
        if (deltaY > 0) {
            if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;
        } else if (deltaY < 0) {
            if (startY > PITCH_MOUSE_THRESHOLD) deltaScaleY = 1 - centerY / startY;
        }
        deltaScaleY = (0, _core.clamp)(deltaScaleY, -1, 1);
        const { minPitch, maxPitch } = this.getViewportProps();
        const bearing = startBearing + 180 * deltaScaleX;
        let pitch = startPitch;
        if (deltaScaleY > 0) pitch = startPitch + deltaScaleY * (maxPitch - startPitch);
        else if (deltaScaleY < 0) pitch = startPitch - deltaScaleY * (minPitch - startPitch);
        return {
            pitch,
            bearing
        };
    }
}
class MapController extends (0, _controllerDefault.default) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "ControllerState", MapState);
        (0, _definePropertyDefault.default)(this, "transition", {
            transitionDuration: 300,
            transitionInterpolator: new (0, _linearInterpolatorDefault.default)({
                transitionProps: {
                    compare: [
                        'longitude',
                        'latitude',
                        'zoom',
                        'bearing',
                        'pitch',
                        'position'
                    ],
                    required: [
                        'longitude',
                        'latitude',
                        'zoom'
                    ]
                }
            })
        });
        (0, _definePropertyDefault.default)(this, "dragMode", 'pan');
    }
    setProps(props) {
        props.position = props.position || [
            0,
            0,
            0
        ];
        const oldProps = this.props;
        super.setProps(props);
        const dimensionChanged = !oldProps || oldProps.height !== props.height;
        if (dimensionChanged) this.updateViewport(new this.ControllerState({
            makeViewport: this.makeViewport,
            ...props,
            ...this.state
        }));
    }
}
exports.default = MapController;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@math.gl/core":"e2A67","./controller":"iIXFE","./view-state":"fJoyZ","@math.gl/web-mercator":"gDT8w","../utils/assert":"8E3uE","../transitions/linear-interpolator":"rV9c4","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iIXFE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _transitionManager = require("./transition-manager");
var _transitionManagerDefault = parcelHelpers.interopDefault(_transitionManager);
var _linearInterpolator = require("../transitions/linear-interpolator");
var _linearInterpolatorDefault = parcelHelpers.interopDefault(_linearInterpolator);
const NO_TRANSITION_PROPS = {
    transitionDuration: 0
};
const DEFAULT_INERTIA = 300;
const INERTIA_EASING = (t)=>1 - (1 - t) * (1 - t);
const EVENT_TYPES = {
    WHEEL: [
        'wheel'
    ],
    PAN: [
        'panstart',
        'panmove',
        'panend'
    ],
    PINCH: [
        'pinchstart',
        'pinchmove',
        'pinchend'
    ],
    TRIPLE_PAN: [
        'tripanstart',
        'tripanmove',
        'tripanend'
    ],
    DOUBLE_TAP: [
        'doubletap'
    ],
    KEYBOARD: [
        'keydown'
    ]
};
const pinchEventWorkaround = {};
class Controller {
    constructor(opts){
        (0, _definePropertyDefault.default)(this, "props", void 0);
        (0, _definePropertyDefault.default)(this, "state", {});
        (0, _definePropertyDefault.default)(this, "transitionManager", void 0);
        (0, _definePropertyDefault.default)(this, "eventManager", void 0);
        (0, _definePropertyDefault.default)(this, "onViewStateChange", void 0);
        (0, _definePropertyDefault.default)(this, "onStateChange", void 0);
        (0, _definePropertyDefault.default)(this, "makeViewport", void 0);
        (0, _definePropertyDefault.default)(this, "_controllerState", void 0);
        (0, _definePropertyDefault.default)(this, "_events", {});
        (0, _definePropertyDefault.default)(this, "_interactionState", {
            isDragging: false
        });
        (0, _definePropertyDefault.default)(this, "_customEvents", []);
        (0, _definePropertyDefault.default)(this, "_eventStartBlocked", null);
        (0, _definePropertyDefault.default)(this, "_panMove", false);
        (0, _definePropertyDefault.default)(this, "invertPan", false);
        (0, _definePropertyDefault.default)(this, "dragMode", 'rotate');
        (0, _definePropertyDefault.default)(this, "inertia", 0);
        (0, _definePropertyDefault.default)(this, "scrollZoom", true);
        (0, _definePropertyDefault.default)(this, "dragPan", true);
        (0, _definePropertyDefault.default)(this, "dragRotate", true);
        (0, _definePropertyDefault.default)(this, "doubleClickZoom", true);
        (0, _definePropertyDefault.default)(this, "touchZoom", true);
        (0, _definePropertyDefault.default)(this, "touchRotate", false);
        (0, _definePropertyDefault.default)(this, "keyboard", true);
        this.transitionManager = new (0, _transitionManagerDefault.default)({
            ...opts,
            getControllerState: (props)=>new this.ControllerState(props),
            onViewStateChange: this._onTransition.bind(this),
            onStateChange: this._setInteractionState.bind(this)
        });
        this.handleEvent = this.handleEvent.bind(this);
        this.eventManager = opts.eventManager;
        this.onViewStateChange = opts.onViewStateChange || (()=>{});
        this.onStateChange = opts.onStateChange || (()=>{});
        this.makeViewport = opts.makeViewport;
    }
    set events(customEvents) {
        this.toggleEvents(this._customEvents, false);
        this.toggleEvents(customEvents, true);
        this._customEvents = customEvents;
        if (this.props) this.setProps(this.props);
    }
    finalize() {
        for(const eventName in this._events)if (this._events[eventName]) {
            var _this$eventManager;
            (_this$eventManager = this.eventManager) === null || _this$eventManager === void 0 || _this$eventManager.off(eventName, this.handleEvent);
        }
        this.transitionManager.finalize();
    }
    handleEvent(event) {
        this._controllerState = undefined;
        const eventStartBlocked = this._eventStartBlocked;
        switch(event.type){
            case 'panstart':
                return eventStartBlocked ? false : this._onPanStart(event);
            case 'panmove':
                return this._onPan(event);
            case 'panend':
                return this._onPanEnd(event);
            case 'pinchstart':
                return eventStartBlocked ? false : this._onPinchStart(event);
            case 'pinchmove':
                return this._onPinch(event);
            case 'pinchend':
                return this._onPinchEnd(event);
            case 'tripanstart':
                return eventStartBlocked ? false : this._onTriplePanStart(event);
            case 'tripanmove':
                return this._onTriplePan(event);
            case 'tripanend':
                return this._onTriplePanEnd(event);
            case 'doubletap':
                return this._onDoubleTap(event);
            case 'wheel':
                return this._onWheel(event);
            case 'keydown':
                return this._onKeyDown(event);
            default:
                return false;
        }
    }
    get controllerState() {
        this._controllerState = this._controllerState || new this.ControllerState({
            makeViewport: this.makeViewport,
            ...this.props,
            ...this.state
        });
        return this._controllerState;
    }
    getCenter(event) {
        const { x, y } = this.props;
        const { offsetCenter } = event;
        return [
            offsetCenter.x - x,
            offsetCenter.y - y
        ];
    }
    isPointInBounds(pos, event) {
        const { width, height } = this.props;
        if (event && event.handled) return false;
        const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;
        if (inside && event) event.stopPropagation();
        return inside;
    }
    isFunctionKeyPressed(event) {
        const { srcEvent } = event;
        return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);
    }
    isDragging() {
        return this._interactionState.isDragging || false;
    }
    blockEvents(timeout) {
        const timer = setTimeout(()=>{
            if (this._eventStartBlocked === timer) this._eventStartBlocked = null;
        }, timeout);
        this._eventStartBlocked = timer;
    }
    setProps(props) {
        if (props.dragMode) this.dragMode = props.dragMode;
        this.props = props;
        if (!('transitionInterpolator' in props)) props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;
        this.transitionManager.processViewStateChange(props);
        const { inertia } = props;
        this.inertia = Number.isFinite(inertia) ? inertia : inertia === true ? DEFAULT_INERTIA : 0;
        const { scrollZoom = true, dragPan = true, dragRotate = true, doubleClickZoom = true, touchZoom = true, touchRotate = false, keyboard = true } = props;
        const isInteractive = Boolean(this.onViewStateChange);
        this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);
        this.toggleEvents(EVENT_TYPES.PAN, isInteractive);
        this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));
        this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);
        this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);
        this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);
        this.scrollZoom = scrollZoom;
        this.dragPan = dragPan;
        this.dragRotate = dragRotate;
        this.doubleClickZoom = doubleClickZoom;
        this.touchZoom = touchZoom;
        this.touchRotate = touchRotate;
        this.keyboard = keyboard;
    }
    updateTransition() {
        this.transitionManager.updateTransition();
    }
    toggleEvents(eventNames, enabled) {
        if (this.eventManager) eventNames.forEach((eventName)=>{
            if (this._events[eventName] !== enabled) {
                this._events[eventName] = enabled;
                if (enabled) this.eventManager.on(eventName, this.handleEvent);
                else this.eventManager.off(eventName, this.handleEvent);
            }
        });
    }
    updateViewport(newControllerState, extraProps = null, interactionState = {}) {
        const viewState = {
            ...newControllerState.getViewportProps(),
            ...extraProps
        };
        const changed = this.controllerState !== newControllerState;
        this.state = newControllerState.getState();
        this._setInteractionState(interactionState);
        if (changed) {
            const oldViewState = this.controllerState && this.controllerState.getViewportProps();
            if (this.onViewStateChange) this.onViewStateChange({
                viewState,
                interactionState: this._interactionState,
                oldViewState
            });
        }
    }
    _onTransition(params) {
        this.onViewStateChange({
            ...params,
            interactionState: this._interactionState
        });
    }
    _setInteractionState(newStates) {
        Object.assign(this._interactionState, newStates);
        this.onStateChange(this._interactionState);
    }
    _onPanStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) return false;
        let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;
        if (this.invertPan || this.dragMode === 'pan') alternateMode = !alternateMode;
        const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({
            pos
        });
        this._panMove = alternateMode;
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true
        });
        return true;
    }
    _onPan(event) {
        if (!this.isDragging()) return false;
        return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);
    }
    _onPanEnd(event) {
        if (!this.isDragging()) return false;
        return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);
    }
    _onPanMove(event) {
        if (!this.dragPan) return false;
        const pos = this.getCenter(event);
        const newControllerState = this.controllerState.pan({
            pos
        });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isPanning: true
        });
        return true;
    }
    _onPanMoveEnd(event) {
        const { inertia } = this;
        if (this.dragPan && inertia && event.velocity) {
            const pos = this.getCenter(event);
            const endPos = [
                pos[0] + event.velocityX * inertia / 2,
                pos[1] + event.velocityY * inertia / 2
            ];
            const newControllerState = this.controllerState.pan({
                pos: endPos
            }).panEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isPanning: true
            });
        } else {
            const newControllerState = this.controllerState.panEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isPanning: false
            });
        }
        return true;
    }
    _onPanRotate(event) {
        if (!this.dragRotate) return false;
        const pos = this.getCenter(event);
        const newControllerState = this.controllerState.rotate({
            pos
        });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isRotating: true
        });
        return true;
    }
    _onPanRotateEnd(event) {
        const { inertia } = this;
        if (this.dragRotate && inertia && event.velocity) {
            const pos = this.getCenter(event);
            const endPos = [
                pos[0] + event.velocityX * inertia / 2,
                pos[1] + event.velocityY * inertia / 2
            ];
            const newControllerState = this.controllerState.rotate({
                pos: endPos
            }).rotateEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isRotating: true
            });
        } else {
            const newControllerState = this.controllerState.rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isRotating: false
            });
        }
        return true;
    }
    _onWheel(event) {
        if (!this.scrollZoom) return false;
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) return false;
        event.srcEvent.preventDefault();
        const { speed = 0.01, smooth = false } = this.scrollZoom === true ? {} : this.scrollZoom;
        const { delta } = event;
        let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));
        if (delta < 0 && scale !== 0) scale = 1 / scale;
        const newControllerState = this.controllerState.zoom({
            pos,
            scale
        });
        this.updateViewport(newControllerState, {
            ...this._getTransitionProps({
                around: pos
            }),
            transitionDuration: smooth ? 250 : 1
        }, {
            isZooming: true,
            isPanning: true
        });
        return true;
    }
    _onTriplePanStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) return false;
        const newControllerState = this.controllerState.rotateStart({
            pos
        });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true
        });
        return true;
    }
    _onTriplePan(event) {
        if (!this.touchRotate) return false;
        if (!this.isDragging()) return false;
        const pos = this.getCenter(event);
        pos[0] -= event.deltaX;
        const newControllerState = this.controllerState.rotate({
            pos
        });
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isRotating: true
        });
        return true;
    }
    _onTriplePanEnd(event) {
        if (!this.isDragging()) return false;
        const { inertia } = this;
        if (this.touchRotate && inertia && event.velocityY) {
            const pos = this.getCenter(event);
            const endPos = [
                pos[0],
                pos[1] += event.velocityY * inertia / 2
            ];
            const newControllerState = this.controllerState.rotate({
                pos: endPos
            });
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps(),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isRotating: true
            });
            this.blockEvents(inertia);
        } else {
            const newControllerState = this.controllerState.rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isRotating: false
            });
        }
        return true;
    }
    _onPinchStart(event) {
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) return false;
        const newControllerState = this.controllerState.zoomStart({
            pos
        }).rotateStart({
            pos
        });
        pinchEventWorkaround._startPinchRotation = event.rotation;
        pinchEventWorkaround._lastPinchEvent = event;
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true
        });
        return true;
    }
    _onPinch(event) {
        if (!this.touchZoom && !this.touchRotate) return false;
        if (!this.isDragging()) return false;
        let newControllerState = this.controllerState;
        if (this.touchZoom) {
            const { scale } = event;
            const pos = this.getCenter(event);
            newControllerState = newControllerState.zoom({
                pos,
                scale
            });
        }
        if (this.touchRotate) {
            const { rotation } = event;
            newControllerState = newControllerState.rotate({
                deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation
            });
        }
        this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
            isDragging: true,
            isPanning: this.touchZoom,
            isZooming: this.touchZoom,
            isRotating: this.touchRotate
        });
        pinchEventWorkaround._lastPinchEvent = event;
        return true;
    }
    _onPinchEnd(event) {
        if (!this.isDragging()) return false;
        const { inertia } = this;
        const { _lastPinchEvent } = pinchEventWorkaround;
        if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {
            const pos = this.getCenter(event);
            let newControllerState = this.controllerState.rotateEnd();
            const z = Math.log2(event.scale);
            const velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);
            const endScale = Math.pow(2, z + velocityZ * inertia / 2);
            newControllerState = newControllerState.zoom({
                pos,
                scale: endScale
            }).zoomEnd();
            this.updateViewport(newControllerState, {
                ...this._getTransitionProps({
                    around: pos
                }),
                transitionDuration: inertia,
                transitionEasing: INERTIA_EASING
            }, {
                isDragging: false,
                isPanning: this.touchZoom,
                isZooming: this.touchZoom,
                isRotating: false
            });
            this.blockEvents(inertia);
        } else {
            const newControllerState = this.controllerState.zoomEnd().rotateEnd();
            this.updateViewport(newControllerState, null, {
                isDragging: false,
                isPanning: false,
                isZooming: false,
                isRotating: false
            });
        }
        pinchEventWorkaround._startPinchRotation = null;
        pinchEventWorkaround._lastPinchEvent = null;
        return true;
    }
    _onDoubleTap(event) {
        if (!this.doubleClickZoom) return false;
        const pos = this.getCenter(event);
        if (!this.isPointInBounds(pos, event)) return false;
        const isZoomOut = this.isFunctionKeyPressed(event);
        const newControllerState = this.controllerState.zoom({
            pos,
            scale: isZoomOut ? 0.5 : 2
        });
        this.updateViewport(newControllerState, this._getTransitionProps({
            around: pos
        }), {
            isZooming: true,
            isPanning: true
        });
        this.blockEvents(100);
        return true;
    }
    _onKeyDown(event) {
        if (!this.keyboard) return false;
        const funcKey = this.isFunctionKeyPressed(event);
        const { zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY } = this.keyboard === true ? {} : this.keyboard;
        const { controllerState } = this;
        let newControllerState;
        const interactionState = {};
        switch(event.srcEvent.code){
            case 'Minus':
                newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);
                interactionState.isZooming = true;
                break;
            case 'Equal':
                newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);
                interactionState.isZooming = true;
                break;
            case 'ArrowLeft':
                if (funcKey) {
                    newControllerState = controllerState.rotateLeft(rotateSpeedX);
                    interactionState.isRotating = true;
                } else {
                    newControllerState = controllerState.moveLeft(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowRight':
                if (funcKey) {
                    newControllerState = controllerState.rotateRight(rotateSpeedX);
                    interactionState.isRotating = true;
                } else {
                    newControllerState = controllerState.moveRight(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowUp':
                if (funcKey) {
                    newControllerState = controllerState.rotateUp(rotateSpeedY);
                    interactionState.isRotating = true;
                } else {
                    newControllerState = controllerState.moveUp(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            case 'ArrowDown':
                if (funcKey) {
                    newControllerState = controllerState.rotateDown(rotateSpeedY);
                    interactionState.isRotating = true;
                } else {
                    newControllerState = controllerState.moveDown(moveSpeed);
                    interactionState.isPanning = true;
                }
                break;
            default:
                return false;
        }
        this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);
        return true;
    }
    _getTransitionProps(opts) {
        const { transition } = this;
        if (!transition || !transition.transitionInterpolator) return NO_TRANSITION_PROPS;
        return opts ? {
            ...transition,
            transitionInterpolator: new (0, _linearInterpolatorDefault.default)({
                ...opts,
                ...transition.transitionInterpolator.opts,
                makeViewport: this.controllerState.makeViewport
            })
        } : transition;
    }
}
exports.default = Controller;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./transition-manager":"eYFxS","../transitions/linear-interpolator":"rV9c4","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eYFxS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TRANSITION_EVENTS", ()=>TRANSITION_EVENTS);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _transition = require("../transitions/transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
const noop = ()=>{};
const TRANSITION_EVENTS = {
    BREAK: 1,
    SNAP_TO_END: 2,
    IGNORE: 3
};
const DEFAULT_EASING = (t)=>t;
const DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;
class TransitionManager {
    constructor(opts){
        (0, _definePropertyDefault.default)(this, "getControllerState", void 0);
        (0, _definePropertyDefault.default)(this, "props", void 0);
        (0, _definePropertyDefault.default)(this, "propsInTransition", void 0);
        (0, _definePropertyDefault.default)(this, "transition", void 0);
        (0, _definePropertyDefault.default)(this, "onViewStateChange", void 0);
        (0, _definePropertyDefault.default)(this, "onStateChange", void 0);
        (0, _definePropertyDefault.default)(this, "_onTransitionUpdate", (transition)=>{
            const { time, settings: { interpolator, startProps, endProps, duration, easing } } = transition;
            const t = easing(time / duration);
            const viewport = interpolator.interpolateProps(startProps, endProps, t);
            this.propsInTransition = this.getControllerState({
                ...this.props,
                ...viewport
            }).getViewportProps();
            this.onViewStateChange({
                viewState: this.propsInTransition,
                oldViewState: this.props
            });
        });
        this.getControllerState = opts.getControllerState;
        this.propsInTransition = null;
        this.transition = new (0, _transitionDefault.default)(opts.timeline);
        this.onViewStateChange = opts.onViewStateChange || noop;
        this.onStateChange = opts.onStateChange || noop;
    }
    finalize() {
        this.transition.cancel();
    }
    getViewportInTransition() {
        return this.propsInTransition;
    }
    processViewStateChange(nextProps) {
        let transitionTriggered = false;
        const currentProps = this.props;
        this.props = nextProps;
        if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) return false;
        if (this._isTransitionEnabled(nextProps)) {
            let startProps = currentProps;
            if (this.transition.inProgress) {
                const { interruption, endProps } = this.transition.settings;
                startProps = {
                    ...currentProps,
                    ...interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps
                };
            }
            this._triggerTransition(startProps, nextProps);
            transitionTriggered = true;
        } else this.transition.cancel();
        return transitionTriggered;
    }
    updateTransition() {
        this.transition.update();
    }
    _isTransitionEnabled(props) {
        const { transitionDuration, transitionInterpolator } = props;
        return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);
    }
    _isUpdateDueToCurrentTransition(props) {
        if (this.transition.inProgress && this.propsInTransition) return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);
        return false;
    }
    _shouldIgnoreViewportChange(currentProps, nextProps) {
        if (this.transition.inProgress) return this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);
        if (this._isTransitionEnabled(nextProps)) return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);
        return true;
    }
    _triggerTransition(startProps, endProps) {
        const startViewstate = this.getControllerState(startProps);
        const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);
        const transitionInterpolator = endProps.transitionInterpolator;
        const duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;
        if (duration === 0) return;
        const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);
        this.propsInTransition = {};
        const transitionSettings = {
            duration,
            easing: endProps.transitionEasing || DEFAULT_EASING,
            interpolator: transitionInterpolator,
            interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,
            startProps: initialProps.start,
            endProps: initialProps.end,
            onStart: endProps.onTransitionStart,
            onUpdate: this._onTransitionUpdate,
            onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),
            onEnd: this._onTransitionEnd(endProps.onTransitionEnd)
        };
        this.transition.start(transitionSettings);
        this.onStateChange({
            inTransition: true
        });
        this.updateTransition();
    }
    _onTransitionEnd(callback) {
        return (transition)=>{
            this.propsInTransition = null;
            this.onStateChange({
                inTransition: false,
                isZooming: false,
                isPanning: false,
                isRotating: false
            });
            callback === null || callback === void 0 || callback(transition);
        };
    }
}
exports.default = TransitionManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../transitions/transition":"ak8FD","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ak8FD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
class Transition {
    constructor(timeline){
        (0, _definePropertyDefault.default)(this, "_inProgress", void 0);
        (0, _definePropertyDefault.default)(this, "_handle", void 0);
        (0, _definePropertyDefault.default)(this, "_timeline", void 0);
        (0, _definePropertyDefault.default)(this, "time", void 0);
        (0, _definePropertyDefault.default)(this, "settings", void 0);
        this._inProgress = false;
        this._handle = null;
        this._timeline = timeline;
        this.time = 0;
        this.settings = {
            duration: 0
        };
    }
    get inProgress() {
        return this._inProgress;
    }
    start(settings) {
        var _this$settings$onStar, _this$settings;
        this.cancel();
        this.settings = settings;
        this._inProgress = true;
        (_this$settings$onStar = (_this$settings = this.settings).onStart) === null || _this$settings$onStar === void 0 || _this$settings$onStar.call(_this$settings, this);
    }
    end() {
        if (this._inProgress) {
            var _this$settings$onEnd, _this$settings2;
            this._timeline.removeChannel(this._handle);
            this._handle = null;
            this._inProgress = false;
            (_this$settings$onEnd = (_this$settings2 = this.settings).onEnd) === null || _this$settings$onEnd === void 0 || _this$settings$onEnd.call(_this$settings2, this);
        }
    }
    cancel() {
        if (this._inProgress) {
            var _this$settings$onInte, _this$settings3;
            (_this$settings$onInte = (_this$settings3 = this.settings).onInterrupt) === null || _this$settings$onInte === void 0 || _this$settings$onInte.call(_this$settings3, this);
            this._timeline.removeChannel(this._handle);
            this._handle = null;
            this._inProgress = false;
        }
    }
    update() {
        var _this$settings$onUpda, _this$settings4;
        if (!this._inProgress) return false;
        if (this._handle === null) {
            const { _timeline: timeline, settings } = this;
            this._handle = timeline.addChannel({
                delay: timeline.getTime(),
                duration: settings.duration
            });
        }
        this.time = this._timeline.getTime(this._handle);
        this._onUpdate();
        (_this$settings$onUpda = (_this$settings4 = this.settings).onUpdate) === null || _this$settings$onUpda === void 0 || _this$settings$onUpda.call(_this$settings4, this);
        if (this._timeline.isFinished(this._handle)) this.end();
        return true;
    }
    _onUpdate() {}
}
exports.default = Transition;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"rV9c4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _transitionInterpolator = require("./transition-interpolator");
var _transitionInterpolatorDefault = parcelHelpers.interopDefault(_transitionInterpolator);
var _core = require("@math.gl/core");
const DEFAULT_PROPS = [
    'longitude',
    'latitude',
    'zoom',
    'bearing',
    'pitch'
];
const DEFAULT_REQUIRED_PROPS = [
    'longitude',
    'latitude',
    'zoom'
];
class LinearInterpolator extends (0, _transitionInterpolatorDefault.default) {
    constructor(opts = {}){
        const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;
        const normalizedOpts = Array.isArray(opts) ? {} : opts;
        normalizedOpts.transitionProps = Array.isArray(transitionProps) ? {
            compare: transitionProps,
            required: transitionProps
        } : transitionProps || {
            compare: DEFAULT_PROPS,
            required: DEFAULT_REQUIRED_PROPS
        };
        super(normalizedOpts.transitionProps);
        (0, _definePropertyDefault.default)(this, "opts", void 0);
        this.opts = normalizedOpts;
    }
    initializeProps(startProps, endProps) {
        const result = super.initializeProps(startProps, endProps);
        const { makeViewport, around } = this.opts;
        if (makeViewport && around) {
            const startViewport = makeViewport(startProps);
            const endViewport = makeViewport(endProps);
            const aroundPosition = startViewport.unproject(around);
            result.start.around = around;
            Object.assign(result.end, {
                around: endViewport.project(aroundPosition),
                aroundPosition,
                width: endProps.width,
                height: endProps.height
            });
        }
        return result;
    }
    interpolateProps(startProps, endProps, t) {
        const propsInTransition = {};
        for (const key of this._propsToExtract)propsInTransition[key] = (0, _core.lerp)(startProps[key] || 0, endProps[key] || 0, t);
        if (endProps.aroundPosition && this.opts.makeViewport) {
            const viewport = this.opts.makeViewport({
                ...endProps,
                ...propsInTransition
            });
            Object.assign(propsInTransition, viewport.panByPosition(endProps.aroundPosition, (0, _core.lerp)(startProps.around, endProps.around, t)));
        }
        return propsInTransition;
    }
}
exports.default = LinearInterpolator;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./transition-interpolator":"1IYvd","@math.gl/core":"e2A67","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1IYvd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@math.gl/core");
var _assert = require("../utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
class TransitionInterpolator {
    constructor(opts){
        (0, _definePropertyDefault.default)(this, "_propsToCompare", void 0);
        (0, _definePropertyDefault.default)(this, "_propsToExtract", void 0);
        (0, _definePropertyDefault.default)(this, "_requiredProps", void 0);
        const { compare, extract, required } = opts;
        this._propsToCompare = compare;
        this._propsToExtract = extract || compare;
        this._requiredProps = required;
    }
    arePropsEqual(currentProps, nextProps) {
        for (const key of this._propsToCompare){
            if (!(key in currentProps) || !(key in nextProps) || !(0, _core.equals)(currentProps[key], nextProps[key])) return false;
        }
        return true;
    }
    initializeProps(startProps, endProps) {
        const startViewStateProps = {};
        const endViewStateProps = {};
        for (const key of this._propsToExtract)if (key in startProps || key in endProps) {
            startViewStateProps[key] = startProps[key];
            endViewStateProps[key] = endProps[key];
        }
        this._checkRequiredProps(startViewStateProps);
        this._checkRequiredProps(endViewStateProps);
        return {
            start: startViewStateProps,
            end: endViewStateProps
        };
    }
    getDuration(startProps, endProps) {
        return endProps.transitionDuration;
    }
    _checkRequiredProps(props) {
        if (!this._requiredProps) return;
        this._requiredProps.forEach((propName)=>{
            const value = props[propName];
            (0, _assertDefault.default)(Number.isFinite(value) || Array.isArray(value), "".concat(propName, " is required for transition"));
        });
    }
}
exports.default = TransitionInterpolator;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@math.gl/core":"e2A67","../utils/assert":"8E3uE","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fJoyZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
class ViewState {
    constructor(props, state){
        (0, _definePropertyDefault.default)(this, "_viewportProps", void 0);
        (0, _definePropertyDefault.default)(this, "_state", void 0);
        this._viewportProps = this.applyConstraints(props);
        this._state = state;
    }
    getViewportProps() {
        return this._viewportProps;
    }
    getState() {
        return this._state;
    }
}
exports.default = ViewState;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jex2M":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _deepEqual = require("../utils/deep-equal");
var _lightingEffect = require("../effects/lighting/lighting-effect");
var _lightingEffectDefault = parcelHelpers.interopDefault(_lightingEffect);
const DEFAULT_LIGHTING_EFFECT = new (0, _lightingEffectDefault.default)();
function compareEffects(e1, e2) {
    var _e1$order, _e2$order;
    const o1 = (_e1$order = e1.order) !== null && _e1$order !== void 0 ? _e1$order : Infinity;
    const o2 = (_e2$order = e2.order) !== null && _e2$order !== void 0 ? _e2$order : Infinity;
    return o1 - o2;
}
class EffectManager {
    constructor(){
        (0, _definePropertyDefault.default)(this, "effects", void 0);
        (0, _definePropertyDefault.default)(this, "_resolvedEffects", []);
        (0, _definePropertyDefault.default)(this, "_defaultEffects", []);
        (0, _definePropertyDefault.default)(this, "_needsRedraw", void 0);
        this.effects = [];
        this._needsRedraw = 'Initial render';
        this._setEffects([]);
    }
    addDefaultEffect(effect) {
        const defaultEffects = this._defaultEffects;
        if (!defaultEffects.find((e)=>e.id === effect.id)) {
            const index = defaultEffects.findIndex((e)=>compareEffects(e, effect) > 0);
            if (index < 0) defaultEffects.push(effect);
            else defaultEffects.splice(index, 0, effect);
            this._setEffects(this.effects);
        }
    }
    setProps(props) {
        if ('effects' in props) {
            if (!(0, _deepEqual.deepEqual)(props.effects, this.effects, 1)) this._setEffects(props.effects);
        }
    }
    needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) this._needsRedraw = false;
        return redraw;
    }
    getEffects() {
        return this._resolvedEffects;
    }
    _setEffects(effects) {
        const oldEffectsMap = {};
        for (const effect of this.effects)oldEffectsMap[effect.id] = effect;
        const nextEffects = [];
        for (const effect of effects){
            const oldEffect = oldEffectsMap[effect.id];
            if (oldEffect && oldEffect !== effect) {
                if (oldEffect.setProps) {
                    oldEffect.setProps(effect.props);
                    nextEffects.push(oldEffect);
                } else {
                    oldEffect.cleanup();
                    nextEffects.push(effect);
                }
            } else nextEffects.push(effect);
            delete oldEffectsMap[effect.id];
        }
        for(const removedEffectId in oldEffectsMap)oldEffectsMap[removedEffectId].cleanup();
        this.effects = nextEffects;
        this._resolvedEffects = nextEffects.concat(this._defaultEffects);
        if (!effects.some((effect)=>effect instanceof (0, _lightingEffectDefault.default))) this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);
        this._needsRedraw = 'effects changed';
    }
    finalize() {
        for (const effect of this._resolvedEffects)effect.cleanup();
        this.effects.length = 0;
        this._resolvedEffects.length = 0;
        this._defaultEffects.length = 0;
    }
}
exports.default = EffectManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../utils/deep-equal":"5Dkfj","../effects/lighting/lighting-effect":"hGrwd","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aE6ja":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _debug = require("../debug");
var _debugDefault = parcelHelpers.interopDefault(_debug);
var _drawLayersPass = require("../passes/draw-layers-pass");
var _drawLayersPassDefault = parcelHelpers.interopDefault(_drawLayersPass);
var _pickLayersPass = require("../passes/pick-layers-pass");
var _pickLayersPassDefault = parcelHelpers.interopDefault(_pickLayersPass);
var _core = require("@luma.gl/core");
const TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';
class DeckRenderer {
    constructor(gl){
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "layerFilter", void 0);
        (0, _definePropertyDefault.default)(this, "drawPickingColors", void 0);
        (0, _definePropertyDefault.default)(this, "drawLayersPass", void 0);
        (0, _definePropertyDefault.default)(this, "pickLayersPass", void 0);
        (0, _definePropertyDefault.default)(this, "renderCount", void 0);
        (0, _definePropertyDefault.default)(this, "_needsRedraw", void 0);
        (0, _definePropertyDefault.default)(this, "renderBuffers", void 0);
        (0, _definePropertyDefault.default)(this, "lastPostProcessEffect", void 0);
        this.gl = gl;
        this.layerFilter = null;
        this.drawPickingColors = false;
        this.drawLayersPass = new (0, _drawLayersPassDefault.default)(gl);
        this.pickLayersPass = new (0, _pickLayersPassDefault.default)(gl);
        this.renderCount = 0;
        this._needsRedraw = 'Initial render';
        this.renderBuffers = [];
        this.lastPostProcessEffect = null;
    }
    setProps(props) {
        if (this.layerFilter !== props.layerFilter) {
            this.layerFilter = props.layerFilter;
            this._needsRedraw = 'layerFilter changed';
        }
        if (this.drawPickingColors !== props.drawPickingColors) {
            this.drawPickingColors = props.drawPickingColors;
            this._needsRedraw = 'drawPickingColors changed';
        }
    }
    renderLayers(opts) {
        if (!opts.viewports.length) return;
        const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;
        const renderOpts = {
            layerFilter: this.layerFilter,
            isPicking: this.drawPickingColors,
            ...opts,
            target: opts.target || (0, _core.Framebuffer).getDefaultFramebuffer(this.gl)
        };
        if (renderOpts.effects) this._preRender(renderOpts.effects, renderOpts);
        const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;
        const renderStats = layerPass.render({
            ...renderOpts,
            target: outputBuffer
        });
        if (renderOpts.effects) this._postRender(renderOpts.effects, renderOpts);
        this.renderCount++;
        (0, _debugDefault.default)(TRACE_RENDER_LAYERS, this, renderStats, opts);
    }
    needsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        const redraw = this._needsRedraw;
        if (opts.clearRedrawFlags) this._needsRedraw = false;
        return redraw;
    }
    finalize() {
        const { renderBuffers } = this;
        for (const buffer of renderBuffers)buffer.delete();
        renderBuffers.length = 0;
    }
    _preRender(effects, opts) {
        this.lastPostProcessEffect = null;
        opts.preRenderStats = opts.preRenderStats || {};
        for (const effect of effects){
            opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);
            if (effect.postRender) this.lastPostProcessEffect = effect.id;
        }
        if (this.lastPostProcessEffect) this._resizeRenderBuffers();
    }
    _resizeRenderBuffers() {
        const { renderBuffers } = this;
        if (renderBuffers.length === 0) renderBuffers.push(new (0, _core.Framebuffer)(this.gl), new (0, _core.Framebuffer)(this.gl));
        for (const buffer of renderBuffers)buffer.resize();
    }
    _postRender(effects, opts) {
        const { renderBuffers } = this;
        const params = {
            ...opts,
            inputBuffer: renderBuffers[0],
            swapBuffer: renderBuffers[1],
            target: null
        };
        for (const effect of effects)if (effect.postRender) {
            if (effect.id === this.lastPostProcessEffect) {
                params.target = opts.target;
                effect.postRender(this.gl, params);
                break;
            }
            const buffer = effect.postRender(this.gl, params);
            params.inputBuffer = buffer;
            params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];
        }
    }
}
exports.default = DeckRenderer;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../debug":"h4a5l","../passes/draw-layers-pass":"hf2Ys","../passes/pick-layers-pass":"drceY","@luma.gl/core":"9rnrC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hf2Ys":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _layersPass = require("./layers-pass");
var _layersPassDefault = parcelHelpers.interopDefault(_layersPass);
class DrawLayersPass extends (0, _layersPassDefault.default) {
    shouldDrawLayer(layer) {
        const { operation } = layer.props;
        return operation.includes('draw') || operation.includes('terrain');
    }
}
exports.default = DrawLayersPass;

},{"./layers-pass":"lr0ce","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bR2LH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@luma.gl/core");
var _pickLayersPass = require("../passes/pick-layers-pass");
var _pickLayersPassDefault = parcelHelpers.interopDefault(_pickLayersPass);
var _queryObject = require("./picking/query-object");
var _pickInfo = require("./picking/pick-info");
class DeckPicker {
    constructor(gl){
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "pickingFBO", void 0);
        (0, _definePropertyDefault.default)(this, "depthFBO", void 0);
        (0, _definePropertyDefault.default)(this, "pickLayersPass", void 0);
        (0, _definePropertyDefault.default)(this, "layerFilter", void 0);
        (0, _definePropertyDefault.default)(this, "lastPickedInfo", void 0);
        (0, _definePropertyDefault.default)(this, "_pickable", true);
        this.gl = gl;
        this.pickLayersPass = new (0, _pickLayersPassDefault.default)(gl);
        this.lastPickedInfo = {
            index: -1,
            layerId: null,
            info: null
        };
    }
    setProps(props) {
        if ('layerFilter' in props) this.layerFilter = props.layerFilter;
        if ('_pickable' in props) this._pickable = props._pickable;
    }
    finalize() {
        if (this.pickingFBO) this.pickingFBO.delete();
        if (this.depthFBO) {
            this.depthFBO.color.delete();
            this.depthFBO.delete();
        }
    }
    pickObject(opts) {
        return this._pickClosestObject(opts);
    }
    pickObjects(opts) {
        return this._pickVisibleObjects(opts);
    }
    getLastPickedObject({ x, y, layers, viewports }, lastPickedInfo = this.lastPickedInfo.info) {
        const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;
        const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;
        const layer = lastPickedLayerId ? layers.find((l)=>l.id === lastPickedLayerId) : null;
        const viewport = lastPickedViewportId && viewports.find((v)=>v.id === lastPickedViewportId) || viewports[0];
        const coordinate = viewport && viewport.unproject([
            x - viewport.x,
            y - viewport.y
        ]);
        const info = {
            x,
            y,
            viewport,
            coordinate,
            layer
        };
        return {
            ...lastPickedInfo,
            ...info
        };
    }
    _resizeBuffer() {
        var _this$pickingFBO, _this$depthFBO;
        const { gl } = this;
        if (!this.pickingFBO) {
            this.pickingFBO = new (0, _core.Framebuffer)(gl);
            if ((0, _core.Framebuffer).isSupported(gl, {
                colorBufferFloat: true
            })) {
                const depthFBO = new (0, _core.Framebuffer)(gl);
                depthFBO.attach({
                    [36064]: new (0, _core.Texture2D)(gl, {
                        format: (0, _core.isWebGL2)(gl) ? 34836 : 6408,
                        type: 5126
                    })
                });
                this.depthFBO = depthFBO;
            }
        }
        (_this$pickingFBO = this.pickingFBO) === null || _this$pickingFBO === void 0 || _this$pickingFBO.resize({
            width: gl.canvas.width,
            height: gl.canvas.height
        });
        (_this$depthFBO = this.depthFBO) === null || _this$depthFBO === void 0 || _this$depthFBO.resize({
            width: gl.canvas.width,
            height: gl.canvas.height
        });
    }
    _getPickable(layers) {
        if (this._pickable === false) return null;
        const pickableLayers = layers.filter((layer)=>this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite);
        return pickableLayers.length ? pickableLayers : null;
    }
    _pickClosestObject({ layers, views, viewports, x, y, radius = 0, depth = 1, mode = 'query', unproject3D, onViewportActive, effects }) {
        const pickableLayers = this._getPickable(layers);
        const pixelRatio = (0, _core.cssToDeviceRatio)(this.gl);
        if (!pickableLayers) return {
            result: [],
            emptyInfo: (0, _pickInfo.getEmptyPickingInfo)({
                viewports,
                x,
                y,
                pixelRatio
            })
        };
        this._resizeBuffer();
        const devicePixelRange = (0, _core.cssToDevicePixels)(this.gl, [
            x,
            y
        ], true);
        const devicePixel = [
            devicePixelRange.x + Math.floor(devicePixelRange.width / 2),
            devicePixelRange.y + Math.floor(devicePixelRange.height / 2)
        ];
        const deviceRadius = Math.round(radius * pixelRatio);
        const { width, height } = this.pickingFBO;
        const deviceRect = this._getPickingRect({
            deviceX: devicePixel[0],
            deviceY: devicePixel[1],
            deviceRadius,
            deviceWidth: width,
            deviceHeight: height
        });
        const cullRect = {
            x: x - radius,
            y: y - radius,
            width: radius * 2 + 1,
            height: radius * 2 + 1
        };
        let infos;
        const result = [];
        const affectedLayers = new Set();
        for(let i = 0; i < depth; i++){
            let pickInfo;
            if (deviceRect) {
                const pickedResult = this._drawAndSample({
                    layers: pickableLayers,
                    views,
                    viewports,
                    onViewportActive,
                    deviceRect,
                    cullRect,
                    effects,
                    pass: "picking:".concat(mode)
                });
                pickInfo = (0, _queryObject.getClosestObject)({
                    ...pickedResult,
                    deviceX: devicePixel[0],
                    deviceY: devicePixel[1],
                    deviceRadius,
                    deviceRect
                });
            } else pickInfo = {
                pickedColor: null,
                pickedObjectIndex: -1
            };
            let z;
            if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {
                const { pickedColors: pickedColors2 } = this._drawAndSample({
                    layers: [
                        pickInfo.pickedLayer
                    ],
                    views,
                    viewports,
                    onViewportActive,
                    deviceRect: {
                        x: pickInfo.pickedX,
                        y: pickInfo.pickedY,
                        width: 1,
                        height: 1
                    },
                    cullRect,
                    effects,
                    pass: "picking:".concat(mode, ":z")
                }, true);
                if (pickedColors2[3]) z = pickedColors2[0];
            }
            if (pickInfo.pickedLayer && i + 1 < depth) {
                affectedLayers.add(pickInfo.pickedLayer);
                pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);
            }
            infos = (0, _pickInfo.processPickInfo)({
                pickInfo,
                lastPickedInfo: this.lastPickedInfo,
                mode,
                layers: pickableLayers,
                viewports,
                x,
                y,
                z,
                pixelRatio
            });
            for (const info of infos.values())if (info.layer) result.push(info);
            if (!pickInfo.pickedColor) break;
        }
        for (const layer of affectedLayers)layer.restorePickingColors();
        return {
            result,
            emptyInfo: infos.get(null)
        };
    }
    _pickVisibleObjects({ layers, views, viewports, x, y, width = 1, height = 1, mode = 'query', maxObjects = null, onViewportActive, effects }) {
        const pickableLayers = this._getPickable(layers);
        if (!pickableLayers) return [];
        this._resizeBuffer();
        const pixelRatio = (0, _core.cssToDeviceRatio)(this.gl);
        const leftTop = (0, _core.cssToDevicePixels)(this.gl, [
            x,
            y
        ], true);
        const deviceLeft = leftTop.x;
        const deviceTop = leftTop.y + leftTop.height;
        const rightBottom = (0, _core.cssToDevicePixels)(this.gl, [
            x + width,
            y + height
        ], true);
        const deviceRight = rightBottom.x + rightBottom.width;
        const deviceBottom = rightBottom.y;
        const deviceRect = {
            x: deviceLeft,
            y: deviceBottom,
            width: deviceRight - deviceLeft,
            height: deviceTop - deviceBottom
        };
        const pickedResult = this._drawAndSample({
            layers: pickableLayers,
            views,
            viewports,
            onViewportActive,
            deviceRect,
            cullRect: {
                x,
                y,
                width,
                height
            },
            effects,
            pass: "picking:".concat(mode)
        });
        const pickInfos = (0, _queryObject.getUniqueObjects)(pickedResult);
        const uniqueInfos = new Map();
        const isMaxObjects = Number.isFinite(maxObjects);
        for(let i = 0; i < pickInfos.length; i++){
            var _info$object;
            if (isMaxObjects && maxObjects && uniqueInfos.size >= maxObjects) break;
            const pickInfo = pickInfos[i];
            let info = {
                color: pickInfo.pickedColor,
                layer: null,
                index: pickInfo.pickedObjectIndex,
                picked: true,
                x,
                y,
                pixelRatio
            };
            info = (0, _pickInfo.getLayerPickingInfo)({
                layer: pickInfo.pickedLayer,
                info,
                mode
            });
            const pickedObjectKey = (_info$object = info.object) !== null && _info$object !== void 0 ? _info$object : "".concat(info.layer.id, "[").concat(info.index, "]");
            if (!uniqueInfos.has(pickedObjectKey)) uniqueInfos.set(pickedObjectKey, info);
        }
        return Array.from(uniqueInfos.values());
    }
    _drawAndSample({ layers, views, viewports, onViewportActive, deviceRect, cullRect, effects, pass }, pickZ = false) {
        const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;
        const opts = {
            layers,
            layerFilter: this.layerFilter,
            views,
            viewports,
            onViewportActive,
            pickingFBO,
            deviceRect,
            cullRect,
            effects,
            pass,
            pickZ,
            preRenderStats: {}
        };
        for (const effect of effects)if (effect.useInPicking) opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);
        const { decodePickingColor } = this.pickLayersPass.render(opts);
        const { x, y, width, height } = deviceRect;
        const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);
        (0, _core.readPixelsToArray)(pickingFBO, {
            sourceX: x,
            sourceY: y,
            sourceWidth: width,
            sourceHeight: height,
            target: pickedColors
        });
        return {
            pickedColors,
            decodePickingColor
        };
    }
    _getPickingRect({ deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight }) {
        const x = Math.max(0, deviceX - deviceRadius);
        const y = Math.max(0, deviceY - deviceRadius);
        const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;
        const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;
        if (width <= 0 || height <= 0) return null;
        return {
            x,
            y,
            width,
            height
        };
    }
}
exports.default = DeckPicker;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@luma.gl/core":"9rnrC","../passes/pick-layers-pass":"drceY","./picking/query-object":"9R43Q","./picking/pick-info":"hAPZS","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9R43Q":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getClosestObject", ()=>getClosestObject);
parcelHelpers.export(exports, "getUniqueObjects", ()=>getUniqueObjects);
var _log = require("../../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
const NO_PICKED_OBJECT = {
    pickedColor: null,
    pickedObjectIndex: -1
};
function getClosestObject({ pickedColors, decodePickingColor, deviceX, deviceY, deviceRadius, deviceRect }) {
    const { x, y, width, height } = deviceRect;
    let minSquareDistanceToCenter = deviceRadius * deviceRadius;
    let closestPixelIndex = -1;
    let i = 0;
    for(let row = 0; row < height; row++){
        const dy = row + y - deviceY;
        const dy2 = dy * dy;
        if (dy2 > minSquareDistanceToCenter) i += 4 * width;
        else for(let col = 0; col < width; col++){
            const pickedLayerIndex = pickedColors[i + 3] - 1;
            if (pickedLayerIndex >= 0) {
                const dx = col + x - deviceX;
                const d2 = dx * dx + dy2;
                if (d2 <= minSquareDistanceToCenter) {
                    minSquareDistanceToCenter = d2;
                    closestPixelIndex = i;
                }
            }
            i += 4;
        }
    }
    if (closestPixelIndex >= 0) {
        const pickedColor = pickedColors.slice(closestPixelIndex, closestPixelIndex + 4);
        const pickedObject = decodePickingColor(pickedColor);
        if (pickedObject) {
            const dy = Math.floor(closestPixelIndex / 4 / width);
            const dx = closestPixelIndex / 4 - dy * width;
            return {
                ...pickedObject,
                pickedColor,
                pickedX: x + dx,
                pickedY: y + dy
            };
        }
        (0, _logDefault.default).error('Picked non-existent layer. Is picking buffer corrupt?')();
    }
    return NO_PICKED_OBJECT;
}
function getUniqueObjects({ pickedColors, decodePickingColor }) {
    const uniqueColors = new Map();
    if (pickedColors) for(let i = 0; i < pickedColors.length; i += 4){
        const pickedLayerIndex = pickedColors[i + 3] - 1;
        if (pickedLayerIndex >= 0) {
            const pickedColor = pickedColors.slice(i, i + 4);
            const colorKey = pickedColor.join(',');
            if (!uniqueColors.has(colorKey)) {
                const pickedObject = decodePickingColor(pickedColor);
                if (pickedObject) uniqueColors.set(colorKey, {
                    ...pickedObject,
                    color: pickedColor
                });
                else (0, _logDefault.default).error('Picked non-existent layer. Is picking buffer corrupt?')();
            }
        }
    }
    return Array.from(uniqueColors.values());
}

},{"../../utils/log":"GqqVU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hAPZS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEmptyPickingInfo", ()=>getEmptyPickingInfo);
parcelHelpers.export(exports, "processPickInfo", ()=>processPickInfo);
parcelHelpers.export(exports, "getLayerPickingInfo", ()=>getLayerPickingInfo);
function getEmptyPickingInfo({ pickInfo, viewports, pixelRatio, x, y, z }) {
    let pickedViewport = viewports[0];
    if (viewports.length > 1) pickedViewport = getViewportFromCoordinates((pickInfo === null || pickInfo === void 0 ? void 0 : pickInfo.pickedViewports) || viewports, {
        x,
        y
    });
    let coordinate;
    if (pickedViewport) {
        const point = [
            x - pickedViewport.x,
            y - pickedViewport.y
        ];
        if (z !== undefined) point[2] = z;
        coordinate = pickedViewport.unproject(point);
    }
    return {
        color: null,
        layer: null,
        viewport: pickedViewport,
        index: -1,
        picked: false,
        x,
        y,
        pixel: [
            x,
            y
        ],
        coordinate,
        devicePixel: pickInfo && 'pickedX' in pickInfo ? [
            pickInfo.pickedX,
            pickInfo.pickedY
        ] : undefined,
        pixelRatio
    };
}
function processPickInfo(opts) {
    const { pickInfo, lastPickedInfo, mode, layers } = opts;
    const { pickedColor, pickedLayer, pickedObjectIndex } = pickInfo;
    const affectedLayers = pickedLayer ? [
        pickedLayer
    ] : [];
    if (mode === 'hover') {
        const lastPickedPixelIndex = lastPickedInfo.index;
        const lastPickedLayerId = lastPickedInfo.layerId;
        const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;
        if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {
            if (pickedLayerId !== lastPickedLayerId) {
                const lastPickedLayer = layers.find((layer)=>layer.props.id === lastPickedLayerId);
                if (lastPickedLayer) affectedLayers.unshift(lastPickedLayer);
            }
            lastPickedInfo.layerId = pickedLayerId;
            lastPickedInfo.index = pickedObjectIndex;
            lastPickedInfo.info = null;
        }
    }
    const baseInfo = getEmptyPickingInfo(opts);
    const infos = new Map();
    infos.set(null, baseInfo);
    affectedLayers.forEach((layer)=>{
        let info = {
            ...baseInfo
        };
        if (layer === pickedLayer) {
            info.color = pickedColor;
            info.index = pickedObjectIndex;
            info.picked = true;
        }
        info = getLayerPickingInfo({
            layer,
            info,
            mode
        });
        const rootLayer = info.layer;
        if (layer === pickedLayer && mode === 'hover') lastPickedInfo.info = info;
        infos.set(rootLayer.id, info);
        if (mode === 'hover') rootLayer.updateAutoHighlight(info);
    });
    return infos;
}
function getLayerPickingInfo({ layer, info, mode }) {
    while(layer && info){
        const sourceLayer = info.layer || null;
        info.sourceLayer = sourceLayer;
        info.layer = layer;
        info = layer.getPickingInfo({
            info,
            mode,
            sourceLayer
        });
        layer = layer.parent;
    }
    return info;
}
function getViewportFromCoordinates(viewports, pixel) {
    for(let i = viewports.length - 1; i >= 0; i--){
        const viewport = viewports[i];
        if (viewport.containsPixel(pixel)) return viewport;
    }
    return viewports[0];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iMHIa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
const defaultStyle = {
    zIndex: '1',
    position: 'absolute',
    pointerEvents: 'none',
    color: '#a0a7b4',
    backgroundColor: '#29323c',
    padding: '10px',
    top: '0',
    left: '0',
    display: 'none'
};
class Tooltip {
    constructor(canvas){
        (0, _definePropertyDefault.default)(this, "el", null);
        (0, _definePropertyDefault.default)(this, "isVisible", false);
        const canvasParent = canvas.parentElement;
        if (canvasParent) {
            this.el = document.createElement('div');
            this.el.className = 'deck-tooltip';
            Object.assign(this.el.style, defaultStyle);
            canvasParent.appendChild(this.el);
        }
    }
    setTooltip(displayInfo, x, y) {
        const el = this.el;
        if (!el) return;
        if (typeof displayInfo === 'string') el.innerText = displayInfo;
        else if (!displayInfo) {
            this.isVisible = false;
            el.style.display = 'none';
            return;
        } else {
            if (displayInfo.text) el.innerText = displayInfo.text;
            if (displayInfo.html) el.innerHTML = displayInfo.html;
            if (displayInfo.className) el.className = displayInfo.className;
        }
        this.isVisible = true;
        el.style.display = 'block';
        el.style.transform = "translate(".concat(x, "px, ").concat(y, "px)");
        if (displayInfo && typeof displayInfo === 'object' && 'style' in displayInfo) Object.assign(el.style, displayInfo.style);
    }
    remove() {
        if (this.el) {
            this.el.remove();
            this.el = null;
        }
    }
}
exports.default = Tooltip;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"a1GsX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventManager", ()=>(0, _eventManagerDefault.default));
var _eventManager = require("./event-manager");
var _eventManagerDefault = parcelHelpers.interopDefault(_eventManager);

},{"./event-manager":"gflLz","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gflLz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hammer = require("./utils/hammer");
var _wheelInput = require("./inputs/wheel-input");
var _wheelInputDefault = parcelHelpers.interopDefault(_wheelInput);
var _moveInput = require("./inputs/move-input");
var _moveInputDefault = parcelHelpers.interopDefault(_moveInput);
var _keyInput = require("./inputs/key-input");
var _keyInputDefault = parcelHelpers.interopDefault(_keyInput);
var _contextmenuInput = require("./inputs/contextmenu-input");
var _contextmenuInputDefault = parcelHelpers.interopDefault(_contextmenuInput);
var _eventRegistrar = require("./utils/event-registrar");
var _eventRegistrarDefault = parcelHelpers.interopDefault(_eventRegistrar);
var _constants = require("./constants");
const DEFAULT_OPTIONS = {
    // event handlers
    events: null,
    // custom recognizers
    recognizers: null,
    recognizerOptions: {},
    Manager: // Manager class
    (0, _hammer.Manager),
    // allow browser default touch action
    // https://github.com/uber/react-map-gl/issues/506
    touchAction: 'none',
    tabIndex: 0
};
class EventManager {
    constructor(element = null, options){
        /**
         * Handle basic events using the 'hammer.input' Hammer.js API:
         * Before running Recognizers, Hammer emits a 'hammer.input' event
         * with the basic event info. This function emits all basic events
         * aliased to the "class" of event received.
         * See constants.BASIC_EVENT_CLASSES basic event class definitions.
         */ this._onBasicInput = (event)=>{
            const { srcEvent } = event;
            const alias = (0, _constants.BASIC_EVENT_ALIASES)[srcEvent.type];
            if (alias) // fire all events aliased to srcEvent.type
            this.manager.emit(alias, event);
        };
        /**
         * Handle events not supported by Hammer.js,
         * and pipe back out through same (Hammer) channel used by other events.
         */ this._onOtherEvent = (event)=>{
            // console.log('onotherevent', event.type, event)
            this.manager.emit(event.type, event);
        };
        this.options = {
            ...DEFAULT_OPTIONS,
            ...options
        };
        this.events = new Map();
        this.setElement(element);
        // Register all passed events.
        const { events } = this.options;
        if (events) this.on(events);
    }
    getElement() {
        return this.element;
    }
    setElement(element) {
        if (this.element) // unregister all events
        this.destroy();
        this.element = element;
        if (!element) return;
        const { options } = this;
        const ManagerClass = options.Manager;
        this.manager = new ManagerClass(element, {
            touchAction: options.touchAction,
            recognizers: options.recognizers || (0, _constants.RECOGNIZERS)
        }).on('hammer.input', this._onBasicInput);
        if (!options.recognizers) // Set default recognize withs
        // http://hammerjs.github.io/recognize-with/
        Object.keys((0, _constants.RECOGNIZER_COMPATIBLE_MAP)).forEach((name)=>{
            const recognizer = this.manager.get(name);
            if (recognizer) (0, _constants.RECOGNIZER_COMPATIBLE_MAP)[name].forEach((otherName)=>{
                recognizer.recognizeWith(otherName);
            });
        });
        // Set recognizer options
        for(const recognizerName in options.recognizerOptions){
            const recognizer = this.manager.get(recognizerName);
            if (recognizer) {
                const recognizerOption = options.recognizerOptions[recognizerName];
                // `enable` is managed by the event registrations
                delete recognizerOption.enable;
                recognizer.set(recognizerOption);
            }
        }
        // Handle events not handled by Hammer.js:
        // - mouse wheel
        // - pointer/touch/mouse move
        this.wheelInput = new (0, _wheelInputDefault.default)(element, this._onOtherEvent, {
            enable: false
        });
        this.moveInput = new (0, _moveInputDefault.default)(element, this._onOtherEvent, {
            enable: false
        });
        this.keyInput = new (0, _keyInputDefault.default)(element, this._onOtherEvent, {
            enable: false,
            tabIndex: options.tabIndex
        });
        this.contextmenuInput = new (0, _contextmenuInputDefault.default)(element, this._onOtherEvent, {
            enable: false
        });
        // Register all existing events
        for (const [eventAlias, eventRegistrar] of this.events)if (!eventRegistrar.isEmpty()) {
            // Enable recognizer for this event.
            this._toggleRecognizer(eventRegistrar.recognizerName, true);
            this.manager.on(eventAlias, eventRegistrar.handleEvent);
        }
    }
    // Tear down internal event management implementations.
    destroy() {
        if (this.element) {
            // wheelInput etc. are created in setElement() and therefore
            // cannot exist if there is no element
            this.wheelInput.destroy();
            this.moveInput.destroy();
            this.keyInput.destroy();
            this.contextmenuInput.destroy();
            this.manager.destroy();
            this.wheelInput = null;
            this.moveInput = null;
            this.keyInput = null;
            this.contextmenuInput = null;
            this.manager = null;
            this.element = null;
        }
    }
    /** Register an event handler function to be called on `event` */ on(event, handler, opts) {
        this._addEventHandler(event, handler, opts, false);
    }
    once(event, handler, opts) {
        this._addEventHandler(event, handler, opts, true);
    }
    watch(event, handler, opts) {
        this._addEventHandler(event, handler, opts, false, true);
    }
    off(event, handler) {
        this._removeEventHandler(event, handler);
    }
    /*
     * Enable/disable recognizer for the given event
     */ _toggleRecognizer(name, enabled) {
        const { manager } = this;
        if (!manager) return;
        const recognizer = manager.get(name);
        // @ts-ignore
        if (recognizer && recognizer.options.enable !== enabled) {
            recognizer.set({
                enable: enabled
            });
            const fallbackRecognizers = (0, _constants.RECOGNIZER_FALLBACK_MAP)[name];
            if (fallbackRecognizers && !this.options.recognizers) // Set default require failures
            // http://hammerjs.github.io/require-failure/
            fallbackRecognizers.forEach((otherName)=>{
                const otherRecognizer = manager.get(otherName);
                if (enabled) {
                    // Wait for this recognizer to fail
                    otherRecognizer.requireFailure(name);
                    /**
                         * This seems to be a bug in hammerjs:
                         * requireFailure() adds both ways
                         * dropRequireFailure() only drops one way
                         * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/
                           recognizer-constructor.js#L136
                         */ recognizer.dropRequireFailure(otherName);
                } else // Do not wait for this recognizer to fail
                otherRecognizer.dropRequireFailure(name);
            });
        }
        this.wheelInput.enableEventType(name, enabled);
        this.moveInput.enableEventType(name, enabled);
        this.keyInput.enableEventType(name, enabled);
        this.contextmenuInput.enableEventType(name, enabled);
    }
    /**
     * Process the event registration for a single event + handler.
     */ _addEventHandler(event, handler, opts, once, passive) {
        if (typeof event !== 'string') {
            // @ts-ignore
            opts = handler;
            // If `event` is a map, call `on()` for each entry.
            for(const eventName in event)this._addEventHandler(eventName, event[eventName], opts, once, passive);
            return;
        }
        const { manager, events } = this;
        // Alias to a recognized gesture as necessary.
        const eventAlias = (0, _constants.GESTURE_EVENT_ALIASES)[event] || event;
        let eventRegistrar = events.get(eventAlias);
        if (!eventRegistrar) {
            eventRegistrar = new (0, _eventRegistrarDefault.default)(this);
            events.set(eventAlias, eventRegistrar);
            // Enable recognizer for this event.
            eventRegistrar.recognizerName = (0, _constants.EVENT_RECOGNIZER_MAP)[eventAlias] || eventAlias;
            // Listen to the event
            if (manager) manager.on(eventAlias, eventRegistrar.handleEvent);
        }
        eventRegistrar.add(event, handler, opts, once, passive);
        if (!eventRegistrar.isEmpty()) this._toggleRecognizer(eventRegistrar.recognizerName, true);
    }
    /**
     * Process the event deregistration for a single event + handler.
     */ _removeEventHandler(event, handler) {
        if (typeof event !== 'string') {
            // If `event` is a map, call `off()` for each entry.
            for(const eventName in event)this._removeEventHandler(eventName, event[eventName]);
            return;
        }
        const { events } = this;
        // Alias to a recognized gesture as necessary.
        const eventAlias = (0, _constants.GESTURE_EVENT_ALIASES)[event] || event;
        const eventRegistrar = events.get(eventAlias);
        if (!eventRegistrar) return;
        eventRegistrar.remove(event, handler);
        if (eventRegistrar.isEmpty()) {
            const { recognizerName } = eventRegistrar;
            // Disable recognizer if no more handlers are attached to its events
            let isRecognizerUsed = false;
            for (const eh of events.values())if (eh.recognizerName === recognizerName && !eh.isEmpty()) {
                isRecognizerUsed = true;
                break;
            }
            if (!isRecognizerUsed) this._toggleRecognizer(recognizerName, false);
        }
    }
}
exports.default = EventManager;

},{"./utils/hammer":"j1S0V","./inputs/wheel-input":"awH9c","./inputs/move-input":"5GzVN","./inputs/key-input":"6FHrw","./inputs/contextmenu-input":"lG6MV","./utils/event-registrar":"2ASct","./constants":"cQtDC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"j1S0V":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Manager", ()=>Manager);
var _hammerjs = require("hammerjs");
var _hammerOverrides = require("./hammer-overrides");
(0, _hammerOverrides.enhancePointerEventInput)(_hammerjs.PointerEventInput);
(0, _hammerOverrides.enhanceMouseInput)(_hammerjs.MouseInput);
const Manager = _hammerjs.Manager;
exports.default = _hammerjs;

},{"hammerjs":"7VQgp","./hammer-overrides":"aAU3Z","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7VQgp":[function(require,module,exports,__globalThis) {
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */ (function(window1, document1, exportName, undefined) {
    'use strict';
    var VENDOR_PREFIXES = [
        '',
        'webkit',
        'Moz',
        'MS',
        'ms',
        'o'
    ];
    var TEST_ELEMENT = document1.createElement('div');
    var TYPE_FUNCTION = 'function';
    var round = Math.round;
    var abs = Math.abs;
    var now = Date.now;
    /**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */ function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
    }
    /**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */ function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }
    /**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */ function each(obj, iterator, context) {
        var i;
        if (!obj) return;
        if (obj.forEach) obj.forEach(iterator, context);
        else if (obj.length !== undefined) {
            i = 0;
            while(i < obj.length){
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else for(i in obj)obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
    }
    /**
 * wrap a method with a deprecation warning and stack trace
 * @param {Function} method
 * @param {String} name
 * @param {String} message
 * @returns {Function} A new function wrapping the supplied method.
 */ function deprecate(method, name, message) {
        var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
        return function() {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
            var log = window1.console && (window1.console.warn || window1.console.log);
            if (log) log.call(window1.console, deprecationMessage, stack);
            return method.apply(this, arguments);
        };
    }
    /**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} target
 * @param {...Object} objects_to_assign
 * @returns {Object} target
 */ var assign;
    if (typeof Object.assign !== 'function') assign = function assign(target) {
        if (target === undefined || target === null) throw new TypeError('Cannot convert undefined or null to object');
        var output = Object(target);
        for(var index = 1; index < arguments.length; index++){
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for(var nextKey in source)if (source.hasOwnProperty(nextKey)) output[nextKey] = source[nextKey];
            }
        }
        return output;
    };
    else assign = Object.assign;
    /**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge=false]
 * @returns {Object} dest
 */ var extend = deprecate(function extend(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while(i < keys.length){
            if (!merge || merge && dest[keys[i]] === undefined) dest[keys[i]] = src[keys[i]];
            i++;
        }
        return dest;
    }, 'extend', 'Use `assign`.');
    /**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */ var merge = deprecate(function merge(dest, src) {
        return extend(dest, src, true);
    }, 'merge', 'Use `assign`.');
    /**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */ function inherit(child, base, properties) {
        var baseP = base.prototype, childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;
        if (properties) assign(childP, properties);
    }
    /**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */ function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }
    /**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */ function boolOrFn(val, args) {
        if (typeof val == TYPE_FUNCTION) return val.apply(args ? args[0] || undefined : undefined, args);
        return val;
    }
    /**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */ function ifUndefined(val1, val2) {
        return val1 === undefined ? val2 : val1;
    }
    /**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */ function addEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.addEventListener(type, handler, false);
        });
    }
    /**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */ function removeEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.removeEventListener(type, handler, false);
        });
    }
    /**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */ function hasParent(node, parent) {
        while(node){
            if (node == parent) return true;
            node = node.parentNode;
        }
        return false;
    }
    /**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */ function inStr(str, find) {
        return str.indexOf(find) > -1;
    }
    /**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */ function splitStr(str) {
        return str.trim().split(/\s+/g);
    }
    /**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */ function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) return src.indexOf(find);
        else {
            var i = 0;
            while(i < src.length){
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) return i;
                i++;
            }
            return -1;
        }
    }
    /**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */ function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }
    /**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */ function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;
        while(i < src.length){
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) results.push(src[i]);
            values[i] = val;
            i++;
        }
        if (sort) {
            if (!key) results = results.sort();
            else results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
        return results;
    }
    /**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */ function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;
        while(i < VENDOR_PREFIXES.length){
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;
            if (prop in obj) return prop;
            i++;
        }
        return undefined;
    }
    /**
 * get a unique id
 * @returns {number} uniqueId
 */ var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }
    /**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */ function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window1;
    }
    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
    var SUPPORT_TOUCH = 'ontouchstart' in window1;
    var SUPPORT_POINTER_EVENTS = prefixed(window1, 'PointerEvent') !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';
    var COMPUTE_INTERVAL = 25;
    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;
    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;
    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    var PROPS_XY = [
        'x',
        'y'
    ];
    var PROPS_CLIENT_XY = [
        'clientX',
        'clientY'
    ];
    /**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */ function Input(manager, callback) {
        var self1 = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;
        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.
        this.domHandler = function(ev) {
            if (boolOrFn(manager.options.enable, [
                manager
            ])) self1.handler(ev);
        };
        this.init();
    }
    Input.prototype = {
        /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */ handler: function() {},
        /**
     * bind the events
     */ init: function() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },
        /**
     * unbind the events
     */ destroy: function() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
    };
    /**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */ function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;
        if (inputClass) Type = inputClass;
        else if (SUPPORT_POINTER_EVENTS) Type = PointerEventInput;
        else if (SUPPORT_ONLY_TOUCH) Type = TouchInput;
        else if (!SUPPORT_TOUCH) Type = MouseInput;
        else Type = TouchMouseInput;
        return new Type(manager, inputHandler);
    }
    /**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */ function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;
        if (isFirst) manager.session = {};
        // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType;
        // compute scale, rotation etc
        computeInputData(manager, input);
        // emit secret event
        manager.emit('hammer.input', input);
        manager.recognize(input);
        manager.session.prevInput = input;
    }
    /**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */ function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;
        // store the first input to calculate the distance and direction
        if (!session.firstInput) session.firstInput = simpleCloneInputData(input);
        // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) session.firstMultiple = simpleCloneInputData(input);
        else if (pointersLength === 1) session.firstMultiple = false;
        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input);
        // find the correct target
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) target = input.srcEvent.target;
        input.target = target;
    }
    function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};
        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };
            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }
        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }
    /**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */ function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input, deltaTime = input.timeStamp - last.timeStamp, velocity, velocityX, velocityY, direction;
        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }
        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }
    /**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */ function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while(i < input.pointers.length){
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }
        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }
    /**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */ function getCenter(pointers) {
        var pointersLength = pointers.length;
        // no need to loop when only one touch
        if (pointersLength === 1) return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
        var x = 0, y = 0, i = 0;
        while(i < pointersLength){
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }
        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }
    /**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */ function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }
    /**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */ function getDirection(x, y) {
        if (x === y) return DIRECTION_NONE;
        if (abs(x) >= abs(y)) return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }
    /**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */ function getDistance(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
    }
    /**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */ function getAngle(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }
    /**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */ function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }
    /**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */ function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }
    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };
    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
    /**
 * Mouse events input
 * @constructor
 * @extends Input
 */ function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;
        this.pressed = false; // mousedown state
        Input.apply(this, arguments);
    }
    inherit(MouseInput, Input, {
        /**
     * handle mouse events
     * @param {Object} ev
     */ handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type];
            // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) this.pressed = true;
            if (eventType & INPUT_MOVE && ev.which !== 1) eventType = INPUT_END;
            // mouse must be down
            if (!this.pressed) return;
            if (eventType & INPUT_END) this.pressed = false;
            this.callback(this.manager, eventType, {
                pointers: [
                    ev
                ],
                changedPointers: [
                    ev
                ],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        }
    });
    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    };
    // in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };
    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
    // IE10 has prefixed support, and case-sensitive
    if (window1.MSPointerEvent && !window1.PointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }
    /**
 * Pointer events input
 * @constructor
 * @extends Input
 */ function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;
        Input.apply(this, arguments);
        this.store = this.manager.session.pointerEvents = [];
    }
    inherit(PointerEventInput, Input, {
        /**
     * handle mouse events
     * @param {Object} ev
     */ handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;
            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
            var isTouch = pointerType == INPUT_TYPE_TOUCH;
            // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, 'pointerId');
            // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) removePointer = true;
            // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) return;
            // update the event in the store
            store[storeIndex] = ev;
            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [
                    ev
                ],
                pointerType: pointerType,
                srcEvent: ev
            });
            if (removePointer) // remove from the store
            store.splice(storeIndex, 1);
        }
    });
    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
    /**
 * Touch events input
 * @constructor
 * @extends Input
 */ function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;
        Input.apply(this, arguments);
    }
    inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
            // should we handle the touch events?
            if (type === INPUT_START) this.started = true;
            if (!this.started) return;
            var touches = normalizeSingleTouches.call(this, ev, type);
            // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) this.started = false;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });
    /**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */ function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);
        if (type & (INPUT_END | INPUT_CANCEL)) all = uniqueArray(all.concat(changed), 'identifier', true);
        return [
            all,
            changed
        ];
    }
    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
    /**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */ function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};
        Input.apply(this, arguments);
    }
    inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) return;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });
    /**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */ function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;
        // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [
                allTouches,
                allTouches
            ];
        }
        var i, targetTouches, changedTouches = toArray(ev.changedTouches), changedTargetTouches = [], target = this.target;
        // get target touches from touches
        targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target);
        });
        // collect touches
        if (type === INPUT_START) {
            i = 0;
            while(i < targetTouches.length){
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        }
        // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while(i < changedTouches.length){
            if (targetIds[changedTouches[i].identifier]) changedTargetTouches.push(changedTouches[i]);
            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) delete targetIds[changedTouches[i].identifier];
            i++;
        }
        if (!changedTargetTouches.length) return;
        return [
            // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
            uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
            changedTargetTouches
        ];
    }
    /**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */ var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;
    function TouchMouseInput() {
        Input.apply(this, arguments);
        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);
        this.primaryTouch = null;
        this.lastTouches = [];
    }
    inherit(TouchMouseInput, Input, {
        /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */ handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH, isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) return;
            // when we're in a touch event, record touches to  de-dupe synthetic mouse event
            if (isTouch) recordTouches.call(this, inputEvent, inputData);
            else if (isMouse && isSyntheticEvent.call(this, inputData)) return;
            this.callback(manager, inputEvent, inputData);
        },
        /**
     * remove the event listeners
     */ destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });
    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) setLastTouch.call(this, eventData);
    }
    function setLastTouch(eventData) {
        var touch = eventData.changedPointers[0];
        if (touch.identifier === this.primaryTouch) {
            var lastTouch = {
                x: touch.clientX,
                y: touch.clientY
            };
            this.lastTouches.push(lastTouch);
            var lts = this.lastTouches;
            var removeLastTouch = function() {
                var i = lts.indexOf(lastTouch);
                if (i > -1) lts.splice(i, 1);
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }
    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
        for(var i = 0; i < this.lastTouches.length; i++){
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) return true;
        }
        return false;
    }
    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
    // magical touchAction value
    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';
    var TOUCH_ACTION_MAP = getTouchActionProps();
    /**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */ function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
    }
    TouchAction.prototype = {
        /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */ set: function(value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) value = this.compute();
            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            this.actions = value.toLowerCase().trim();
        },
        /**
     * just re-set the touchAction value
     */ update: function() {
            this.set(this.manager.options.touchAction);
        },
        /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */ compute: function() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
                if (boolOrFn(recognizer.options.enable, [
                    recognizer
                ])) actions = actions.concat(recognizer.getTouchAction());
            });
            return cleanTouchActions(actions.join(' '));
        },
        /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */ preventDefaults: function(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;
            // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }
            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
            if (hasNone) {
                //do not prevent defaults if this is a tap gesture
                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;
                if (isTapPointer && isTapMovement && isTapTouchTime) return;
            }
            if (hasPanX && hasPanY) // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) return this.preventSrc(srcEvent);
        },
        /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */ preventSrc: function(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        }
    };
    /**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */ function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) return TOUCH_ACTION_NONE;
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
        // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) return TOUCH_ACTION_NONE;
        // pan-x OR pan-y
        if (hasPanX || hasPanY) return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) return TOUCH_ACTION_MANIPULATION;
        return TOUCH_ACTION_AUTO;
    }
    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) return false;
        var touchMap = {};
        var cssSupports = window1.CSS && window1.CSS.supports;
        [
            'auto',
            'manipulation',
            'pan-y',
            'pan-x',
            'pan-x pan-y',
            'none'
        ].forEach(function(val) {
            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            touchMap[val] = cssSupports ? window1.CSS.supports('touch-action', val) : true;
        });
        return touchMap;
    }
    /**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */ var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;
    /**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */ function Recognizer(options) {
        this.options = assign({}, this.defaults, options || {});
        this.id = uniqueId();
        this.manager = null;
        // default is enable true
        this.options.enable = ifUndefined(this.options.enable, true);
        this.state = STATE_POSSIBLE;
        this.simultaneous = {};
        this.requireFail = [];
    }
    Recognizer.prototype = {
        /**
     * @virtual
     * @type {Object}
     */ defaults: {},
        /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */ set: function(options) {
            assign(this.options, options);
            // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        },
        /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ recognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) return this;
            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        },
        /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ dropRecognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        },
        /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ requireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) return this;
            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        },
        /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ dropRequireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) this.requireFail.splice(index, 1);
            return this;
        },
        /**
     * has require failures boolean
     * @returns {boolean}
     */ hasRequireFailures: function() {
            return this.requireFail.length > 0;
        },
        /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */ canRecognizeWith: function(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        },
        /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */ emit: function(input) {
            var self1 = this;
            var state = this.state;
            function emit(event) {
                self1.manager.emit(event, input);
            }
            // 'panstart' and 'panmove'
            if (state < STATE_ENDED) emit(self1.options.event + stateStr(state));
            emit(self1.options.event); // simple 'eventName' events
            if (input.additionalEvent) emit(input.additionalEvent);
            // panend and pancancel
            if (state >= STATE_ENDED) emit(self1.options.event + stateStr(state));
        },
        /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */ tryEmit: function(input) {
            if (this.canEmit()) return this.emit(input);
            // it's failing anyway
            this.state = STATE_FAILED;
        },
        /**
     * can we emit?
     * @returns {boolean}
     */ canEmit: function() {
            var i = 0;
            while(i < this.requireFail.length){
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) return false;
                i++;
            }
            return true;
        },
        /**
     * update the recognizer
     * @param {Object} inputData
     */ recognize: function(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign({}, inputData);
            // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [
                this,
                inputDataClone
            ])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            }
            // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) this.state = STATE_POSSIBLE;
            this.state = this.process(inputDataClone);
            // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) this.tryEmit(inputDataClone);
        },
        /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */ process: function(inputData) {},
        /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */ getTouchAction: function() {},
        /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */ reset: function() {}
    };
    /**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */ function stateStr(state) {
        if (state & STATE_CANCELLED) return 'cancel';
        else if (state & STATE_ENDED) return 'end';
        else if (state & STATE_CHANGED) return 'move';
        else if (state & STATE_BEGAN) return 'start';
        return '';
    }
    /**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */ function directionStr(direction) {
        if (direction == DIRECTION_DOWN) return 'down';
        else if (direction == DIRECTION_UP) return 'up';
        else if (direction == DIRECTION_LEFT) return 'left';
        else if (direction == DIRECTION_RIGHT) return 'right';
        return '';
    }
    /**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */ function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) return manager.get(otherRecognizer);
        return otherRecognizer;
    }
    /**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */ function AttrRecognizer() {
        Recognizer.apply(this, arguments);
    }
    inherit(AttrRecognizer, Recognizer, {
        /**
     * @namespace
     * @memberof AttrRecognizer
     */ defaults: {
            /**
         * @type {Number}
         * @default 1
         */ pointers: 1
        },
        /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */ attrTest: function(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        },
        /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */ process: function(input) {
            var state = this.state;
            var eventType = input.eventType;
            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);
            // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) return state | STATE_CANCELLED;
            else if (isRecognized || isValid) {
                if (eventType & INPUT_END) return state | STATE_ENDED;
                else if (!(state & STATE_BEGAN)) return STATE_BEGAN;
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        }
    });
    /**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */ function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);
        this.pX = null;
        this.pY = null;
    }
    inherit(PanRecognizer, AttrRecognizer, {
        /**
     * @namespace
     * @memberof PanRecognizer
     */ defaults: {
            event: 'pan',
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
        },
        getTouchAction: function() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) actions.push(TOUCH_ACTION_PAN_Y);
            if (direction & DIRECTION_VERTICAL) actions.push(TOUCH_ACTION_PAN_X);
            return actions;
        },
        directionTest: function(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;
            // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x != this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y != this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        },
        attrTest: function(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        },
        emit: function(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;
            var direction = directionStr(input.direction);
            if (direction) input.additionalEvent = this.options.event + direction;
            this._super.emit.call(this, input);
        }
    });
    /**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */ function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }
    inherit(PinchRecognizer, AttrRecognizer, {
        /**
     * @namespace
     * @memberof PinchRecognizer
     */ defaults: {
            event: 'pinch',
            threshold: 0,
            pointers: 2
        },
        getTouchAction: function() {
            return [
                TOUCH_ACTION_NONE
            ];
        },
        attrTest: function(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },
        emit: function(input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? 'in' : 'out';
                input.additionalEvent = this.options.event + inOut;
            }
            this._super.emit.call(this, input);
        }
    });
    /**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */ function PressRecognizer() {
        Recognizer.apply(this, arguments);
        this._timer = null;
        this._input = null;
    }
    inherit(PressRecognizer, Recognizer, {
        /**
     * @namespace
     * @memberof PressRecognizer
     */ defaults: {
            event: 'press',
            pointers: 1,
            time: 251,
            threshold: 9 // a minimal movement is ok, but keep it low
        },
        getTouchAction: function() {
            return [
                TOUCH_ACTION_AUTO
            ];
        },
        process: function(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;
            this._input = input;
            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) this.reset();
            else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeoutContext(function() {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                }, options.time, this);
            } else if (input.eventType & INPUT_END) return STATE_RECOGNIZED;
            return STATE_FAILED;
        },
        reset: function() {
            clearTimeout(this._timer);
        },
        emit: function(input) {
            if (this.state !== STATE_RECOGNIZED) return;
            if (input && input.eventType & INPUT_END) this.manager.emit(this.options.event + 'up', input);
            else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        }
    });
    /**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */ function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }
    inherit(RotateRecognizer, AttrRecognizer, {
        /**
     * @namespace
     * @memberof RotateRecognizer
     */ defaults: {
            event: 'rotate',
            threshold: 0,
            pointers: 2
        },
        getTouchAction: function() {
            return [
                TOUCH_ACTION_NONE
            ];
        },
        attrTest: function(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
    });
    /**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */ function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }
    inherit(SwipeRecognizer, AttrRecognizer, {
        /**
     * @namespace
     * @memberof SwipeRecognizer
     */ defaults: {
            event: 'swipe',
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
        },
        getTouchAction: function() {
            return PanRecognizer.prototype.getTouchAction.call(this);
        },
        attrTest: function(input) {
            var direction = this.options.direction;
            var velocity;
            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) velocity = input.overallVelocity;
            else if (direction & DIRECTION_HORIZONTAL) velocity = input.overallVelocityX;
            else if (direction & DIRECTION_VERTICAL) velocity = input.overallVelocityY;
            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },
        emit: function(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) this.manager.emit(this.options.event + direction, input);
            this.manager.emit(this.options.event, input);
        }
    });
    /**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */ function TapRecognizer() {
        Recognizer.apply(this, arguments);
        // previous time and center,
        // used for tap counting
        this.pTime = false;
        this.pCenter = false;
        this._timer = null;
        this._input = null;
        this.count = 0;
    }
    inherit(TapRecognizer, Recognizer, {
        /**
     * @namespace
     * @memberof PinchRecognizer
     */ defaults: {
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300,
            time: 250,
            threshold: 9,
            posThreshold: 10 // a multi-tap can be a bit off the initial position
        },
        getTouchAction: function() {
            return [
                TOUCH_ACTION_MANIPULATION
            ];
        },
        process: function(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;
            this.reset();
            if (input.eventType & INPUT_START && this.count === 0) return this.failTimeout();
            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType != INPUT_END) return this.failTimeout();
                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                this.pTime = input.timeStamp;
                this.pCenter = input.center;
                if (!validMultiTap || !validInterval) this.count = 1;
                else this.count += 1;
                this._input = input;
                // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) return STATE_RECOGNIZED;
                    else {
                        this._timer = setTimeoutContext(function() {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit();
                        }, options.interval, this);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        },
        failTimeout: function() {
            this._timer = setTimeoutContext(function() {
                this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
        },
        reset: function() {
            clearTimeout(this._timer);
        },
        emit: function() {
            if (this.state == STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        }
    });
    /**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */ function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
        return new Manager(element, options);
    }
    /**
 * @const {string}
 */ Hammer.VERSION = '2.0.7';
    /**
 * default settings
 * @namespace
 */ Hammer.defaults = {
        /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */ domEvents: false,
        /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */ touchAction: TOUCH_ACTION_COMPUTE,
        /**
     * @type {Boolean}
     * @default true
     */ enable: true,
        /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */ inputTarget: null,
        /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */ inputClass: null,
        /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */ preset: [
            // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
            [
                RotateRecognizer,
                {
                    enable: false
                }
            ],
            [
                PinchRecognizer,
                {
                    enable: false
                },
                [
                    'rotate'
                ]
            ],
            [
                SwipeRecognizer,
                {
                    direction: DIRECTION_HORIZONTAL
                }
            ],
            [
                PanRecognizer,
                {
                    direction: DIRECTION_HORIZONTAL
                },
                [
                    'swipe'
                ]
            ],
            [
                TapRecognizer
            ],
            [
                TapRecognizer,
                {
                    event: 'doubletap',
                    taps: 2
                },
                [
                    'tap'
                ]
            ],
            [
                PressRecognizer
            ]
        ],
        /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */ cssProps: {
            /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */ userSelect: 'none',
            /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */ touchSelect: 'none',
            /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */ touchCallout: 'none',
            /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */ contentZooming: 'none',
            /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */ userDrag: 'none',
            /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */ tapHighlightColor: 'rgba(0,0,0,0)'
        }
    };
    var STOP = 1;
    var FORCED_STOP = 2;
    /**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */ function Manager(element, options) {
        this.options = assign({}, Hammer.defaults, options || {});
        this.options.inputTarget = this.options.inputTarget || element;
        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.oldCssProps = {};
        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);
        toggleCssProps(this, true);
        each(this.options.recognizers, function(item) {
            var recognizer = this.add(new item[0](item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
        }, this);
    }
    Manager.prototype = {
        /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */ set: function(options) {
            assign(this.options, options);
            // Options that need a little more setup
            if (options.touchAction) this.touchAction.update();
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        },
        /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */ stop: function(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        },
        /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */ recognize: function(inputData) {
            var session = this.session;
            if (session.stopped) return;
            // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);
            var recognizer;
            var recognizers = this.recognizers;
            // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer;
            // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) curRecognizer = session.curRecognizer = null;
            var i = 0;
            while(i < recognizers.length){
                recognizer = recognizers[i];
                // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || // 2
                recognizer.canRecognizeWith(curRecognizer))) recognizer.recognize(inputData);
                else recognizer.reset();
                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) curRecognizer = session.curRecognizer = recognizer;
                i++;
            }
        },
        /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */ get: function(recognizer) {
            if (recognizer instanceof Recognizer) return recognizer;
            var recognizers = this.recognizers;
            for(var i = 0; i < recognizers.length; i++){
                if (recognizers[i].options.event == recognizer) return recognizers[i];
            }
            return null;
        },
        /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */ add: function(recognizer) {
            if (invokeArrayArg(recognizer, 'add', this)) return this;
            // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) this.remove(existing);
            this.recognizers.push(recognizer);
            recognizer.manager = this;
            this.touchAction.update();
            return recognizer;
        },
        /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */ remove: function(recognizer) {
            if (invokeArrayArg(recognizer, 'remove', this)) return this;
            recognizer = this.get(recognizer);
            // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, recognizer);
                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }
            return this;
        },
        /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */ on: function(events, handler) {
            if (events === undefined) return;
            if (handler === undefined) return;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        },
        /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */ off: function(events, handler) {
            if (events === undefined) return;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                if (!handler) delete handlers[event];
                else handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            });
            return this;
        },
        /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */ emit: function(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) triggerDomEvent(event, data);
            // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) return;
            data.type = event;
            data.preventDefault = function() {
                data.srcEvent.preventDefault();
            };
            var i = 0;
            while(i < handlers.length){
                handlers[i](data);
                i++;
            }
        },
        /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */ destroy: function() {
            this.element && toggleCssProps(this, false);
            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        }
    };
    /**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */ function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) return;
        var prop;
        each(manager.options.cssProps, function(value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else element.style[prop] = manager.oldCssProps[prop] || '';
        });
        if (!add) manager.oldCssProps = {};
    }
    /**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */ function triggerDomEvent(event, data) {
        var gestureEvent = document1.createEvent('Event');
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }
    assign(Hammer, {
        INPUT_START: INPUT_START,
        INPUT_MOVE: INPUT_MOVE,
        INPUT_END: INPUT_END,
        INPUT_CANCEL: INPUT_CANCEL,
        STATE_POSSIBLE: STATE_POSSIBLE,
        STATE_BEGAN: STATE_BEGAN,
        STATE_CHANGED: STATE_CHANGED,
        STATE_ENDED: STATE_ENDED,
        STATE_RECOGNIZED: STATE_RECOGNIZED,
        STATE_CANCELLED: STATE_CANCELLED,
        STATE_FAILED: STATE_FAILED,
        DIRECTION_NONE: DIRECTION_NONE,
        DIRECTION_LEFT: DIRECTION_LEFT,
        DIRECTION_RIGHT: DIRECTION_RIGHT,
        DIRECTION_UP: DIRECTION_UP,
        DIRECTION_DOWN: DIRECTION_DOWN,
        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
        DIRECTION_ALL: DIRECTION_ALL,
        Manager: Manager,
        Input: Input,
        TouchAction: TouchAction,
        TouchInput: TouchInput,
        MouseInput: MouseInput,
        PointerEventInput: PointerEventInput,
        TouchMouseInput: TouchMouseInput,
        SingleTouchInput: SingleTouchInput,
        Recognizer: Recognizer,
        AttrRecognizer: AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,
        on: addEventListeners,
        off: removeEventListeners,
        each: each,
        merge: merge,
        extend: extend,
        assign: assign,
        inherit: inherit,
        bindFn: bindFn,
        prefixed: prefixed
    });
    // this prevents errors when Hammer is loaded in the presence of an AMD
    //  style loader but by script tag, not by the loader.
    var freeGlobal = typeof window1 !== 'undefined' ? window1 : typeof self !== 'undefined' ? self : {}; // jshint ignore:line
    freeGlobal.Hammer = Hammer;
    if (typeof define === 'function' && define.amd) define(function() {
        return Hammer;
    });
    else if (module.exports) module.exports = Hammer;
    else window1[exportName] = Hammer;
})(window, document, 'Hammer');

},{}],"aAU3Z":[function(require,module,exports,__globalThis) {
/**
 * This file contains overrides the default
 * hammer.js functions to add our own utility
 */ /* eslint-disable */ /* Hammer.js constants */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-invalid-this */ parcelHelpers.export(exports, "enhancePointerEventInput", ()=>enhancePointerEventInput);
// overrides MouseInput.handler to accept right mouse button
parcelHelpers.export(exports, "enhanceMouseInput", ()=>enhanceMouseInput);
const INPUT_START = 1;
const INPUT_MOVE = 2;
const INPUT_END = 4;
const MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};
/**
 * Helper function that returns true if any element in an array meets given criteria.
 * Because older browsers do not support `Array.prototype.some`
 * @params array {Array}
 * @params predict {Function}
 */ function some(array, predict) {
    for(let i = 0; i < array.length; i++){
        if (predict(array[i])) return true;
    }
    return false;
}
function enhancePointerEventInput(PointerEventInput) {
    const oldHandler = PointerEventInput.prototype.handler;
    // overrides PointerEventInput.handler to accept right mouse button
    PointerEventInput.prototype.handler = function handler(ev) {
        const store = this.store;
        // Allow non-left mouse buttons through
        if (ev.button > 0 && ev.type === 'pointerdown') {
            if (!some(store, (e)=>e.pointerId === ev.pointerId)) store.push(ev);
        }
        oldHandler.call(this, ev);
    };
}
function enhanceMouseInput(MouseInput) {
    MouseInput.prototype.handler = function handler(ev) {
        let eventType = MOUSE_INPUT_MAP[ev.type];
        // on start we want to have the mouse button down
        if (eventType & INPUT_START && ev.button >= 0) this.pressed = true;
        if (eventType & INPUT_MOVE && ev.buttons === 0) eventType = INPUT_END;
        // mouse must be down
        if (!this.pressed) return;
        if (eventType & INPUT_END) this.pressed = false;
        this.callback(this.manager, eventType, {
            pointers: [
                ev
            ],
            changedPointers: [
                ev
            ],
            pointerType: 'mouse',
            srcEvent: ev
        });
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"awH9c":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _input = require("./input");
var _inputDefault = parcelHelpers.interopDefault(_input);
var _constants = require("../constants");
var _globals = require("../utils/globals");
const firefox = (0, _globals.userAgent).indexOf('firefox') !== -1;
const { WHEEL_EVENTS } = (0, _constants.INPUT_EVENT_TYPES);
const EVENT_TYPE = 'wheel';
// Constants for normalizing input delta
const WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;
const WHEEL_DELTA_PER_LINE = 40;
// Slow down zoom if shift key is held for more precise zooming
const SHIFT_MULTIPLIER = 0.25;
class WheelInput extends (0, _inputDefault.default) {
    constructor(element, callback, options){
        super(element, callback, options);
        /* eslint-disable complexity, max-statements */ this.handleEvent = (event)=>{
            if (!this.options.enable) return;
            let value = event.deltaY;
            if ((0, _globals.window).WheelEvent) {
                // Firefox doubles the values on retina screens...
                if (firefox && event.deltaMode === (0, _globals.window).WheelEvent.DOM_DELTA_PIXEL) value /= (0, _globals.window).devicePixelRatio;
                if (event.deltaMode === (0, _globals.window).WheelEvent.DOM_DELTA_LINE) value *= WHEEL_DELTA_PER_LINE;
            }
            if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) // This one is definitely a mouse wheel event.
            // Normalize this value to match trackpad.
            value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);
            if (event.shiftKey && value) value = value * SHIFT_MULTIPLIER;
            this.callback({
                type: EVENT_TYPE,
                center: {
                    x: event.clientX,
                    y: event.clientY
                },
                delta: -value,
                srcEvent: event,
                pointerType: 'mouse',
                target: event.target
            });
        };
        this.events = (this.options.events || []).concat(WHEEL_EVENTS);
        this.events.forEach((event)=>element.addEventListener(event, this.handleEvent, (0, _globals.passiveSupported) ? {
                passive: false
            } : false));
    }
    destroy() {
        this.events.forEach((event)=>this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */ enableEventType(eventType, enabled) {
        if (eventType === EVENT_TYPE) this.options.enable = enabled;
    }
}
exports.default = WheelInput;

},{"./input":"Yl6Eb","../constants":"cQtDC","../utils/globals":"40ePT","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"Yl6Eb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Input {
    constructor(element, callback, options){
        this.element = element;
        this.callback = callback;
        this.options = {
            enable: true,
            ...options
        };
    }
}
exports.default = Input;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cQtDC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RECOGNIZERS", ()=>RECOGNIZERS);
parcelHelpers.export(exports, "RECOGNIZER_COMPATIBLE_MAP", ()=>RECOGNIZER_COMPATIBLE_MAP);
parcelHelpers.export(exports, "RECOGNIZER_FALLBACK_MAP", ()=>RECOGNIZER_FALLBACK_MAP);
parcelHelpers.export(exports, "BASIC_EVENT_ALIASES", ()=>BASIC_EVENT_ALIASES);
parcelHelpers.export(exports, "INPUT_EVENT_TYPES", ()=>INPUT_EVENT_TYPES);
parcelHelpers.export(exports, "EVENT_RECOGNIZER_MAP", ()=>EVENT_RECOGNIZER_MAP);
parcelHelpers.export(exports, "GESTURE_EVENT_ALIASES", ()=>GESTURE_EVENT_ALIASES);
var _hammer = require("./utils/hammer");
var _hammerDefault = parcelHelpers.interopDefault(_hammer);
const RECOGNIZERS = (0, _hammerDefault.default) ? [
    [
        (0, _hammerDefault.default).Pan,
        {
            event: 'tripan',
            pointers: 3,
            threshold: 0,
            enable: false
        }
    ],
    [
        (0, _hammerDefault.default).Rotate,
        {
            enable: false
        }
    ],
    [
        (0, _hammerDefault.default).Pinch,
        {
            enable: false
        }
    ],
    [
        (0, _hammerDefault.default).Swipe,
        {
            enable: false
        }
    ],
    [
        (0, _hammerDefault.default).Pan,
        {
            threshold: 0,
            enable: false
        }
    ],
    [
        (0, _hammerDefault.default).Press,
        {
            enable: false
        }
    ],
    [
        (0, _hammerDefault.default).Tap,
        {
            event: 'doubletap',
            taps: 2,
            enable: false
        }
    ],
    // TODO - rename to 'tap' and 'singletap' in the next major release
    [
        (0, _hammerDefault.default).Tap,
        {
            event: 'anytap',
            enable: false
        }
    ],
    [
        (0, _hammerDefault.default).Tap,
        {
            enable: false
        }
    ]
] : null;
const RECOGNIZER_COMPATIBLE_MAP = {
    tripan: [
        'rotate',
        'pinch',
        'pan'
    ],
    rotate: [
        'pinch'
    ],
    pinch: [
        'pan'
    ],
    pan: [
        'press',
        'doubletap',
        'anytap',
        'tap'
    ],
    doubletap: [
        'anytap'
    ],
    anytap: [
        'tap'
    ]
};
const RECOGNIZER_FALLBACK_MAP = {
    doubletap: [
        'tap'
    ]
};
const BASIC_EVENT_ALIASES = {
    pointerdown: 'pointerdown',
    pointermove: 'pointermove',
    pointerup: 'pointerup',
    touchstart: 'pointerdown',
    touchmove: 'pointermove',
    touchend: 'pointerup',
    mousedown: 'pointerdown',
    mousemove: 'pointermove',
    mouseup: 'pointerup'
};
const INPUT_EVENT_TYPES = {
    KEY_EVENTS: [
        'keydown',
        'keyup'
    ],
    MOUSE_EVENTS: [
        'mousedown',
        'mousemove',
        'mouseup',
        'mouseover',
        'mouseout',
        'mouseleave'
    ],
    WHEEL_EVENTS: [
        // Chrome, Safari
        'wheel',
        // IE
        'mousewheel'
    ]
};
const EVENT_RECOGNIZER_MAP = {
    tap: 'tap',
    anytap: 'anytap',
    doubletap: 'doubletap',
    press: 'press',
    pinch: 'pinch',
    pinchin: 'pinch',
    pinchout: 'pinch',
    pinchstart: 'pinch',
    pinchmove: 'pinch',
    pinchend: 'pinch',
    pinchcancel: 'pinch',
    rotate: 'rotate',
    rotatestart: 'rotate',
    rotatemove: 'rotate',
    rotateend: 'rotate',
    rotatecancel: 'rotate',
    tripan: 'tripan',
    tripanstart: 'tripan',
    tripanmove: 'tripan',
    tripanup: 'tripan',
    tripandown: 'tripan',
    tripanleft: 'tripan',
    tripanright: 'tripan',
    tripanend: 'tripan',
    tripancancel: 'tripan',
    pan: 'pan',
    panstart: 'pan',
    panmove: 'pan',
    panup: 'pan',
    pandown: 'pan',
    panleft: 'pan',
    panright: 'pan',
    panend: 'pan',
    pancancel: 'pan',
    swipe: 'swipe',
    swipeleft: 'swipe',
    swiperight: 'swipe',
    swipeup: 'swipe',
    swipedown: 'swipe'
};
const GESTURE_EVENT_ALIASES = {
    click: 'tap',
    anyclick: 'anytap',
    dblclick: 'doubletap',
    mousedown: 'pointerdown',
    mousemove: 'pointermove',
    mouseup: 'pointerup',
    mouseover: 'pointerover',
    mouseout: 'pointerout',
    mouseleave: 'pointerleave'
};

},{"./utils/hammer":"j1S0V","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"40ePT":[function(require,module,exports,__globalThis) {
// Purpose: include this in your module to avoids adding dependencies on
// micro modules like 'global'
/* global window, global, document, navigator */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userAgent", ()=>userAgent);
parcelHelpers.export(exports, "window", ()=>window_);
parcelHelpers.export(exports, "global", ()=>global_);
parcelHelpers.export(exports, "document", ()=>document_);
parcelHelpers.export(exports, "passiveSupported", ()=>passiveSupported);
var global = arguments[3];
const userAgent = typeof navigator !== 'undefined' && navigator.userAgent ? navigator.userAgent.toLowerCase() : '';
const window_ = typeof window !== 'undefined' ? window : global;
const global_ = typeof global !== 'undefined' ? global : window;
const document_ = typeof document !== 'undefined' ? document : {};
/*
 * Detect whether passive option is supported by the current browser.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
   #Safely_detecting_option_support
 */ let passiveSupported = false;
/* eslint-disable accessor-pairs, no-empty */ try {
    const options = {
        // This function will be called when the browser
        // attempts to access the passive property.
        get passive () {
            passiveSupported = true;
            return true;
        }
    };
    window_.addEventListener('test', null, options);
    window_.removeEventListener('test', null);
} catch (err) {
    passiveSupported = false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5GzVN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _input = require("./input");
var _inputDefault = parcelHelpers.interopDefault(_input);
var _constants = require("../constants");
const { MOUSE_EVENTS } = (0, _constants.INPUT_EVENT_TYPES);
const MOVE_EVENT_TYPE = 'pointermove';
const OVER_EVENT_TYPE = 'pointerover';
const OUT_EVENT_TYPE = 'pointerout';
const ENTER_EVENT_TYPE = 'pointerenter';
const LEAVE_EVENT_TYPE = 'pointerleave';
class MoveInput extends (0, _inputDefault.default) {
    constructor(element, callback, options){
        super(element, callback, options);
        this.handleEvent = (event)=>{
            this.handleOverEvent(event);
            this.handleOutEvent(event);
            this.handleEnterEvent(event);
            this.handleLeaveEvent(event);
            this.handleMoveEvent(event);
        };
        this.pressed = false;
        const { enable } = this.options;
        this.enableMoveEvent = enable;
        this.enableLeaveEvent = enable;
        this.enableEnterEvent = enable;
        this.enableOutEvent = enable;
        this.enableOverEvent = enable;
        this.events = (this.options.events || []).concat(MOUSE_EVENTS);
        this.events.forEach((event)=>element.addEventListener(event, this.handleEvent));
    }
    destroy() {
        this.events.forEach((event)=>this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */ enableEventType(eventType, enabled) {
        if (eventType === MOVE_EVENT_TYPE) this.enableMoveEvent = enabled;
        if (eventType === OVER_EVENT_TYPE) this.enableOverEvent = enabled;
        if (eventType === OUT_EVENT_TYPE) this.enableOutEvent = enabled;
        if (eventType === ENTER_EVENT_TYPE) this.enableEnterEvent = enabled;
        if (eventType === LEAVE_EVENT_TYPE) this.enableLeaveEvent = enabled;
    }
    handleOverEvent(event) {
        if (this.enableOverEvent) {
            if (event.type === 'mouseover') this._emit(OVER_EVENT_TYPE, event);
        }
    }
    handleOutEvent(event) {
        if (this.enableOutEvent) {
            if (event.type === 'mouseout') this._emit(OUT_EVENT_TYPE, event);
        }
    }
    handleEnterEvent(event) {
        if (this.enableEnterEvent) {
            if (event.type === 'mouseenter') this._emit(ENTER_EVENT_TYPE, event);
        }
    }
    handleLeaveEvent(event) {
        if (this.enableLeaveEvent) {
            if (event.type === 'mouseleave') this._emit(LEAVE_EVENT_TYPE, event);
        }
    }
    handleMoveEvent(event) {
        if (this.enableMoveEvent) switch(event.type){
            case 'mousedown':
                if (event.button >= 0) // Button is down
                this.pressed = true;
                break;
            case 'mousemove':
                // Move events use `bottons` to track the button being pressed
                if (event.buttons === 0) // Button is not down
                this.pressed = false;
                if (!this.pressed) // Drag events are emitted by hammer already
                // we just need to emit the move event on hover
                this._emit(MOVE_EVENT_TYPE, event);
                break;
            case 'mouseup':
                this.pressed = false;
                break;
            default:
        }
    }
    _emit(type, event) {
        this.callback({
            type,
            center: {
                x: event.clientX,
                y: event.clientY
            },
            srcEvent: event,
            pointerType: 'mouse',
            target: event.target
        });
    }
}
exports.default = MoveInput;

},{"./input":"Yl6Eb","../constants":"cQtDC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6FHrw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _input = require("./input");
var _inputDefault = parcelHelpers.interopDefault(_input);
var _constants = require("../constants");
const { KEY_EVENTS } = (0, _constants.INPUT_EVENT_TYPES);
const DOWN_EVENT_TYPE = 'keydown';
const UP_EVENT_TYPE = 'keyup';
class KeyInput extends (0, _inputDefault.default) {
    constructor(element, callback, options){
        super(element, callback, options);
        this.handleEvent = (event)=>{
            // Ignore if focused on text input
            const targetElement = event.target || event.srcElement;
            if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') return;
            if (this.enableDownEvent && event.type === 'keydown') this.callback({
                type: DOWN_EVENT_TYPE,
                srcEvent: event,
                key: event.key,
                target: event.target
            });
            if (this.enableUpEvent && event.type === 'keyup') this.callback({
                type: UP_EVENT_TYPE,
                srcEvent: event,
                key: event.key,
                target: event.target
            });
        };
        this.enableDownEvent = this.options.enable;
        this.enableUpEvent = this.options.enable;
        this.events = (this.options.events || []).concat(KEY_EVENTS);
        element.tabIndex = this.options.tabIndex || 0;
        element.style.outline = 'none';
        this.events.forEach((event)=>element.addEventListener(event, this.handleEvent));
    }
    destroy() {
        this.events.forEach((event)=>this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */ enableEventType(eventType, enabled) {
        if (eventType === DOWN_EVENT_TYPE) this.enableDownEvent = enabled;
        if (eventType === UP_EVENT_TYPE) this.enableUpEvent = enabled;
    }
}
exports.default = KeyInput;

},{"./input":"Yl6Eb","../constants":"cQtDC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lG6MV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _input = require("./input");
var _inputDefault = parcelHelpers.interopDefault(_input);
const EVENT_TYPE = 'contextmenu';
class ContextmenuInput extends (0, _inputDefault.default) {
    constructor(element, callback, options){
        super(element, callback, options);
        this.handleEvent = (event)=>{
            if (!this.options.enable) return;
            this.callback({
                type: EVENT_TYPE,
                center: {
                    x: event.clientX,
                    y: event.clientY
                },
                srcEvent: event,
                pointerType: 'mouse',
                target: event.target
            });
        };
        element.addEventListener('contextmenu', this.handleEvent);
    }
    destroy() {
        this.element.removeEventListener('contextmenu', this.handleEvent);
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */ enableEventType(eventType, enabled) {
        if (eventType === EVENT_TYPE) this.options.enable = enabled;
    }
}
exports.default = ContextmenuInput;

},{"./input":"Yl6Eb","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2ASct":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventUtils = require("./event-utils");
const DEFAULT_OPTIONS = {
    srcElement: 'root',
    priority: 0
};
class EventRegistrar {
    constructor(eventManager){
        /**
         * Handles hammerjs event
         */ this.handleEvent = (event)=>{
            if (this.isEmpty()) return;
            const mjolnirEvent = this._normalizeEvent(event);
            let target = event.srcEvent.target;
            while(target && target !== mjolnirEvent.rootElement){
                this._emit(mjolnirEvent, target);
                if (mjolnirEvent.handled) return;
                target = target.parentNode;
            }
            this._emit(mjolnirEvent, 'root');
        };
        this.eventManager = eventManager;
        this.handlers = [];
        // Element -> handler map
        this.handlersByElement = new Map();
        this._active = false;
    }
    // Returns true if there are no non-passive handlers
    isEmpty() {
        return !this._active;
    }
    add(type, handler, options, once = false, passive = false) {
        const { handlers, handlersByElement } = this;
        let opts = DEFAULT_OPTIONS;
        if (typeof options === 'string' || options && options.addEventListener) // is DOM element, backward compatibility
        // @ts-ignore
        opts = {
            ...DEFAULT_OPTIONS,
            srcElement: options
        };
        else if (options) opts = {
            ...DEFAULT_OPTIONS,
            ...options
        };
        let entries = handlersByElement.get(opts.srcElement);
        if (!entries) {
            entries = [];
            handlersByElement.set(opts.srcElement, entries);
        }
        const entry = {
            type,
            handler,
            srcElement: opts.srcElement,
            priority: opts.priority
        };
        if (once) entry.once = true;
        if (passive) entry.passive = true;
        handlers.push(entry);
        this._active = this._active || !entry.passive;
        // Sort handlers by descending priority
        // Handlers with the same priority are excuted in the order of registration
        let insertPosition = entries.length - 1;
        while(insertPosition >= 0){
            if (entries[insertPosition].priority >= entry.priority) break;
            insertPosition--;
        }
        entries.splice(insertPosition + 1, 0, entry);
    }
    remove(type, handler) {
        const { handlers, handlersByElement } = this;
        for(let i = handlers.length - 1; i >= 0; i--){
            const entry = handlers[i];
            if (entry.type === type && entry.handler === handler) {
                handlers.splice(i, 1);
                const entries = handlersByElement.get(entry.srcElement);
                entries.splice(entries.indexOf(entry), 1);
                if (entries.length === 0) handlersByElement.delete(entry.srcElement);
            }
        }
        this._active = handlers.some((entry)=>!entry.passive);
    }
    /**
     * Invoke handlers on a particular element
     */ _emit(event, srcElement) {
        const entries = this.handlersByElement.get(srcElement);
        if (entries) {
            let immediatePropagationStopped = false;
            // Prevents the current event from bubbling up
            const stopPropagation = ()=>{
                event.handled = true;
            };
            // Prevent any remaining listeners from being called
            const stopImmediatePropagation = ()=>{
                event.handled = true;
                immediatePropagationStopped = true;
            };
            const entriesToRemove = [];
            for(let i = 0; i < entries.length; i++){
                const { type, handler, once } = entries[i];
                handler({
                    ...event,
                    // @ts-ignore
                    type,
                    stopPropagation,
                    stopImmediatePropagation
                });
                if (once) entriesToRemove.push(entries[i]);
                if (immediatePropagationStopped) break;
            }
            for(let i = 0; i < entriesToRemove.length; i++){
                const { type, handler } = entriesToRemove[i];
                this.remove(type, handler);
            }
        }
    }
    /**
     * Normalizes hammerjs and custom events to have predictable fields.
     */ _normalizeEvent(event) {
        const rootElement = this.eventManager.getElement();
        return {
            ...event,
            ...(0, _eventUtils.whichButtons)(event),
            ...(0, _eventUtils.getOffsetPosition)(event, rootElement),
            preventDefault: ()=>{
                event.srcEvent.preventDefault();
            },
            stopImmediatePropagation: null,
            stopPropagation: null,
            handled: false,
            rootElement
        };
    }
}
exports.default = EventRegistrar;

},{"./event-utils":"hGYeG","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hGYeG":[function(require,module,exports,__globalThis) {
/* Constants */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Extract the involved mouse button
 */ parcelHelpers.export(exports, "whichButtons", ()=>whichButtons);
/**
 * Calculate event position relative to the root element
 */ parcelHelpers.export(exports, "getOffsetPosition", ()=>getOffsetPosition);
const DOWN_EVENT = 1;
const MOVE_EVENT = 2;
const UP_EVENT = 4;
const MOUSE_EVENTS = {
    pointerdown: DOWN_EVENT,
    pointermove: MOVE_EVENT,
    pointerup: UP_EVENT,
    mousedown: DOWN_EVENT,
    mousemove: MOVE_EVENT,
    mouseup: UP_EVENT
};
// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
const MOUSE_EVENT_BUTTON_LEFT = 0;
const MOUSE_EVENT_BUTTON_MIDDLE = 1;
const MOUSE_EVENT_BUTTON_RIGHT = 2;
// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons
const MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;
const MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;
const MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;
function whichButtons(event) {
    const eventType = MOUSE_EVENTS[event.srcEvent.type];
    if (!eventType) // Not a mouse evet
    return null;
    const { buttons, button } = event.srcEvent;
    let leftButton = false;
    let middleButton = false;
    let rightButton = false;
    if (eventType === MOVE_EVENT) {
        leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);
        middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);
        rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);
    } else {
        leftButton = button === MOUSE_EVENT_BUTTON_LEFT;
        middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;
        rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;
    }
    return {
        leftButton,
        middleButton,
        rightButton
    };
}
function getOffsetPosition(event, rootElement) {
    const center = event.center;
    // `center` is a hammer.js event property
    if (!center) // Not a gestural event
    return null;
    const rect = rootElement.getBoundingClientRect();
    // Fix scale for map affected by a CSS transform.
    // See https://stackoverflow.com/a/26893663/3528533
    const scaleX = rect.width / rootElement.offsetWidth || 1;
    const scaleY = rect.height / rootElement.offsetHeight || 1;
    // Calculate center relative to the root element
    const offsetCenter = {
        x: (center.x - rect.left - rootElement.clientLeft) / scaleX,
        y: (center.y - rect.top - rootElement.clientTop) / scaleY
    };
    return {
        center,
        offsetCenter
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dttrz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _attribute = require("./attribute");
var _attributeDefault = parcelHelpers.interopDefault(_attribute);
var _log = require("../../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _memoize = require("../../utils/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var _mathUtils = require("../../utils/math-utils");
var _debug = require("../../debug");
var _debugDefault = parcelHelpers.interopDefault(_debug);
var _attributeTransitionManager = require("./attribute-transition-manager");
var _attributeTransitionManagerDefault = parcelHelpers.interopDefault(_attributeTransitionManager);
const TRACE_INVALIDATE = 'attributeManager.invalidate';
const TRACE_UPDATE_START = 'attributeManager.updateStart';
const TRACE_UPDATE_END = 'attributeManager.updateEnd';
const TRACE_ATTRIBUTE_UPDATE_START = 'attribute.updateStart';
const TRACE_ATTRIBUTE_ALLOCATE = 'attribute.allocate';
const TRACE_ATTRIBUTE_UPDATE_END = 'attribute.updateEnd';
class AttributeManager {
    constructor(gl, { id = 'attribute-manager', stats, timeline } = {}){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "attributes", void 0);
        (0, _definePropertyDefault.default)(this, "updateTriggers", void 0);
        (0, _definePropertyDefault.default)(this, "needsRedraw", void 0);
        (0, _definePropertyDefault.default)(this, "userData", void 0);
        (0, _definePropertyDefault.default)(this, "stats", void 0);
        (0, _definePropertyDefault.default)(this, "attributeTransitionManager", void 0);
        (0, _definePropertyDefault.default)(this, "mergeBoundsMemoized", (0, _memoizeDefault.default)((0, _mathUtils.mergeBounds)));
        this.id = id;
        this.gl = gl;
        this.attributes = {};
        this.updateTriggers = {};
        this.needsRedraw = true;
        this.userData = {};
        this.stats = stats;
        this.attributeTransitionManager = new (0, _attributeTransitionManagerDefault.default)(gl, {
            id: "".concat(id, "-transitions"),
            timeline
        });
        Object.seal(this);
    }
    finalize() {
        for(const attributeName in this.attributes)this.attributes[attributeName].delete();
        this.attributeTransitionManager.finalize();
    }
    getNeedsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        const redraw = this.needsRedraw;
        this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;
        return redraw && this.id;
    }
    setNeedsRedraw() {
        this.needsRedraw = true;
    }
    add(attributes) {
        this._add(attributes);
    }
    addInstanced(attributes) {
        this._add(attributes, {
            instanced: 1
        });
    }
    remove(attributeNameArray) {
        for (const name of attributeNameArray)if (this.attributes[name] !== undefined) {
            this.attributes[name].delete();
            delete this.attributes[name];
        }
    }
    invalidate(triggerName, dataRange) {
        const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);
        (0, _debugDefault.default)(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);
    }
    invalidateAll(dataRange) {
        for(const attributeName in this.attributes)this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);
        (0, _debugDefault.default)(TRACE_INVALIDATE, this, 'all');
    }
    update({ data, numInstances, startIndices = null, transitions, props = {}, buffers = {}, context = {} }) {
        let updated = false;
        (0, _debugDefault.default)(TRACE_UPDATE_START, this);
        if (this.stats) this.stats.get('Update Attributes').timeStart();
        for(const attributeName in this.attributes){
            const attribute = this.attributes[attributeName];
            const accessorName = attribute.settings.accessor;
            attribute.startIndices = startIndices;
            attribute.numInstances = numInstances;
            if (props[attributeName]) (0, _logDefault.default).removed("props.".concat(attributeName), "data.attributes.".concat(attributeName))();
            if (attribute.setExternalBuffer(buffers[attributeName])) ;
            else if (attribute.setBinaryValue(typeof accessorName === 'string' ? buffers[accessorName] : undefined, data.startIndices)) ;
            else if (typeof accessorName === 'string' && !buffers[accessorName] && attribute.setConstantValue(props[accessorName])) ;
            else if (attribute.needsUpdate()) {
                updated = true;
                this._updateAttribute({
                    attribute,
                    numInstances,
                    data,
                    props,
                    context
                });
            }
            this.needsRedraw = this.needsRedraw || attribute.needsRedraw();
        }
        if (updated) (0, _debugDefault.default)(TRACE_UPDATE_END, this, numInstances);
        if (this.stats) this.stats.get('Update Attributes').timeEnd();
        this.attributeTransitionManager.update({
            attributes: this.attributes,
            numInstances,
            transitions
        });
    }
    updateTransition() {
        const { attributeTransitionManager } = this;
        const transitionUpdated = attributeTransitionManager.run();
        this.needsRedraw = this.needsRedraw || transitionUpdated;
        return transitionUpdated;
    }
    getAttributes() {
        return this.attributes;
    }
    getBounds(attributeNames) {
        const bounds = attributeNames.map((attributeName)=>{
            var _this$attributes$attr;
            return (_this$attributes$attr = this.attributes[attributeName]) === null || _this$attributes$attr === void 0 ? void 0 : _this$attributes$attr.getBounds();
        });
        return this.mergeBoundsMemoized(bounds);
    }
    getChangedAttributes(opts = {
        clearChangedFlags: false
    }) {
        const { attributes, attributeTransitionManager } = this;
        const changedAttributes = {
            ...attributeTransitionManager.getAttributes()
        };
        for(const attributeName in attributes){
            const attribute = attributes[attributeName];
            if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) changedAttributes[attributeName] = attribute;
        }
        return changedAttributes;
    }
    getShaderAttributes(attributes, excludeAttributes = {}) {
        if (!attributes) attributes = this.getAttributes();
        const shaderAttributes = {};
        for(const attributeName in attributes)if (!excludeAttributes[attributeName]) Object.assign(shaderAttributes, attributes[attributeName].getShaderAttributes());
        return shaderAttributes;
    }
    _add(attributes, extraProps = {}) {
        for(const attributeName in attributes){
            const attribute = attributes[attributeName];
            this.attributes[attributeName] = this._createAttribute(attributeName, attribute, extraProps);
        }
        this._mapUpdateTriggersToAttributes();
    }
    _createAttribute(name, attribute, extraProps) {
        const props = {
            ...attribute,
            id: name,
            size: attribute.isIndexed && 1 || attribute.size || 1,
            divisor: extraProps.instanced ? 1 : attribute.divisor || 0
        };
        return new (0, _attributeDefault.default)(this.gl, props);
    }
    _mapUpdateTriggersToAttributes() {
        const triggers = {};
        for(const attributeName in this.attributes){
            const attribute = this.attributes[attributeName];
            attribute.getUpdateTriggers().forEach((triggerName)=>{
                if (!triggers[triggerName]) triggers[triggerName] = [];
                triggers[triggerName].push(attributeName);
            });
        }
        this.updateTriggers = triggers;
    }
    _invalidateTrigger(triggerName, dataRange) {
        const { attributes, updateTriggers } = this;
        const invalidatedAttributes = updateTriggers[triggerName];
        if (invalidatedAttributes) invalidatedAttributes.forEach((name)=>{
            const attribute = attributes[name];
            if (attribute) attribute.setNeedsUpdate(attribute.id, dataRange);
        });
        return invalidatedAttributes;
    }
    _updateAttribute(opts) {
        const { attribute, numInstances } = opts;
        (0, _debugDefault.default)(TRACE_ATTRIBUTE_UPDATE_START, attribute);
        if (attribute.constant) {
            attribute.setConstantValue(attribute.value);
            return;
        }
        if (attribute.allocate(numInstances)) (0, _debugDefault.default)(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);
        const updated = attribute.updateBuffer(opts);
        if (updated) {
            this.needsRedraw = true;
            (0, _debugDefault.default)(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);
        }
    }
}
exports.default = AttributeManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./attribute":"jGQIR","../../utils/log":"GqqVU","../../utils/memoize":"1xMVQ","../../utils/math-utils":"31KJo","../../debug":"h4a5l","./attribute-transition-manager":"c8uno","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jGQIR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _dataColumn = require("./data-column");
var _dataColumnDefault = parcelHelpers.interopDefault(_dataColumn);
var _assert = require("../../utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _iterableUtils = require("../../utils/iterable-utils");
var _flatten = require("../../utils/flatten");
var _range = require("../../utils/range");
var _attributeTransitionUtils = require("./attribute-transition-utils");
class Attribute extends (0, _dataColumnDefault.default) {
    constructor(gl, opts){
        super(gl, opts, {
            startIndices: null,
            lastExternalBuffer: null,
            binaryValue: null,
            binaryAccessor: null,
            needsUpdate: true,
            needsRedraw: false,
            updateRanges: _range.FULL
        });
        (0, _definePropertyDefault.default)(this, "constant", false);
        this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : undefined);
        Object.seal(this.settings);
        Object.seal(this.state);
        this._validateAttributeUpdaters();
    }
    get startIndices() {
        return this.state.startIndices;
    }
    set startIndices(layout) {
        this.state.startIndices = layout;
    }
    needsUpdate() {
        return this.state.needsUpdate;
    }
    needsRedraw({ clearChangedFlags = false } = {}) {
        const needsRedraw = this.state.needsRedraw;
        this.state.needsRedraw = needsRedraw && !clearChangedFlags;
        return needsRedraw;
    }
    getUpdateTriggers() {
        const { accessor } = this.settings;
        return [
            this.id
        ].concat(typeof accessor !== 'function' && accessor || []);
    }
    supportsTransition() {
        return Boolean(this.settings.transition);
    }
    getTransitionSetting(opts) {
        if (!opts || !this.supportsTransition()) return null;
        const { accessor } = this.settings;
        const layerSettings = this.settings.transition;
        const userSettings = Array.isArray(accessor) ? opts[accessor.find((a)=>opts[a])] : opts[accessor];
        return (0, _attributeTransitionUtils.normalizeTransitionSettings)(userSettings, layerSettings);
    }
    setNeedsUpdate(reason = this.id, dataRange) {
        this.state.needsUpdate = this.state.needsUpdate || reason;
        this.setNeedsRedraw(reason);
        if (dataRange) {
            const { startRow = 0, endRow = Infinity } = dataRange;
            this.state.updateRanges = _range.add(this.state.updateRanges, [
                startRow,
                endRow
            ]);
        } else this.state.updateRanges = _range.FULL;
    }
    clearNeedsUpdate() {
        this.state.needsUpdate = false;
        this.state.updateRanges = _range.EMPTY;
    }
    setNeedsRedraw(reason = this.id) {
        this.state.needsRedraw = this.state.needsRedraw || reason;
    }
    allocate(numInstances) {
        const { state, settings } = this;
        if (settings.noAlloc) return false;
        if (settings.update) {
            super.allocate(numInstances, state.updateRanges !== _range.FULL);
            return true;
        }
        return false;
    }
    updateBuffer({ numInstances, data, props, context }) {
        if (!this.needsUpdate()) return false;
        const { state: { updateRanges }, settings: { update, noAlloc } } = this;
        let updated = true;
        if (update) {
            for (const [startRow, endRow] of updateRanges)update.call(context, this, {
                data,
                startRow,
                endRow,
                props,
                numInstances
            });
            if (!this.value) ;
            else if (this.constant || this.buffer.byteLength < this.value.byteLength + this.byteOffset) {
                this.setData({
                    value: this.value,
                    constant: this.constant
                });
                this.constant = false;
            } else for (const [startRow, endRow] of updateRanges){
                const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;
                const endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;
                super.updateSubBuffer({
                    startOffset,
                    endOffset
                });
            }
            this._checkAttributeArray();
        } else updated = false;
        this.clearNeedsUpdate();
        this.setNeedsRedraw();
        return updated;
    }
    setConstantValue(value) {
        if (value === undefined || typeof value === 'function') return false;
        const hasChanged = this.setData({
            constant: true,
            value
        });
        if (hasChanged) this.setNeedsRedraw();
        this.clearNeedsUpdate();
        return true;
    }
    setExternalBuffer(buffer) {
        const { state } = this;
        if (!buffer) {
            state.lastExternalBuffer = null;
            return false;
        }
        this.clearNeedsUpdate();
        if (state.lastExternalBuffer === buffer) return true;
        state.lastExternalBuffer = buffer;
        this.setNeedsRedraw();
        this.setData(buffer);
        return true;
    }
    setBinaryValue(buffer, startIndices = null) {
        const { state, settings } = this;
        if (!buffer) {
            state.binaryValue = null;
            state.binaryAccessor = null;
            return false;
        }
        if (settings.noAlloc) return false;
        if (state.binaryValue === buffer) {
            this.clearNeedsUpdate();
            return true;
        }
        state.binaryValue = buffer;
        this.setNeedsRedraw();
        const needsUpdate = settings.transform || startIndices !== this.startIndices;
        if (needsUpdate) {
            if (ArrayBuffer.isView(buffer)) buffer = {
                value: buffer
            };
            const binaryValue = buffer;
            (0, _assertDefault.default)(ArrayBuffer.isView(binaryValue.value), "invalid ".concat(settings.accessor));
            const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;
            state.binaryAccessor = (0, _iterableUtils.getAccessorFromBuffer)(binaryValue.value, {
                size: binaryValue.size || this.size,
                stride: binaryValue.stride,
                offset: binaryValue.offset,
                startIndices: startIndices,
                nested: needsNormalize
            });
            return false;
        }
        this.clearNeedsUpdate();
        this.setData(buffer);
        return true;
    }
    getVertexOffset(row) {
        const { startIndices } = this;
        const vertexIndex = startIndices ? row < startIndices.length ? startIndices[row] : this.numInstances : row;
        return vertexIndex * this.size;
    }
    getShaderAttributes() {
        const shaderAttributeDefs = this.settings.shaderAttributes || {
            [this.id]: null
        };
        const shaderAttributes = {};
        for(const shaderAttributeName in shaderAttributeDefs)Object.assign(shaderAttributes, super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));
        return shaderAttributes;
    }
    _autoUpdater(attribute, { data, startRow, endRow, props, numInstances }) {
        if (attribute.constant) return;
        const { settings, state, value, size, startIndices } = attribute;
        const { accessor, transform } = settings;
        const accessorFunc = state.binaryAccessor || (typeof accessor === 'function' ? accessor : props[accessor]);
        (0, _assertDefault.default)(typeof accessorFunc === 'function', "accessor \"".concat(accessor, "\" is not a function"));
        let i = attribute.getVertexOffset(startRow);
        const { iterable, objectInfo } = (0, _iterableUtils.createIterable)(data, startRow, endRow);
        for (const object of iterable){
            objectInfo.index++;
            let objectValue = accessorFunc(object, objectInfo);
            if (transform) objectValue = transform.call(this, objectValue);
            if (startIndices) {
                const numVertices = (objectInfo.index < startIndices.length - 1 ? startIndices[objectInfo.index + 1] : numInstances) - startIndices[objectInfo.index];
                if (objectValue && Array.isArray(objectValue[0])) {
                    let startIndex = i;
                    for (const item of objectValue){
                        attribute._normalizeValue(item, value, startIndex);
                        startIndex += size;
                    }
                } else if (objectValue && objectValue.length > size) value.set(objectValue, i);
                else {
                    attribute._normalizeValue(objectValue, objectInfo.target, 0);
                    (0, _flatten.fillArray)({
                        target: value,
                        source: objectInfo.target,
                        start: i,
                        count: numVertices
                    });
                }
                i += numVertices * size;
            } else {
                attribute._normalizeValue(objectValue, value, i);
                i += size;
            }
        }
    }
    _validateAttributeUpdaters() {
        const { settings } = this;
        const hasUpdater = settings.noAlloc || typeof settings.update === 'function';
        if (!hasUpdater) throw new Error("Attribute ".concat(this.id, " missing update or accessor"));
    }
    _checkAttributeArray() {
        const { value } = this;
        const limit = Math.min(4, this.size);
        if (value && value.length >= limit) {
            let valid = true;
            switch(limit){
                case 4:
                    valid = valid && Number.isFinite(value[3]);
                case 3:
                    valid = valid && Number.isFinite(value[2]);
                case 2:
                    valid = valid && Number.isFinite(value[1]);
                case 1:
                    valid = valid && Number.isFinite(value[0]);
                    break;
                default:
                    valid = false;
            }
            if (!valid) throw new Error("Illegal attribute generated for ".concat(this.id));
        }
    }
}
exports.default = Attribute;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./data-column":"5nCC0","../../utils/assert":"8E3uE","../../utils/iterable-utils":"81bnO","../../utils/flatten":"cUPbX","../../utils/range":"gZfad","./attribute-transition-utils":"hvY57","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5nCC0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@luma.gl/core");
var _shaderAttribute = require("./shader-attribute");
var _shaderAttributeDefault = parcelHelpers.interopDefault(_shaderAttribute);
var _glUtils = require("./gl-utils");
var _typedArrayManager = require("../../utils/typed-array-manager");
var _typedArrayManagerDefault = parcelHelpers.interopDefault(_typedArrayManager);
var _mathUtils = require("../../utils/math-utils");
var _log = require("../../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
function getStride(accessor) {
    return accessor.stride || accessor.size * accessor.bytesPerElement;
}
function resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {
    if (shaderAttributeOptions.offset) (0, _logDefault.default).removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();
    const stride = getStride(baseAccessor);
    const vertexOffset = shaderAttributeOptions.vertexOffset !== undefined ? shaderAttributeOptions.vertexOffset : baseAccessor.vertexOffset || 0;
    const elementOffset = shaderAttributeOptions.elementOffset || 0;
    const offset = vertexOffset * stride + elementOffset * baseAccessor.bytesPerElement + (baseAccessor.offset || 0);
    return {
        ...shaderAttributeOptions,
        offset,
        stride
    };
}
function resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {
    const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);
    return {
        high: resolvedOptions,
        low: {
            ...resolvedOptions,
            offset: resolvedOptions.offset + baseAccessor.size * 4
        }
    };
}
class DataColumn {
    constructor(gl, opts, state){
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "size", void 0);
        (0, _definePropertyDefault.default)(this, "settings", void 0);
        (0, _definePropertyDefault.default)(this, "value", void 0);
        (0, _definePropertyDefault.default)(this, "doublePrecision", void 0);
        (0, _definePropertyDefault.default)(this, "_buffer", void 0);
        (0, _definePropertyDefault.default)(this, "state", void 0);
        this.gl = gl;
        this.id = opts.id || '';
        this.size = opts.size || 1;
        const logicalType = opts.logicalType || opts.type;
        const doublePrecision = logicalType === 5130;
        let { defaultValue } = opts;
        defaultValue = Number.isFinite(defaultValue) ? [
            defaultValue
        ] : defaultValue || new Array(this.size).fill(0);
        let bufferType;
        if (doublePrecision) bufferType = 5126;
        else if (!logicalType && opts.isIndexed) bufferType = gl && (0, _core.hasFeature)(gl, (0, _core.FEATURES).ELEMENT_INDEX_UINT32) ? 5125 : 5123;
        else bufferType = logicalType || 5126;
        let defaultType = (0, _glUtils.glArrayFromType)(logicalType || bufferType || 5126);
        this.doublePrecision = doublePrecision;
        if (doublePrecision && opts.fp64 === false) defaultType = Float32Array;
        this.value = null;
        this.settings = {
            ...opts,
            defaultType,
            defaultValue: defaultValue,
            logicalType,
            type: bufferType,
            size: this.size,
            bytesPerElement: defaultType.BYTES_PER_ELEMENT
        };
        this.state = {
            ...state,
            externalBuffer: null,
            bufferAccessor: this.settings,
            allocatedValue: null,
            numInstances: 0,
            bounds: null,
            constant: false
        };
        this._buffer = null;
    }
    get isConstant() {
        return this.state.constant;
    }
    get buffer() {
        if (!this._buffer) {
            const { isIndexed, type } = this.settings;
            this._buffer = new (0, _core.Buffer)(this.gl, {
                id: this.id,
                target: isIndexed ? 34963 : 34962,
                accessor: {
                    type
                }
            });
        }
        return this._buffer;
    }
    get byteOffset() {
        const accessor = this.getAccessor();
        if (accessor.vertexOffset) return accessor.vertexOffset * getStride(accessor);
        return 0;
    }
    get numInstances() {
        return this.state.numInstances;
    }
    set numInstances(n) {
        this.state.numInstances = n;
    }
    delete() {
        if (this._buffer) {
            this._buffer.delete();
            this._buffer = null;
        }
        (0, _typedArrayManagerDefault.default).release(this.state.allocatedValue);
    }
    getShaderAttributes(id, options) {
        if (this.doublePrecision) {
            const shaderAttributes = {};
            const isBuffer64Bit = this.value instanceof Float64Array;
            const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(this.getAccessor(), options || {});
            shaderAttributes[id] = new (0, _shaderAttributeDefault.default)(this, doubleShaderAttributeDefs.high);
            shaderAttributes["".concat(id, "64Low")] = isBuffer64Bit ? new (0, _shaderAttributeDefault.default)(this, doubleShaderAttributeDefs.low) : new Float32Array(this.size);
            return shaderAttributes;
        }
        if (options) {
            const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);
            return {
                [id]: new (0, _shaderAttributeDefault.default)(this, shaderAttributeDef)
            };
        }
        return {
            [id]: this
        };
    }
    getBuffer() {
        if (this.state.constant) return null;
        return this.state.externalBuffer || this._buffer;
    }
    getValue() {
        if (this.state.constant) return this.value;
        return [
            this.getBuffer(),
            this.getAccessor()
        ];
    }
    getAccessor() {
        return this.state.bufferAccessor;
    }
    getBounds() {
        if (this.state.bounds) return this.state.bounds;
        let result = null;
        if (this.state.constant && this.value) {
            const min = Array.from(this.value);
            result = [
                min,
                min
            ];
        } else {
            const { value, numInstances, size } = this;
            const len = numInstances * size;
            if (value && len && value.length >= len) {
                const min = new Array(size).fill(Infinity);
                const max = new Array(size).fill(-Infinity);
                for(let i = 0; i < len;)for(let j = 0; j < size; j++){
                    const v = value[i++];
                    if (v < min[j]) min[j] = v;
                    if (v > max[j]) max[j] = v;
                }
                result = [
                    min,
                    max
                ];
            }
        }
        this.state.bounds = result;
        return result;
    }
    setData(data) {
        const { state } = this;
        let opts;
        if (ArrayBuffer.isView(data)) opts = {
            value: data
        };
        else if (data instanceof (0, _core.Buffer)) opts = {
            buffer: data
        };
        else opts = data;
        const accessor = {
            ...this.settings,
            ...opts
        };
        state.bufferAccessor = accessor;
        state.bounds = null;
        if (opts.constant) {
            let value = opts.value;
            value = this._normalizeValue(value, [], 0);
            if (this.settings.normalized) value = this.normalizeConstant(value);
            const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);
            if (!hasChanged) return false;
            state.externalBuffer = null;
            state.constant = true;
            this.value = value;
        } else if (opts.buffer) {
            const buffer = opts.buffer;
            state.externalBuffer = buffer;
            state.constant = false;
            this.value = opts.value || null;
            const isBuffer64Bit = opts.value instanceof Float64Array;
            accessor.type = opts.type || buffer.accessor.type;
            accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);
            accessor.stride = getStride(accessor);
        } else if (opts.value) {
            this._checkExternalBuffer(opts);
            let value = opts.value;
            state.externalBuffer = null;
            state.constant = false;
            this.value = value;
            accessor.bytesPerElement = value.BYTES_PER_ELEMENT;
            accessor.stride = getStride(accessor);
            const { buffer, byteOffset } = this;
            if (this.doublePrecision && value instanceof Float64Array) value = (0, _mathUtils.toDoublePrecisionArray)(value, accessor);
            const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;
            if (buffer.byteLength < requiredBufferSize) buffer.reallocate(requiredBufferSize);
            buffer.setAccessor(null);
            buffer.subData({
                data: value,
                offset: byteOffset
            });
            accessor.type = opts.type || buffer.accessor.type;
        }
        return true;
    }
    updateSubBuffer(opts = {}) {
        this.state.bounds = null;
        const value = this.value;
        const { startOffset = 0, endOffset } = opts;
        this.buffer.subData({
            data: this.doublePrecision && value instanceof Float64Array ? (0, _mathUtils.toDoublePrecisionArray)(value, {
                size: this.size,
                startIndex: startOffset,
                endIndex: endOffset
            }) : value.subarray(startOffset, endOffset),
            offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset
        });
    }
    allocate(numInstances, copy = false) {
        const { state } = this;
        const oldValue = state.allocatedValue;
        const value = (0, _typedArrayManagerDefault.default).allocate(oldValue, numInstances + 1, {
            size: this.size,
            type: this.settings.defaultType,
            copy
        });
        this.value = value;
        const { buffer, byteOffset } = this;
        if (buffer.byteLength < value.byteLength + byteOffset) {
            buffer.reallocate(value.byteLength + byteOffset);
            if (copy && oldValue) buffer.subData({
                data: oldValue instanceof Float64Array ? (0, _mathUtils.toDoublePrecisionArray)(oldValue, this) : oldValue,
                offset: byteOffset
            });
        }
        state.allocatedValue = value;
        state.constant = false;
        state.externalBuffer = null;
        state.bufferAccessor = this.settings;
        return true;
    }
    _checkExternalBuffer(opts) {
        const { value } = opts;
        if (!ArrayBuffer.isView(value)) throw new Error("Attribute ".concat(this.id, " value is not TypedArray"));
        const ArrayType = this.settings.defaultType;
        let illegalArrayType = false;
        if (this.doublePrecision) illegalArrayType = value.BYTES_PER_ELEMENT < 4;
        if (illegalArrayType) throw new Error("Attribute ".concat(this.id, " does not support ").concat(value.constructor.name));
        if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) (0, _logDefault.default).warn("Attribute ".concat(this.id, " is normalized"))();
    }
    normalizeConstant(value) {
        switch(this.settings.type){
            case 5120:
                return new Float32Array(value).map((x)=>(x + 128) / 255 * 2 - 1);
            case 5122:
                return new Float32Array(value).map((x)=>(x + 32768) / 65535 * 2 - 1);
            case 5121:
                return new Float32Array(value).map((x)=>x / 255);
            case 5123:
                return new Float32Array(value).map((x)=>x / 65535);
            default:
                return value;
        }
    }
    _normalizeValue(value, out, start) {
        const { defaultValue, size } = this.settings;
        if (Number.isFinite(value)) {
            out[start] = value;
            return out;
        }
        if (!value) {
            let i = size;
            while(--i >= 0)out[start + i] = defaultValue[i];
            return out;
        }
        switch(size){
            case 4:
                out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];
            case 3:
                out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];
            case 2:
                out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];
            case 1:
                out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];
                break;
            default:
                let i = size;
                while(--i >= 0)out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];
        }
        return out;
    }
    _areValuesEqual(value1, value2) {
        if (!value1 || !value2) return false;
        const { size } = this;
        for(let i = 0; i < size; i++){
            if (value1[i] !== value2[i]) return false;
        }
        return true;
    }
}
exports.default = DataColumn;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@luma.gl/core":"9rnrC","./shader-attribute":"5c0nj","./gl-utils":"9iyvY","../../utils/typed-array-manager":"1iupO","../../utils/math-utils":"31KJo","../../utils/log":"GqqVU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5c0nj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
class ShaderAttribute {
    constructor(dataColumn, opts){
        (0, _definePropertyDefault.default)(this, "opts", void 0);
        (0, _definePropertyDefault.default)(this, "source", void 0);
        this.opts = opts;
        this.source = dataColumn;
    }
    get value() {
        return this.source.value;
    }
    getValue() {
        const buffer = this.source.getBuffer();
        const accessor = this.getAccessor();
        if (buffer) return [
            buffer,
            accessor
        ];
        const { value } = this.source;
        const { size } = accessor;
        let constantValue = value;
        if (value && value.length !== size) {
            constantValue = new Float32Array(size);
            const index = accessor.elementOffset || 0;
            for(let i = 0; i < size; ++i)constantValue[i] = value[index + i];
        }
        return constantValue;
    }
    getAccessor() {
        return {
            ...this.source.getAccessor(),
            ...this.opts
        };
    }
}
exports.default = ShaderAttribute;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9iyvY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "glArrayFromType", ()=>glArrayFromType);
function glArrayFromType(glType) {
    switch(glType){
        case 5126:
            return Float32Array;
        case 5130:
            return Float64Array;
        case 5123:
        case 33635:
        case 32819:
        case 32820:
            return Uint16Array;
        case 5125:
            return Uint32Array;
        case 5121:
            return Uint8ClampedArray;
        case 5120:
            return Int8Array;
        case 5122:
            return Int16Array;
        case 5124:
            return Int32Array;
        default:
            throw new Error('Unknown GL type');
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"81bnO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIterable", ()=>createIterable);
parcelHelpers.export(exports, "isAsyncIterable", ()=>isAsyncIterable);
parcelHelpers.export(exports, "getAccessorFromBuffer", ()=>getAccessorFromBuffer);
const EMPTY_ARRAY = [];
const placeholderArray = [];
function createIterable(data, startRow = 0, endRow = Infinity) {
    let iterable = EMPTY_ARRAY;
    const objectInfo = {
        index: -1,
        data,
        target: []
    };
    if (!data) iterable = EMPTY_ARRAY;
    else if (typeof data[Symbol.iterator] === 'function') iterable = data;
    else if (data.length > 0) {
        placeholderArray.length = data.length;
        iterable = placeholderArray;
    }
    if (startRow > 0 || Number.isFinite(endRow)) {
        iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);
        objectInfo.index = startRow - 1;
    }
    return {
        iterable,
        objectInfo
    };
}
function isAsyncIterable(data) {
    return data && data[Symbol.asyncIterator];
}
function getAccessorFromBuffer(typedArray, options) {
    const { size, stride, offset, startIndices, nested } = options;
    const bytesPerElement = typedArray.BYTES_PER_ELEMENT;
    const elementStride = stride ? stride / bytesPerElement : size;
    const elementOffset = offset ? offset / bytesPerElement : 0;
    const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);
    return (_, { index, target })=>{
        if (!startIndices) {
            const sourceIndex = index * elementStride + elementOffset;
            for(let j = 0; j < size; j++)target[j] = typedArray[sourceIndex + j];
            return target;
        }
        const startIndex = startIndices[index];
        const endIndex = startIndices[index + 1] || vertexCount;
        let result;
        if (nested) {
            result = new Array(endIndex - startIndex);
            for(let i = startIndex; i < endIndex; i++){
                const sourceIndex = i * elementStride + elementOffset;
                target = new Array(size);
                for(let j = 0; j < size; j++)target[j] = typedArray[sourceIndex + j];
                result[i - startIndex] = target;
            }
        } else if (elementStride === size) result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);
        else {
            result = new typedArray.constructor((endIndex - startIndex) * size);
            let targetIndex = 0;
            for(let i = startIndex; i < endIndex; i++){
                const sourceIndex = i * elementStride + elementOffset;
                for(let j = 0; j < size; j++)result[targetIndex++] = typedArray[sourceIndex + j];
            }
        }
        return result;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gZfad":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY", ()=>EMPTY);
parcelHelpers.export(exports, "FULL", ()=>FULL);
parcelHelpers.export(exports, "add", ()=>add);
const EMPTY = [];
const FULL = [
    [
        0,
        Infinity
    ]
];
function add(rangeList, range) {
    if (rangeList === FULL) return rangeList;
    if (range[0] < 0) range[0] = 0;
    if (range[0] >= range[1]) return rangeList;
    const newRangeList = [];
    const len = rangeList.length;
    let insertPosition = 0;
    for(let i = 0; i < len; i++){
        const range0 = rangeList[i];
        if (range0[1] < range[0]) {
            newRangeList.push(range0);
            insertPosition = i + 1;
        } else if (range0[0] > range[1]) newRangeList.push(range0);
        else range = [
            Math.min(range0[0], range[0]),
            Math.max(range0[1], range[1])
        ];
    }
    newRangeList.splice(insertPosition, 0, range);
    return newRangeList;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hvY57":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normalizeTransitionSettings", ()=>normalizeTransitionSettings);
parcelHelpers.export(exports, "getSourceBufferAttribute", ()=>getSourceBufferAttribute);
parcelHelpers.export(exports, "getAttributeTypeFromSize", ()=>getAttributeTypeFromSize);
parcelHelpers.export(exports, "cycleBuffers", ()=>cycleBuffers);
parcelHelpers.export(exports, "getAttributeBufferLength", ()=>getAttributeBufferLength);
parcelHelpers.export(exports, "padBuffer", ()=>padBuffer);
var _arrayUtils = require("../../utils/array-utils");
const DEFAULT_TRANSITION_SETTINGS = {
    interpolation: {
        duration: 0,
        easing: (t)=>t
    },
    spring: {
        stiffness: 0.05,
        damping: 0.5
    }
};
function normalizeTransitionSettings(userSettings, layerSettings) {
    if (!userSettings) return null;
    if (Number.isFinite(userSettings)) userSettings = {
        type: 'interpolation',
        duration: userSettings
    };
    const type = userSettings.type || 'interpolation';
    return {
        ...DEFAULT_TRANSITION_SETTINGS[type],
        ...layerSettings,
        ...userSettings,
        type
    };
}
function getSourceBufferAttribute(gl, attribute) {
    const buffer = attribute.getBuffer();
    if (buffer) return [
        buffer,
        {
            divisor: 0,
            size: attribute.size,
            normalized: attribute.settings.normalized
        }
    ];
    return attribute.value;
}
function getAttributeTypeFromSize(size) {
    switch(size){
        case 1:
            return 'float';
        case 2:
            return 'vec2';
        case 3:
            return 'vec3';
        case 4:
            return 'vec4';
        default:
            throw new Error("No defined attribute type for size \"".concat(size, "\""));
    }
}
function cycleBuffers(buffers) {
    buffers.push(buffers.shift());
}
function getAttributeBufferLength(attribute, numInstances) {
    const { doublePrecision, settings, value, size } = attribute;
    const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;
    return (settings.noAlloc ? value.length : numInstances * size) * multiplier;
}
function padBuffer({ buffer, numInstances, attribute, fromLength, fromStartIndices, getData = (x)=>x }) {
    const precisionMultiplier = attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;
    const size = attribute.size * precisionMultiplier;
    const byteOffset = attribute.byteOffset;
    const toStartIndices = attribute.startIndices;
    const hasStartIndices = fromStartIndices && toStartIndices;
    const toLength = getAttributeBufferLength(attribute, numInstances);
    const isConstant = attribute.isConstant;
    if (!hasStartIndices && fromLength >= toLength) return;
    const toData = isConstant ? attribute.value : attribute.getBuffer().getData({
        srcByteOffset: byteOffset
    });
    if (attribute.settings.normalized && !isConstant) {
        const getter = getData;
        getData = (value, chunk)=>attribute.normalizeConstant(getter(value, chunk));
    }
    const getMissingData = isConstant ? (i, chunk)=>getData(toData, chunk) : (i, chunk)=>getData(toData.subarray(i, i + size), chunk);
    const source = buffer.getData({
        length: fromLength
    });
    const data = new Float32Array(toLength);
    (0, _arrayUtils.padArray)({
        source,
        target: data,
        sourceStartIndices: fromStartIndices,
        targetStartIndices: toStartIndices,
        size,
        getData: getMissingData
    });
    if (buffer.byteLength < data.byteLength + byteOffset) buffer.reallocate(data.byteLength + byteOffset);
    buffer.subData({
        data,
        offset: byteOffset
    });
}

},{"../../utils/array-utils":"fGqYd","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fGqYd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "padArray", ()=>padArray);
function padArrayChunk(options) {
    const { source, target, start = 0, size, getData } = options;
    const end = options.end || target.length;
    const sourceLength = source.length;
    const targetLength = end - start;
    if (sourceLength > targetLength) {
        target.set(source.subarray(0, targetLength), start);
        return;
    }
    target.set(source, start);
    if (!getData) return;
    let i = sourceLength;
    while(i < targetLength){
        const datum = getData(i, source);
        for(let j = 0; j < size; j++){
            target[start + i] = datum[j] || 0;
            i++;
        }
    }
}
function padArray({ source, target, size, getData, sourceStartIndices, targetStartIndices }) {
    if (!Array.isArray(targetStartIndices)) {
        padArrayChunk({
            source,
            target,
            size,
            getData
        });
        return target;
    }
    let sourceIndex = 0;
    let targetIndex = 0;
    const getChunkData = getData && ((i, chunk)=>getData(i + targetIndex, chunk));
    const n = Math.min(sourceStartIndices.length, targetStartIndices.length);
    for(let i = 1; i < n; i++){
        const nextSourceIndex = sourceStartIndices[i] * size;
        const nextTargetIndex = targetStartIndices[i] * size;
        padArrayChunk({
            source: source.subarray(sourceIndex, nextSourceIndex),
            target,
            start: targetIndex,
            end: nextTargetIndex,
            size,
            getData: getChunkData
        });
        sourceIndex = nextSourceIndex;
        targetIndex = nextTargetIndex;
    }
    if (targetIndex < target.length) padArrayChunk({
        source: [],
        target,
        start: targetIndex,
        size,
        getData: getChunkData
    });
    return target;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"c8uno":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@luma.gl/core");
var _gpuInterpolationTransition = require("../../transitions/gpu-interpolation-transition");
var _gpuInterpolationTransitionDefault = parcelHelpers.interopDefault(_gpuInterpolationTransition);
var _gpuSpringTransition = require("../../transitions/gpu-spring-transition");
var _gpuSpringTransitionDefault = parcelHelpers.interopDefault(_gpuSpringTransition);
var _log = require("../../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
const TRANSITION_TYPES = {
    interpolation: (0, _gpuInterpolationTransitionDefault.default),
    spring: (0, _gpuSpringTransitionDefault.default)
};
class AttributeTransitionManager {
    constructor(gl, { id, timeline }){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "isSupported", void 0);
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "timeline", void 0);
        (0, _definePropertyDefault.default)(this, "transitions", void 0);
        (0, _definePropertyDefault.default)(this, "needsRedraw", void 0);
        (0, _definePropertyDefault.default)(this, "numInstances", void 0);
        this.id = id;
        this.gl = gl;
        this.timeline = timeline;
        this.transitions = {};
        this.needsRedraw = false;
        this.numInstances = 1;
        this.isSupported = (0, _core.Transform).isSupported(gl);
    }
    finalize() {
        for(const attributeName in this.transitions)this._removeTransition(attributeName);
    }
    update({ attributes, transitions, numInstances }) {
        this.numInstances = numInstances || 1;
        for(const attributeName in attributes){
            const attribute = attributes[attributeName];
            const settings = attribute.getTransitionSetting(transitions);
            if (!settings) continue;
            this._updateAttribute(attributeName, attribute, settings);
        }
        for(const attributeName in this.transitions){
            const attribute = attributes[attributeName];
            if (!attribute || !attribute.getTransitionSetting(transitions)) this._removeTransition(attributeName);
        }
    }
    hasAttribute(attributeName) {
        const transition = this.transitions[attributeName];
        return transition && transition.inProgress;
    }
    getAttributes() {
        const animatedAttributes = {};
        for(const attributeName in this.transitions){
            const transition = this.transitions[attributeName];
            if (transition.inProgress) animatedAttributes[attributeName] = transition.attributeInTransition;
        }
        return animatedAttributes;
    }
    run() {
        if (!this.isSupported || this.numInstances === 0) return false;
        for(const attributeName in this.transitions){
            const updated = this.transitions[attributeName].update();
            if (updated) this.needsRedraw = true;
        }
        const needsRedraw = this.needsRedraw;
        this.needsRedraw = false;
        return needsRedraw;
    }
    _removeTransition(attributeName) {
        this.transitions[attributeName].cancel();
        delete this.transitions[attributeName];
    }
    _updateAttribute(attributeName, attribute, settings) {
        const transition = this.transitions[attributeName];
        let isNew = !transition || transition.type !== settings.type;
        if (isNew) {
            if (!this.isSupported) {
                (0, _logDefault.default).warn("WebGL2 not supported by this browser. Transition for ".concat(attributeName, " is disabled."))();
                return;
            }
            if (transition) this._removeTransition(attributeName);
            const TransitionType = TRANSITION_TYPES[settings.type];
            if (TransitionType) this.transitions[attributeName] = new TransitionType({
                attribute,
                timeline: this.timeline,
                gl: this.gl
            });
            else {
                (0, _logDefault.default).error("unsupported transition type '".concat(settings.type, "'"))();
                isNew = false;
            }
        }
        if (isNew || attribute.needsRedraw()) {
            this.needsRedraw = true;
            this.transitions[attributeName].start(settings, this.numInstances);
        }
    }
}
exports.default = AttributeTransitionManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@luma.gl/core":"9rnrC","../../transitions/gpu-interpolation-transition":"8uyFT","../../transitions/gpu-spring-transition":"j0bT2","../../utils/log":"GqqVU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8uyFT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@luma.gl/core");
var _attribute = require("../lib/attribute/attribute");
var _attributeDefault = parcelHelpers.interopDefault(_attribute);
var _attributeTransitionUtils = require("../lib/attribute/attribute-transition-utils");
var _transition = require("./transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
class GPUInterpolationTransition {
    constructor({ gl, attribute, timeline }){
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "type", 'interpolation');
        (0, _definePropertyDefault.default)(this, "attributeInTransition", void 0);
        (0, _definePropertyDefault.default)(this, "settings", void 0);
        (0, _definePropertyDefault.default)(this, "attribute", void 0);
        (0, _definePropertyDefault.default)(this, "transition", void 0);
        (0, _definePropertyDefault.default)(this, "currentStartIndices", void 0);
        (0, _definePropertyDefault.default)(this, "currentLength", void 0);
        (0, _definePropertyDefault.default)(this, "transform", void 0);
        (0, _definePropertyDefault.default)(this, "buffers", void 0);
        this.gl = gl;
        this.transition = new (0, _transitionDefault.default)(timeline);
        this.attribute = attribute;
        this.attributeInTransition = new (0, _attributeDefault.default)(gl, attribute.settings);
        this.currentStartIndices = attribute.startIndices;
        this.currentLength = 0;
        this.transform = getTransform(gl, attribute);
        const bufferOpts = {
            byteLength: 0,
            usage: 35050
        };
        this.buffers = [
            new (0, _core.Buffer)(gl, bufferOpts),
            new (0, _core.Buffer)(gl, bufferOpts)
        ];
    }
    get inProgress() {
        return this.transition.inProgress;
    }
    start(transitionSettings, numInstances) {
        if (transitionSettings.duration <= 0) {
            this.transition.cancel();
            return;
        }
        this.settings = transitionSettings;
        const { gl, buffers, attribute } = this;
        (0, _attributeTransitionUtils.cycleBuffers)(buffers);
        const padBufferOpts = {
            numInstances,
            attribute,
            fromLength: this.currentLength,
            fromStartIndices: this.currentStartIndices,
            getData: transitionSettings.enter
        };
        for (const buffer of buffers)(0, _attributeTransitionUtils.padBuffer)({
            buffer,
            ...padBufferOpts
        });
        this.currentStartIndices = attribute.startIndices;
        this.currentLength = (0, _attributeTransitionUtils.getAttributeBufferLength)(attribute, numInstances);
        this.attributeInTransition.setData({
            buffer: buffers[1],
            value: attribute.value
        });
        this.transition.start(transitionSettings);
        this.transform.update({
            elementCount: Math.floor(this.currentLength / attribute.size),
            sourceBuffers: {
                aFrom: buffers[0],
                aTo: (0, _attributeTransitionUtils.getSourceBufferAttribute)(gl, attribute)
            },
            feedbackBuffers: {
                vCurrent: buffers[1]
            }
        });
    }
    update() {
        const updated = this.transition.update();
        if (updated) {
            const { duration, easing } = this.settings;
            const { time } = this.transition;
            let t = time / duration;
            if (easing) t = easing(t);
            this.transform.run({
                uniforms: {
                    time: t
                }
            });
        }
        return updated;
    }
    cancel() {
        this.transition.cancel();
        this.transform.delete();
        for (const buffer of this.buffers)buffer.delete();
        this.buffers.length = 0;
    }
}
exports.default = GPUInterpolationTransition;
const vs = "\n#define SHADER_NAME interpolation-transition-vertex-shader\n\nuniform float time;\nattribute ATTRIBUTE_TYPE aFrom;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vCurrent;\n\nvoid main(void) {\n  vCurrent = mix(aFrom, aTo, time);\n  gl_Position = vec4(0.0);\n}\n";
function getTransform(gl, attribute) {
    const attributeType = (0, _attributeTransitionUtils.getAttributeTypeFromSize)(attribute.size);
    return new (0, _core.Transform)(gl, {
        vs,
        defines: {
            ATTRIBUTE_TYPE: attributeType
        },
        varyings: [
            'vCurrent'
        ]
    });
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@luma.gl/core":"9rnrC","../lib/attribute/attribute":"jGQIR","../lib/attribute/attribute-transition-utils":"hvY57","./transition":"ak8FD","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"j0bT2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@luma.gl/core");
var _attributeTransitionUtils = require("../lib/attribute/attribute-transition-utils");
var _attribute = require("../lib/attribute/attribute");
var _attributeDefault = parcelHelpers.interopDefault(_attribute);
var _transition = require("./transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
class GPUSpringTransition {
    constructor({ gl, attribute, timeline }){
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "type", 'spring');
        (0, _definePropertyDefault.default)(this, "attributeInTransition", void 0);
        (0, _definePropertyDefault.default)(this, "settings", void 0);
        (0, _definePropertyDefault.default)(this, "attribute", void 0);
        (0, _definePropertyDefault.default)(this, "transition", void 0);
        (0, _definePropertyDefault.default)(this, "currentStartIndices", void 0);
        (0, _definePropertyDefault.default)(this, "currentLength", void 0);
        (0, _definePropertyDefault.default)(this, "texture", void 0);
        (0, _definePropertyDefault.default)(this, "framebuffer", void 0);
        (0, _definePropertyDefault.default)(this, "transform", void 0);
        (0, _definePropertyDefault.default)(this, "buffers", void 0);
        this.gl = gl;
        this.type = 'spring';
        this.transition = new (0, _transitionDefault.default)(timeline);
        this.attribute = attribute;
        this.attributeInTransition = new (0, _attributeDefault.default)(gl, {
            ...attribute.settings,
            normalized: false
        });
        this.currentStartIndices = attribute.startIndices;
        this.currentLength = 0;
        this.texture = getTexture(gl);
        this.framebuffer = getFramebuffer(gl, this.texture);
        this.transform = getTransform(gl, attribute, this.framebuffer);
        const bufferOpts = {
            byteLength: 0,
            usage: 35050
        };
        this.buffers = [
            new (0, _core.Buffer)(gl, bufferOpts),
            new (0, _core.Buffer)(gl, bufferOpts),
            new (0, _core.Buffer)(gl, bufferOpts)
        ];
    }
    get inProgress() {
        return this.transition.inProgress;
    }
    start(transitionSettings, numInstances) {
        const { gl, buffers, attribute } = this;
        const padBufferOpts = {
            numInstances,
            attribute,
            fromLength: this.currentLength,
            fromStartIndices: this.currentStartIndices,
            getData: transitionSettings.enter
        };
        for (const buffer of buffers)(0, _attributeTransitionUtils.padBuffer)({
            buffer,
            ...padBufferOpts
        });
        this.settings = transitionSettings;
        this.currentStartIndices = attribute.startIndices;
        this.currentLength = (0, _attributeTransitionUtils.getAttributeBufferLength)(attribute, numInstances);
        this.attributeInTransition.setData({
            buffer: buffers[1],
            value: attribute.value
        });
        this.transition.start({
            ...transitionSettings,
            duration: Infinity
        });
        this.transform.update({
            elementCount: Math.floor(this.currentLength / attribute.size),
            sourceBuffers: {
                aTo: (0, _attributeTransitionUtils.getSourceBufferAttribute)(gl, attribute)
            }
        });
    }
    update() {
        const { buffers, transform, framebuffer, transition } = this;
        const updated = transition.update();
        if (!updated) return false;
        const settings = this.settings;
        transform.update({
            sourceBuffers: {
                aPrev: buffers[0],
                aCur: buffers[1]
            },
            feedbackBuffers: {
                vNext: buffers[2]
            }
        });
        transform.run({
            framebuffer,
            discard: false,
            clearRenderTarget: true,
            uniforms: {
                stiffness: settings.stiffness,
                damping: settings.damping
            },
            parameters: {
                depthTest: false,
                blend: true,
                viewport: [
                    0,
                    0,
                    1,
                    1
                ],
                blendFunc: [
                    1,
                    1
                ],
                blendEquation: [
                    32776,
                    32776
                ]
            }
        });
        (0, _attributeTransitionUtils.cycleBuffers)(buffers);
        this.attributeInTransition.setData({
            buffer: buffers[1],
            value: this.attribute.value
        });
        const isTransitioning = (0, _core.readPixelsToArray)(framebuffer)[0] > 0;
        if (!isTransitioning) transition.end();
        return true;
    }
    cancel() {
        this.transition.cancel();
        this.transform.delete();
        for (const buffer of this.buffers)buffer.delete();
        this.buffers.length = 0;
        this.texture.delete();
        this.framebuffer.delete();
    }
}
exports.default = GPUSpringTransition;
function getTransform(gl, attribute, framebuffer) {
    const attributeType = (0, _attributeTransitionUtils.getAttributeTypeFromSize)(attribute.size);
    return new (0, _core.Transform)(gl, {
        framebuffer,
        vs: "\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nattribute ATTRIBUTE_TYPE aPrev;\nattribute ATTRIBUTE_TYPE aCur;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vNext;\nvarying float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n",
        fs: "\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nvarying float vIsTransitioningFlag;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  gl_FragColor = vec4(1.0);\n}",
        defines: {
            ATTRIBUTE_TYPE: attributeType
        },
        varyings: [
            'vNext'
        ]
    });
}
function getTexture(gl) {
    return new (0, _core.Texture2D)(gl, {
        data: new Uint8Array(4),
        format: 6408,
        type: 5121,
        border: 0,
        mipmaps: false,
        dataFormat: 6408,
        width: 1,
        height: 1
    });
}
function getFramebuffer(gl, texture) {
    return new (0, _core.Framebuffer)(gl, {
        id: 'spring-transition-is-transitioning-framebuffer',
        width: 1,
        height: 1,
        attachments: {
            [36064]: texture
        }
    });
}

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@luma.gl/core":"9rnrC","../lib/attribute/attribute-transition-utils":"hvY57","../lib/attribute/attribute":"jGQIR","./transition":"ak8FD","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"h5FLJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _constants = require("./constants");
var _attributeManager = require("./attribute/attribute-manager");
var _attributeManagerDefault = parcelHelpers.interopDefault(_attributeManager);
var _uniformTransitionManager = require("./uniform-transition-manager");
var _uniformTransitionManagerDefault = parcelHelpers.interopDefault(_uniformTransitionManager);
var _props = require("../lifecycle/props");
var _constants1 = require("../lifecycle/constants");
var _count = require("../utils/count");
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _debug = require("../debug");
var _debugDefault = parcelHelpers.interopDefault(_debug);
var _core = require("@luma.gl/core");
var _assert = require("../utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _memoize = require("../utils/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var _shader = require("../utils/shader");
var _projectFunctions = require("../shaderlib/project/project-functions");
var _typedArrayManager = require("../utils/typed-array-manager");
var _typedArrayManagerDefault = parcelHelpers.interopDefault(_typedArrayManager);
var _component = require("../lifecycle/component");
var _componentDefault = parcelHelpers.interopDefault(_component);
var _layerState = require("./layer-state");
var _layerStateDefault = parcelHelpers.interopDefault(_layerState);
var _webMercator = require("@math.gl/web-mercator");
var _core1 = require("@loaders.gl/core");
const TRACE_CHANGE_FLAG = 'layer.changeFlag';
const TRACE_INITIALIZE = 'layer.initialize';
const TRACE_UPDATE = 'layer.update';
const TRACE_FINALIZE = 'layer.finalize';
const TRACE_MATCHED = 'layer.matched';
const MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;
const EMPTY_ARRAY = Object.freeze([]);
const areViewportsEqual = (0, _memoizeDefault.default)(({ oldViewport, viewport })=>{
    return oldViewport.equals(viewport);
});
let pickingColorCache = new Uint8ClampedArray(0);
const defaultProps = {
    data: {
        type: 'data',
        value: EMPTY_ARRAY,
        async: true
    },
    dataComparator: {
        type: 'function',
        value: null,
        optional: true
    },
    _dataDiff: {
        type: 'function',
        value: (data)=>data && data.__diff,
        optional: true
    },
    dataTransform: {
        type: 'function',
        value: null,
        optional: true
    },
    onDataLoad: {
        type: 'function',
        value: null,
        optional: true
    },
    onError: {
        type: 'function',
        value: null,
        optional: true
    },
    fetch: {
        type: 'function',
        value: (url, { propName, layer, loaders, loadOptions, signal })=>{
            const { resourceManager } = layer.context;
            loadOptions = loadOptions || layer.getLoadOptions();
            loaders = loaders || layer.props.loaders;
            if (signal) {
                var _loadOptions;
                loadOptions = {
                    ...loadOptions,
                    fetch: {
                        ...(_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.fetch,
                        signal
                    }
                };
            }
            let inResourceManager = resourceManager.contains(url);
            if (!inResourceManager && !loadOptions) {
                resourceManager.add({
                    resourceId: url,
                    data: (0, _core1.load)(url, loaders),
                    persistent: false
                });
                inResourceManager = true;
            }
            if (inResourceManager) return resourceManager.subscribe({
                resourceId: url,
                onChange: (data)=>{
                    var _layer$internalState;
                    return (_layer$internalState = layer.internalState) === null || _layer$internalState === void 0 ? void 0 : _layer$internalState.reloadAsyncProp(propName, data);
                },
                consumerId: layer.id,
                requestId: propName
            });
            return (0, _core1.load)(url, loaders, loadOptions);
        }
    },
    updateTriggers: {},
    visible: true,
    pickable: false,
    opacity: {
        type: 'number',
        min: 0,
        max: 1,
        value: 1
    },
    operation: 'draw',
    onHover: {
        type: 'function',
        value: null,
        optional: true
    },
    onClick: {
        type: 'function',
        value: null,
        optional: true
    },
    onDragStart: {
        type: 'function',
        value: null,
        optional: true
    },
    onDrag: {
        type: 'function',
        value: null,
        optional: true
    },
    onDragEnd: {
        type: 'function',
        value: null,
        optional: true
    },
    coordinateSystem: (0, _constants.COORDINATE_SYSTEM).DEFAULT,
    coordinateOrigin: {
        type: 'array',
        value: [
            0,
            0,
            0
        ],
        compare: true
    },
    modelMatrix: {
        type: 'array',
        value: null,
        compare: true,
        optional: true
    },
    wrapLongitude: false,
    positionFormat: 'XYZ',
    colorFormat: 'RGBA',
    parameters: {
        type: 'object',
        value: {},
        optional: true,
        compare: 2
    },
    loadOptions: {
        type: 'object',
        value: null,
        optional: true,
        ignore: true
    },
    transitions: null,
    extensions: [],
    loaders: {
        type: 'array',
        value: [],
        optional: true,
        ignore: true
    },
    getPolygonOffset: {
        type: 'function',
        value: ({ layerIndex })=>[
                0,
                -layerIndex * 100
            ]
    },
    highlightedObjectIndex: null,
    autoHighlight: false,
    highlightColor: {
        type: 'accessor',
        value: [
            0,
            0,
            128,
            128
        ]
    }
};
class Layer extends (0, _componentDefault.default) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "internalState", null);
        (0, _definePropertyDefault.default)(this, "lifecycle", (0, _constants1.LIFECYCLE).NO_STATE);
        (0, _definePropertyDefault.default)(this, "context", void 0);
        (0, _definePropertyDefault.default)(this, "state", void 0);
        (0, _definePropertyDefault.default)(this, "parent", null);
    }
    static get componentName() {
        return Object.prototype.hasOwnProperty.call(this, 'layerName') ? this.layerName : '';
    }
    get root() {
        let layer = this;
        while(layer.parent)layer = layer.parent;
        return layer;
    }
    toString() {
        const className = this.constructor.layerName || this.constructor.name;
        return "".concat(className, "({id: '").concat(this.props.id, "'})");
    }
    project(xyz) {
        (0, _assertDefault.default)(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        const worldPosition = (0, _projectFunctions.getWorldPosition)(xyz, {
            viewport,
            modelMatrix: this.props.modelMatrix,
            coordinateOrigin: this.props.coordinateOrigin,
            coordinateSystem: this.props.coordinateSystem
        });
        const [x, y, z] = (0, _webMercator.worldToPixels)(worldPosition, viewport.pixelProjectionMatrix);
        return xyz.length === 2 ? [
            x,
            y
        ] : [
            x,
            y,
            z
        ];
    }
    unproject(xy) {
        (0, _assertDefault.default)(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        return viewport.unproject(xy);
    }
    projectPosition(xyz, params) {
        (0, _assertDefault.default)(this.internalState);
        const viewport = this.internalState.viewport || this.context.viewport;
        return (0, _projectFunctions.projectPosition)(xyz, {
            viewport,
            modelMatrix: this.props.modelMatrix,
            coordinateOrigin: this.props.coordinateOrigin,
            coordinateSystem: this.props.coordinateSystem,
            ...params
        });
    }
    get isComposite() {
        return false;
    }
    setState(partialState) {
        this.setChangeFlags({
            stateChanged: true
        });
        Object.assign(this.state, partialState);
        this.setNeedsRedraw();
    }
    setNeedsRedraw() {
        if (this.internalState) this.internalState.needsRedraw = true;
    }
    setNeedsUpdate() {
        if (this.internalState) {
            this.context.layerManager.setNeedsUpdate(String(this));
            this.internalState.needsUpdate = true;
        }
    }
    get isLoaded() {
        return this.internalState ? !this.internalState.isAsyncPropLoading() : false;
    }
    get wrapLongitude() {
        return this.props.wrapLongitude;
    }
    isPickable() {
        return this.props.pickable && this.props.visible;
    }
    getModels() {
        return this.state && (this.state.models || this.state.model && [
            this.state.model
        ]) || [];
    }
    setModuleParameters(moduleParameters) {
        for (const model of this.getModels())model.updateModuleSettings(moduleParameters);
    }
    getAttributeManager() {
        return this.internalState && this.internalState.attributeManager;
    }
    getCurrentLayer() {
        return this.internalState && this.internalState.layer;
    }
    getLoadOptions() {
        return this.props.loadOptions;
    }
    use64bitPositions() {
        const { coordinateSystem } = this.props;
        return coordinateSystem === (0, _constants.COORDINATE_SYSTEM).DEFAULT || coordinateSystem === (0, _constants.COORDINATE_SYSTEM).LNGLAT || coordinateSystem === (0, _constants.COORDINATE_SYSTEM).CARTESIAN;
    }
    onHover(info, pickingEvent) {
        if (this.props.onHover) return this.props.onHover(info, pickingEvent) || false;
        return false;
    }
    onClick(info, pickingEvent) {
        if (this.props.onClick) return this.props.onClick(info, pickingEvent) || false;
        return false;
    }
    nullPickingColor() {
        return [
            0,
            0,
            0
        ];
    }
    encodePickingColor(i, target = []) {
        target[0] = i + 1 & 255;
        target[1] = i + 1 >> 8 & 255;
        target[2] = i + 1 >> 8 >> 8 & 255;
        return target;
    }
    decodePickingColor(color) {
        (0, _assertDefault.default)(color instanceof Uint8Array);
        const [i1, i2, i3] = color;
        const index = i1 + i2 * 256 + i3 * 65536 - 1;
        return index;
    }
    getNumInstances() {
        if (Number.isFinite(this.props.numInstances)) return this.props.numInstances;
        if (this.state && this.state.numInstances !== undefined) return this.state.numInstances;
        return (0, _count.count)(this.props.data);
    }
    getStartIndices() {
        if (this.props.startIndices) return this.props.startIndices;
        if (this.state && this.state.startIndices) return this.state.startIndices;
        return null;
    }
    getBounds() {
        var _this$getAttributeMan;
        return (_this$getAttributeMan = this.getAttributeManager()) === null || _this$getAttributeMan === void 0 ? void 0 : _this$getAttributeMan.getBounds([
            'positions',
            'instancePositions'
        ]);
    }
    getShaders(shaders) {
        for (const extension of this.props.extensions)shaders = (0, _shader.mergeShaders)(shaders, extension.getShaders.call(this, extension));
        return shaders;
    }
    shouldUpdateState(params) {
        return params.changeFlags.propsOrDataChanged;
    }
    updateState(params) {
        const attributeManager = this.getAttributeManager();
        const { dataChanged } = params.changeFlags;
        if (dataChanged && attributeManager) {
            if (Array.isArray(dataChanged)) for (const dataRange of dataChanged)attributeManager.invalidateAll(dataRange);
            else attributeManager.invalidateAll();
        }
        if (attributeManager) {
            const { props } = params;
            const hasPickingBuffer = this.internalState.hasPickingBuffer;
            const needsPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable || props.extensions.some((extension)=>extension.getNeedsPickingBuffer.call(this, extension));
            if (hasPickingBuffer !== needsPickingBuffer) {
                this.internalState.hasPickingBuffer = needsPickingBuffer;
                const { pickingColors, instancePickingColors } = attributeManager.attributes;
                const pickingColorsAttribute = pickingColors || instancePickingColors;
                if (pickingColorsAttribute) {
                    if (needsPickingBuffer && pickingColorsAttribute.constant) {
                        pickingColorsAttribute.constant = false;
                        attributeManager.invalidate(pickingColorsAttribute.id);
                    }
                    if (!pickingColorsAttribute.value && !needsPickingBuffer) {
                        pickingColorsAttribute.constant = true;
                        pickingColorsAttribute.value = [
                            0,
                            0,
                            0
                        ];
                    }
                }
            }
        }
    }
    finalizeState(context) {
        for (const model of this.getModels())model.delete();
        const attributeManager = this.getAttributeManager();
        if (attributeManager) attributeManager.finalize();
        if (this.context) this.context.resourceManager.unsubscribe({
            consumerId: this.id
        });
        if (this.internalState) {
            this.internalState.uniformTransitions.clear();
            this.internalState.finalize();
        }
    }
    draw(opts) {
        for (const model of this.getModels())model.draw(opts);
    }
    getPickingInfo({ info, mode, sourceLayer }) {
        const { index } = info;
        if (index >= 0) {
            if (Array.isArray(this.props.data)) info.object = this.props.data[index];
        }
        return info;
    }
    raiseError(error, message) {
        var _this$props$onError, _this$props;
        if (message) error = new Error("".concat(message, ": ").concat(error.message), {
            cause: error
        });
        if (!((_this$props$onError = (_this$props = this.props).onError) !== null && _this$props$onError !== void 0 && _this$props$onError.call(_this$props, error))) {
            var _this$context, _this$context$onError;
            (_this$context = this.context) === null || _this$context === void 0 || (_this$context$onError = _this$context.onError) === null || _this$context$onError === void 0 || _this$context$onError.call(_this$context, error, this);
        }
    }
    getNeedsRedraw(opts = {
        clearRedrawFlags: false
    }) {
        return this._getNeedsRedraw(opts);
    }
    needsUpdate() {
        if (!this.internalState) return false;
        return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());
    }
    hasUniformTransition() {
        var _this$internalState;
        return ((_this$internalState = this.internalState) === null || _this$internalState === void 0 ? void 0 : _this$internalState.uniformTransitions.active) || false;
    }
    activateViewport(viewport) {
        if (!this.internalState) return;
        const oldViewport = this.internalState.viewport;
        this.internalState.viewport = viewport;
        if (!oldViewport || !areViewportsEqual({
            oldViewport,
            viewport
        })) {
            this.setChangeFlags({
                viewportChanged: true
            });
            if (this.isComposite) {
                if (this.needsUpdate()) this.setNeedsUpdate();
            } else this._update();
        }
    }
    invalidateAttribute(name = 'all') {
        const attributeManager = this.getAttributeManager();
        if (!attributeManager) return;
        if (name === 'all') attributeManager.invalidateAll();
        else attributeManager.invalidate(name);
    }
    updateAttributes(changedAttributes) {
        for (const model of this.getModels())this._setModelAttributes(model, changedAttributes);
    }
    _updateAttributes() {
        const attributeManager = this.getAttributeManager();
        if (!attributeManager) return;
        const props = this.props;
        const numInstances = this.getNumInstances();
        const startIndices = this.getStartIndices();
        attributeManager.update({
            data: props.data,
            numInstances,
            startIndices,
            props,
            transitions: props.transitions,
            buffers: props.data.attributes,
            context: this
        });
        const changedAttributes = attributeManager.getChangedAttributes({
            clearChangedFlags: true
        });
        this.updateAttributes(changedAttributes);
    }
    _updateAttributeTransition() {
        const attributeManager = this.getAttributeManager();
        if (attributeManager) attributeManager.updateTransition();
    }
    _updateUniformTransition() {
        const { uniformTransitions } = this.internalState;
        if (uniformTransitions.active) {
            const propsInTransition = uniformTransitions.update();
            const props = Object.create(this.props);
            for(const key in propsInTransition)Object.defineProperty(props, key, {
                value: propsInTransition[key]
            });
            return props;
        }
        return this.props;
    }
    calculateInstancePickingColors(attribute, { numInstances }) {
        if (attribute.constant) return;
        const cacheSize = Math.floor(pickingColorCache.length / 3);
        this.internalState.usesPickingColorCache = true;
        if (cacheSize < numInstances) {
            if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) (0, _logDefault.default).warn('Layer has too many data objects. Picking might not be able to distinguish all objects.')();
            pickingColorCache = (0, _typedArrayManagerDefault.default).allocate(pickingColorCache, numInstances, {
                size: 3,
                copy: true,
                maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)
            });
            const newCacheSize = Math.floor(pickingColorCache.length / 3);
            const pickingColor = [];
            for(let i = cacheSize; i < newCacheSize; i++){
                this.encodePickingColor(i, pickingColor);
                pickingColorCache[i * 3 + 0] = pickingColor[0];
                pickingColorCache[i * 3 + 1] = pickingColor[1];
                pickingColorCache[i * 3 + 2] = pickingColor[2];
            }
        }
        attribute.value = pickingColorCache.subarray(0, numInstances * 3);
    }
    _setModelAttributes(model, changedAttributes) {
        const attributeManager = this.getAttributeManager();
        const excludeAttributes = model.userData.excludeAttributes || {};
        const shaderAttributes = attributeManager.getShaderAttributes(changedAttributes, excludeAttributes);
        model.setAttributes(shaderAttributes);
    }
    disablePickingIndex(objectIndex) {
        const data = this.props.data;
        if (!('attributes' in data)) {
            this._disablePickingIndex(objectIndex);
            return;
        }
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        const externalColorAttribute = colors && data.attributes && data.attributes[colors.id];
        if (externalColorAttribute && externalColorAttribute.value) {
            const values = externalColorAttribute.value;
            const objectColor = this.encodePickingColor(objectIndex);
            for(let index = 0; index < data.length; index++){
                const i = colors.getVertexOffset(index);
                if (values[i] === objectColor[0] && values[i + 1] === objectColor[1] && values[i + 2] === objectColor[2]) this._disablePickingIndex(index);
            }
        } else this._disablePickingIndex(objectIndex);
    }
    _disablePickingIndex(objectIndex) {
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        if (!colors) return;
        const start = colors.getVertexOffset(objectIndex);
        const end = colors.getVertexOffset(objectIndex + 1);
        colors.buffer.subData({
            data: new Uint8Array(end - start),
            offset: start
        });
    }
    restorePickingColors() {
        const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
        const colors = pickingColors || instancePickingColors;
        if (!colors) return;
        if (this.internalState.usesPickingColorCache && colors.value.buffer !== pickingColorCache.buffer) colors.value = pickingColorCache.subarray(0, colors.value.length);
        colors.updateSubBuffer({
            startOffset: 0
        });
    }
    _initialize() {
        (0, _assertDefault.default)(!this.internalState);
        (0, _assertDefault.default)(Number.isFinite(this.props.coordinateSystem));
        (0, _debugDefault.default)(TRACE_INITIALIZE, this);
        const attributeManager = this._getAttributeManager();
        if (attributeManager) attributeManager.addInstanced({
            instancePickingColors: {
                type: 5121,
                size: 3,
                noAlloc: true,
                update: this.calculateInstancePickingColors
            }
        });
        this.internalState = new (0, _layerStateDefault.default)({
            attributeManager,
            layer: this
        });
        this._clearChangeFlags();
        this.state = {};
        Object.defineProperty(this.state, 'attributeManager', {
            get: ()=>{
                (0, _logDefault.default).deprecated('layer.state.attributeManager', 'layer.getAttributeManager()')();
                return attributeManager;
            }
        });
        this.internalState.uniformTransitions = new (0, _uniformTransitionManagerDefault.default)(this.context.timeline);
        this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);
        this.internalState.setAsyncProps(this.props);
        this.initializeState(this.context);
        for (const extension of this.props.extensions)extension.initializeState.call(this, this.context, extension);
        this.setChangeFlags({
            dataChanged: 'init',
            propsChanged: 'init',
            viewportChanged: true,
            extensionsChanged: true
        });
        this._update();
    }
    _transferState(oldLayer) {
        (0, _debugDefault.default)(TRACE_MATCHED, this, this === oldLayer);
        const { state, internalState } = oldLayer;
        if (this === oldLayer) return;
        this.internalState = internalState;
        this.state = state;
        this.internalState.setAsyncProps(this.props);
        this._diffProps(this.props, this.internalState.getOldProps());
    }
    _update() {
        const stateNeedsUpdate = this.needsUpdate();
        (0, _debugDefault.default)(TRACE_UPDATE, this, stateNeedsUpdate);
        if (!stateNeedsUpdate) return;
        const currentProps = this.props;
        const context = this.context;
        const internalState = this.internalState;
        const currentViewport = context.viewport;
        const propsInTransition = this._updateUniformTransition();
        internalState.propsInTransition = propsInTransition;
        context.viewport = internalState.viewport || currentViewport;
        this.props = propsInTransition;
        try {
            const updateParams = this._getUpdateParams();
            const oldModels = this.getModels();
            if (context.gl) this.updateState(updateParams);
            else try {
                this.updateState(updateParams);
            } catch (error) {}
            for (const extension of this.props.extensions)extension.updateState.call(this, updateParams, extension);
            const modelChanged = this.getModels()[0] !== oldModels[0];
            this._postUpdate(updateParams, modelChanged);
        } finally{
            context.viewport = currentViewport;
            this.props = currentProps;
            this._clearChangeFlags();
            internalState.needsUpdate = false;
            internalState.resetOldProps();
        }
    }
    _finalize() {
        (0, _debugDefault.default)(TRACE_FINALIZE, this);
        this.finalizeState(this.context);
        for (const extension of this.props.extensions)extension.finalizeState.call(this, this.context, extension);
    }
    _drawLayer({ moduleParameters = null, uniforms = {}, parameters = {} }) {
        this._updateAttributeTransition();
        const currentProps = this.props;
        const context = this.context;
        this.props = this.internalState.propsInTransition || currentProps;
        const opacity = this.props.opacity;
        uniforms.opacity = Math.pow(opacity, 1 / 2.2);
        try {
            if (moduleParameters) this.setModuleParameters(moduleParameters);
            const { getPolygonOffset } = this.props;
            const offsets = getPolygonOffset && getPolygonOffset(uniforms) || [
                0,
                0
            ];
            (0, _core.setParameters)(context.gl, {
                polygonOffset: offsets
            });
            (0, _core.withParameters)(context.gl, parameters, ()=>{
                const opts = {
                    moduleParameters,
                    uniforms,
                    parameters,
                    context
                };
                for (const extension of this.props.extensions)extension.draw.call(this, opts, extension);
                this.draw(opts);
            });
        } finally{
            this.props = currentProps;
        }
    }
    getChangeFlags() {
        var _this$internalState2;
        return (_this$internalState2 = this.internalState) === null || _this$internalState2 === void 0 ? void 0 : _this$internalState2.changeFlags;
    }
    setChangeFlags(flags) {
        if (!this.internalState) return;
        const { changeFlags } = this.internalState;
        for(const key in flags)if (flags[key]) {
            let flagChanged = false;
            switch(key){
                case 'dataChanged':
                    const dataChangedReason = flags[key];
                    const prevDataChangedReason = changeFlags[key];
                    if (dataChangedReason && Array.isArray(prevDataChangedReason)) {
                        changeFlags.dataChanged = Array.isArray(dataChangedReason) ? prevDataChangedReason.concat(dataChangedReason) : dataChangedReason;
                        flagChanged = true;
                    }
                default:
                    if (!changeFlags[key]) {
                        changeFlags[key] = flags[key];
                        flagChanged = true;
                    }
            }
            if (flagChanged) (0, _debugDefault.default)(TRACE_CHANGE_FLAG, this, key, flags);
        }
        const propsOrDataChanged = Boolean(changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged);
        changeFlags.propsOrDataChanged = propsOrDataChanged;
        changeFlags.somethingChanged = propsOrDataChanged || changeFlags.viewportChanged || changeFlags.stateChanged;
    }
    _clearChangeFlags() {
        this.internalState.changeFlags = {
            dataChanged: false,
            propsChanged: false,
            updateTriggersChanged: false,
            viewportChanged: false,
            stateChanged: false,
            extensionsChanged: false,
            propsOrDataChanged: false,
            somethingChanged: false
        };
    }
    _diffProps(newProps, oldProps) {
        const changeFlags = (0, _props.diffProps)(newProps, oldProps);
        if (changeFlags.updateTriggersChanged) {
            for(const key in changeFlags.updateTriggersChanged)if (changeFlags.updateTriggersChanged[key]) this.invalidateAttribute(key);
        }
        if (changeFlags.transitionsChanged) for(const key in changeFlags.transitionsChanged){
            var _newProps$transitions;
            this.internalState.uniformTransitions.add(key, oldProps[key], newProps[key], (_newProps$transitions = newProps.transitions) === null || _newProps$transitions === void 0 ? void 0 : _newProps$transitions[key]);
        }
        return this.setChangeFlags(changeFlags);
    }
    validateProps() {
        (0, _props.validateProps)(this.props);
    }
    updateAutoHighlight(info) {
        if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) this._updateAutoHighlight(info);
    }
    _updateAutoHighlight(info) {
        const pickingModuleParameters = {
            pickingSelectedColor: info.picked ? info.color : null
        };
        const { highlightColor } = this.props;
        if (info.picked && typeof highlightColor === 'function') pickingModuleParameters.pickingHighlightColor = highlightColor(info);
        this.setModuleParameters(pickingModuleParameters);
        this.setNeedsRedraw();
    }
    _getAttributeManager() {
        const context = this.context;
        return new (0, _attributeManagerDefault.default)(context.gl, {
            id: this.props.id,
            stats: context.stats,
            timeline: context.timeline
        });
    }
    _postUpdate(updateParams, forceUpdate) {
        const { props, oldProps } = updateParams;
        this.setNeedsRedraw();
        this._updateAttributes();
        const { model } = this.state;
        model === null || model === void 0 || model.setInstanceCount(this.getNumInstances());
        const { autoHighlight, highlightedObjectIndex, highlightColor } = props;
        if (forceUpdate || oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {
            const parameters = {};
            if (!autoHighlight) parameters.pickingSelectedColor = null;
            if (Array.isArray(highlightColor)) parameters.pickingHighlightColor = highlightColor;
            if (forceUpdate || highlightedObjectIndex !== oldProps.highlightedObjectIndex) parameters.pickingSelectedColor = Number.isFinite(highlightedObjectIndex) && highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;
            this.setModuleParameters(parameters);
        }
    }
    _getUpdateParams() {
        return {
            props: this.props,
            oldProps: this.internalState.getOldProps(),
            context: this.context,
            changeFlags: this.internalState.changeFlags
        };
    }
    _getNeedsRedraw(opts) {
        if (!this.internalState) return false;
        let redraw = false;
        redraw = redraw || this.internalState.needsRedraw && this.id;
        const attributeManager = this.getAttributeManager();
        const attributeManagerNeedsRedraw = attributeManager ? attributeManager.getNeedsRedraw(opts) : false;
        redraw = redraw || attributeManagerNeedsRedraw;
        if (redraw) for (const extension of this.props.extensions)extension.onNeedsRedraw.call(this, extension);
        this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;
        return redraw;
    }
    _onAsyncPropUpdated() {
        this._diffProps(this.props, this.internalState.getOldProps());
        this.setNeedsUpdate();
    }
}
exports.default = Layer;
(0, _definePropertyDefault.default)(Layer, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(Layer, "layerName", 'Layer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./constants":"lSdwU","./attribute/attribute-manager":"dttrz","./uniform-transition-manager":"aYx1W","../lifecycle/props":"jjUYw","../lifecycle/constants":"iXzSV","../utils/count":"2AclJ","../utils/log":"GqqVU","../debug":"h4a5l","@luma.gl/core":"9rnrC","../utils/assert":"8E3uE","../utils/memoize":"1xMVQ","../utils/shader":"h4w9A","../shaderlib/project/project-functions":"iRGiq","../utils/typed-array-manager":"1iupO","../lifecycle/component":"hhpT0","./layer-state":"hdlVK","@math.gl/web-mercator":"gDT8w","@loaders.gl/core":"9tqNe","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aYx1W":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _attributeTransitionUtils = require("./attribute/attribute-transition-utils");
var _cpuInterpolationTransition = require("../transitions/cpu-interpolation-transition");
var _cpuInterpolationTransitionDefault = parcelHelpers.interopDefault(_cpuInterpolationTransition);
var _cpuSpringTransition = require("../transitions/cpu-spring-transition");
var _cpuSpringTransitionDefault = parcelHelpers.interopDefault(_cpuSpringTransition);
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
const TRANSITION_TYPES = {
    interpolation: (0, _cpuInterpolationTransitionDefault.default),
    spring: (0, _cpuSpringTransitionDefault.default)
};
class UniformTransitionManager {
    constructor(timeline){
        this.transitions = new Map();
        this.timeline = timeline;
    }
    get active() {
        return this.transitions.size > 0;
    }
    add(key, fromValue, toValue, settings) {
        const { transitions } = this;
        if (transitions.has(key)) {
            const transition = transitions.get(key);
            const { value = transition.settings.fromValue } = transition;
            fromValue = value;
            this.remove(key);
        }
        settings = (0, _attributeTransitionUtils.normalizeTransitionSettings)(settings);
        if (!settings) return;
        const TransitionType = TRANSITION_TYPES[settings.type];
        if (!TransitionType) {
            (0, _logDefault.default).error("unsupported transition type '".concat(settings.type, "'"))();
            return;
        }
        const transition = new TransitionType(this.timeline);
        transition.start({
            ...settings,
            fromValue,
            toValue
        });
        transitions.set(key, transition);
    }
    remove(key) {
        const { transitions } = this;
        if (transitions.has(key)) {
            transitions.get(key).cancel();
            transitions.delete(key);
        }
    }
    update() {
        const propsInTransition = {};
        for (const [key, transition] of this.transitions){
            transition.update();
            propsInTransition[key] = transition.value;
            if (!transition.inProgress) this.remove(key);
        }
        return propsInTransition;
    }
    clear() {
        for (const key of this.transitions.keys())this.remove(key);
    }
}
exports.default = UniformTransitionManager;

},{"./attribute/attribute-transition-utils":"hvY57","../transitions/cpu-interpolation-transition":"cJAs7","../transitions/cpu-spring-transition":"iExQS","../utils/log":"GqqVU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cJAs7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _core = require("@math.gl/core");
var _transition = require("./transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
class CPUInterpolationTransition extends (0, _transitionDefault.default) {
    get value() {
        return this._value;
    }
    _onUpdate() {
        const { time, settings: { fromValue, toValue, duration, easing } } = this;
        const t = easing(time / duration);
        this._value = (0, _core.lerp)(fromValue, toValue, t);
    }
}
exports.default = CPUInterpolationTransition;

},{"@math.gl/core":"e2A67","./transition":"ak8FD","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iExQS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transition = require("./transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
const EPSILON = 1e-5;
function updateSpringElement(prev, cur, dest, damping, stiffness) {
    const velocity = cur - prev;
    const delta = dest - cur;
    const spring = delta * stiffness;
    const damper = -velocity * damping;
    return spring + damper + velocity + cur;
}
function updateSpring(prev, cur, dest, damping, stiffness) {
    if (Array.isArray(dest)) {
        const next = [];
        for(let i = 0; i < dest.length; i++)next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);
        return next;
    }
    return updateSpringElement(prev, cur, dest, damping, stiffness);
}
function distance(value1, value2) {
    if (Array.isArray(value1)) {
        let distanceSquare = 0;
        for(let i = 0; i < value1.length; i++){
            const d = value1[i] - value2[i];
            distanceSquare += d * d;
        }
        return Math.sqrt(distanceSquare);
    }
    return Math.abs(value1 - value2);
}
class CPUSpringTransition extends (0, _transitionDefault.default) {
    get value() {
        return this._currValue;
    }
    _onUpdate() {
        const { fromValue, toValue, damping, stiffness } = this.settings;
        const { _prevValue = fromValue, _currValue = fromValue } = this;
        let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);
        const delta = distance(nextValue, toValue);
        const velocity = distance(nextValue, _currValue);
        if (delta < EPSILON && velocity < EPSILON) {
            nextValue = toValue;
            this.end();
        }
        this._prevValue = _currValue;
        this._currValue = nextValue;
    }
}
exports.default = CPUSpringTransition;

},{"./transition":"ak8FD","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jjUYw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validateProps", ()=>validateProps);
parcelHelpers.export(exports, "diffProps", ()=>diffProps);
parcelHelpers.export(exports, "compareProps", ()=>compareProps);
var _constants = require("./constants");
function validateProps(props) {
    const propTypes = props[0, _constants.PROP_TYPES_SYMBOL];
    for(const propName in propTypes){
        const propType = propTypes[propName];
        const { validate } = propType;
        if (validate && !validate(props[propName], propType)) throw new Error("Invalid prop ".concat(propName, ": ").concat(props[propName]));
    }
}
function diffProps(props, oldProps) {
    const propsChangedReason = compareProps({
        newProps: props,
        oldProps,
        propTypes: props[0, _constants.PROP_TYPES_SYMBOL],
        ignoreProps: {
            data: null,
            updateTriggers: null,
            extensions: null,
            transitions: null
        }
    });
    const dataChangedReason = diffDataProps(props, oldProps);
    let updateTriggersChangedReason = false;
    if (!dataChangedReason) updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);
    return {
        dataChanged: dataChangedReason,
        propsChanged: propsChangedReason,
        updateTriggersChanged: updateTriggersChangedReason,
        extensionsChanged: diffExtensions(props, oldProps),
        transitionsChanged: diffTransitions(props, oldProps)
    };
}
function diffTransitions(props, oldProps) {
    if (!props.transitions) return false;
    const result = {};
    const propTypes = props[0, _constants.PROP_TYPES_SYMBOL];
    let changed = false;
    for(const key in props.transitions){
        const propType = propTypes[key];
        const type = propType && propType.type;
        const isTransitionable = type === 'number' || type === 'color' || type === 'array';
        if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {
            result[key] = true;
            changed = true;
        }
    }
    return changed ? result : false;
}
function compareProps({ newProps, oldProps, ignoreProps = {}, propTypes = {}, triggerName = 'props' }) {
    if (oldProps === newProps) return false;
    if (typeof newProps !== 'object' || newProps === null) return "".concat(triggerName, " changed shallowly");
    if (typeof oldProps !== 'object' || oldProps === null) return "".concat(triggerName, " changed shallowly");
    for (const key of Object.keys(newProps))if (!(key in ignoreProps)) {
        if (!(key in oldProps)) return "".concat(triggerName, ".").concat(key, " added");
        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
        if (changed) return "".concat(triggerName, ".").concat(key, " ").concat(changed);
    }
    for (const key of Object.keys(oldProps))if (!(key in ignoreProps)) {
        if (!(key in newProps)) return "".concat(triggerName, ".").concat(key, " dropped");
        if (!Object.hasOwnProperty.call(newProps, key)) {
            const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
            if (changed) return "".concat(triggerName, ".").concat(key, " ").concat(changed);
        }
    }
    return false;
}
function comparePropValues(newProp, oldProp, propType) {
    let equal = propType && propType.equal;
    if (equal && !equal(newProp, oldProp, propType)) return 'changed deeply';
    if (!equal) {
        equal = newProp && oldProp && newProp.equals;
        if (equal && !equal.call(newProp, oldProp)) return 'changed deeply';
    }
    if (!equal && oldProp !== newProp) return 'changed shallowly';
    return null;
}
function diffDataProps(props, oldProps) {
    if (oldProps === null) return 'oldProps is null, initial diff';
    let dataChanged = false;
    const { dataComparator, _dataDiff } = props;
    if (dataComparator) {
        if (!dataComparator(props.data, oldProps.data)) dataChanged = 'Data comparator detected a change';
    } else if (props.data !== oldProps.data) dataChanged = 'A new data container was supplied';
    if (dataChanged && _dataDiff) dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;
    return dataChanged;
}
function diffUpdateTriggers(props, oldProps) {
    if (oldProps === null) return {
        all: true
    };
    if ('all' in props.updateTriggers) {
        const diffReason = diffUpdateTrigger(props, oldProps, 'all');
        if (diffReason) return {
            all: true
        };
    }
    const reason = {};
    let changed = false;
    for(const triggerName in props.updateTriggers)if (triggerName !== 'all') {
        const diffReason = diffUpdateTrigger(props, oldProps, triggerName);
        if (diffReason) {
            reason[triggerName] = true;
            changed = true;
        }
    }
    return changed ? reason : false;
}
function diffExtensions(props, oldProps) {
    if (oldProps === null) return true;
    const oldExtensions = oldProps.extensions;
    const { extensions } = props;
    if (extensions === oldExtensions) return false;
    if (!oldExtensions || !extensions) return true;
    if (extensions.length !== oldExtensions.length) return true;
    for(let i = 0; i < extensions.length; i++){
        if (!extensions[i].equals(oldExtensions[i])) return true;
    }
    return false;
}
function diffUpdateTrigger(props, oldProps, triggerName) {
    let newTriggers = props.updateTriggers[triggerName];
    newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;
    let oldTriggers = oldProps.updateTriggers[triggerName];
    oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;
    const diffReason = compareProps({
        oldProps: oldTriggers,
        newProps: newTriggers,
        triggerName
    });
    return diffReason;
}

},{"./constants":"iXzSV","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2AclJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "count", ()=>count);
const ERR_NOT_OBJECT = 'count(): argument not an object';
const ERR_NOT_CONTAINER = 'count(): argument not a container';
function count(container) {
    if (!isObject(container)) throw new Error(ERR_NOT_OBJECT);
    if (typeof container.count === 'function') return container.count();
    if (Number.isFinite(container.size)) return container.size;
    if (Number.isFinite(container.length)) return container.length;
    if (isPlainObject(container)) return Object.keys(container).length;
    throw new Error(ERR_NOT_CONTAINER);
}
function isPlainObject(value) {
    return value !== null && typeof value === 'object' && value.constructor === Object;
}
function isObject(value) {
    return value !== null && typeof value === 'object';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"h4w9A":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeShaders", ()=>mergeShaders);
function mergeShaders(target, source) {
    if (!source) return target;
    const result = {
        ...target,
        ...source
    };
    if ('defines' in source) result.defines = {
        ...target.defines,
        ...source.defines
    };
    if ('modules' in source) {
        result.modules = (target.modules || []).concat(source.modules);
        if (source.modules.some((module)=>module.name === 'project64')) {
            const index = result.modules.findIndex((module)=>module.name === 'project32');
            if (index >= 0) result.modules.splice(index, 1);
        }
    }
    if ('inject' in source) {
        if (!target.inject) result.inject = source.inject;
        else {
            const mergedInjection = {
                ...target.inject
            };
            for(const key in source.inject)mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];
            result.inject = mergedInjection;
        }
    }
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iRGiq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getWorldPosition", ()=>getWorldPosition);
parcelHelpers.export(exports, "projectPosition", ()=>projectPosition);
var _constants = require("../../lib/constants");
var _viewportUniforms = require("./viewport-uniforms");
var _webMercatorViewport = require("../../viewports/web-mercator-viewport");
var _webMercatorViewportDefault = parcelHelpers.interopDefault(_webMercatorViewport);
var _vec4 = require("gl-matrix/vec4");
var _vec3 = require("gl-matrix/vec3");
var _webMercator = require("@math.gl/web-mercator");
const DEFAULT_COORDINATE_ORIGIN = [
    0,
    0,
    0
];
function lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {
    const p = viewport.projectPosition(lngLatZ);
    if (offsetMode && viewport instanceof (0, _webMercatorViewportDefault.default)) {
        const [longitude, latitude, z = 0] = lngLatZ;
        const distanceScales = viewport.getDistanceScales([
            longitude,
            latitude
        ]);
        p[2] = z * distanceScales.unitsPerMeter[2];
    }
    return p;
}
function normalizeParameters(opts) {
    const { viewport, modelMatrix, coordinateOrigin } = opts;
    let { coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin } = opts;
    if (coordinateSystem === (0, _constants.COORDINATE_SYSTEM).DEFAULT) coordinateSystem = viewport.isGeospatial ? (0, _constants.COORDINATE_SYSTEM).LNGLAT : (0, _constants.COORDINATE_SYSTEM).CARTESIAN;
    if (fromCoordinateSystem === undefined) fromCoordinateSystem = coordinateSystem;
    if (fromCoordinateOrigin === undefined) fromCoordinateOrigin = coordinateOrigin;
    return {
        viewport,
        coordinateSystem,
        coordinateOrigin,
        modelMatrix,
        fromCoordinateSystem,
        fromCoordinateOrigin
    };
}
function getWorldPosition(position, { viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode }) {
    let [x, y, z = 0] = position;
    if (modelMatrix) [x, y, z] = _vec4.transformMat4([], [
        x,
        y,
        z,
        1.0
    ], modelMatrix);
    switch(coordinateSystem){
        case (0, _constants.COORDINATE_SYSTEM).LNGLAT:
            return lngLatZToWorldPosition([
                x,
                y,
                z
            ], viewport, offsetMode);
        case (0, _constants.COORDINATE_SYSTEM).LNGLAT_OFFSETS:
            return lngLatZToWorldPosition([
                x + coordinateOrigin[0],
                y + coordinateOrigin[1],
                z + (coordinateOrigin[2] || 0)
            ], viewport, offsetMode);
        case (0, _constants.COORDINATE_SYSTEM).METER_OFFSETS:
            return lngLatZToWorldPosition((0, _webMercator.addMetersToLngLat)(coordinateOrigin, [
                x,
                y,
                z
            ]), viewport, offsetMode);
        case (0, _constants.COORDINATE_SYSTEM).CARTESIAN:
        default:
            return viewport.isGeospatial ? [
                x + coordinateOrigin[0],
                y + coordinateOrigin[1],
                z + coordinateOrigin[2]
            ] : viewport.projectPosition([
                x,
                y,
                z
            ]);
    }
}
function projectPosition(position, params) {
    const { viewport, coordinateSystem, coordinateOrigin, modelMatrix, fromCoordinateSystem, fromCoordinateOrigin } = normalizeParameters(params);
    const { autoOffset = true } = params;
    const { geospatialOrigin = DEFAULT_COORDINATE_ORIGIN, shaderCoordinateOrigin = DEFAULT_COORDINATE_ORIGIN, offsetMode = false } = autoOffset ? (0, _viewportUniforms.getOffsetOrigin)(viewport, coordinateSystem, coordinateOrigin) : {};
    const worldPosition = getWorldPosition(position, {
        viewport,
        modelMatrix,
        coordinateSystem: fromCoordinateSystem,
        coordinateOrigin: fromCoordinateOrigin,
        offsetMode
    });
    if (offsetMode) {
        const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
        _vec3.sub(worldPosition, worldPosition, positionCommonSpace);
    }
    return worldPosition;
}

},{"../../lib/constants":"lSdwU","./viewport-uniforms":"9RcvD","../../viewports/web-mercator-viewport":"4S6HA","gl-matrix/vec4":"9jhlX","gl-matrix/vec3":"5UKYl","@math.gl/web-mercator":"gDT8w","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hhpT0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _constants = require("./constants");
var _createProps = require("./create-props");
let counter = 0;
class Component {
    constructor(...propObjects){
        (0, _definePropertyDefault.default)(this, "id", void 0);
        (0, _definePropertyDefault.default)(this, "props", void 0);
        (0, _definePropertyDefault.default)(this, "count", void 0);
        this.props = (0, _createProps.createProps)(this, propObjects);
        this.id = this.props.id;
        this.count = counter++;
    }
    clone(newProps) {
        const { props } = this;
        const asyncProps = {};
        for(const key in props[0, _constants.ASYNC_DEFAULTS_SYMBOL]){
            if (key in props[0, _constants.ASYNC_RESOLVED_SYMBOL]) asyncProps[key] = props[0, _constants.ASYNC_RESOLVED_SYMBOL][key];
            else if (key in props[0, _constants.ASYNC_ORIGINAL_SYMBOL]) asyncProps[key] = props[0, _constants.ASYNC_ORIGINAL_SYMBOL][key];
        }
        return new this.constructor({
            ...props,
            ...asyncProps,
            ...newProps
        });
    }
}
exports.default = Component;
(0, _definePropertyDefault.default)(Component, "componentName", 'Component');
(0, _definePropertyDefault.default)(Component, "defaultProps", {});

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./constants":"iXzSV","./create-props":"htRHR","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"htRHR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createProps", ()=>createProps);
var _log = require("../utils/log");
var _logDefault = parcelHelpers.interopDefault(_log);
var _iterableUtils = require("../utils/iterable-utils");
var _propTypes = require("./prop-types");
var _constants = require("./constants");
function createProps(component, propObjects) {
    let extensions;
    for(let i = propObjects.length - 1; i >= 0; i--){
        const props = propObjects[i];
        if ('extensions' in props) extensions = props.extensions;
    }
    const propsPrototype = getPropsPrototype(component.constructor, extensions);
    const propsInstance = Object.create(propsPrototype);
    propsInstance[0, _constants.COMPONENT_SYMBOL] = component;
    propsInstance[0, _constants.ASYNC_ORIGINAL_SYMBOL] = {};
    propsInstance[0, _constants.ASYNC_RESOLVED_SYMBOL] = {};
    for(let i = 0; i < propObjects.length; ++i){
        const props = propObjects[i];
        for(const key in props)propsInstance[key] = props[key];
    }
    Object.freeze(propsInstance);
    return propsInstance;
}
const MergedDefaultPropsCacheKey = '_mergedDefaultProps';
function getPropsPrototype(componentClass, extensions) {
    let cacheKey = MergedDefaultPropsCacheKey;
    if (extensions) for (const extension of extensions){
        const ExtensionClass = extension.constructor;
        if (ExtensionClass) cacheKey += ":".concat(ExtensionClass.extensionName || ExtensionClass.name);
    }
    const defaultProps = getOwnProperty(componentClass, cacheKey);
    if (!defaultProps) return componentClass[cacheKey] = createPropsPrototypeAndTypes(componentClass, extensions || []);
    return defaultProps;
}
function createPropsPrototypeAndTypes(componentClass, extensions) {
    const parent = componentClass.prototype;
    if (!parent) return null;
    const parentClass = Object.getPrototypeOf(componentClass);
    const parentDefaultProps = getPropsPrototype(parentClass);
    const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};
    const componentPropDefs = (0, _propTypes.parsePropTypes)(componentDefaultProps);
    const defaultProps = Object.assign(Object.create(null), parentDefaultProps, componentPropDefs.defaultProps);
    const propTypes = Object.assign(Object.create(null), parentDefaultProps === null || parentDefaultProps === void 0 ? void 0 : parentDefaultProps[0, _constants.PROP_TYPES_SYMBOL], componentPropDefs.propTypes);
    const deprecatedProps = Object.assign(Object.create(null), parentDefaultProps === null || parentDefaultProps === void 0 ? void 0 : parentDefaultProps[0, _constants.DEPRECATED_PROPS_SYMBOL], componentPropDefs.deprecatedProps);
    for (const extension of extensions){
        const extensionDefaultProps = getPropsPrototype(extension.constructor);
        if (extensionDefaultProps) {
            Object.assign(defaultProps, extensionDefaultProps);
            Object.assign(propTypes, extensionDefaultProps[0, _constants.PROP_TYPES_SYMBOL]);
            Object.assign(deprecatedProps, extensionDefaultProps[0, _constants.DEPRECATED_PROPS_SYMBOL]);
        }
    }
    createPropsPrototype(defaultProps, componentClass);
    addAsyncPropsToPropPrototype(defaultProps, propTypes);
    addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps);
    defaultProps[0, _constants.PROP_TYPES_SYMBOL] = propTypes;
    defaultProps[0, _constants.DEPRECATED_PROPS_SYMBOL] = deprecatedProps;
    if (extensions.length === 0 && !hasOwnProperty(componentClass, '_propTypes')) componentClass._propTypes = propTypes;
    return defaultProps;
}
function createPropsPrototype(defaultProps, componentClass) {
    const id = getComponentName(componentClass);
    Object.defineProperties(defaultProps, {
        id: {
            writable: true,
            value: id
        }
    });
}
function addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps) {
    for(const propName in deprecatedProps)Object.defineProperty(defaultProps, propName, {
        enumerable: false,
        set (newValue) {
            const nameStr = "".concat(this.id, ": ").concat(propName);
            for (const newPropName of deprecatedProps[propName])if (!hasOwnProperty(this, newPropName)) this[newPropName] = newValue;
            (0, _logDefault.default).deprecated(nameStr, deprecatedProps[propName].join('/'))();
        }
    });
}
function addAsyncPropsToPropPrototype(defaultProps, propTypes) {
    const defaultValues = {};
    const descriptors = {};
    for(const propName in propTypes){
        const propType = propTypes[propName];
        const { name, value } = propType;
        if (propType.async) {
            defaultValues[name] = value;
            descriptors[name] = getDescriptorForAsyncProp(name);
        }
    }
    defaultProps[0, _constants.ASYNC_DEFAULTS_SYMBOL] = defaultValues;
    defaultProps[0, _constants.ASYNC_ORIGINAL_SYMBOL] = {};
    Object.defineProperties(defaultProps, descriptors);
}
function getDescriptorForAsyncProp(name) {
    return {
        enumerable: true,
        set (newValue) {
            if (typeof newValue === 'string' || newValue instanceof Promise || (0, _iterableUtils.isAsyncIterable)(newValue)) this[0, _constants.ASYNC_ORIGINAL_SYMBOL][name] = newValue;
            else this[0, _constants.ASYNC_RESOLVED_SYMBOL][name] = newValue;
        },
        get () {
            if (this[0, _constants.ASYNC_RESOLVED_SYMBOL]) {
                if (name in this[0, _constants.ASYNC_RESOLVED_SYMBOL]) {
                    const value = this[0, _constants.ASYNC_RESOLVED_SYMBOL][name];
                    return value || this[0, _constants.ASYNC_DEFAULTS_SYMBOL][name];
                }
                if (name in this[0, _constants.ASYNC_ORIGINAL_SYMBOL]) {
                    const state = this[0, _constants.COMPONENT_SYMBOL] && this[0, _constants.COMPONENT_SYMBOL].internalState;
                    if (state && state.hasAsyncProp(name)) return state.getAsyncProp(name) || this[0, _constants.ASYNC_DEFAULTS_SYMBOL][name];
                }
            }
            return this[0, _constants.ASYNC_DEFAULTS_SYMBOL][name];
        }
    };
}
function hasOwnProperty(object, prop) {
    return Object.prototype.hasOwnProperty.call(object, prop);
}
function getOwnProperty(object, prop) {
    return hasOwnProperty(object, prop) && object[prop];
}
function getComponentName(componentClass) {
    const componentName = componentClass.componentName;
    if (!componentName) (0, _logDefault.default).warn("".concat(componentClass.name, ".componentName not specified"))();
    return componentName || componentClass.name;
}

},{"../utils/log":"GqqVU","../utils/iterable-utils":"81bnO","./prop-types":"8LNFQ","./constants":"iXzSV","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8LNFQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parsePropTypes", ()=>parsePropTypes);
var _texture = require("../utils/texture");
var _deepEqual = require("../utils/deep-equal");
const TYPE_DEFINITIONS = {
    boolean: {
        validate (value, propType) {
            return true;
        },
        equal (value1, value2, propType) {
            return Boolean(value1) === Boolean(value2);
        }
    },
    number: {
        validate (value, propType) {
            return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);
        }
    },
    color: {
        validate (value, propType) {
            return propType.optional && !value || isArray(value) && (value.length === 3 || value.length === 4);
        },
        equal (value1, value2, propType) {
            return (0, _deepEqual.deepEqual)(value1, value2, 1);
        }
    },
    accessor: {
        validate (value, propType) {
            const valueType = getTypeOf(value);
            return valueType === 'function' || valueType === getTypeOf(propType.value);
        },
        equal (value1, value2, propType) {
            if (typeof value2 === 'function') return true;
            return (0, _deepEqual.deepEqual)(value1, value2, 1);
        }
    },
    array: {
        validate (value, propType) {
            return propType.optional && !value || isArray(value);
        },
        equal (value1, value2, propType) {
            const { compare } = propType;
            const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;
            return compare ? (0, _deepEqual.deepEqual)(value1, value2, depth) : value1 === value2;
        }
    },
    object: {
        equal (value1, value2, propType) {
            if (propType.ignore) return true;
            const { compare } = propType;
            const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;
            return compare ? (0, _deepEqual.deepEqual)(value1, value2, depth) : value1 === value2;
        }
    },
    function: {
        validate (value, propType) {
            return propType.optional && !value || typeof value === 'function';
        },
        equal (value1, value2, propType) {
            const shouldIgnore = !propType.compare && propType.ignore !== false;
            return shouldIgnore || value1 === value2;
        }
    },
    data: {
        transform: (value, propType, component)=>{
            const { dataTransform } = component.props;
            return dataTransform && value ? dataTransform(value) : value;
        }
    },
    image: {
        transform: (value, propType, component)=>{
            const context = component.context;
            if (!context || !context.gl) return null;
            return (0, _texture.createTexture)(component.id, context.gl, value, {
                ...propType.parameters,
                ...component.props.textureParameters
            });
        },
        release: (value, propType, component)=>{
            (0, _texture.destroyTexture)(component.id, value);
        }
    }
};
function parsePropTypes(propDefs) {
    const propTypes = {};
    const defaultProps = {};
    const deprecatedProps = {};
    for (const [propName, propDef] of Object.entries(propDefs)){
        const deprecated = propDef === null || propDef === void 0 ? void 0 : propDef.deprecatedFor;
        if (deprecated) deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [
            deprecated
        ];
        else {
            const propType = parsePropType(propName, propDef);
            propTypes[propName] = propType;
            defaultProps[propName] = propType.value;
        }
    }
    return {
        propTypes,
        defaultProps,
        deprecatedProps
    };
}
function parsePropType(name, propDef) {
    switch(getTypeOf(propDef)){
        case 'object':
            return normalizePropDefinition(name, propDef);
        case 'array':
            return normalizePropDefinition(name, {
                type: 'array',
                value: propDef,
                compare: false
            });
        case 'boolean':
            return normalizePropDefinition(name, {
                type: 'boolean',
                value: propDef
            });
        case 'number':
            return normalizePropDefinition(name, {
                type: 'number',
                value: propDef
            });
        case 'function':
            return normalizePropDefinition(name, {
                type: 'function',
                value: propDef,
                compare: true
            });
        default:
            return {
                name,
                type: 'unknown',
                value: propDef
            };
    }
}
function normalizePropDefinition(name, propDef) {
    if (!('type' in propDef)) {
        if (!('value' in propDef)) return {
            name,
            type: 'object',
            value: propDef
        };
        return {
            name,
            type: getTypeOf(propDef.value),
            ...propDef
        };
    }
    return {
        name,
        ...TYPE_DEFINITIONS[propDef.type],
        ...propDef
    };
}
function isArray(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value);
}
function getTypeOf(value) {
    if (isArray(value)) return 'array';
    if (value === null) return 'null';
    return typeof value;
}

},{"../utils/texture":"cfQA6","../utils/deep-equal":"5Dkfj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cfQA6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTexture", ()=>createTexture);
parcelHelpers.export(exports, "destroyTexture", ()=>destroyTexture);
var _core = require("@luma.gl/core");
const DEFAULT_TEXTURE_PARAMETERS = {
    [10241]: 9987,
    [10240]: 9729,
    [10242]: 33071,
    [10243]: 33071
};
const internalTextures = {};
function createTexture(owner, gl, image, parameters) {
    if (image instanceof (0, _core.Texture2D)) return image;
    else if (image.constructor && image.constructor.name !== 'Object') image = {
        data: image
    };
    let specialTextureParameters = null;
    if (image.compressed) specialTextureParameters = {
        [10241]: image.data.length > 1 ? 9985 : 9729
    };
    const texture = new (0, _core.Texture2D)(gl, {
        ...image,
        parameters: {
            ...DEFAULT_TEXTURE_PARAMETERS,
            ...specialTextureParameters,
            ...parameters
        }
    });
    internalTextures[texture.id] = owner;
    return texture;
}
function destroyTexture(owner, texture) {
    if (!texture || !(texture instanceof (0, _core.Texture2D))) return;
    if (internalTextures[texture.id] === owner) {
        texture.delete();
        delete internalTextures[texture.id];
    }
}

},{"@luma.gl/core":"9rnrC","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hdlVK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _componentState = require("../lifecycle/component-state");
var _componentStateDefault = parcelHelpers.interopDefault(_componentState);
class LayerState extends (0, _componentStateDefault.default) {
    constructor({ attributeManager, layer }){
        super(layer);
        (0, _definePropertyDefault.default)(this, "attributeManager", void 0);
        (0, _definePropertyDefault.default)(this, "needsRedraw", void 0);
        (0, _definePropertyDefault.default)(this, "needsUpdate", void 0);
        (0, _definePropertyDefault.default)(this, "subLayers", void 0);
        (0, _definePropertyDefault.default)(this, "usesPickingColorCache", void 0);
        (0, _definePropertyDefault.default)(this, "hasPickingBuffer", void 0);
        (0, _definePropertyDefault.default)(this, "changeFlags", void 0);
        (0, _definePropertyDefault.default)(this, "viewport", void 0);
        (0, _definePropertyDefault.default)(this, "uniformTransitions", void 0);
        (0, _definePropertyDefault.default)(this, "propsInTransition", void 0);
        this.attributeManager = attributeManager;
        this.needsRedraw = true;
        this.needsUpdate = true;
        this.subLayers = null;
        this.usesPickingColorCache = false;
    }
    get layer() {
        return this.component;
    }
    _fetch(propName, url) {
        const layer = this.layer;
        const fetch = layer === null || layer === void 0 ? void 0 : layer.props.fetch;
        if (fetch) return fetch(url, {
            propName,
            layer
        });
        return super._fetch(propName, url);
    }
    _onResolve(propName, value) {
        const layer = this.layer;
        if (layer) {
            const onDataLoad = layer.props.onDataLoad;
            if (propName === 'data' && onDataLoad) onDataLoad(value, {
                propName,
                layer
            });
        }
    }
    _onError(propName, error) {
        const layer = this.layer;
        if (layer) layer.raiseError(error, "loading ".concat(propName, " of ").concat(this.layer));
    }
}
exports.default = LayerState;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../lifecycle/component-state":"PIVkH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"PIVkH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _iterableUtils = require("../utils/iterable-utils");
var _constants = require("./constants");
const EMPTY_PROPS = Object.freeze({});
class ComponentState {
    constructor(component){
        (0, _definePropertyDefault.default)(this, "component", void 0);
        (0, _definePropertyDefault.default)(this, "onAsyncPropUpdated", void 0);
        (0, _definePropertyDefault.default)(this, "asyncProps", void 0);
        (0, _definePropertyDefault.default)(this, "oldProps", void 0);
        (0, _definePropertyDefault.default)(this, "oldAsyncProps", void 0);
        this.component = component;
        this.asyncProps = {};
        this.onAsyncPropUpdated = ()=>{};
        this.oldProps = null;
        this.oldAsyncProps = null;
    }
    finalize() {
        for(const propName in this.asyncProps){
            const asyncProp = this.asyncProps[propName];
            if (asyncProp && asyncProp.type && asyncProp.type.release) asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);
        }
        this.asyncProps = {};
        this.component = null;
        this.resetOldProps();
    }
    getOldProps() {
        return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;
    }
    resetOldProps() {
        this.oldAsyncProps = null;
        this.oldProps = this.component ? this.component.props : null;
    }
    hasAsyncProp(propName) {
        return propName in this.asyncProps;
    }
    getAsyncProp(propName) {
        const asyncProp = this.asyncProps[propName];
        return asyncProp && asyncProp.resolvedValue;
    }
    isAsyncPropLoading(propName) {
        if (propName) {
            const asyncProp = this.asyncProps[propName];
            return Boolean(asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);
        }
        for(const key in this.asyncProps){
            if (this.isAsyncPropLoading(key)) return true;
        }
        return false;
    }
    reloadAsyncProp(propName, value) {
        this._watchPromise(propName, Promise.resolve(value));
    }
    setAsyncProps(props) {
        this.component = props[0, _constants.COMPONENT_SYMBOL] || this.component;
        const resolvedValues = props[0, _constants.ASYNC_RESOLVED_SYMBOL] || {};
        const originalValues = props[0, _constants.ASYNC_ORIGINAL_SYMBOL] || props;
        const defaultValues = props[0, _constants.ASYNC_DEFAULTS_SYMBOL] || {};
        for(const propName in resolvedValues){
            const value = resolvedValues[propName];
            this._createAsyncPropData(propName, defaultValues[propName]);
            this._updateAsyncProp(propName, value);
            resolvedValues[propName] = this.getAsyncProp(propName);
        }
        for(const propName in originalValues){
            const value = originalValues[propName];
            this._createAsyncPropData(propName, defaultValues[propName]);
            this._updateAsyncProp(propName, value);
        }
    }
    _fetch(propName, url) {
        return null;
    }
    _onResolve(propName, value) {}
    _onError(propName, error) {}
    _updateAsyncProp(propName, value) {
        if (!this._didAsyncInputValueChange(propName, value)) return;
        if (typeof value === 'string') value = this._fetch(propName, value);
        if (value instanceof Promise) {
            this._watchPromise(propName, value);
            return;
        }
        if ((0, _iterableUtils.isAsyncIterable)(value)) {
            this._resolveAsyncIterable(propName, value);
            return;
        }
        this._setPropValue(propName, value);
    }
    _freezeAsyncOldProps() {
        if (!this.oldAsyncProps && this.oldProps) {
            this.oldAsyncProps = Object.create(this.oldProps);
            for(const propName in this.asyncProps)Object.defineProperty(this.oldAsyncProps, propName, {
                enumerable: true,
                value: this.oldProps[propName]
            });
        }
    }
    _didAsyncInputValueChange(propName, value) {
        const asyncProp = this.asyncProps[propName];
        if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) return false;
        asyncProp.lastValue = value;
        return true;
    }
    _setPropValue(propName, value) {
        this._freezeAsyncOldProps();
        const asyncProp = this.asyncProps[propName];
        if (asyncProp) {
            value = this._postProcessValue(asyncProp, value);
            asyncProp.resolvedValue = value;
            asyncProp.pendingLoadCount++;
            asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;
        }
    }
    _setAsyncPropValue(propName, value, loadCount) {
        const asyncProp = this.asyncProps[propName];
        if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {
            this._freezeAsyncOldProps();
            asyncProp.resolvedValue = value;
            asyncProp.resolvedLoadCount = loadCount;
            this.onAsyncPropUpdated(propName, value);
        }
    }
    _watchPromise(propName, promise) {
        const asyncProp = this.asyncProps[propName];
        if (asyncProp) {
            asyncProp.pendingLoadCount++;
            const loadCount = asyncProp.pendingLoadCount;
            promise.then((data)=>{
                if (!this.component) return;
                data = this._postProcessValue(asyncProp, data);
                this._setAsyncPropValue(propName, data, loadCount);
                this._onResolve(propName, data);
            }).catch((error)=>{
                this._onError(propName, error);
            });
        }
    }
    async _resolveAsyncIterable(propName, iterable) {
        if (propName !== 'data') {
            this._setPropValue(propName, iterable);
            return;
        }
        const asyncProp = this.asyncProps[propName];
        if (!asyncProp) return;
        asyncProp.pendingLoadCount++;
        const loadCount = asyncProp.pendingLoadCount;
        let data = [];
        let count = 0;
        for await (const chunk of iterable){
            if (!this.component) return;
            const { dataTransform } = this.component.props;
            if (dataTransform) data = dataTransform(chunk, data);
            else data = data.concat(chunk);
            Object.defineProperty(data, '__diff', {
                enumerable: false,
                value: [
                    {
                        startRow: count,
                        endRow: data.length
                    }
                ]
            });
            count = data.length;
            this._setAsyncPropValue(propName, data, loadCount);
        }
        this._onResolve(propName, data);
    }
    _postProcessValue(asyncProp, value) {
        const propType = asyncProp.type;
        if (propType && this.component) {
            if (propType.release) propType.release(asyncProp.resolvedValue, propType, this.component);
            if (propType.transform) return propType.transform(value, propType, this.component);
        }
        return value;
    }
    _createAsyncPropData(propName, defaultValue) {
        const asyncProp = this.asyncProps[propName];
        if (!asyncProp) {
            const propTypes = this.component && this.component.props[0, _constants.PROP_TYPES_SYMBOL];
            this.asyncProps[propName] = {
                type: propTypes && propTypes[propName],
                lastValue: null,
                resolvedValue: defaultValue,
                pendingLoadCount: 0,
                resolvedLoadCount: 0
            };
        }
    }
}
exports.default = ComponentState;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","../utils/iterable-utils":"81bnO","./constants":"iXzSV","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3w8wp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _layer = require("./layer");
var _layerDefault = parcelHelpers.interopDefault(_layer);
var _debug = require("../debug");
var _debugDefault = parcelHelpers.interopDefault(_debug);
var _flatten = require("../utils/flatten");
var _constants = require("../lifecycle/constants");
const TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';
class CompositeLayer extends (0, _layerDefault.default) {
    get isComposite() {
        return true;
    }
    get isLoaded() {
        return super.isLoaded && this.getSubLayers().every((layer)=>layer.isLoaded);
    }
    getSubLayers() {
        return this.internalState && this.internalState.subLayers || [];
    }
    initializeState(context) {}
    setState(updateObject) {
        super.setState(updateObject);
        this.setNeedsUpdate();
    }
    getPickingInfo({ info }) {
        const { object } = info;
        const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;
        if (!isDataWrapped) return info;
        info.object = object.__source.object;
        info.index = object.__source.index;
        return info;
    }
    filterSubLayer(context) {
        return true;
    }
    shouldRenderSubLayer(subLayerId, data) {
        return data && data.length;
    }
    getSubLayerClass(subLayerId, DefaultLayerClass) {
        const { _subLayerProps: overridingProps } = this.props;
        return overridingProps && overridingProps[subLayerId] && overridingProps[subLayerId].type || DefaultLayerClass;
    }
    getSubLayerRow(row, sourceObject, sourceObjectIndex) {
        row.__source = {
            parent: this,
            object: sourceObject,
            index: sourceObjectIndex
        };
        return row;
    }
    getSubLayerAccessor(accessor) {
        if (typeof accessor === 'function') {
            const objectInfo = {
                index: -1,
                data: this.props.data,
                target: []
            };
            return (x, i)=>{
                if (x && x.__source) {
                    objectInfo.index = x.__source.index;
                    return accessor(x.__source.object, objectInfo);
                }
                return accessor(x, i);
            };
        }
        return accessor;
    }
    getSubLayerProps(sublayerProps = {}) {
        var _this$props$updateTri;
        const { opacity, pickable, visible, parameters, getPolygonOffset, highlightedObjectIndex, autoHighlight, highlightColor, coordinateSystem, coordinateOrigin, wrapLongitude, positionFormat, modelMatrix, extensions, fetch, operation, _subLayerProps: overridingProps } = this.props;
        const newProps = {
            id: '',
            updateTriggers: {},
            opacity,
            pickable,
            visible,
            parameters,
            getPolygonOffset,
            highlightedObjectIndex,
            autoHighlight,
            highlightColor,
            coordinateSystem,
            coordinateOrigin,
            wrapLongitude,
            positionFormat,
            modelMatrix,
            extensions,
            fetch,
            operation
        };
        const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];
        const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;
        const sublayerId = sublayerProps.id || 'sublayer';
        if (overridingSublayerProps) {
            const propTypes = this.props[0, _constants.PROP_TYPES_SYMBOL];
            const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};
            for(const key in overridingSublayerProps){
                const propType = subLayerPropTypes[key] || propTypes[key];
                if (propType && propType.type === 'accessor') overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);
            }
        }
        Object.assign(newProps, sublayerProps, overridingSublayerProps);
        newProps.id = "".concat(this.props.id, "-").concat(sublayerId);
        newProps.updateTriggers = {
            all: (_this$props$updateTri = this.props.updateTriggers) === null || _this$props$updateTri === void 0 ? void 0 : _this$props$updateTri.all,
            ...sublayerProps.updateTriggers,
            ...overridingSublayerTriggers
        };
        for (const extension of extensions){
            const passThroughProps = extension.getSubLayerProps.call(this, extension);
            if (passThroughProps) Object.assign(newProps, passThroughProps, {
                updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)
            });
        }
        return newProps;
    }
    _updateAutoHighlight(info) {
        for (const layer of this.getSubLayers())layer.updateAutoHighlight(info);
    }
    _getAttributeManager() {
        return null;
    }
    _postUpdate(updateParams, forceUpdate) {
        let subLayers = this.internalState.subLayers;
        const shouldUpdate = !subLayers || this.needsUpdate();
        if (shouldUpdate) {
            const subLayersList = this.renderLayers();
            subLayers = (0, _flatten.flatten)(subLayersList, Boolean);
            this.internalState.subLayers = subLayers;
        }
        (0, _debugDefault.default)(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);
        for (const layer of subLayers)layer.parent = this;
    }
}
exports.default = CompositeLayer;
(0, _definePropertyDefault.default)(CompositeLayer, "layerName", 'CompositeLayer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./layer":"h5FLJ","../debug":"h4a5l","../utils/flatten":"cUPbX","../lifecycle/constants":"iXzSV","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hKx47":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _iterableUtils = require("./iterable-utils");
var _typedArrayManager = require("./typed-array-manager");
var _typedArrayManagerDefault = parcelHelpers.interopDefault(_typedArrayManager);
var _assert = require("./assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _webgl = require("@luma.gl/webgl");
class Tesselator {
    constructor(opts){
        (0, _definePropertyDefault.default)(this, "opts", void 0);
        (0, _definePropertyDefault.default)(this, "typedArrayManager", void 0);
        (0, _definePropertyDefault.default)(this, "indexStarts", [
            0
        ]);
        (0, _definePropertyDefault.default)(this, "vertexStarts", [
            0
        ]);
        (0, _definePropertyDefault.default)(this, "vertexCount", 0);
        (0, _definePropertyDefault.default)(this, "instanceCount", 0);
        (0, _definePropertyDefault.default)(this, "attributes", void 0);
        (0, _definePropertyDefault.default)(this, "_attributeDefs", void 0);
        (0, _definePropertyDefault.default)(this, "data", void 0);
        (0, _definePropertyDefault.default)(this, "getGeometry", void 0);
        (0, _definePropertyDefault.default)(this, "geometryBuffer", void 0);
        (0, _definePropertyDefault.default)(this, "buffers", void 0);
        (0, _definePropertyDefault.default)(this, "positionSize", void 0);
        (0, _definePropertyDefault.default)(this, "normalize", void 0);
        const { attributes = {} } = opts;
        this.typedArrayManager = (0, _typedArrayManagerDefault.default);
        this.attributes = {};
        this._attributeDefs = attributes;
        this.opts = opts;
        this.updateGeometry(opts);
    }
    updateGeometry(opts) {
        Object.assign(this.opts, opts);
        const { data, buffers = {}, getGeometry, geometryBuffer, positionFormat, dataChanged, normalize = true } = this.opts;
        this.data = data;
        this.getGeometry = getGeometry;
        this.positionSize = geometryBuffer && geometryBuffer.size || (positionFormat === 'XY' ? 2 : 3);
        this.buffers = buffers;
        this.normalize = normalize;
        if (geometryBuffer) {
            (0, _assertDefault.default)(data.startIndices);
            this.getGeometry = this.getGeometryFromBuffer(geometryBuffer);
            if (!normalize) buffers.positions = geometryBuffer;
        }
        this.geometryBuffer = buffers.positions;
        if (Array.isArray(dataChanged)) for (const dataRange of dataChanged)this._rebuildGeometry(dataRange);
        else this._rebuildGeometry();
    }
    updatePartialGeometry({ startRow, endRow }) {
        this._rebuildGeometry({
            startRow,
            endRow
        });
    }
    getGeometryFromBuffer(geometryBuffer) {
        const value = geometryBuffer.value || geometryBuffer;
        if (!ArrayBuffer.isView(value)) return null;
        return (0, _iterableUtils.getAccessorFromBuffer)(value, {
            size: this.positionSize,
            offset: geometryBuffer.offset,
            stride: geometryBuffer.stride,
            startIndices: this.data.startIndices
        });
    }
    _allocate(instanceCount, copy) {
        const { attributes, buffers, _attributeDefs, typedArrayManager } = this;
        for(const name in _attributeDefs)if (name in buffers) {
            typedArrayManager.release(attributes[name]);
            attributes[name] = null;
        } else {
            const def = _attributeDefs[name];
            def.copy = copy;
            attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);
        }
    }
    _forEachGeometry(visitor, startRow, endRow) {
        const { data, getGeometry } = this;
        const { iterable, objectInfo } = (0, _iterableUtils.createIterable)(data, startRow, endRow);
        for (const object of iterable){
            objectInfo.index++;
            const geometry = getGeometry ? getGeometry(object, objectInfo) : null;
            visitor(geometry, objectInfo.index);
        }
    }
    _rebuildGeometry(dataRange) {
        if (!this.data) return;
        let { indexStarts, vertexStarts, instanceCount } = this;
        const { data, geometryBuffer } = this;
        const { startRow = 0, endRow = Infinity } = dataRange || {};
        const normalizedData = {};
        if (!dataRange) {
            indexStarts = [
                0
            ];
            vertexStarts = [
                0
            ];
        }
        if (this.normalize || !geometryBuffer) {
            this._forEachGeometry((geometry, dataIndex)=>{
                const normalizedGeometry = geometry && this.normalizeGeometry(geometry);
                normalizedData[dataIndex] = normalizedGeometry;
                vertexStarts[dataIndex + 1] = vertexStarts[dataIndex] + (normalizedGeometry ? this.getGeometrySize(normalizedGeometry) : 0);
            }, startRow, endRow);
            instanceCount = vertexStarts[vertexStarts.length - 1];
        } else {
            vertexStarts = data.startIndices;
            instanceCount = vertexStarts[data.length] || 0;
            if (ArrayBuffer.isView(geometryBuffer)) instanceCount = instanceCount || geometryBuffer.length / this.positionSize;
            else if (geometryBuffer instanceof (0, _webgl.Buffer)) {
                const byteStride = geometryBuffer.accessor.stride || this.positionSize * 4;
                instanceCount = instanceCount || geometryBuffer.byteLength / byteStride;
            } else if (geometryBuffer.buffer) {
                const byteStride = geometryBuffer.stride || this.positionSize * 4;
                instanceCount = instanceCount || geometryBuffer.buffer.byteLength / byteStride;
            } else if (geometryBuffer.value) {
                const bufferValue = geometryBuffer.value;
                const elementStride = geometryBuffer.stride / bufferValue.BYTES_PER_ELEMENT || this.positionSize;
                instanceCount = instanceCount || bufferValue.length / elementStride;
            }
        }
        this._allocate(instanceCount, Boolean(dataRange));
        this.indexStarts = indexStarts;
        this.vertexStarts = vertexStarts;
        this.instanceCount = instanceCount;
        const context = {};
        this._forEachGeometry((geometry, dataIndex)=>{
            const normalizedGeometry = normalizedData[dataIndex] || geometry;
            context.vertexStart = vertexStarts[dataIndex];
            context.indexStart = indexStarts[dataIndex];
            const vertexEnd = dataIndex < vertexStarts.length - 1 ? vertexStarts[dataIndex + 1] : instanceCount;
            context.geometrySize = vertexEnd - vertexStarts[dataIndex];
            context.geometryIndex = dataIndex;
            this.updateGeometryAttributes(normalizedGeometry, context);
        }, startRow, endRow);
        this.vertexCount = indexStarts[indexStarts.length - 1];
    }
}
exports.default = Tesselator;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","./iterable-utils":"81bnO","./typed-array-manager":"1iupO","./assert":"8E3uE","@luma.gl/webgl":"bcvb8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fsJ8r":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? (0, _react.useLayoutEffect) : (0, _react.useEffect);
exports.default = useIsomorphicLayoutEffect;

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"qV7oN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>extractJSXLayers);
var _react = require("react");
var _inheritsFrom = require("./inherits-from");
var _core = require("@deck.gl/core");
var _evaluateChildren = require("./evaluate-children");
function wrapInView(node) {
    if (typeof node === 'function') return (0, _react.createElement)((0, _core.View), {}, node);
    if (Array.isArray(node)) return node.map(wrapInView);
    if ((0, _evaluateChildren.isComponent)(node)) {
        if (node.type === _react.Fragment) return wrapInView(node.props.children);
        if ((0, _inheritsFrom.inheritsFrom)(node.type, (0, _core.View))) return node;
    }
    return node;
}
function extractJSXLayers({ children, layers = [], views = null }) {
    const reactChildren = [];
    const jsxLayers = [];
    const jsxViews = {};
    _react.Children.forEach(wrapInView(children), (reactElement)=>{
        if ((0, _evaluateChildren.isComponent)(reactElement)) {
            const ElementType = reactElement.type;
            if ((0, _inheritsFrom.inheritsFrom)(ElementType, (0, _core.Layer))) {
                const layer = createLayer(ElementType, reactElement.props);
                jsxLayers.push(layer);
            } else reactChildren.push(reactElement);
            if ((0, _inheritsFrom.inheritsFrom)(ElementType, (0, _core.View)) && ElementType !== (0, _core.View) && reactElement.props.id) {
                const view = new ElementType(reactElement.props);
                jsxViews[view.id] = view;
            }
        } else if (reactElement) reactChildren.push(reactElement);
    });
    if (Object.keys(jsxViews).length > 0) {
        if (Array.isArray(views)) views.forEach((view)=>{
            jsxViews[view.id] = view;
        });
        else if (views) jsxViews[views.id] = views;
        views = Object.values(jsxViews);
    }
    layers = jsxLayers.length > 0 ? [
        ...jsxLayers,
        ...layers
    ] : layers;
    return {
        layers,
        children: reactChildren,
        views
    };
}
function createLayer(LayerType, reactProps) {
    const props = {};
    const defaultProps = LayerType.defaultProps || {};
    for(const key in reactProps)if (defaultProps[key] !== reactProps[key]) props[key] = reactProps[key];
    return new LayerType(props);
}

},{"react":"jMk1U","./inherits-from":"dKSKN","@deck.gl/core":"9zfJz","./evaluate-children":"4vVR3","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dKSKN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inheritsFrom", ()=>inheritsFrom);
function inheritsFrom(Type, ParentType) {
    while(Type){
        if (Type === ParentType) return true;
        Type = Object.getPrototypeOf(Type);
    }
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4vVR3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>evaluateChildren);
parcelHelpers.export(exports, "isComponent", ()=>isComponent);
var _react = require("react");
const MAP_STYLE = {
    position: 'absolute',
    zIndex: -1
};
function evaluateChildren(children, childProps) {
    if (typeof children === 'function') return children(childProps);
    if (Array.isArray(children)) return children.map((child)=>evaluateChildren(child, childProps));
    if (isComponent(children)) {
        if (isReactMap(children)) {
            childProps.style = MAP_STYLE;
            return (0, _react.cloneElement)(children, childProps);
        }
        if (needsDeckGLViewProps(children)) return (0, _react.cloneElement)(children, childProps);
    }
    return children;
}
function isComponent(child) {
    return child && typeof child === 'object' && 'type' in child || false;
}
function isReactMap(child) {
    var _child$props;
    return (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.mapStyle;
}
function needsDeckGLViewProps(child) {
    const componentClass = child.type;
    return componentClass && componentClass.deckGLViewProps;
}

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aZP5i":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>positionChildrenUnderViews);
var _react = require("react");
var _core = require("@deck.gl/core");
var _inheritsFrom = require("./inherits-from");
var _evaluateChildren = require("./evaluate-children");
var _evaluateChildrenDefault = parcelHelpers.interopDefault(_evaluateChildren);
function positionChildrenUnderViews({ children, deck, ContextProvider }) {
    const { viewManager } = deck || {};
    if (!viewManager || !viewManager.views.length) return [];
    const views = {};
    const defaultViewId = viewManager.views[0].id;
    for (const child of children){
        let viewId = defaultViewId;
        let viewChildren = child;
        if ((0, _evaluateChildren.isComponent)(child) && (0, _inheritsFrom.inheritsFrom)(child.type, (0, _core.View))) {
            viewId = child.props.id || defaultViewId;
            viewChildren = child.props.children;
        }
        const viewport = viewManager.getViewport(viewId);
        const viewState = viewManager.getViewState(viewId);
        if (viewport) {
            viewState.padding = viewport.padding;
            const { x, y, width, height } = viewport;
            viewChildren = (0, _evaluateChildrenDefault.default)(viewChildren, {
                x,
                y,
                width,
                height,
                viewport,
                viewState
            });
            if (!views[viewId]) views[viewId] = {
                viewport,
                children: []
            };
            views[viewId].children.push(viewChildren);
        }
    }
    return Object.keys(views).map((viewId)=>{
        const { viewport, children: viewChildren } = views[viewId];
        const { x, y, width, height } = viewport;
        const style = {
            position: 'absolute',
            left: x,
            top: y,
            width,
            height
        };
        const key = "view-".concat(viewId);
        const viewElement = (0, _react.createElement)('div', {
            key,
            id: key,
            style
        }, ...viewChildren);
        if (ContextProvider) {
            const contextValue = {
                viewport,
                container: deck.canvas.offsetParent,
                eventManager: deck.eventManager,
                onViewStateChange: (params)=>{
                    params.viewId = viewId;
                    deck._onViewStateChange(params);
                }
            };
            return (0, _react.createElement)(ContextProvider, {
                key,
                value: contextValue
            }, viewElement);
        }
        return viewElement;
    });
}

},{"react":"jMk1U","@deck.gl/core":"9zfJz","./inherits-from":"dKSKN","./evaluate-children":"4vVR3","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"61fTc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>extractStyles);
const CANVAS_ONLY_STYLES = {
    mixBlendMode: null
};
function extractStyles({ width, height, style }) {
    const containerStyle = {
        position: 'absolute',
        zIndex: 0,
        left: 0,
        top: 0,
        width,
        height
    };
    const canvasStyle = {
        left: 0,
        top: 0
    };
    if (style) {
        for(const key in style)if (key in CANVAS_ONLY_STYLES) canvasStyle[key] = style[key];
        else containerStyle[key] = style[key];
    }
    return {
        containerStyle,
        canvasStyle
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5EUd0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _mapDefault.default));
parcelHelpers.export(exports, "Map", ()=>(0, _mapDefault.default));
parcelHelpers.export(exports, "Marker", ()=>(0, _markerDefault.default));
parcelHelpers.export(exports, "Popup", ()=>(0, _popupDefault.default));
parcelHelpers.export(exports, "AttributionControl", ()=>(0, _attributionControlDefault.default));
parcelHelpers.export(exports, "FullscreenControl", ()=>(0, _fullscreenControlDefault.default));
parcelHelpers.export(exports, "GeolocateControl", ()=>(0, _geolocateControlDefault.default));
parcelHelpers.export(exports, "NavigationControl", ()=>(0, _navigationControlDefault.default));
parcelHelpers.export(exports, "ScaleControl", ()=>(0, _scaleControlDefault.default));
parcelHelpers.export(exports, "Source", ()=>(0, _sourceDefault.default));
parcelHelpers.export(exports, "Layer", ()=>(0, _layerDefault.default));
parcelHelpers.export(exports, "useControl", ()=>(0, _useControlDefault.default));
parcelHelpers.export(exports, "MapProvider", ()=>(0, _useMap.MapProvider));
parcelHelpers.export(exports, "useMap", ()=>(0, _useMap.useMap));
var _map = require("./components/map");
var _mapDefault = parcelHelpers.interopDefault(_map);
var _marker = require("./components/marker");
var _markerDefault = parcelHelpers.interopDefault(_marker);
var _popup = require("./components/popup");
var _popupDefault = parcelHelpers.interopDefault(_popup);
var _attributionControl = require("./components/attribution-control");
var _attributionControlDefault = parcelHelpers.interopDefault(_attributionControl);
var _fullscreenControl = require("./components/fullscreen-control");
var _fullscreenControlDefault = parcelHelpers.interopDefault(_fullscreenControl);
var _geolocateControl = require("./components/geolocate-control");
var _geolocateControlDefault = parcelHelpers.interopDefault(_geolocateControl);
var _navigationControl = require("./components/navigation-control");
var _navigationControlDefault = parcelHelpers.interopDefault(_navigationControl);
var _scaleControl = require("./components/scale-control");
var _scaleControlDefault = parcelHelpers.interopDefault(_scaleControl);
var _source = require("./components/source");
var _sourceDefault = parcelHelpers.interopDefault(_source);
var _layer = require("./components/layer");
var _layerDefault = parcelHelpers.interopDefault(_layer);
var _useControl = require("./components/use-control");
var _useControlDefault = parcelHelpers.interopDefault(_useControl);
var _useMap = require("./components/use-map");
// Types
var _external = require("./types/external");
parcelHelpers.exportAll(_external, exports);

},{"./components/map":"6Xtqw","./components/marker":"kCkhe","./components/popup":"cLQof","./components/attribution-control":"46qxR","./components/fullscreen-control":"3hZsr","./components/geolocate-control":"h49zQ","./components/navigation-control":"pBWEQ","./components/scale-control":"kcI26","./components/source":"bB5af","./components/layer":"1OmI0","./components/use-control":"dHlmw","./components/use-map":"2kJ5j","./types/external":"4WpUS","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6Xtqw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MapContext", ()=>MapContext);
var _react = require("react");
var _useMap = require("./use-map");
var _mapbox = require("../mapbox/mapbox");
var _mapboxDefault = parcelHelpers.interopDefault(_mapbox);
var _createRef = require("../mapbox/create-ref");
var _createRefDefault = parcelHelpers.interopDefault(_createRef);
var _useIsomorphicLayoutEffect = require("../utils/use-isomorphic-layout-effect");
var _useIsomorphicLayoutEffectDefault = parcelHelpers.interopDefault(_useIsomorphicLayoutEffect);
var _setGlobals = require("../utils/set-globals");
var _setGlobalsDefault = parcelHelpers.interopDefault(_setGlobals);
const MapContext = _react.createContext(null);
const defaultProps = {
    // Constraints
    minZoom: 0,
    maxZoom: 22,
    minPitch: 0,
    maxPitch: 60,
    // Interaction handlers
    scrollZoom: true,
    boxZoom: true,
    dragRotate: true,
    dragPan: true,
    keyboard: true,
    doubleClickZoom: true,
    touchZoomRotate: true,
    touchPitch: true,
    // Style
    mapStyle: {
        version: 8,
        sources: {},
        layers: []
    },
    styleDiffing: true,
    projection: 'mercator',
    renderWorldCopies: true,
    // Callbacks
    onError: (e)=>console.error(e.error),
    // Globals
    RTLTextPlugin: 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'
};
const Map = (0, _react.forwardRef)((props, ref)=>{
    const mountedMapsContext = (0, _react.useContext)((0, _useMap.MountedMapsContext));
    const [mapInstance, setMapInstance] = (0, _react.useState)(null);
    const containerRef = (0, _react.useRef)();
    const { current: contextValue } = (0, _react.useRef)({
        mapLib: null,
        map: null
    });
    (0, _react.useEffect)(()=>{
        const mapLib = props.mapLib;
        let isMounted = true;
        let mapbox;
        Promise.resolve(mapLib || require("509c4b9f8d3ba65e")).then((mapboxgl)=>{
            if (!isMounted) return;
            if (!mapboxgl.Map) // commonjs style
            mapboxgl = mapboxgl.default;
            if (!mapboxgl || !mapboxgl.Map) throw new Error('Invalid mapLib');
            if (mapboxgl.supported(props)) {
                (0, _setGlobalsDefault.default)(mapboxgl, props);
                if (props.reuseMaps) mapbox = (0, _mapboxDefault.default).reuse(props, containerRef.current);
                if (!mapbox) mapbox = new (0, _mapboxDefault.default)(mapboxgl.Map, props, containerRef.current);
                contextValue.map = (0, _createRefDefault.default)(mapbox, mapboxgl);
                contextValue.mapLib = mapboxgl;
                setMapInstance(mapbox);
                mountedMapsContext === null || mountedMapsContext === void 0 || mountedMapsContext.onMapMount(contextValue.map, props.id);
            } else throw new Error('Map is not supported by this browser');
        }).catch((error)=>{
            props.onError({
                type: 'error',
                target: null,
                originalEvent: null,
                error
            });
        });
        return ()=>{
            isMounted = false;
            if (mapbox) {
                mountedMapsContext === null || mountedMapsContext === void 0 || mountedMapsContext.onMapUnmount(props.id);
                if (props.reuseMaps) mapbox.recycle();
                else mapbox.destroy();
            }
        };
    }, []);
    (0, _useIsomorphicLayoutEffectDefault.default)(()=>{
        if (mapInstance) mapInstance.setProps(props);
    });
    (0, _react.useImperativeHandle)(ref, ()=>contextValue.map, [
        mapInstance
    ]);
    const style = (0, _react.useMemo)(()=>({
            position: 'relative',
            width: '100%',
            height: '100%',
            ...props.style
        }), [
        props.style
    ]);
    return _react.createElement("div", {
        id: props.id,
        ref: containerRef,
        style: style
    }, mapInstance && _react.createElement(MapContext.Provider, {
        value: contextValue
    }, props.children));
});
Map.displayName = 'Map';
Map.defaultProps = defaultProps;
exports.default = Map;

},{"react":"jMk1U","./use-map":"2kJ5j","../mapbox/mapbox":"cfPtY","../mapbox/create-ref":"fyEJS","../utils/use-isomorphic-layout-effect":"1Fy4p","../utils/set-globals":"czP12","509c4b9f8d3ba65e":"5kDtL","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2kJ5j":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MountedMapsContext", ()=>MountedMapsContext);
parcelHelpers.export(exports, "MapProvider", ()=>MapProvider);
parcelHelpers.export(exports, "useMap", ()=>useMap);
var _react = require("react");
var _map = require("./map");
const MountedMapsContext = _react.createContext(null);
const MapProvider = (props)=>{
    const [maps, setMaps] = (0, _react.useState)({});
    const onMapMount = (0, _react.useCallback)((map, id = 'default')=>{
        setMaps((currMaps)=>{
            if (id === 'current') throw new Error("'current' cannot be used as map id");
            if (currMaps[id]) throw new Error(`Multiple maps with the same id: ${id}`);
            return {
                ...currMaps,
                [id]: map
            };
        });
    }, []);
    const onMapUnmount = (0, _react.useCallback)((id = 'default')=>{
        setMaps((currMaps)=>{
            if (currMaps[id]) {
                const nextMaps = {
                    ...currMaps
                };
                delete nextMaps[id];
                return nextMaps;
            }
            return currMaps;
        });
    }, []);
    return _react.createElement(MountedMapsContext.Provider, {
        value: {
            maps,
            onMapMount,
            onMapUnmount
        }
    }, props.children);
};
function useMap() {
    var _a;
    const maps = (_a = (0, _react.useContext)(MountedMapsContext)) === null || _a === void 0 ? void 0 : _a.maps;
    const currentMap = (0, _react.useContext)((0, _map.MapContext));
    const mapsWithCurrent = (0, _react.useMemo)(()=>{
        return {
            ...maps,
            current: currentMap === null || currentMap === void 0 ? void 0 : currentMap.map
        };
    }, [
        maps,
        currentMap
    ]);
    return mapsWithCurrent;
}

},{"react":"jMk1U","./map":"6Xtqw","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cfPtY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transform = require("../utils/transform");
var _styleUtils = require("../utils/style-utils");
var _deepEqual = require("../utils/deep-equal");
const pointerEvents = {
    mousedown: 'onMouseDown',
    mouseup: 'onMouseUp',
    mouseover: 'onMouseOver',
    mousemove: 'onMouseMove',
    click: 'onClick',
    dblclick: 'onDblClick',
    mouseenter: 'onMouseEnter',
    mouseleave: 'onMouseLeave',
    mouseout: 'onMouseOut',
    contextmenu: 'onContextMenu',
    touchstart: 'onTouchStart',
    touchend: 'onTouchEnd',
    touchmove: 'onTouchMove',
    touchcancel: 'onTouchCancel'
};
const cameraEvents = {
    movestart: 'onMoveStart',
    move: 'onMove',
    moveend: 'onMoveEnd',
    dragstart: 'onDragStart',
    drag: 'onDrag',
    dragend: 'onDragEnd',
    zoomstart: 'onZoomStart',
    zoom: 'onZoom',
    zoomend: 'onZoomEnd',
    rotatestart: 'onRotateStart',
    rotate: 'onRotate',
    rotateend: 'onRotateEnd',
    pitchstart: 'onPitchStart',
    pitch: 'onPitch',
    pitchend: 'onPitchEnd'
};
const otherEvents = {
    wheel: 'onWheel',
    boxzoomstart: 'onBoxZoomStart',
    boxzoomend: 'onBoxZoomEnd',
    boxzoomcancel: 'onBoxZoomCancel',
    resize: 'onResize',
    load: 'onLoad',
    render: 'onRender',
    idle: 'onIdle',
    remove: 'onRemove',
    data: 'onData',
    styledata: 'onStyleData',
    sourcedata: 'onSourceData',
    error: 'onError'
};
const settingNames = [
    'minZoom',
    'maxZoom',
    'minPitch',
    'maxPitch',
    'maxBounds',
    'projection',
    'renderWorldCopies'
];
const handlerNames = [
    'scrollZoom',
    'boxZoom',
    'dragRotate',
    'dragPan',
    'keyboard',
    'doubleClickZoom',
    'touchZoomRotate',
    'touchPitch'
];
class Mapbox {
    constructor(MapClass, props, container){
        // mapboxgl.Map instance. Not using type here because we are accessing
        // private members and methods
        this._map = null;
        // Internal states
        this._internalUpdate = false;
        this._inRender = false;
        this._hoveredFeatures = null;
        this._deferredEvents = {
            move: false,
            zoom: false,
            pitch: false,
            rotate: false
        };
        this._onEvent = (e)=>{
            // @ts-ignore
            const cb = this.props[otherEvents[e.type]];
            if (cb) cb(e);
        };
        this._onPointerEvent = (e)=>{
            if (e.type === 'mousemove' || e.type === 'mouseout') this._updateHover(e);
            // @ts-ignore
            const cb = this.props[pointerEvents[e.type]];
            if (cb) {
                if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {
                    const features = this._hoveredFeatures || this._map.queryRenderedFeatures(e.point, {
                        layers: this.props.interactiveLayerIds
                    });
                    e.features = features;
                }
                cb(e);
                delete e.features;
            }
        };
        this._onCameraEvent = (e)=>{
            if (!this._internalUpdate) {
                // @ts-ignore
                const cb = this.props[cameraEvents[e.type]];
                if (cb) cb(e);
            }
            if (e.type in this._deferredEvents) this._deferredEvents[e.type] = false;
        };
        this._MapClass = MapClass;
        this.props = props;
        this._initialize(container);
    }
    get map() {
        return this._map;
    }
    get transform() {
        return this._renderTransform;
    }
    setProps(props) {
        const oldProps = this.props;
        this.props = props;
        const settingsChanged = this._updateSettings(props, oldProps);
        if (settingsChanged) this._createShadowTransform(this._map);
        const sizeChanged = this._updateSize(props);
        const viewStateChanged = this._updateViewState(props, true);
        this._updateStyle(props, oldProps);
        this._updateStyleComponents(props, oldProps);
        this._updateHandlers(props, oldProps);
        // If 1) view state has changed to match props and
        //    2) the props change is not triggered by map events,
        // it's driven by an external state change. Redraw immediately
        if (settingsChanged || sizeChanged || viewStateChanged && !this._map.isMoving()) this.redraw();
    }
    static reuse(props, container) {
        const that = Mapbox.savedMaps.pop();
        if (!that) return null;
        const map = that.map;
        // When reusing the saved map, we need to reparent the map(canvas) and other child nodes
        // intoto the new container from the props.
        // Step1: reparenting child nodes from old container to new container
        const oldContainer = map.getContainer();
        container.className = oldContainer.className;
        while(oldContainer.childNodes.length > 0)container.appendChild(oldContainer.childNodes[0]);
        // Step2: replace the internal container with new container from the react component
        // @ts-ignore
        map._container = container;
        // Step 3: apply new props
        that.setProps({
            ...props,
            styleDiffing: false
        });
        map.resize();
        const { initialViewState } = props;
        if (initialViewState) {
            if (initialViewState.bounds) map.fitBounds(initialViewState.bounds, {
                ...initialViewState.fitBoundsOptions,
                duration: 0
            });
            else that._updateViewState(initialViewState, false);
        }
        // Simulate load event
        if (map.isStyleLoaded()) map.fire('load');
        else map.once('styledata', ()=>map.fire('load'));
        return that;
    }
    /* eslint-disable complexity,max-statements */ _initialize(container) {
        const { props } = this;
        const mapOptions = {
            ...props,
            ...props.initialViewState,
            accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,
            container,
            style: (0, _styleUtils.normalizeStyle)(props.mapStyle)
        };
        const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;
        Object.assign(mapOptions, {
            center: [
                viewState.longitude || 0,
                viewState.latitude || 0
            ],
            zoom: viewState.zoom || 0,
            pitch: viewState.pitch || 0,
            bearing: viewState.bearing || 0
        });
        if (props.gl) {
            // eslint-disable-next-line
            const getContext = HTMLCanvasElement.prototype.getContext;
            // Hijack canvas.getContext to return our own WebGLContext
            // This will be called inside the mapboxgl.Map constructor
            // @ts-expect-error
            HTMLCanvasElement.prototype.getContext = ()=>{
                // Unhijack immediately
                HTMLCanvasElement.prototype.getContext = getContext;
                return props.gl;
            };
        }
        const map = new this._MapClass(mapOptions);
        // Props that are not part of constructor options
        if (viewState.padding) map.setPadding(viewState.padding);
        if (props.cursor) map.getCanvas().style.cursor = props.cursor;
        this._createShadowTransform(map);
        // Hack
        // Insert code into map's render cycle
        const renderMap = map._render;
        map._render = (arg)=>{
            this._inRender = true;
            renderMap.call(map, arg);
            this._inRender = false;
        };
        const runRenderTaskQueue = map._renderTaskQueue.run;
        map._renderTaskQueue.run = (arg)=>{
            runRenderTaskQueue.call(map._renderTaskQueue, arg);
            this._onBeforeRepaint();
        };
        map.on('render', ()=>this._onAfterRepaint());
        // Insert code into map's event pipeline
        const fireEvent = map.fire;
        map.fire = this._fireEvent.bind(this, fireEvent);
        // add listeners
        map.on('resize', ()=>{
            this._renderTransform.resize(map.transform.width, map.transform.height);
        });
        map.on('styledata', ()=>this._updateStyleComponents(this.props, {}));
        map.on('sourcedata', ()=>this._updateStyleComponents(this.props, {}));
        for(const eventName in pointerEvents)map.on(eventName, this._onPointerEvent);
        for(const eventName in cameraEvents)map.on(eventName, this._onCameraEvent);
        for(const eventName in otherEvents)map.on(eventName, this._onEvent);
        this._map = map;
    }
    /* eslint-enable complexity,max-statements */ recycle() {
        Mapbox.savedMaps.push(this);
    }
    destroy() {
        this._map.remove();
    }
    // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next
    // render cycle, which is managed by Mapbox's animation loop.
    // This removes the synchronization issue caused by requestAnimationFrame.
    redraw() {
        const map = this._map;
        // map._render will throw error if style does not exist
        // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513
        //   /src/ui/map.js#L1834
        if (!this._inRender && map.style) {
            // cancel the scheduled update
            if (map._frame) {
                map._frame.cancel();
                map._frame = null;
            }
            // the order is important - render() may schedule another update
            map._render();
        }
    }
    _createShadowTransform(map) {
        const renderTransform = (0, _transform.cloneTransform)(map.transform);
        map.painter.transform = renderTransform;
        this._renderTransform = renderTransform;
    }
    /* Trigger map resize if size is controlled
       @param {object} nextProps
       @returns {bool} true if size has changed
     */ _updateSize(nextProps) {
        // Check if size is controlled
        const { viewState } = nextProps;
        if (viewState) {
            const map = this._map;
            if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {
                map.resize();
                return true;
            }
        }
        return false;
    }
    // Adapted from map.jumpTo
    /* Update camera to match props
       @param {object} nextProps
       @param {bool} triggerEvents - should fire camera events
       @returns {bool} true if anything is changed
     */ _updateViewState(nextProps, triggerEvents) {
        if (this._internalUpdate) return false;
        const map = this._map;
        const tr = this._renderTransform;
        // Take a snapshot of the transform before mutation
        const { zoom, pitch, bearing } = tr;
        const isMoving = map.isMoving();
        if (isMoving) // All movement of the camera is done relative to the sea level
        tr.cameraElevationReference = 'sea';
        const changed = (0, _transform.applyViewStateToTransform)(tr, {
            ...(0, _transform.transformToViewState)(map.transform),
            ...nextProps
        });
        if (isMoving) // Reset camera reference
        tr.cameraElevationReference = 'ground';
        if (changed && triggerEvents) {
            const deferredEvents = this._deferredEvents;
            // Delay DOM control updates to the next render cycle
            deferredEvents.move = true;
            deferredEvents.zoom || (deferredEvents.zoom = zoom !== tr.zoom);
            deferredEvents.rotate || (deferredEvents.rotate = bearing !== tr.bearing);
            deferredEvents.pitch || (deferredEvents.pitch = pitch !== tr.pitch);
        }
        // Avoid manipulating the real transform when interaction/animation is ongoing
        // as it would interfere with Mapbox's handlers
        if (!isMoving) (0, _transform.applyViewStateToTransform)(map.transform, nextProps);
        return changed;
    }
    /* Update camera constraints and projection settings to match props
       @param {object} nextProps
       @param {object} currProps
       @returns {bool} true if anything is changed
     */ _updateSettings(nextProps, currProps) {
        const map = this._map;
        let changed = false;
        for (const propName of settingNames)if (propName in nextProps && !(0, _deepEqual.deepEqual)(nextProps[propName], currProps[propName])) {
            changed = true;
            map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]);
        }
        return changed;
    }
    /* Update map style to match props
       @param {object} nextProps
       @param {object} currProps
       @returns {bool} true if style is changed
     */ _updateStyle(nextProps, currProps) {
        if (nextProps.cursor !== currProps.cursor) this._map.getCanvas().style.cursor = nextProps.cursor;
        if (nextProps.mapStyle !== currProps.mapStyle) {
            const options = {
                diff: nextProps.styleDiffing
            };
            if ('localIdeographFontFamily' in nextProps) options.localIdeographFontFamily = nextProps.localIdeographFontFamily;
            this._map.setStyle((0, _styleUtils.normalizeStyle)(nextProps.mapStyle), options);
            return true;
        }
        return false;
    }
    /* Update fog, light and terrain to match props
       @param {object} nextProps
       @param {object} currProps
       @returns {bool} true if anything is changed
     */ _updateStyleComponents(nextProps, currProps) {
        const map = this._map;
        let changed = false;
        if (map.style.loaded()) {
            if ('light' in nextProps && !(0, _deepEqual.deepEqual)(nextProps.light, currProps.light)) {
                changed = true;
                map.setLight(nextProps.light);
            }
            if ('fog' in nextProps && !(0, _deepEqual.deepEqual)(nextProps.fog, currProps.fog)) {
                changed = true;
                map.setFog(nextProps.fog);
            }
            if ('terrain' in nextProps && !(0, _deepEqual.deepEqual)(nextProps.terrain, currProps.terrain)) {
                if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {
                    changed = true;
                    map.setTerrain(nextProps.terrain);
                }
            }
        }
        return changed;
    }
    /* Update interaction handlers to match props
       @param {object} nextProps
       @param {object} currProps
       @returns {bool} true if anything is changed
     */ _updateHandlers(nextProps, currProps) {
        const map = this._map;
        let changed = false;
        for (const propName of handlerNames){
            const newValue = nextProps[propName];
            if (!(0, _deepEqual.deepEqual)(newValue, currProps[propName])) {
                changed = true;
                if (newValue) map[propName].enable(newValue);
                else map[propName].disable();
            }
        }
        return changed;
    }
    _updateHover(e) {
        var _a;
        const { props } = this;
        const shouldTrackHoveredFeatures = props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);
        if (shouldTrackHoveredFeatures) {
            const eventType = e.type;
            const wasHovering = ((_a = this._hoveredFeatures) === null || _a === void 0 ? void 0 : _a.length) > 0;
            let features;
            if (eventType === 'mousemove') try {
                features = this._map.queryRenderedFeatures(e.point, {
                    layers: props.interactiveLayerIds
                });
            } catch (_b) {
                features = [];
            }
            else features = [];
            const isHovering = features.length > 0;
            if (!isHovering && wasHovering) {
                e.type = 'mouseleave';
                this._onPointerEvent(e);
            }
            this._hoveredFeatures = features;
            if (isHovering && !wasHovering) {
                e.type = 'mouseenter';
                this._onPointerEvent(e);
            }
            e.type = eventType;
        } else this._hoveredFeatures = null;
    }
    _fireEvent(baseFire, event, properties) {
        const map = this._map;
        const tr = map.transform;
        const eventType = typeof event === 'string' ? event : event.type;
        if (eventType === 'move') this._updateViewState(this.props, false);
        if (eventType in cameraEvents) {
            if (typeof event === 'object') event.viewState = (0, _transform.transformToViewState)(tr);
            if (this._map.isMoving()) {
                // Replace map.transform with ours during the callbacks
                map.transform = this._renderTransform;
                baseFire.call(map, event, properties);
                map.transform = tr;
                return map;
            }
        }
        baseFire.call(map, event, properties);
        return map;
    }
    // All camera manipulations are complete, ready to repaint
    _onBeforeRepaint() {
        const map = this._map;
        // If there are camera changes driven by props, invoke camera events so that DOM controls are synced
        this._internalUpdate = true;
        for(const eventType in this._deferredEvents)if (this._deferredEvents[eventType]) map.fire(eventType);
        this._internalUpdate = false;
        const tr = this._map.transform;
        // Make sure camera matches the current props
        this._map.transform = this._renderTransform;
        this._onAfterRepaint = ()=>{
            // Restores camera state before render/load events are fired
            this._map.transform = tr;
        };
    }
}
exports.default = Mapbox;
Mapbox.savedMaps = [];
/**
 * Access token can be provided via one of:
 *   mapboxAccessToken prop
 *   access_token query parameter
 *   MapboxAccessToken environment variable
 *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable
 * @returns access token
 */ function getAccessTokenFromEnv() {
    let accessToken = null;
    /* global location, process */ if (typeof location !== 'undefined') {
        const match = /access_token=([^&\/]*)/.exec(location.search);
        accessToken = match && match[1];
    }
    // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly
    try {
        accessToken = accessToken || undefined;
    } catch (_a) {
    // ignore
    }
    try {
        accessToken = accessToken || undefined;
    } catch (_b) {
    // ignore
    }
    return accessToken;
}

},{"../utils/transform":"1zqWt","../utils/style-utils":"kPHoF","../utils/deep-equal":"8kD4r","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1zqWt":[function(require,module,exports,__globalThis) {
/**
 * Make a copy of a transform
 * @param tr
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cloneTransform", ()=>cloneTransform);
/**
 * Capture a transform's current state
 * @param transform
 * @returns descriptor of the view state
 */ parcelHelpers.export(exports, "transformToViewState", ()=>transformToViewState);
/* eslint-disable complexity */ /**
 * Mutate a transform to match the given view state
 * @param transform
 * @param viewState
 * @returns true if the transform has changed
 */ parcelHelpers.export(exports, "applyViewStateToTransform", ()=>applyViewStateToTransform);
function cloneTransform(tr) {
    const newTransform = tr.clone();
    // Work around mapbox bug - this value is not assigned in clone(), only in resize()
    newTransform.pixelsToGLUnits = tr.pixelsToGLUnits;
    return newTransform;
}
function transformToViewState(tr) {
    return {
        longitude: tr.center.lng,
        latitude: tr.center.lat,
        zoom: tr.zoom,
        pitch: tr.pitch,
        bearing: tr.bearing,
        padding: tr.padding
    };
}
function applyViewStateToTransform(tr, props) {
    const v = props.viewState || props;
    let changed = false;
    if ('longitude' in v && 'latitude' in v) {
        const center = tr.center;
        // @ts-ignore
        tr.center = new center.constructor(v.longitude, v.latitude);
        changed = changed || center !== tr.center;
    }
    if ('zoom' in v) {
        const zoom = tr.zoom;
        tr.zoom = v.zoom;
        changed = changed || zoom !== tr.zoom;
    }
    if ('bearing' in v) {
        const bearing = tr.bearing;
        tr.bearing = v.bearing;
        changed = changed || bearing !== tr.bearing;
    }
    if ('pitch' in v) {
        const pitch = tr.pitch;
        tr.pitch = v.pitch;
        changed = changed || pitch !== tr.pitch;
    }
    if (v.padding && !tr.isPaddingEqual(v.padding)) {
        changed = true;
        tr.padding = v.padding;
    }
    return changed;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kPHoF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Prepare a map style object for diffing
// If immutable - convert to plain object
// Work around some issues in older styles that would fail Mapbox's diffing
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
const refProps = [
    'type',
    'source',
    'source-layer',
    'minzoom',
    'maxzoom',
    'filter',
    'layout'
];
function normalizeStyle(style) {
    if (!style) return null;
    if (typeof style === 'string') return style;
    if ('toJS' in style) style = style.toJS();
    if (!style.layers) return style;
    const layerIndex = {};
    for (const layer of style.layers)layerIndex[layer.id] = layer;
    const layers = style.layers.map((layer)=>{
        // @ts-expect-error
        const layerRef = layerIndex[layer.ref];
        let normalizedLayer = null;
        if ('interactive' in layer) {
            normalizedLayer = {
                ...layer
            };
            // Breaks style diffing :(
            delete normalizedLayer.interactive;
        }
        // Style diffing doesn't work with refs so expand them out manually before diffing.
        if (layerRef) {
            normalizedLayer = normalizedLayer || {
                ...layer
            };
            delete normalizedLayer.ref;
            // https://github.com/mapbox/mapbox-gl-js/blob/master/src/style-spec/deref.js
            for (const propName of refProps)if (propName in layerRef) normalizedLayer[propName] = layerRef[propName];
        }
        return normalizedLayer || layer;
    });
    // Do not mutate the style object provided by the user
    return {
        ...style,
        layers
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8kD4r":[function(require,module,exports,__globalThis) {
/**
 * Compare two points
 * @param a
 * @param b
 * @returns true if the points are equal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arePointsEqual", ()=>arePointsEqual);
/* eslint-disable complexity */ /**
 * Compare any two objects
 * @param a
 * @param b
 * @returns true if the objects are deep equal
 */ parcelHelpers.export(exports, "deepEqual", ()=>deepEqual);
function arePointsEqual(a, b) {
    const ax = Array.isArray(a) ? a[0] : a ? a.x : 0;
    const ay = Array.isArray(a) ? a[1] : a ? a.y : 0;
    const bx = Array.isArray(b) ? b[0] : b ? b.x : 0;
    const by = Array.isArray(b) ? b[1] : b ? b.y : 0;
    return ax === bx && ay === by;
}
function deepEqual(a, b) {
    if (a === b) return true;
    if (!a || !b) return false;
    if (Array.isArray(a)) {
        if (!Array.isArray(b) || a.length !== b.length) return false;
        for(let i = 0; i < a.length; i++){
            if (!deepEqual(a[i], b[i])) return false;
        }
        return true;
    } else if (Array.isArray(b)) return false;
    if (typeof a === 'object' && typeof b === 'object') {
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) return false;
        for (const key of aKeys){
            if (!b.hasOwnProperty(key)) return false;
            if (!deepEqual(a[key], b[key])) return false;
        }
        return true;
    }
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fyEJS":[function(require,module,exports,__globalThis) {
/** These methods may break the react binding if called directly */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createRef);
const skipMethods = [
    'setMaxBounds',
    'setMinZoom',
    'setMaxZoom',
    'setMinPitch',
    'setMaxPitch',
    'setRenderWorldCopies',
    'setProjection',
    'setStyle',
    'addSource',
    'removeSource',
    'addLayer',
    'removeLayer',
    'setLayerZoomRange',
    'setFilter',
    'setPaintProperty',
    'setLayoutProperty',
    'setLight',
    'setTerrain',
    'setFog',
    'remove'
];
function createRef(mapInstance, mapLib) {
    if (!mapInstance) return null;
    const map = mapInstance.map;
    const result = {
        getMap: ()=>map,
        // Overwrite getters to use our shadow transform
        getCenter: ()=>mapInstance.transform.center,
        getZoom: ()=>mapInstance.transform.zoom,
        getBearing: ()=>mapInstance.transform.bearing,
        getPitch: ()=>mapInstance.transform.pitch,
        getPadding: ()=>mapInstance.transform.padding,
        getBounds: ()=>mapInstance.transform.getBounds(),
        project: (lnglat)=>{
            return mapInstance.transform.locationPoint(mapLib.LngLat.convert(lnglat));
        },
        unproject: (point)=>{
            return mapInstance.transform.pointLocation(mapLib.Point.convert(point));
        },
        queryTerrainElevation: (lnglat, options)=>{
            // @ts-ignore transform not defined
            const tr = map.transform;
            // @ts-ignore transform not defined
            map.transform = mapInstance.transform;
            const result = map.queryTerrainElevation(lnglat, options);
            // @ts-ignore transform not defined
            map.transform = tr;
            return result;
        }
    };
    for (const key of getMethodNames(map))// @ts-expect-error
    if (!(key in result) && !skipMethods.includes(key)) result[key] = map[key].bind(map);
    return result;
}
function getMethodNames(obj) {
    const result = new Set();
    let proto = obj;
    while(proto){
        for (const key of Object.getOwnPropertyNames(proto))if (key[0] !== '_' && typeof obj[key] === 'function' && key !== 'fire' && key !== 'setEventedParent') result.add(key);
        proto = Object.getPrototypeOf(proto);
    }
    return Array.from(result);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1Fy4p":[function(require,module,exports,__globalThis) {
// From https://github.com/streamich/react-use/blob/master/src/useIsomorphicLayoutEffect.ts
// useLayoutEffect but does not trigger warning in server-side rendering
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const useIsomorphicLayoutEffect = typeof document !== 'undefined' ? (0, _react.useLayoutEffect) : (0, _react.useEffect);
exports.default = useIsomorphicLayoutEffect;

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"czP12":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>setGlobals);
const globalSettings = [
    'baseApiUrl',
    'maxParallelImageRequests',
    'workerClass',
    'workerCount',
    'workerUrl'
];
function setGlobals(mapLib, props) {
    for (const key of globalSettings)if (key in props) mapLib[key] = props[key];
    if (props.RTLTextPlugin && mapLib.getRTLTextPluginStatus && mapLib.getRTLTextPluginStatus() === 'unavailable') mapLib.setRTLTextPlugin(props.RTLTextPlugin, (error)=>{
        if (error) // eslint-disable-next-line
        console.error(error);
    }, false);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5kDtL":[function(require,module,exports,__globalThis) {
module.exports = import("./mapbox-gl.ebc2ec4c.js").then(()=>module.bundle.root('5AUoQ'));

},{"5AUoQ":"5AUoQ"}],"kCkhe":[function(require,module,exports,__globalThis) {
/* global document */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDom = require("react-dom");
var _applyReactStyle = require("../utils/apply-react-style");
var _map = require("./map");
var _deepEqual = require("../utils/deep-equal");
const defaultProps = {
    draggable: false,
    popup: null,
    rotation: 0,
    rotationAlignment: 'auto',
    pitchAlignment: 'auto'
};
/* eslint-disable complexity,max-statements */ function Marker(props) {
    const { map, mapLib } = (0, _react.useContext)((0, _map.MapContext));
    const thisRef = (0, _react.useRef)({
        props
    });
    thisRef.current.props = props;
    const marker = (0, _react.useMemo)(()=>{
        let hasChildren = false;
        _react.Children.forEach(props.children, (el)=>{
            if (el) hasChildren = true;
        });
        const options = {
            ...props,
            element: hasChildren ? document.createElement('div') : null
        };
        const mk = new mapLib.Marker(options).setLngLat([
            props.longitude,
            props.latitude
        ]);
        mk.getElement().addEventListener('click', (e)=>{
            var _a, _b;
            (_b = (_a = thisRef.current.props).onClick) === null || _b === void 0 || _b.call(_a, {
                type: 'click',
                target: mk,
                originalEvent: e
            });
        });
        mk.on('dragstart', (e)=>{
            var _a, _b;
            const evt = e;
            evt.lngLat = marker.getLngLat();
            (_b = (_a = thisRef.current.props).onDragStart) === null || _b === void 0 || _b.call(_a, evt);
        });
        mk.on('drag', (e)=>{
            var _a, _b;
            const evt = e;
            evt.lngLat = marker.getLngLat();
            (_b = (_a = thisRef.current.props).onDrag) === null || _b === void 0 || _b.call(_a, evt);
        });
        mk.on('dragend', (e)=>{
            var _a, _b;
            const evt = e;
            evt.lngLat = marker.getLngLat();
            (_b = (_a = thisRef.current.props).onDragEnd) === null || _b === void 0 || _b.call(_a, evt);
        });
        return mk;
    }, []);
    (0, _react.useEffect)(()=>{
        marker.addTo(map.getMap());
        return ()=>{
            marker.remove();
        };
    }, []);
    (0, _react.useEffect)(()=>{
        (0, _applyReactStyle.applyReactStyle)(marker.getElement(), props.style);
    }, [
        props.style
    ]);
    if (marker.getLngLat().lng !== props.longitude || marker.getLngLat().lat !== props.latitude) marker.setLngLat([
        props.longitude,
        props.latitude
    ]);
    if (props.offset && !(0, _deepEqual.arePointsEqual)(marker.getOffset(), props.offset)) marker.setOffset(props.offset);
    if (marker.isDraggable() !== props.draggable) marker.setDraggable(props.draggable);
    if (marker.getRotation() !== props.rotation) marker.setRotation(props.rotation);
    if (marker.getRotationAlignment() !== props.rotationAlignment) marker.setRotationAlignment(props.rotationAlignment);
    if (marker.getPitchAlignment() !== props.pitchAlignment) marker.setPitchAlignment(props.pitchAlignment);
    if (marker.getPopup() !== props.popup) marker.setPopup(props.popup);
    return (0, _reactDom.createPortal)(props.children, marker.getElement());
}
Marker.defaultProps = defaultProps;
// @ts-ignore
exports.default = _react.memo(Marker);

},{"react":"jMk1U","react-dom":"i4X7T","../utils/apply-react-style":"coMjo","./map":"6Xtqw","../utils/deep-equal":"8kD4r","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"coMjo":[function(require,module,exports,__globalThis) {
// This is a simplified version of
// https://github.com/facebook/react/blob/4131af3e4bf52f3a003537ec95a1655147c81270/src/renderers/dom/shared/CSSPropertyOperations.js#L62
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyReactStyle", ()=>applyReactStyle);
const unitlessNumber = /box|flex|grid|column|lineHeight|fontWeight|opacity|order|tabSize|zIndex/;
function applyReactStyle(element, styles) {
    if (!element || !styles) return;
    const style = element.style;
    for(const key in styles){
        const value = styles[key];
        if (Number.isFinite(value) && !unitlessNumber.test(key)) style[key] = `${value}px`;
        else style[key] = value;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cLQof":[function(require,module,exports,__globalThis) {
/* global document */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDom = require("react-dom");
var _applyReactStyle = require("../utils/apply-react-style");
var _map = require("./map");
var _deepEqual = require("../utils/deep-equal");
// Adapted from https://github.com/mapbox/mapbox-gl-js/blob/v1.13.0/src/ui/popup.js
function getClassList(className) {
    return new Set(className ? className.trim().split(/\s+/) : []);
}
/* eslint-disable complexity,max-statements */ function Popup(props) {
    const { map, mapLib } = (0, _react.useContext)((0, _map.MapContext));
    const container = (0, _react.useMemo)(()=>{
        return document.createElement('div');
    }, []);
    const thisRef = (0, _react.useRef)({
        props
    });
    thisRef.current.props = props;
    const popup = (0, _react.useMemo)(()=>{
        const options = {
            ...props
        };
        const pp = new mapLib.Popup(options).setLngLat([
            props.longitude,
            props.latitude
        ]);
        pp.once('open', (e)=>{
            var _a, _b;
            (_b = (_a = thisRef.current.props).onOpen) === null || _b === void 0 || _b.call(_a, e);
        });
        return pp;
    }, []);
    (0, _react.useEffect)(()=>{
        const onClose = (e)=>{
            var _a, _b;
            (_b = (_a = thisRef.current.props).onClose) === null || _b === void 0 || _b.call(_a, e);
        };
        popup.on('close', onClose);
        popup.setDOMContent(container).addTo(map.getMap());
        return ()=>{
            // https://github.com/visgl/react-map-gl/issues/1825
            // onClose should not be fired if the popup is removed by unmounting
            // When using React strict mode, the component is mounted twice.
            // Firing the onClose callback here would be a false signal to remove the component.
            popup.off('close', onClose);
            if (popup.isOpen()) popup.remove();
        };
    }, []);
    (0, _react.useEffect)(()=>{
        (0, _applyReactStyle.applyReactStyle)(popup.getElement(), props.style);
    }, [
        props.style
    ]);
    if (popup.isOpen()) {
        if (popup.getLngLat().lng !== props.longitude || popup.getLngLat().lat !== props.latitude) popup.setLngLat([
            props.longitude,
            props.latitude
        ]);
        // @ts-ignore
        if (props.offset && !(0, _deepEqual.deepEqual)(popup.options.offset, props.offset)) popup.setOffset(props.offset);
        // @ts-ignore
        if (popup.options.anchor !== props.anchor || popup.options.maxWidth !== props.maxWidth) {
            // @ts-ignore
            popup.options.anchor = props.anchor;
            popup.setMaxWidth(props.maxWidth);
        }
        // @ts-ignore
        if (popup.options.className !== props.className) {
            // @ts-ignore
            const prevClassList = getClassList(popup.options.className);
            const nextClassList = getClassList(props.className);
            for (const c of prevClassList)if (!nextClassList.has(c)) popup.removeClassName(c);
            for (const c of nextClassList)if (!prevClassList.has(c)) popup.addClassName(c);
            // @ts-ignore
            popup.options.className = props.className;
        }
    }
    return (0, _reactDom.createPortal)(props.children, container);
}
// @ts-ignore
exports.default = _react.memo(Popup);

},{"react":"jMk1U","react-dom":"i4X7T","../utils/apply-react-style":"coMjo","./map":"6Xtqw","../utils/deep-equal":"8kD4r","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"46qxR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _applyReactStyle = require("../utils/apply-react-style");
var _useControl = require("./use-control");
var _useControlDefault = parcelHelpers.interopDefault(_useControl);
function AttributionControl(props) {
    const ctrl = (0, _useControlDefault.default)(({ mapLib })=>new mapLib.AttributionControl(props), {
        position: props.position
    });
    (0, _react.useEffect)(()=>{
        // @ts-ignore
        (0, _applyReactStyle.applyReactStyle)(ctrl._container, props.style);
    }, [
        props.style
    ]);
    return null;
}
exports.default = _react.memo(AttributionControl);

},{"react":"jMk1U","../utils/apply-react-style":"coMjo","./use-control":"dHlmw","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dHlmw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>useControl);
var _react = require("react");
var _map = require("./map");
function useControl(onCreate, onRemove, opts) {
    const context = (0, _react.useContext)((0, _map.MapContext));
    const ctrl = (0, _react.useMemo)(()=>onCreate(context), []);
    (0, _react.useEffect)(()=>{
        var _a;
        const { map } = context;
        if (!map.hasControl(ctrl)) map.addControl(ctrl, (_a = opts || onRemove) === null || _a === void 0 ? void 0 : _a.position);
        return ()=>{
            if (typeof onRemove === 'function') onRemove(context);
            // Map might have been removed (parent effects are destroyed before child ones)
            if (map.hasControl(ctrl)) map.removeControl(ctrl);
        };
    }, []);
    return ctrl;
}

},{"react":"jMk1U","./map":"6Xtqw","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3hZsr":[function(require,module,exports,__globalThis) {
/* global document */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _applyReactStyle = require("../utils/apply-react-style");
var _useControl = require("./use-control");
var _useControlDefault = parcelHelpers.interopDefault(_useControl);
function FullscreenControl(props) {
    const ctrl = (0, _useControlDefault.default)(({ mapLib })=>new mapLib.FullscreenControl({
            container: props.containerId && document.getElementById(props.containerId)
        }), {
        position: props.position
    });
    (0, _react.useEffect)(()=>{
        // @ts-ignore
        (0, _applyReactStyle.applyReactStyle)(ctrl._controlContainer, props.style);
    }, [
        props.style
    ]);
    return null;
}
exports.default = _react.memo(FullscreenControl);

},{"react":"jMk1U","../utils/apply-react-style":"coMjo","./use-control":"dHlmw","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"h49zQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _applyReactStyle = require("../utils/apply-react-style");
var _useControl = require("./use-control");
var _useControlDefault = parcelHelpers.interopDefault(_useControl);
const GeolocateControl = (0, _react.forwardRef)((props, ref)=>{
    const thisRef = (0, _react.useRef)({
        props
    });
    const ctrl = (0, _useControlDefault.default)(({ mapLib })=>{
        const gc = new mapLib.GeolocateControl(props);
        // Hack: fix GeolocateControl reuse
        // When using React strict mode, the component is mounted twice.
        // GeolocateControl's UI creation is asynchronous. Removing and adding it back causes the UI to be initialized twice.
        const setupUI = gc._setupUI;
        gc._setupUI = (args)=>{
            if (!gc._container.hasChildNodes()) setupUI(args);
        };
        gc.on('geolocate', (e)=>{
            var _a, _b;
            (_b = (_a = thisRef.current.props).onGeolocate) === null || _b === void 0 || _b.call(_a, e);
        });
        gc.on('error', (e)=>{
            var _a, _b;
            (_b = (_a = thisRef.current.props).onError) === null || _b === void 0 || _b.call(_a, e);
        });
        gc.on('outofmaxbounds', (e)=>{
            var _a, _b;
            (_b = (_a = thisRef.current.props).onOutOfMaxBounds) === null || _b === void 0 || _b.call(_a, e);
        });
        gc.on('trackuserlocationstart', (e)=>{
            var _a, _b;
            (_b = (_a = thisRef.current.props).onTrackUserLocationStart) === null || _b === void 0 || _b.call(_a, e);
        });
        gc.on('trackuserlocationend', (e)=>{
            var _a, _b;
            (_b = (_a = thisRef.current.props).onTrackUserLocationEnd) === null || _b === void 0 || _b.call(_a, e);
        });
        return gc;
    }, {
        position: props.position
    });
    thisRef.current.props = props;
    (0, _react.useImperativeHandle)(ref, ()=>({
            trigger: ()=>ctrl.trigger()
        }), []);
    (0, _react.useEffect)(()=>{
        // @ts-ignore
        (0, _applyReactStyle.applyReactStyle)(ctrl._container, props.style);
    }, [
        props.style
    ]);
    return null;
});
GeolocateControl.displayName = 'GeolocateControl';
exports.default = _react.memo(GeolocateControl);

},{"react":"jMk1U","../utils/apply-react-style":"coMjo","./use-control":"dHlmw","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"pBWEQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _applyReactStyle = require("../utils/apply-react-style");
var _useControl = require("./use-control");
var _useControlDefault = parcelHelpers.interopDefault(_useControl);
function NavigationControl(props) {
    const ctrl = (0, _useControlDefault.default)(({ mapLib })=>new mapLib.NavigationControl(props), {
        position: props.position
    });
    (0, _react.useEffect)(()=>{
        // @ts-ignore
        (0, _applyReactStyle.applyReactStyle)(ctrl._container, props.style);
    }, [
        props.style
    ]);
    return null;
}
exports.default = _react.memo(NavigationControl);

},{"react":"jMk1U","../utils/apply-react-style":"coMjo","./use-control":"dHlmw","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kcI26":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _applyReactStyle = require("../utils/apply-react-style");
var _useControl = require("./use-control");
var _useControlDefault = parcelHelpers.interopDefault(_useControl);
const defaultProps = {
    unit: 'metric',
    maxWidth: 100
};
function ScaleControl(props) {
    const ctrl = (0, _useControlDefault.default)(({ mapLib })=>new mapLib.ScaleControl(props), {
        position: props.position
    });
    // @ts-ignore
    if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {
        // @ts-ignore
        ctrl.options.maxWidth = props.maxWidth;
        // This method will trigger an update
        ctrl.setUnit(props.unit);
    }
    (0, _react.useEffect)(()=>{
        // @ts-ignore
        (0, _applyReactStyle.applyReactStyle)(ctrl._container, props.style);
    }, [
        props.style
    ]);
    return null;
}
ScaleControl.defaultProps = defaultProps;
exports.default = _react.memo(ScaleControl);

},{"react":"jMk1U","../utils/apply-react-style":"coMjo","./use-control":"dHlmw","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bB5af":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _map = require("./map");
var _assert = require("../utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _deepEqual = require("../utils/deep-equal");
let sourceCounter = 0;
function createSource(map, id, props) {
    // @ts-ignore
    if (map.style && map.style._loaded) {
        const options = {
            ...props
        };
        delete options.id;
        delete options.children;
        // @ts-ignore
        map.addSource(id, options);
        return map.getSource(id);
    }
    return null;
}
/* eslint-disable complexity */ function updateSource(source, props, prevProps) {
    (0, _assertDefault.default)(props.id === prevProps.id, 'source id changed');
    (0, _assertDefault.default)(props.type === prevProps.type, 'source type changed');
    let changedKey = '';
    let changedKeyCount = 0;
    for(const key in props)if (key !== 'children' && key !== 'id' && !(0, _deepEqual.deepEqual)(prevProps[key], props[key])) {
        changedKey = key;
        changedKeyCount++;
    }
    if (!changedKeyCount) return;
    const type = props.type;
    if (type === 'geojson') source.setData(props.data);
    else if (type === 'image') source.updateImage({
        url: props.url,
        coordinates: props.coordinates
    });
    else if ((type === 'canvas' || type === 'video') && changedKeyCount === 1 && changedKey === 'coordinates') source.setCoordinates(props.coordinates);
    else if (type === 'vector' && 'setUrl' in source) // Added in 1.12.0:
    // vectorTileSource.setTiles
    // vectorTileSource.setUrl
    switch(changedKey){
        case 'url':
            source.setUrl(props.url);
            break;
        case 'tiles':
            source.setTiles(props.tiles);
            break;
        default:
    }
    else // eslint-disable-next-line
    console.warn(`Unable to update <Source> prop: ${changedKey}`);
}
/* eslint-enable complexity */ function Source(props) {
    const map = (0, _react.useContext)((0, _map.MapContext)).map.getMap();
    const propsRef = (0, _react.useRef)(props);
    const [, setStyleLoaded] = (0, _react.useState)(0);
    const id = (0, _react.useMemo)(()=>props.id || `jsx-source-${sourceCounter++}`, []);
    (0, _react.useEffect)(()=>{
        if (map) {
            const forceUpdate = ()=>setStyleLoaded((version)=>version + 1);
            map.on('styledata', forceUpdate);
            forceUpdate();
            return ()=>{
                var _a;
                map.off('styledata', forceUpdate);
                // @ts-ignore
                if (map.style && map.style._loaded && map.getSource(id)) {
                    // Parent effects are destroyed before child ones, see
                    // https://github.com/facebook/react/issues/16728
                    // Source can only be removed after all child layers are removed
                    const allLayers = (_a = map.getStyle()) === null || _a === void 0 ? void 0 : _a.layers;
                    if (allLayers) {
                        for (const layer of allLayers)// @ts-ignore (2339) source does not exist on all layer types
                        if (layer.source === id) map.removeLayer(layer.id);
                    }
                    map.removeSource(id);
                }
            };
        }
        return undefined;
    }, [
        map
    ]);
    // @ts-ignore
    let source = map && map.style && map.getSource(id);
    if (source) updateSource(source, props, propsRef.current);
    else source = createSource(map, id, props);
    propsRef.current = props;
    return source && _react.Children.map(props.children, (child)=>child && (0, _react.cloneElement)(child, {
            source: id
        })) || null;
}
exports.default = Source;

},{"react":"jMk1U","./map":"6Xtqw","../utils/assert":"h0vqV","../utils/deep-equal":"8kD4r","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"h0vqV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>assert);
function assert(condition, message) {
    if (!condition) throw new Error(message);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1OmI0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _map = require("./map");
var _assert = require("../utils/assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _deepEqual = require("../utils/deep-equal");
/* eslint-disable complexity, max-statements */ function updateLayer(map, id, props, prevProps) {
    (0, _assertDefault.default)(props.id === prevProps.id, 'layer id changed');
    (0, _assertDefault.default)(props.type === prevProps.type, 'layer type changed');
    if (props.type === 'custom' || prevProps.type === 'custom') return;
    const { layout = {}, paint = {}, filter, minzoom, maxzoom, beforeId } = props;
    if (beforeId !== prevProps.beforeId) map.moveLayer(id, beforeId);
    if (layout !== prevProps.layout) {
        const prevLayout = prevProps.layout || {};
        for(const key in layout)if (!(0, _deepEqual.deepEqual)(layout[key], prevLayout[key])) map.setLayoutProperty(id, key, layout[key]);
        for(const key in prevLayout)if (!layout.hasOwnProperty(key)) map.setLayoutProperty(id, key, undefined);
    }
    if (paint !== prevProps.paint) {
        const prevPaint = prevProps.paint || {};
        for(const key in paint)if (!(0, _deepEqual.deepEqual)(paint[key], prevPaint[key])) map.setPaintProperty(id, key, paint[key]);
        for(const key in prevPaint)if (!paint.hasOwnProperty(key)) map.setPaintProperty(id, key, undefined);
    }
    if (!(0, _deepEqual.deepEqual)(filter, prevProps.filter)) map.setFilter(id, filter);
    if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) map.setLayerZoomRange(id, minzoom, maxzoom);
}
function createLayer(map, id, props) {
    // @ts-ignore
    if (map.style && map.style._loaded && (!('source' in props) || map.getSource(props.source))) {
        const options = {
            ...props,
            id
        };
        delete options.beforeId;
        // @ts-ignore
        map.addLayer(options, props.beforeId);
    }
}
/* eslint-enable complexity, max-statements */ let layerCounter = 0;
function Layer(props) {
    const map = (0, _react.useContext)((0, _map.MapContext)).map.getMap();
    const propsRef = (0, _react.useRef)(props);
    const [, setStyleLoaded] = (0, _react.useState)(0);
    const id = (0, _react.useMemo)(()=>props.id || `jsx-layer-${layerCounter++}`, []);
    (0, _react.useEffect)(()=>{
        if (map) {
            const forceUpdate = ()=>setStyleLoaded((version)=>version + 1);
            map.on('styledata', forceUpdate);
            forceUpdate();
            return ()=>{
                map.off('styledata', forceUpdate);
                // @ts-ignore
                if (map.style && map.style._loaded && map.getLayer(id)) map.removeLayer(id);
            };
        }
        return undefined;
    }, [
        map
    ]);
    // @ts-ignore
    const layer = map && map.style && map.getLayer(id);
    if (layer) try {
        updateLayer(map, id, props, propsRef.current);
    } catch (error) {
        console.warn(error); // eslint-disable-line
    }
    else createLayer(map, id, props);
    // Store last rendered props
    propsRef.current = props;
    return null;
}
exports.default = Layer;

},{"react":"jMk1U","./map":"6Xtqw","../utils/assert":"h0vqV","../utils/deep-equal":"8kD4r","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4WpUS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"i5X8t":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ArcLayer", ()=>(0, _arcLayerDefault.default));
parcelHelpers.export(exports, "BitmapLayer", ()=>(0, _bitmapLayerDefault.default));
parcelHelpers.export(exports, "IconLayer", ()=>(0, _iconLayerDefault.default));
parcelHelpers.export(exports, "LineLayer", ()=>(0, _lineLayerDefault.default));
parcelHelpers.export(exports, "PointCloudLayer", ()=>(0, _pointCloudLayerDefault.default));
parcelHelpers.export(exports, "ScatterplotLayer", ()=>(0, _scatterplotLayerDefault.default));
parcelHelpers.export(exports, "ColumnLayer", ()=>(0, _columnLayerDefault.default));
parcelHelpers.export(exports, "GridCellLayer", ()=>(0, _gridCellLayerDefault.default));
parcelHelpers.export(exports, "PathLayer", ()=>(0, _pathLayerDefault.default));
parcelHelpers.export(exports, "PolygonLayer", ()=>(0, _polygonLayerDefault.default));
parcelHelpers.export(exports, "GeoJsonLayer", ()=>(0, _geojsonLayerDefault.default));
parcelHelpers.export(exports, "TextLayer", ()=>(0, _textLayerDefault.default));
parcelHelpers.export(exports, "SolidPolygonLayer", ()=>(0, _solidPolygonLayerDefault.default));
parcelHelpers.export(exports, "_MultiIconLayer", ()=>(0, _multiIconLayerDefault.default));
parcelHelpers.export(exports, "_TextBackgroundLayer", ()=>(0, _textBackgroundLayerDefault.default));
var _arcLayer = require("./arc-layer/arc-layer");
var _arcLayerDefault = parcelHelpers.interopDefault(_arcLayer);
var _bitmapLayer = require("./bitmap-layer/bitmap-layer");
var _bitmapLayerDefault = parcelHelpers.interopDefault(_bitmapLayer);
var _iconLayer = require("./icon-layer/icon-layer");
var _iconLayerDefault = parcelHelpers.interopDefault(_iconLayer);
var _lineLayer = require("./line-layer/line-layer");
var _lineLayerDefault = parcelHelpers.interopDefault(_lineLayer);
var _pointCloudLayer = require("./point-cloud-layer/point-cloud-layer");
var _pointCloudLayerDefault = parcelHelpers.interopDefault(_pointCloudLayer);
var _scatterplotLayer = require("./scatterplot-layer/scatterplot-layer");
var _scatterplotLayerDefault = parcelHelpers.interopDefault(_scatterplotLayer);
var _columnLayer = require("./column-layer/column-layer");
var _columnLayerDefault = parcelHelpers.interopDefault(_columnLayer);
var _gridCellLayer = require("./column-layer/grid-cell-layer");
var _gridCellLayerDefault = parcelHelpers.interopDefault(_gridCellLayer);
var _pathLayer = require("./path-layer/path-layer");
var _pathLayerDefault = parcelHelpers.interopDefault(_pathLayer);
var _polygonLayer = require("./polygon-layer/polygon-layer");
var _polygonLayerDefault = parcelHelpers.interopDefault(_polygonLayer);
var _geojsonLayer = require("./geojson-layer/geojson-layer");
var _geojsonLayerDefault = parcelHelpers.interopDefault(_geojsonLayer);
var _textLayer = require("./text-layer/text-layer");
var _textLayerDefault = parcelHelpers.interopDefault(_textLayer);
var _solidPolygonLayer = require("./solid-polygon-layer/solid-polygon-layer");
var _solidPolygonLayerDefault = parcelHelpers.interopDefault(_solidPolygonLayer);
var _multiIconLayer = require("./text-layer/multi-icon-layer/multi-icon-layer");
var _multiIconLayerDefault = parcelHelpers.interopDefault(_multiIconLayer);
var _textBackgroundLayer = require("./text-layer/text-background-layer/text-background-layer");
var _textBackgroundLayerDefault = parcelHelpers.interopDefault(_textBackgroundLayer);

},{"./arc-layer/arc-layer":false,"./bitmap-layer/bitmap-layer":false,"./icon-layer/icon-layer":false,"./line-layer/line-layer":false,"./point-cloud-layer/point-cloud-layer":false,"./scatterplot-layer/scatterplot-layer":false,"./column-layer/column-layer":"7DDEy","./column-layer/grid-cell-layer":false,"./path-layer/path-layer":false,"./polygon-layer/polygon-layer":false,"./geojson-layer/geojson-layer":"kLpxB","./text-layer/text-layer":"leKcD","./solid-polygon-layer/solid-polygon-layer":false,"./text-layer/multi-icon-layer/multi-icon-layer":false,"./text-layer/text-background-layer/text-background-layer":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"irQVL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _core1 = require("@luma.gl/core");
var _iconLayerVertexGlsl = require("./icon-layer-vertex.glsl");
var _iconLayerVertexGlslDefault = parcelHelpers.interopDefault(_iconLayerVertexGlsl);
var _iconLayerFragmentGlsl = require("./icon-layer-fragment.glsl");
var _iconLayerFragmentGlslDefault = parcelHelpers.interopDefault(_iconLayerFragmentGlsl);
var _iconManager = require("./icon-manager");
var _iconManagerDefault = parcelHelpers.interopDefault(_iconManager);
const DEFAULT_COLOR = [
    0,
    0,
    0,
    255
];
const defaultProps = {
    iconAtlas: {
        type: 'image',
        value: null,
        async: true
    },
    iconMapping: {
        type: 'object',
        value: {},
        async: true
    },
    sizeScale: {
        type: 'number',
        value: 1,
        min: 0
    },
    billboard: true,
    sizeUnits: 'pixels',
    sizeMinPixels: {
        type: 'number',
        min: 0,
        value: 0
    },
    sizeMaxPixels: {
        type: 'number',
        min: 0,
        value: Number.MAX_SAFE_INTEGER
    },
    alphaCutoff: {
        type: 'number',
        value: 0.05,
        min: 0,
        max: 1
    },
    getPosition: {
        type: 'accessor',
        value: (x)=>x.position
    },
    getIcon: {
        type: 'accessor',
        value: (x)=>x.icon
    },
    getColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getSize: {
        type: 'accessor',
        value: 1
    },
    getAngle: {
        type: 'accessor',
        value: 0
    },
    getPixelOffset: {
        type: 'accessor',
        value: [
            0,
            0
        ]
    },
    onIconError: {
        type: 'function',
        value: null,
        optional: true
    },
    textureParameters: {
        type: 'object',
        ignore: true
    }
};
class IconLayer extends (0, _core.Layer) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "state", void 0);
    }
    getShaders() {
        return super.getShaders({
            vs: (0, _iconLayerVertexGlslDefault.default),
            fs: (0, _iconLayerFragmentGlslDefault.default),
            modules: [
                (0, _core.project32),
                (0, _core.picking)
            ]
        });
    }
    initializeState() {
        this.state = {
            iconManager: new (0, _iconManagerDefault.default)(this.context.gl, {
                onUpdate: this._onUpdate.bind(this),
                onError: this._onError.bind(this)
            })
        };
        const attributeManager = this.getAttributeManager();
        attributeManager.addInstanced({
            instancePositions: {
                size: 3,
                type: 5130,
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getPosition'
            },
            instanceSizes: {
                size: 1,
                transition: true,
                accessor: 'getSize',
                defaultValue: 1
            },
            instanceOffsets: {
                size: 2,
                accessor: 'getIcon',
                transform: this.getInstanceOffset
            },
            instanceIconFrames: {
                size: 4,
                accessor: 'getIcon',
                transform: this.getInstanceIconFrame
            },
            instanceColorModes: {
                size: 1,
                type: 5121,
                accessor: 'getIcon',
                transform: this.getInstanceColorMode
            },
            instanceColors: {
                size: this.props.colorFormat.length,
                type: 5121,
                normalized: true,
                transition: true,
                accessor: 'getColor',
                defaultValue: DEFAULT_COLOR
            },
            instanceAngles: {
                size: 1,
                transition: true,
                accessor: 'getAngle'
            },
            instancePixelOffset: {
                size: 2,
                transition: true,
                accessor: 'getPixelOffset'
            }
        });
    }
    updateState(params) {
        super.updateState(params);
        const { props, oldProps, changeFlags } = params;
        const attributeManager = this.getAttributeManager();
        const { iconAtlas, iconMapping, data, getIcon, textureParameters } = props;
        const { iconManager } = this.state;
        const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');
        iconManager.setProps({
            loadOptions: props.loadOptions,
            autoPacking: !prePacked,
            iconAtlas,
            iconMapping: prePacked ? iconMapping : null,
            textureParameters
        });
        if (prePacked) {
            if (oldProps.iconMapping !== props.iconMapping) attributeManager.invalidate('getIcon');
        } else if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon)) iconManager.packIcons(data, getIcon);
        if (changeFlags.extensionsChanged) {
            var _this$state$model;
            const { gl } = this.context;
            (_this$state$model = this.state.model) === null || _this$state$model === void 0 || _this$state$model.delete();
            this.state.model = this._getModel(gl);
            attributeManager.invalidateAll();
        }
    }
    get isLoaded() {
        return super.isLoaded && this.state.iconManager.isLoaded;
    }
    finalizeState(context) {
        super.finalizeState(context);
        this.state.iconManager.finalize();
    }
    draw({ uniforms }) {
        const { sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff } = this.props;
        const { iconManager } = this.state;
        const iconsTexture = iconManager.getTexture();
        if (iconsTexture) this.state.model.setUniforms(uniforms).setUniforms({
            iconsTexture,
            iconsTextureDim: [
                iconsTexture.width,
                iconsTexture.height
            ],
            sizeUnits: (0, _core.UNIT)[sizeUnits],
            sizeScale,
            sizeMinPixels,
            sizeMaxPixels,
            billboard,
            alphaCutoff
        }).draw();
    }
    _getModel(gl) {
        const positions = [
            -1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1
        ];
        return new (0, _core1.Model)(gl, {
            ...this.getShaders(),
            id: this.props.id,
            geometry: new (0, _core1.Geometry)({
                drawMode: 6,
                attributes: {
                    positions: {
                        size: 2,
                        value: new Float32Array(positions)
                    }
                }
            }),
            isInstanced: true
        });
    }
    _onUpdate() {
        this.setNeedsRedraw();
    }
    _onError(evt) {
        var _this$getCurrentLayer;
        const onIconError = (_this$getCurrentLayer = this.getCurrentLayer()) === null || _this$getCurrentLayer === void 0 ? void 0 : _this$getCurrentLayer.props.onIconError;
        if (onIconError) onIconError(evt);
        else (0, _core.log).error(evt.error.message)();
    }
    getInstanceOffset(icon) {
        const { width, height, anchorX = width / 2, anchorY = height / 2 } = this.state.iconManager.getIconMapping(icon);
        return [
            width / 2 - anchorX,
            height / 2 - anchorY
        ];
    }
    getInstanceColorMode(icon) {
        const mapping = this.state.iconManager.getIconMapping(icon);
        return mapping.mask ? 1 : 0;
    }
    getInstanceIconFrame(icon) {
        const { x, y, width, height } = this.state.iconManager.getIconMapping(icon);
        return [
            x,
            y,
            width,
            height
        ];
    }
}
exports.default = IconLayer;
(0, _definePropertyDefault.default)(IconLayer, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(IconLayer, "layerName", 'IconLayer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","@luma.gl/core":"9rnrC","./icon-layer-vertex.glsl":"bMR2R","./icon-layer-fragment.glsl":"etiCt","./icon-manager":"81DuL","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bMR2R":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME icon-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\nattribute vec2 instancePixelOffset;\n\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform bool billboard;\nuniform int sizeUnits;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n\n  vec2 iconSize = instanceIconFrames.zw;\n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits), \n    sizeMinPixels, sizeMaxPixels\n  );\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;\n  pixelOffset += instancePixelOffset;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position); \n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vColor = instanceColors;\n  DECKGL_FILTER_COLOR(vColor, geometry);\n\n  vColorMode = instanceColorModes;\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"etiCt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float alphaCutoff;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\n  float a = texColor.a * opacity * vColor.a;\n\n  if (a < alphaCutoff) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, a);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"81DuL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildMapping", ()=>buildMapping);
parcelHelpers.export(exports, "getDiffIcons", ()=>getDiffIcons);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@luma.gl/core");
var _core1 = require("@loaders.gl/core");
var _core2 = require("@deck.gl/core");
const DEFAULT_CANVAS_WIDTH = 1024;
const DEFAULT_BUFFER = 4;
const noop = ()=>{};
const DEFAULT_TEXTURE_PARAMETERS = {
    [10241]: 9987,
    [10240]: 9729,
    [10242]: 33071,
    [10243]: 33071
};
function nextPowOfTwo(number) {
    return Math.pow(2, Math.ceil(Math.log2(number)));
}
function resizeImage(ctx, imageData, maxWidth, maxHeight) {
    const resizeRatio = Math.min(maxWidth / imageData.width, maxHeight / imageData.height);
    const width = Math.floor(imageData.width * resizeRatio);
    const height = Math.floor(imageData.height * resizeRatio);
    if (resizeRatio === 1) return {
        data: imageData,
        width,
        height
    };
    ctx.canvas.height = height;
    ctx.canvas.width = width;
    ctx.clearRect(0, 0, width, height);
    ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);
    return {
        data: ctx.canvas,
        width,
        height
    };
}
function getIconId(icon) {
    return icon && (icon.id || icon.url);
}
function resizeTexture(texture, width, height, parameters) {
    const oldWidth = texture.width;
    const oldHeight = texture.height;
    const newTexture = new (0, _core.Texture2D)(texture.gl, {
        width,
        height,
        parameters
    });
    (0, _core.copyToTexture)(texture, newTexture, {
        targetY: 0,
        width: oldWidth,
        height: oldHeight
    });
    texture.delete();
    return newTexture;
}
function buildRowMapping(mapping, columns, yOffset) {
    for(let i = 0; i < columns.length; i++){
        const { icon, xOffset } = columns[i];
        const id = getIconId(icon);
        mapping[id] = {
            ...icon,
            x: xOffset,
            y: yOffset
        };
    }
}
function buildMapping({ icons, buffer, mapping = {}, xOffset = 0, yOffset = 0, rowHeight = 0, canvasWidth }) {
    let columns = [];
    for(let i = 0; i < icons.length; i++){
        const icon = icons[i];
        const id = getIconId(icon);
        if (!mapping[id]) {
            const { height, width } = icon;
            if (xOffset + width + buffer > canvasWidth) {
                buildRowMapping(mapping, columns, yOffset);
                xOffset = 0;
                yOffset = rowHeight + yOffset + buffer;
                rowHeight = 0;
                columns = [];
            }
            columns.push({
                icon,
                xOffset
            });
            xOffset = xOffset + width + buffer;
            rowHeight = Math.max(rowHeight, height);
        }
    }
    if (columns.length > 0) buildRowMapping(mapping, columns, yOffset);
    return {
        mapping,
        rowHeight,
        xOffset,
        yOffset,
        canvasWidth,
        canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)
    };
}
function getDiffIcons(data, getIcon, cachedIcons) {
    if (!data || !getIcon) return null;
    cachedIcons = cachedIcons || {};
    const icons = {};
    const { iterable, objectInfo } = (0, _core2.createIterable)(data);
    for (const object of iterable){
        objectInfo.index++;
        const icon = getIcon(object, objectInfo);
        const id = getIconId(icon);
        if (!icon) throw new Error('Icon is missing.');
        if (!icon.url) throw new Error('Icon url is missing.');
        if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) icons[id] = {
            ...icon,
            source: object,
            sourceIndex: objectInfo.index
        };
    }
    return icons;
}
class IconManager {
    constructor(gl, { onUpdate = noop, onError = noop }){
        (0, _definePropertyDefault.default)(this, "gl", void 0);
        (0, _definePropertyDefault.default)(this, "onUpdate", void 0);
        (0, _definePropertyDefault.default)(this, "onError", void 0);
        (0, _definePropertyDefault.default)(this, "_loadOptions", null);
        (0, _definePropertyDefault.default)(this, "_texture", null);
        (0, _definePropertyDefault.default)(this, "_externalTexture", null);
        (0, _definePropertyDefault.default)(this, "_mapping", {});
        (0, _definePropertyDefault.default)(this, "_textureParameters", null);
        (0, _definePropertyDefault.default)(this, "_pendingCount", 0);
        (0, _definePropertyDefault.default)(this, "_autoPacking", false);
        (0, _definePropertyDefault.default)(this, "_xOffset", 0);
        (0, _definePropertyDefault.default)(this, "_yOffset", 0);
        (0, _definePropertyDefault.default)(this, "_rowHeight", 0);
        (0, _definePropertyDefault.default)(this, "_buffer", DEFAULT_BUFFER);
        (0, _definePropertyDefault.default)(this, "_canvasWidth", DEFAULT_CANVAS_WIDTH);
        (0, _definePropertyDefault.default)(this, "_canvasHeight", 0);
        (0, _definePropertyDefault.default)(this, "_canvas", null);
        this.gl = gl;
        this.onUpdate = onUpdate;
        this.onError = onError;
    }
    finalize() {
        var _this$_texture;
        (_this$_texture = this._texture) === null || _this$_texture === void 0 || _this$_texture.delete();
    }
    getTexture() {
        return this._texture || this._externalTexture;
    }
    getIconMapping(icon) {
        const id = this._autoPacking ? getIconId(icon) : icon;
        return this._mapping[id] || {};
    }
    setProps({ loadOptions, autoPacking, iconAtlas, iconMapping, textureParameters }) {
        if (loadOptions) this._loadOptions = loadOptions;
        if (autoPacking !== undefined) this._autoPacking = autoPacking;
        if (iconMapping) this._mapping = iconMapping;
        if (iconAtlas) {
            var _this$_texture2;
            (_this$_texture2 = this._texture) === null || _this$_texture2 === void 0 || _this$_texture2.delete();
            this._texture = null;
            this._externalTexture = iconAtlas;
        }
        if (textureParameters) this._textureParameters = textureParameters;
    }
    get isLoaded() {
        return this._pendingCount === 0;
    }
    packIcons(data, getIcon) {
        if (!this._autoPacking || typeof document === 'undefined') return;
        const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});
        if (icons.length > 0) {
            const { mapping, xOffset, yOffset, rowHeight, canvasHeight } = buildMapping({
                icons,
                buffer: this._buffer,
                canvasWidth: this._canvasWidth,
                mapping: this._mapping,
                rowHeight: this._rowHeight,
                xOffset: this._xOffset,
                yOffset: this._yOffset
            });
            this._rowHeight = rowHeight;
            this._mapping = mapping;
            this._xOffset = xOffset;
            this._yOffset = yOffset;
            this._canvasHeight = canvasHeight;
            if (!this._texture) this._texture = new (0, _core.Texture2D)(this.gl, {
                width: this._canvasWidth,
                height: this._canvasHeight,
                parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS
            });
            if (this._texture.height !== this._canvasHeight) this._texture = resizeTexture(this._texture, this._canvasWidth, this._canvasHeight, this._textureParameters || DEFAULT_TEXTURE_PARAMETERS);
            this.onUpdate();
            this._canvas = this._canvas || document.createElement('canvas');
            this._loadIcons(icons);
        }
    }
    _loadIcons(icons) {
        const ctx = this._canvas.getContext('2d', {
            willReadFrequently: true
        });
        for (const icon of icons){
            this._pendingCount++;
            (0, _core1.load)(icon.url, this._loadOptions).then((imageData)=>{
                const id = getIconId(icon);
                const iconDef = this._mapping[id];
                const { x, y, width: maxWidth, height: maxHeight } = iconDef;
                const { data, width, height } = resizeImage(ctx, imageData, maxWidth, maxHeight);
                this._texture.setSubImageData({
                    data,
                    x: x + (maxWidth - width) / 2,
                    y: y + (maxHeight - height) / 2,
                    width,
                    height
                });
                iconDef.width = width;
                iconDef.height = height;
                this._texture.generateMipmap();
                this.onUpdate();
            }).catch((error)=>{
                this.onError({
                    url: icon.url,
                    source: icon.source,
                    sourceIndex: icon.sourceIndex,
                    loadOptions: this._loadOptions,
                    error
                });
            }).finally(()=>{
                this._pendingCount--;
            });
        }
    }
}
exports.default = IconManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@luma.gl/core":"9rnrC","@loaders.gl/core":"9tqNe","@deck.gl/core":"9zfJz","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6nz3j":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _core1 = require("@luma.gl/core");
var _scatterplotLayerVertexGlsl = require("./scatterplot-layer-vertex.glsl");
var _scatterplotLayerVertexGlslDefault = parcelHelpers.interopDefault(_scatterplotLayerVertexGlsl);
var _scatterplotLayerFragmentGlsl = require("./scatterplot-layer-fragment.glsl");
var _scatterplotLayerFragmentGlslDefault = parcelHelpers.interopDefault(_scatterplotLayerFragmentGlsl);
const DEFAULT_COLOR = [
    0,
    0,
    0,
    255
];
const defaultProps = {
    radiusUnits: 'meters',
    radiusScale: {
        type: 'number',
        min: 0,
        value: 1
    },
    radiusMinPixels: {
        type: 'number',
        min: 0,
        value: 0
    },
    radiusMaxPixels: {
        type: 'number',
        min: 0,
        value: Number.MAX_SAFE_INTEGER
    },
    lineWidthUnits: 'meters',
    lineWidthScale: {
        type: 'number',
        min: 0,
        value: 1
    },
    lineWidthMinPixels: {
        type: 'number',
        min: 0,
        value: 0
    },
    lineWidthMaxPixels: {
        type: 'number',
        min: 0,
        value: Number.MAX_SAFE_INTEGER
    },
    stroked: false,
    filled: true,
    billboard: false,
    antialiasing: true,
    getPosition: {
        type: 'accessor',
        value: (x)=>x.position
    },
    getRadius: {
        type: 'accessor',
        value: 1
    },
    getFillColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getLineColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getLineWidth: {
        type: 'accessor',
        value: 1
    },
    strokeWidth: {
        deprecatedFor: 'getLineWidth'
    },
    outline: {
        deprecatedFor: 'stroked'
    },
    getColor: {
        deprecatedFor: [
            'getFillColor',
            'getLineColor'
        ]
    }
};
class ScatterplotLayer extends (0, _core.Layer) {
    getShaders() {
        return super.getShaders({
            vs: (0, _scatterplotLayerVertexGlslDefault.default),
            fs: (0, _scatterplotLayerFragmentGlslDefault.default),
            modules: [
                (0, _core.project32),
                (0, _core.picking)
            ]
        });
    }
    initializeState() {
        this.getAttributeManager().addInstanced({
            instancePositions: {
                size: 3,
                type: 5130,
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getPosition'
            },
            instanceRadius: {
                size: 1,
                transition: true,
                accessor: 'getRadius',
                defaultValue: 1
            },
            instanceFillColors: {
                size: this.props.colorFormat.length,
                transition: true,
                normalized: true,
                type: 5121,
                accessor: 'getFillColor',
                defaultValue: [
                    0,
                    0,
                    0,
                    255
                ]
            },
            instanceLineColors: {
                size: this.props.colorFormat.length,
                transition: true,
                normalized: true,
                type: 5121,
                accessor: 'getLineColor',
                defaultValue: [
                    0,
                    0,
                    0,
                    255
                ]
            },
            instanceLineWidths: {
                size: 1,
                transition: true,
                accessor: 'getLineWidth',
                defaultValue: 1
            }
        });
    }
    updateState(params) {
        super.updateState(params);
        if (params.changeFlags.extensionsChanged) {
            var _this$state$model;
            const { gl } = this.context;
            (_this$state$model = this.state.model) === null || _this$state$model === void 0 || _this$state$model.delete();
            this.state.model = this._getModel(gl);
            this.getAttributeManager().invalidateAll();
        }
    }
    draw({ uniforms }) {
        const { radiusUnits, radiusScale, radiusMinPixels, radiusMaxPixels, stroked, filled, billboard, antialiasing, lineWidthUnits, lineWidthScale, lineWidthMinPixels, lineWidthMaxPixels } = this.props;
        this.state.model.setUniforms(uniforms).setUniforms({
            stroked: stroked ? 1 : 0,
            filled,
            billboard,
            antialiasing,
            radiusUnits: (0, _core.UNIT)[radiusUnits],
            radiusScale,
            radiusMinPixels,
            radiusMaxPixels,
            lineWidthUnits: (0, _core.UNIT)[lineWidthUnits],
            lineWidthScale,
            lineWidthMinPixels,
            lineWidthMaxPixels
        }).draw();
    }
    _getModel(gl) {
        const positions = [
            -1,
            -1,
            0,
            1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            1,
            0
        ];
        return new (0, _core1.Model)(gl, {
            ...this.getShaders(),
            id: this.props.id,
            geometry: new (0, _core1.Geometry)({
                drawMode: 6,
                vertexCount: 4,
                attributes: {
                    positions: {
                        size: 3,
                        value: new Float32Array(positions)
                    }
                }
            }),
            isInstanced: true
        });
    }
}
exports.default = ScatterplotLayer;
(0, _definePropertyDefault.default)(ScatterplotLayer, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(ScatterplotLayer, "layerName", 'ScatterplotLayer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","@luma.gl/core":"9rnrC","./scatterplot-layer-vertex.glsl":"33qrZ","./scatterplot-layer-fragment.glsl":"3tQFN","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"33qrZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\nuniform bool antialiasing;\nuniform bool billboard;\nuniform int radiusUnits;\nuniform int lineWidthUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),\n    radiusMinPixels, radiusMaxPixels\n  );\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n  float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3tQFN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (!filled) {\n    discard;\n  } else {\n    gl_FragColor = vFillColor;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7DDEy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _core1 = require("@luma.gl/core");
var _columnGeometry = require("./column-geometry");
var _columnGeometryDefault = parcelHelpers.interopDefault(_columnGeometry);
var _columnLayerVertexGlsl = require("./column-layer-vertex.glsl");
var _columnLayerVertexGlslDefault = parcelHelpers.interopDefault(_columnLayerVertexGlsl);
var _columnLayerFragmentGlsl = require("./column-layer-fragment.glsl");
var _columnLayerFragmentGlslDefault = parcelHelpers.interopDefault(_columnLayerFragmentGlsl);
const DEFAULT_COLOR = [
    0,
    0,
    0,
    255
];
const defaultProps = {
    diskResolution: {
        type: 'number',
        min: 4,
        value: 20
    },
    vertices: null,
    radius: {
        type: 'number',
        min: 0,
        value: 1000
    },
    angle: {
        type: 'number',
        value: 0
    },
    offset: {
        type: 'array',
        value: [
            0,
            0
        ]
    },
    coverage: {
        type: 'number',
        min: 0,
        max: 1,
        value: 1
    },
    elevationScale: {
        type: 'number',
        min: 0,
        value: 1
    },
    radiusUnits: 'meters',
    lineWidthUnits: 'meters',
    lineWidthScale: 1,
    lineWidthMinPixels: 0,
    lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
    extruded: true,
    wireframe: false,
    filled: true,
    stroked: false,
    getPosition: {
        type: 'accessor',
        value: (x)=>x.position
    },
    getFillColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getLineColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getLineWidth: {
        type: 'accessor',
        value: 1
    },
    getElevation: {
        type: 'accessor',
        value: 1000
    },
    material: true,
    getColor: {
        deprecatedFor: [
            'getFillColor',
            'getLineColor'
        ]
    }
};
class ColumnLayer extends (0, _core.Layer) {
    getShaders() {
        const { gl } = this.context;
        const transpileToGLSL100 = !(0, _core1.isWebGL2)(gl);
        const defines = {};
        const useDerivatives = this.props.flatShading && (0, _core1.hasFeature)(gl, (0, _core1.FEATURES).GLSL_DERIVATIVES);
        if (useDerivatives) defines.FLAT_SHADING = 1;
        return super.getShaders({
            vs: (0, _columnLayerVertexGlslDefault.default),
            fs: (0, _columnLayerFragmentGlslDefault.default),
            defines,
            transpileToGLSL100,
            modules: [
                (0, _core.project32),
                useDerivatives ? (0, _core.phongLighting) : (0, _core.gouraudLighting),
                (0, _core.picking)
            ]
        });
    }
    initializeState() {
        const attributeManager = this.getAttributeManager();
        attributeManager.addInstanced({
            instancePositions: {
                size: 3,
                type: 5130,
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getPosition'
            },
            instanceElevations: {
                size: 1,
                transition: true,
                accessor: 'getElevation'
            },
            instanceFillColors: {
                size: this.props.colorFormat.length,
                type: 5121,
                normalized: true,
                transition: true,
                accessor: 'getFillColor',
                defaultValue: DEFAULT_COLOR
            },
            instanceLineColors: {
                size: this.props.colorFormat.length,
                type: 5121,
                normalized: true,
                transition: true,
                accessor: 'getLineColor',
                defaultValue: DEFAULT_COLOR
            },
            instanceStrokeWidths: {
                size: 1,
                accessor: 'getLineWidth',
                transition: true
            }
        });
    }
    updateState(params) {
        super.updateState(params);
        const { props, oldProps, changeFlags } = params;
        const regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;
        if (regenerateModels) {
            var _this$state$model;
            const { gl } = this.context;
            (_this$state$model = this.state.model) === null || _this$state$model === void 0 || _this$state$model.delete();
            this.state.model = this._getModel(gl);
            this.getAttributeManager().invalidateAll();
        }
        if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) this._updateGeometry(props);
    }
    getGeometry(diskResolution, vertices, hasThinkness) {
        const geometry = new (0, _columnGeometryDefault.default)({
            radius: 1,
            height: hasThinkness ? 2 : 0,
            vertices,
            nradial: diskResolution
        });
        let meanVertexDistance = 0;
        if (vertices) for(let i = 0; i < diskResolution; i++){
            const p = vertices[i];
            const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);
            meanVertexDistance += d / diskResolution;
        }
        else meanVertexDistance = 1;
        this.setState({
            edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance
        });
        return geometry;
    }
    _getModel(gl) {
        return new (0, _core1.Model)(gl, {
            ...this.getShaders(),
            id: this.props.id,
            isInstanced: true
        });
    }
    _updateGeometry({ diskResolution, vertices, extruded, stroked }) {
        const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);
        this.setState({
            fillVertexCount: geometry.attributes.POSITION.value.length / 3,
            wireframeVertexCount: geometry.indices.value.length
        });
        this.state.model.setProps({
            geometry
        });
    }
    draw({ uniforms }) {
        const { lineWidthUnits, lineWidthScale, lineWidthMinPixels, lineWidthMaxPixels, radiusUnits, elevationScale, extruded, filled, stroked, wireframe, offset, coverage, radius, angle } = this.props;
        const { model, fillVertexCount, wireframeVertexCount, edgeDistance } = this.state;
        model.setUniforms(uniforms).setUniforms({
            radius,
            angle: angle / 180 * Math.PI,
            offset,
            extruded,
            stroked,
            coverage,
            elevationScale,
            edgeDistance,
            radiusUnits: (0, _core.UNIT)[radiusUnits],
            widthUnits: (0, _core.UNIT)[lineWidthUnits],
            widthScale: lineWidthScale,
            widthMinPixels: lineWidthMinPixels,
            widthMaxPixels: lineWidthMaxPixels
        });
        if (extruded && wireframe) {
            model.setProps({
                isIndexed: true
            });
            model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({
                isStroke: true
            }).draw();
        }
        if (filled) {
            model.setProps({
                isIndexed: false
            });
            model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({
                isStroke: false
            }).draw();
        }
        if (!extruded && stroked) {
            model.setProps({
                isIndexed: false
            });
            model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({
                isStroke: true
            }).draw();
        }
    }
}
exports.default = ColumnLayer;
(0, _definePropertyDefault.default)(ColumnLayer, "layerName", 'ColumnLayer');
(0, _definePropertyDefault.default)(ColumnLayer, "defaultProps", defaultProps);

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","@luma.gl/core":"9rnrC","./column-geometry":"hBzv8","./column-layer-vertex.glsl":"kFYPA","./column-layer-fragment.glsl":"dNQpP","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hBzv8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _core = require("@deck.gl/core");
var _core1 = require("@luma.gl/core");
var _polygon = require("@math.gl/polygon");
class ColumnGeometry extends (0, _core1.Geometry) {
    constructor(props){
        const { id = (0, _core1.uid)('column-geometry') } = props;
        const { indices, attributes } = tesselateColumn(props);
        super({
            ...props,
            id,
            indices,
            attributes
        });
    }
}
exports.default = ColumnGeometry;
function tesselateColumn(props) {
    const { radius, height = 1, nradial = 10 } = props;
    let { vertices } = props;
    if (vertices) {
        (0, _core.log).assert(vertices.length >= nradial);
        vertices = vertices.flatMap((v)=>[
                v[0],
                v[1]
            ]);
        (0, _polygon.modifyPolygonWindingDirection)(vertices, (0, _polygon.WINDING).COUNTER_CLOCKWISE);
    }
    const isExtruded = height > 0;
    const vertsAroundEdge = nradial + 1;
    const numVertices = isExtruded ? vertsAroundEdge * 3 + 1 : nradial;
    const stepAngle = Math.PI * 2 / nradial;
    const indices = new Uint16Array(isExtruded ? nradial * 6 : 0);
    const positions = new Float32Array(numVertices * 3);
    const normals = new Float32Array(numVertices * 3);
    let i = 0;
    if (isExtruded) {
        for(let j = 0; j < vertsAroundEdge; j++){
            const a = j * stepAngle;
            const vertexIndex = j % nradial;
            const sin = Math.sin(a);
            const cos = Math.cos(a);
            for(let k = 0; k < 2; k++){
                positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;
                positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;
                positions[i + 2] = (0.5 - k) * height;
                normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;
                normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;
                i += 3;
            }
        }
        positions[i + 0] = positions[i - 3];
        positions[i + 1] = positions[i - 2];
        positions[i + 2] = positions[i - 1];
        i += 3;
    }
    for(let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++){
        const v = Math.floor(j / 2) * Math.sign(0.5 - j % 2);
        const a = v * stepAngle;
        const vertexIndex = (v + nradial) % nradial;
        const sin = Math.sin(a);
        const cos = Math.cos(a);
        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;
        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;
        positions[i + 2] = height / 2;
        normals[i + 2] = 1;
        i += 3;
    }
    if (isExtruded) {
        let index = 0;
        for(let j = 0; j < nradial; j++){
            indices[index++] = j * 2 + 0;
            indices[index++] = j * 2 + 2;
            indices[index++] = j * 2 + 0;
            indices[index++] = j * 2 + 1;
            indices[index++] = j * 2 + 1;
            indices[index++] = j * 2 + 3;
        }
    }
    return {
        indices,
        attributes: {
            POSITION: {
                size: 3,
                value: positions
            },
            NORMAL: {
                size: 3,
                value: normals
            }
        }
    };
}

},{"@deck.gl/core":"9zfJz","@luma.gl/core":"9rnrC","@math.gl/polygon":"7Oo4h","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7Oo4h":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Polygon", ()=>(0, _polygonDefault.default));
parcelHelpers.export(exports, "getPolygonSignedArea", ()=>(0, _polygonUtils.getPolygonSignedArea));
parcelHelpers.export(exports, "getPolygonWindingDirection", ()=>(0, _polygonUtils.getPolygonWindingDirection));
parcelHelpers.export(exports, "forEachSegmentInPolygon", ()=>(0, _polygonUtils.forEachSegmentInPolygon));
parcelHelpers.export(exports, "modifyPolygonWindingDirection", ()=>(0, _polygonUtils.modifyPolygonWindingDirection));
parcelHelpers.export(exports, "WINDING", ()=>(0, _polygonUtils.WINDING));
parcelHelpers.export(exports, "earcut", ()=>(0, _earcut.earcut));
parcelHelpers.export(exports, "clipPolygon", ()=>(0, _lineclip.clipPolygon));
parcelHelpers.export(exports, "clipPolyline", ()=>(0, _lineclip.clipPolyline));
parcelHelpers.export(exports, "cutPolygonByGrid", ()=>(0, _cutByGrid.cutPolygonByGrid));
parcelHelpers.export(exports, "cutPolylineByGrid", ()=>(0, _cutByGrid.cutPolylineByGrid));
parcelHelpers.export(exports, "cutPolylineByMercatorBounds", ()=>(0, _cutByMercatorBounds.cutPolylineByMercatorBounds));
parcelHelpers.export(exports, "cutPolygonByMercatorBounds", ()=>(0, _cutByMercatorBounds.cutPolygonByMercatorBounds));
parcelHelpers.export(exports, "_Polygon", ()=>(0, _polygonDefault.default));
var _polygon = require("./polygon");
var _polygonDefault = parcelHelpers.interopDefault(_polygon);
var _polygonUtils = require("./polygon-utils");
var _earcut = require("./earcut");
var _lineclip = require("./lineclip");
var _cutByGrid = require("./cut-by-grid");
var _cutByMercatorBounds = require("./cut-by-mercator-bounds");

},{"./polygon":"gNCLH","./polygon-utils":"b5qIA","./earcut":"cQKLk","./lineclip":"2ltcj","./cut-by-grid":"1mNOL","./cut-by-mercator-bounds":"d9WIy","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gNCLH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@math.gl/core");
var _polygonUtils = require("./polygon-utils");
class Polygon {
    constructor(points, options = {}){
        (0, _definePropertyDefault.default)(this, "points", void 0);
        (0, _definePropertyDefault.default)(this, "isFlatArray", void 0);
        (0, _definePropertyDefault.default)(this, "options", void 0);
        this.points = points;
        this.isFlatArray = !(0, _core.isArray)(points[0]);
        this.options = {
            start: options.start || 0,
            end: options.end || points.length,
            size: options.size || 2,
            isClosed: options.isClosed
        };
        Object.freeze(this);
    }
    getSignedArea() {
        if (this.isFlatArray) return (0, _polygonUtils.getPolygonSignedArea)(this.points, this.options);
        return (0, _polygonUtils.getPolygonSignedAreaPoints)(this.points, this.options);
    }
    getArea() {
        return Math.abs(this.getSignedArea());
    }
    getWindingDirection() {
        return Math.sign(this.getSignedArea());
    }
    forEachSegment(visitor) {
        if (this.isFlatArray) (0, _polygonUtils.forEachSegmentInPolygon)(this.points, (x1, y1, x2, y2, i1, i2)=>{
            visitor([
                x1,
                y1
            ], [
                x2,
                y2
            ], i1, i2);
        }, this.options);
        else (0, _polygonUtils.forEachSegmentInPolygonPoints)(this.points, visitor, this.options);
    }
    modifyWindingDirection(direction) {
        if (this.isFlatArray) return (0, _polygonUtils.modifyPolygonWindingDirection)(this.points, direction, this.options);
        return (0, _polygonUtils.modifyPolygonWindingDirectionPoints)(this.points, direction, this.options);
    }
}
exports.default = Polygon;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@math.gl/core":"e2A67","./polygon-utils":"b5qIA","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"b5qIA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WINDING", ()=>WINDING);
parcelHelpers.export(exports, "modifyPolygonWindingDirection", ()=>modifyPolygonWindingDirection);
parcelHelpers.export(exports, "getPolygonWindingDirection", ()=>getPolygonWindingDirection);
parcelHelpers.export(exports, "getPolygonSignedArea", ()=>getPolygonSignedArea);
parcelHelpers.export(exports, "forEachSegmentInPolygon", ()=>forEachSegmentInPolygon);
parcelHelpers.export(exports, "modifyPolygonWindingDirectionPoints", ()=>modifyPolygonWindingDirectionPoints);
parcelHelpers.export(exports, "getPolygonWindingDirectionPoints", ()=>getPolygonWindingDirectionPoints);
parcelHelpers.export(exports, "getPolygonSignedAreaPoints", ()=>getPolygonSignedAreaPoints);
parcelHelpers.export(exports, "forEachSegmentInPolygonPoints", ()=>forEachSegmentInPolygonPoints);
var _core = require("@math.gl/core");
const WINDING = {
    CLOCKWISE: 1,
    COUNTER_CLOCKWISE: -1
};
function modifyPolygonWindingDirection(points, direction, options = {}) {
    const windingDirection = getPolygonWindingDirection(points, options);
    if (windingDirection !== direction) {
        reversePolygon(points, options);
        return true;
    }
    return false;
}
function getPolygonWindingDirection(points, options = {}) {
    return Math.sign(getPolygonSignedArea(points, options));
}
function getPolygonSignedArea(points, options = {}) {
    const { start = 0, end = points.length } = options;
    const dim = options.size || 2;
    let area = 0;
    for(let i = start, j = end - dim; i < end; i += dim){
        area += (points[i] - points[j]) * (points[i + 1] + points[j + 1]);
        j = i;
    }
    return area / 2;
}
function forEachSegmentInPolygon(points, visitor, options = {}) {
    const { start = 0, end = points.length, size = 2, isClosed } = options;
    const numPoints = (end - start) / size;
    for(let i = 0; i < numPoints - 1; ++i)visitor(points[start + i * size], points[start + i * size + 1], points[start + (i + 1) * size], points[start + (i + 1) * size + 1], i, i + 1);
    const endPointIndex = start + (numPoints - 1) * size;
    const isClosedEx = isClosed || (0, _core.equals)(points[start], points[endPointIndex]) && (0, _core.equals)(points[start + 1], points[endPointIndex + 1]);
    if (!isClosedEx) visitor(points[endPointIndex], points[endPointIndex + 1], points[start], points[start + 1], numPoints - 1, 0);
}
function reversePolygon(points, options) {
    const { start = 0, end = points.length, size = 2 } = options;
    const numPoints = (end - start) / size;
    const numSwaps = Math.floor(numPoints / 2);
    for(let i = 0; i < numSwaps; ++i){
        const b1 = start + i * size;
        const b2 = start + (numPoints - 1 - i) * size;
        for(let j = 0; j < size; ++j){
            const tmp = points[b1 + j];
            points[b1 + j] = points[b2 + j];
            points[b2 + j] = tmp;
        }
    }
}
function modifyPolygonWindingDirectionPoints(points, direction, options = {}) {
    const currentDirection = getPolygonWindingDirectionPoints(points, options);
    if (currentDirection !== direction) {
        points.reverse();
        return true;
    }
    return false;
}
function getPolygonWindingDirectionPoints(points, options = {}) {
    return Math.sign(getPolygonSignedAreaPoints(points, options));
}
function getPolygonSignedAreaPoints(points, options = {}) {
    const { start = 0, end = points.length } = options;
    let area = 0;
    for(let i = start, j = end - 1; i < end; ++i){
        area += (points[i][0] - points[j][0]) * (points[i][1] + points[j][1]);
        j = i;
    }
    return area / 2;
}
function forEachSegmentInPolygonPoints(points, visitor, options = {}) {
    const { start = 0, end = points.length, isClosed } = options;
    for(let i = start; i < end - 1; ++i)visitor(points[i], points[i + 1], i, i + 1);
    const isClosedEx = isClosed || (0, _core.equals)(points[end - 1], points[0]);
    if (!isClosedEx) visitor(points[end - 1], points[0], end - 1, 0);
}

},{"@math.gl/core":"e2A67","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cQKLk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "earcut", ()=>earcut);
var _polygonUtils = require("./polygon-utils");
function earcut(positions, holeIndices, dim = 2, areas) {
    const hasHoles = holeIndices && holeIndices.length;
    const outerLen = hasHoles ? holeIndices[0] * dim : positions.length;
    let outerNode = linkedList(positions, 0, outerLen, dim, true, areas && areas[0]);
    const triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    let invSize;
    let maxX;
    let maxY;
    let minX;
    let minY;
    let x;
    let y;
    if (hasHoles) outerNode = eliminateHoles(positions, holeIndices, outerNode, dim, areas);
    if (positions.length > 80 * dim) {
        minX = maxX = positions[0];
        minY = maxY = positions[1];
        for(let i = dim; i < outerLen; i += dim){
            x = positions[i];
            y = positions[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
    return triangles;
}
function linkedList(data, start, end, dim, clockwise, area) {
    let i;
    let last;
    if (area === undefined) area = (0, _polygonUtils.getPolygonSignedArea)(data, {
        start,
        end,
        size: dim
    });
    if (clockwise === area < 0) for(i = start; i < end; i += dim)last = insertNode(i, data[i], data[i + 1], last);
    else for(i = end - dim; i >= start; i -= dim)last = insertNode(i, data[i], data[i + 1], last);
    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }
    return last;
}
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    let p = start;
    let again;
    do {
        again = false;
        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
        } else p = p.next;
    }while (again || p !== end);
    return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
    let stop = ear;
    let prev;
    let next;
    while(ear.prev !== ear.next){
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);
            removeNode(ear);
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        if (ear === stop) {
            if (!pass) earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            } else if (pass === 2) splitEarcut(ear, triangles, dim, minX, minY, invSize);
            break;
        }
    }
}
function isEar(ear) {
    const a = ear.prev;
    const b = ear;
    const c = ear.next;
    if (area(a, b, c) >= 0) return false;
    let p = ear.next.next;
    while(p !== ear.prev){
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }
    return true;
}
function isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev;
    const b = ear;
    const c = ear.next;
    if (area(a, b, c) >= 0) return false;
    const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
    const minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
    const maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
    const maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
    const minZ = zOrder(minTX, minTY, minX, minY, invSize);
    const maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
    let p = ear.prevZ;
    let n = ear.nextZ;
    while(p && p.z >= minZ && n && n.z <= maxZ){
        if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
        if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    while(p && p.z >= minZ){
        if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }
    while(n && n.z <= maxZ){
        if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    return true;
}
function cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
        const a = p.prev;
        const b = p.next.next;
        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);
            removeNode(p);
            removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    }while (p !== start);
    return filterPoints(p);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    let a = start;
    do {
        let b = a.next.next;
        while(b !== a.prev){
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                let c = splitPolygon(a, b);
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);
                earcutLinked(a, triangles, dim, minX, minY, invSize);
                earcutLinked(c, triangles, dim, minX, minY, invSize);
                return;
            }
            b = b.next;
        }
        a = a.next;
    }while (a !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim, areas) {
    const queue = [];
    let i;
    let len;
    let start;
    let end;
    let list;
    for(i = 0, len = holeIndices.length; i < len; i++){
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false, areas && areas[i + 1]);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    for(i = 0; i < queue.length; i++){
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
    }
    return outerNode;
}
function compareX(a, b) {
    return a.x - b.x;
}
function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
        const b = splitPolygon(outerNode, hole);
        filterPoints(outerNode, outerNode.next);
        filterPoints(b, b.next);
    }
}
function findHoleBridge(hole, outerNode) {
    let p = outerNode;
    const hx = hole.x;
    const hy = hole.y;
    let qx = -Infinity;
    let m;
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    }while (p !== outerNode);
    if (!m) return null;
    if (hx === qx) return m;
    const stop = m;
    const mx = m.x;
    const my = m.y;
    let tanMin = Infinity;
    let tan;
    p = m;
    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x);
            if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    }while (p !== stop);
    return m;
}
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    }while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
}
function sortLinked(list) {
    let e;
    let i;
    let inSize = 1;
    let numMerges;
    let p;
    let pSize;
    let q;
    let qSize;
    let tail;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while(p){
            numMerges++;
            q = p;
            pSize = 0;
            for(i = 0; i < inSize; i++){
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;
            while(pSize > 0 || qSize > 0 && q){
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail) tail.nextZ = e;
                else list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    }while (numMerges > 1);
    return list;
}
function zOrder(x, y, minX, minY, invSize) {
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;
    x = (x | x << 8) & 0x00ff00ff;
    x = (x | x << 4) & 0x0f0f0f0f;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    y = (y | y << 8) & 0x00ff00ff;
    y = (y | y << 4) & 0x0f0f0f0f;
    y = (y | y << 2) & 0x33333333;
    y = (y | y << 1) & 0x55555555;
    return x | y << 1;
}
function getLeftmost(start) {
    let p = start;
    let leftmost = start;
    do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
        p = p.next;
    }while (p !== start);
    return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (area(a.prev, a, b.prev) || area(a, b.prev, b)) || equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
}
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q1, p2, q2) {
    const o1 = sign(area(p1, q1, p2));
    const o2 = sign(area(p1, q1, q2));
    const o3 = sign(area(p2, q2, p1));
    const o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true;
    if (o1 === 0 && onSegment(p1, p2, q1)) return true;
    if (o2 === 0 && onSegment(p1, q2, q1)) return true;
    if (o3 === 0 && onSegment(p2, p1, q2)) return true;
    if (o4 === 0 && onSegment(p2, q1, q2)) return true;
    return false;
}
function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a, b) {
    let p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
        p = p.next;
    }while (p !== a);
    return false;
}
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
function middleInside(a, b) {
    let p = a;
    let inside = false;
    const px = (a.x + b.x) / 2;
    const py = (a.y + b.y) / 2;
    do {
        if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
        p = p.next;
    }while (p !== a);
    return inside;
}
function splitPolygon(a, b) {
    const a2 = new Node(a.i, a.x, a.y);
    const b2 = new Node(b.i, b.x, b.y);
    const an = a.next;
    const bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
function insertNode(i, x, y, last) {
    const p = new Node(i, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function Node(i, x, y) {
    this.i = i;
    this.x = x;
    this.y = y;
    this.prev = null;
    this.next = null;
    this.z = null;
    this.prevZ = null;
    this.nextZ = null;
    this.steiner = false;
}

},{"./polygon-utils":"b5qIA","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2ltcj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clipPolyline", ()=>clipPolyline);
parcelHelpers.export(exports, "clipPolygon", ()=>clipPolygon);
parcelHelpers.export(exports, "intersect", ()=>intersect);
parcelHelpers.export(exports, "bitCode", ()=>bitCode);
var _utils = require("./utils");
function clipPolyline(positions, bbox, options) {
    const { size = 2, startIndex = 0, endIndex = positions.length } = options || {};
    const numPoints = (endIndex - startIndex) / size;
    const result = [];
    let part = [];
    let a;
    let b;
    let codeA = -1;
    let codeB;
    let lastCode;
    for(let i = 1; i < numPoints; i++){
        a = (0, _utils.getPointAtIndex)(positions, i - 1, size, startIndex, a);
        b = (0, _utils.getPointAtIndex)(positions, i, size, startIndex, b);
        if (codeA < 0) codeA = bitCode(a, bbox);
        codeB = lastCode = bitCode(b, bbox);
        while(true){
            if (!(codeA | codeB)) {
                (0, _utils.push)(part, a);
                if (codeB !== lastCode) {
                    (0, _utils.push)(part, b);
                    if (i < numPoints - 1) {
                        result.push(part);
                        part = [];
                    }
                } else if (i === numPoints - 1) (0, _utils.push)(part, b);
                break;
            } else if (codeA & codeB) break;
            else if (codeA) {
                intersect(a, b, codeA, bbox, a);
                codeA = bitCode(a, bbox);
            } else {
                intersect(a, b, codeB, bbox, b);
                codeB = bitCode(b, bbox);
            }
        }
        codeA = lastCode;
    }
    if (part.length) result.push(part);
    return result;
}
function clipPolygon(positions, bbox, options) {
    const { size = 2, endIndex = positions.length } = options || {};
    let { startIndex = 0 } = options || {};
    let numPoints = (endIndex - startIndex) / size;
    let result;
    let p;
    let prev;
    let inside;
    let prevInside;
    for(let edge = 1; edge <= 8; edge *= 2){
        result = [];
        prev = (0, _utils.getPointAtIndex)(positions, numPoints - 1, size, startIndex, prev);
        prevInside = !(bitCode(prev, bbox) & edge);
        for(let i = 0; i < numPoints; i++){
            p = (0, _utils.getPointAtIndex)(positions, i, size, startIndex, p);
            inside = !(bitCode(p, bbox) & edge);
            if (inside !== prevInside) (0, _utils.push)(result, intersect(prev, p, edge, bbox));
            if (inside) (0, _utils.push)(result, p);
            (0, _utils.copy)(prev, p);
            prevInside = inside;
        }
        positions = result;
        startIndex = 0;
        numPoints = result.length / size;
        if (!numPoints) break;
    }
    return result;
}
function intersect(a, b, edge, bbox, out = []) {
    let t;
    let snap;
    if (edge & 8) {
        t = (bbox[3] - a[1]) / (b[1] - a[1]);
        snap = 3;
    } else if (edge & 4) {
        t = (bbox[1] - a[1]) / (b[1] - a[1]);
        snap = 1;
    } else if (edge & 2) {
        t = (bbox[2] - a[0]) / (b[0] - a[0]);
        snap = 2;
    } else if (edge & 1) {
        t = (bbox[0] - a[0]) / (b[0] - a[0]);
        snap = 0;
    } else return null;
    for(let i = 0; i < a.length; i++)out[i] = (snap & 1) === i ? bbox[snap] : t * (b[i] - a[i]) + a[i];
    return out;
}
function bitCode(p, bbox) {
    let code = 0;
    if (p[0] < bbox[0]) code |= 1;
    else if (p[0] > bbox[2]) code |= 2;
    if (p[1] < bbox[1]) code |= 4;
    else if (p[1] > bbox[3]) code |= 8;
    return code;
}

},{"./utils":"19VaH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"19VaH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "push", ()=>push);
parcelHelpers.export(exports, "copy", ()=>copy);
parcelHelpers.export(exports, "getPointAtIndex", ()=>getPointAtIndex);
function push(target, source) {
    const size = source.length;
    const startIndex = target.length;
    if (startIndex > 0) {
        let isDuplicate = true;
        for(let i = 0; i < size; i++)if (target[startIndex - size + i] !== source[i]) {
            isDuplicate = false;
            break;
        }
        if (isDuplicate) return false;
    }
    for(let i = 0; i < size; i++)target[startIndex + i] = source[i];
    return true;
}
function copy(target, source) {
    const size = source.length;
    for(let i = 0; i < size; i++)target[i] = source[i];
}
function getPointAtIndex(positions, index, size, offset, out = []) {
    const startI = offset + index * size;
    for(let i = 0; i < size; i++)out[i] = positions[startI + i];
    return out;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1mNOL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cutPolylineByGrid", ()=>cutPolylineByGrid);
parcelHelpers.export(exports, "cutPolygonByGrid", ()=>cutPolygonByGrid);
var _lineclip = require("./lineclip");
var _utils = require("./utils");
function cutPolylineByGrid(positions, options) {
    const { size = 2, broken = false, gridResolution = 10, gridOffset = [
        0,
        0
    ], startIndex = 0, endIndex = positions.length } = options || {};
    const numPoints = (endIndex - startIndex) / size;
    let part = [];
    const result = [
        part
    ];
    const a = (0, _utils.getPointAtIndex)(positions, 0, size, startIndex);
    let b;
    let codeB;
    const cell = getGridCell(a, gridResolution, gridOffset, []);
    const scratchPoint = [];
    (0, _utils.push)(part, a);
    for(let i = 1; i < numPoints; i++){
        b = (0, _utils.getPointAtIndex)(positions, i, size, startIndex, b);
        codeB = (0, _lineclip.bitCode)(b, cell);
        while(codeB){
            (0, _lineclip.intersect)(a, b, codeB, cell, scratchPoint);
            const codeAlt = (0, _lineclip.bitCode)(scratchPoint, cell);
            if (codeAlt) {
                (0, _lineclip.intersect)(a, scratchPoint, codeAlt, cell, scratchPoint);
                codeB = codeAlt;
            }
            (0, _utils.push)(part, scratchPoint);
            (0, _utils.copy)(a, scratchPoint);
            moveToNeighborCell(cell, gridResolution, codeB);
            if (broken && part.length > size) {
                part = [];
                result.push(part);
                (0, _utils.push)(part, a);
            }
            codeB = (0, _lineclip.bitCode)(b, cell);
        }
        (0, _utils.push)(part, b);
        (0, _utils.copy)(a, b);
    }
    return broken ? result : result[0];
}
const TYPE_INSIDE = 0;
const TYPE_BORDER = 1;
function concatInPlace(arr1, arr2) {
    for(let i = 0; i < arr2.length; i++)arr1.push(arr2[i]);
    return arr1;
}
function cutPolygonByGrid(positions, holeIndices = null, options) {
    if (!positions.length) return [];
    const { size = 2, gridResolution = 10, gridOffset = [
        0,
        0
    ], edgeTypes = false } = options || {};
    const result = [];
    const queue = [
        {
            pos: positions,
            types: edgeTypes ? new Array(positions.length / size).fill(TYPE_BORDER) : null,
            holes: holeIndices || []
        }
    ];
    const bbox = [
        [],
        []
    ];
    let cell = [];
    while(queue.length){
        const { pos, types, holes } = queue.shift();
        getBoundingBox(pos, size, holes[0] || pos.length, bbox);
        cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);
        const code = (0, _lineclip.bitCode)(bbox[1], cell);
        if (code) {
            let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);
            const polygonLow = {
                pos: parts[0].pos,
                types: parts[0].types,
                holes: []
            };
            const polygonHigh = {
                pos: parts[1].pos,
                types: parts[1].types,
                holes: []
            };
            queue.push(polygonLow, polygonHigh);
            for(let i = 0; i < holes.length; i++){
                parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);
                if (parts[0]) {
                    polygonLow.holes.push(polygonLow.pos.length);
                    polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);
                    if (edgeTypes) polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);
                }
                if (parts[1]) {
                    polygonHigh.holes.push(polygonHigh.pos.length);
                    polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);
                    if (edgeTypes) polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);
                }
            }
        } else {
            const polygon = {
                positions: pos
            };
            if (edgeTypes) polygon.edgeTypes = types;
            if (holes.length) polygon.holeIndices = holes;
            result.push(polygon);
        }
    }
    return result;
}
function bisectPolygon(positions, edgeTypes, size, startIndex, endIndex, bbox, edge) {
    const numPoints = (endIndex - startIndex) / size;
    const resultLow = [];
    const resultHigh = [];
    const typesLow = [];
    const typesHigh = [];
    const scratchPoint = [];
    let p;
    let side;
    let type;
    const prev = (0, _utils.getPointAtIndex)(positions, numPoints - 1, size, startIndex);
    let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);
    let prevType = edgeTypes && edgeTypes[numPoints - 1];
    let lowPointCount = 0;
    let highPointCount = 0;
    for(let i = 0; i < numPoints; i++){
        p = (0, _utils.getPointAtIndex)(positions, i, size, startIndex, p);
        side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);
        type = edgeTypes && edgeTypes[startIndex / size + i];
        if (side && prevSide && prevSide !== side) {
            (0, _lineclip.intersect)(prev, p, edge, bbox, scratchPoint);
            (0, _utils.push)(resultLow, scratchPoint) && typesLow.push(prevType);
            (0, _utils.push)(resultHigh, scratchPoint) && typesHigh.push(prevType);
        }
        if (side <= 0) {
            (0, _utils.push)(resultLow, p) && typesLow.push(type);
            lowPointCount -= side;
        } else if (typesLow.length) typesLow[typesLow.length - 1] = TYPE_INSIDE;
        if (side >= 0) {
            (0, _utils.push)(resultHigh, p) && typesHigh.push(type);
            highPointCount += side;
        } else if (typesHigh.length) typesHigh[typesHigh.length - 1] = TYPE_INSIDE;
        (0, _utils.copy)(prev, p);
        prevSide = side;
        prevType = type;
    }
    return [
        lowPointCount ? {
            pos: resultLow,
            types: edgeTypes && typesLow
        } : null,
        highPointCount ? {
            pos: resultHigh,
            types: edgeTypes && typesHigh
        } : null
    ];
}
function getGridCell(p, gridResolution, gridOffset, out) {
    const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];
    const bottom = Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];
    out[0] = left;
    out[1] = bottom;
    out[2] = left + gridResolution;
    out[3] = bottom + gridResolution;
    return out;
}
function moveToNeighborCell(cell, gridResolution, edge) {
    if (edge & 8) {
        cell[1] += gridResolution;
        cell[3] += gridResolution;
    } else if (edge & 4) {
        cell[1] -= gridResolution;
        cell[3] -= gridResolution;
    } else if (edge & 2) {
        cell[0] += gridResolution;
        cell[2] += gridResolution;
    } else if (edge & 1) {
        cell[0] -= gridResolution;
        cell[2] -= gridResolution;
    }
}
function getBoundingBox(positions, size, endIndex, out) {
    let minX = Infinity;
    let maxX = -Infinity;
    let minY = Infinity;
    let maxY = -Infinity;
    for(let i = 0; i < endIndex; i += size){
        const x = positions[i];
        const y = positions[i + 1];
        minX = x < minX ? x : minX;
        maxX = x > maxX ? x : maxX;
        minY = y < minY ? y : minY;
        maxY = y > maxY ? y : maxY;
    }
    out[0][0] = minX;
    out[0][1] = minY;
    out[1][0] = maxX;
    out[1][1] = maxY;
    return out;
}

},{"./lineclip":"2ltcj","./utils":"19VaH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"d9WIy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cutPolylineByMercatorBounds", ()=>cutPolylineByMercatorBounds);
parcelHelpers.export(exports, "cutPolygonByMercatorBounds", ()=>cutPolygonByMercatorBounds);
var _cutByGrid = require("./cut-by-grid");
var _utils = require("./utils");
const DEFAULT_MAX_LATITUDE = 85.051129;
function cutPolylineByMercatorBounds(positions, options) {
    const { size = 2, startIndex = 0, endIndex = positions.length, normalize = true } = options || {};
    const newPositions = positions.slice(startIndex, endIndex);
    wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);
    const parts = (0, _cutByGrid.cutPolylineByGrid)(newPositions, {
        size,
        broken: true,
        gridResolution: 360,
        gridOffset: [
            -180,
            -180
        ]
    });
    if (normalize) for (const part of parts)shiftLongitudesIntoRange(part, size);
    return parts;
}
function cutPolygonByMercatorBounds(positions, holeIndices = null, options) {
    const { size = 2, normalize = true, edgeTypes = false } = options || {};
    holeIndices = holeIndices || [];
    const newPositions = [];
    const newHoleIndices = [];
    let srcStartIndex = 0;
    let targetIndex = 0;
    for(let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++){
        const srcEndIndex = holeIndices[ringIndex] || positions.length;
        const targetStartIndex = targetIndex;
        const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);
        for(let i = splitIndex; i < srcEndIndex; i++)newPositions[targetIndex++] = positions[i];
        for(let i = srcStartIndex; i < splitIndex; i++)newPositions[targetIndex++] = positions[i];
        wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);
        insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options === null || options === void 0 ? void 0 : options.maxLatitude);
        srcStartIndex = srcEndIndex;
        newHoleIndices[ringIndex] = targetIndex;
    }
    newHoleIndices.pop();
    const parts = (0, _cutByGrid.cutPolygonByGrid)(newPositions, newHoleIndices, {
        size,
        gridResolution: 360,
        gridOffset: [
            -180,
            -180
        ],
        edgeTypes
    });
    if (normalize) for (const part of parts)shiftLongitudesIntoRange(part.positions, size);
    return parts;
}
function findSplitIndex(positions, size, startIndex, endIndex) {
    let maxLat = -1;
    let pointIndex = -1;
    for(let i = startIndex + 1; i < endIndex; i += size){
        const lat = Math.abs(positions[i]);
        if (lat > maxLat) {
            maxLat = lat;
            pointIndex = i - 1;
        }
    }
    return pointIndex;
}
function insertPoleVertices(positions, size, startIndex, endIndex, maxLatitude = DEFAULT_MAX_LATITUDE) {
    const firstLng = positions[startIndex];
    const lastLng = positions[endIndex - size];
    if (Math.abs(firstLng - lastLng) > 180) {
        const p = (0, _utils.getPointAtIndex)(positions, 0, size, startIndex);
        p[0] += Math.round((lastLng - firstLng) / 360) * 360;
        (0, _utils.push)(positions, p);
        p[1] = Math.sign(p[1]) * maxLatitude;
        (0, _utils.push)(positions, p);
        p[0] = firstLng;
        (0, _utils.push)(positions, p);
    }
}
function wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {
    let prevLng = positions[0];
    let lng;
    for(let i = startIndex; i < endIndex; i += size){
        lng = positions[i];
        const delta = lng - prevLng;
        if (delta > 180 || delta < -180) lng -= Math.round(delta / 360) * 360;
        positions[i] = prevLng = lng;
    }
}
function shiftLongitudesIntoRange(positions, size) {
    let refLng;
    const pointCount = positions.length / size;
    for(let i = 0; i < pointCount; i++){
        refLng = positions[i * size];
        if ((refLng + 180) % 360 !== 0) break;
    }
    const delta = -Math.round(refLng / 360) * 360;
    if (delta === 0) return;
    for(let i = 0; i < pointCount; i++)positions[i * size] += delta;
}

},{"./cut-by-grid":"1mNOL","./utils":"19VaH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kFYPA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#version 300 es\n\n#define SHADER_NAME column-layer-vertex-shader\n\nin vec3 positions;\nin vec3 normals;\n\nin vec3 instancePositions;\nin float instanceElevations;\nin vec3 instancePositions64Low;\nin vec4 instanceFillColors;\nin vec4 instanceLineColors;\nin float instanceStrokeWidths;\n\nin vec3 instancePickingColors;\nuniform float opacity;\nuniform float radius;\nuniform float angle;\nuniform vec2 offset;\nuniform bool extruded;\nuniform bool stroked;\nuniform bool isStroke;\nuniform float coverage;\nuniform float elevationScale;\nuniform float edgeDistance;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform int radiusUnits;\nuniform int widthUnits;\nout vec4 vColor;\n#ifdef FLAT_SHADING\nout vec4 position_commonspace;\n#endif\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  vec4 color = isStroke ? instanceLineColors : instanceFillColors;\n  mat2 rotationMatrix = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n  float elevation = 0.0;\n  float strokeOffsetRatio = 1.0;\n\n  if (extruded) {\n    elevation = instanceElevations * (positions.z + 1.0) / 2.0 * elevationScale;\n  } else if (stroked) {\n    float widthPixels = clamp(\n      project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\n      widthMinPixels, widthMaxPixels) / 2.0;\n    float halfOffset = project_pixel_size(widthPixels) / project_size(edgeDistance * coverage * radius);\n    if (isStroke) {\n      strokeOffsetRatio -= sign(positions.z) * halfOffset;\n    } else {\n      strokeOffsetRatio -= halfOffset;\n    }\n  }\n  float shouldRender = float(color.a > 0.0 && instanceElevations >= 0.0);\n  float dotRadius = radius * coverage * shouldRender;\n\n  geometry.pickingColor = instancePickingColors;\n  vec3 centroidPosition = vec3(instancePositions.xy, instancePositions.z + elevation);\n  vec3 centroidPosition64Low = instancePositions64Low;\n  vec2 offset = (rotationMatrix * positions.xy * strokeOffsetRatio + offset) * dotRadius;\n  if (radiusUnits == UNIT_METERS) {\n    offset = project_size(offset);\n  }\n  vec3 pos = vec3(offset, 0.);\n  DECKGL_FILTER_SIZE(pos, geometry);\n\n  gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);\n  geometry.normal = project_normal(vec3(rotationMatrix * normals.xy, normals.z));\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  if (extruded && !isStroke) {\n#ifdef FLAT_SHADING\n    position_commonspace = geometry.position;\n    vColor = vec4(color.rgb, color.a * opacity);\n#else\n    vec3 lightColor = lighting_getLightColor(color.rgb, project_uCameraPosition, geometry.position.xyz, geometry.normal);\n    vColor = vec4(lightColor, color.a * opacity);\n#endif\n  } else {\n    vColor = vec4(color.rgb, color.a * opacity);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dNQpP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#version 300 es\n#define SHADER_NAME column-layer-fragment-shader\n\nprecision highp float;\n\nuniform vec3 project_uCameraPosition;\nuniform bool extruded;\nuniform bool isStroke;\n\nout vec4 fragColor;\n\nin vec4 vColor;\n#ifdef FLAT_SHADING\nin vec4 position_commonspace;\n#endif\n\nvoid main(void) {\n  fragColor = vColor;\n#ifdef FLAT_SHADING\n  if (extruded && !isStroke && !picking_uActive) {\n    vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n    fragColor.rgb = lighting_getLightColor(vColor.rgb, project_uCameraPosition, position_commonspace.xyz, normal);\n  }\n#endif\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jlncy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _core1 = require("@luma.gl/core");
var _pathTesselator = require("./path-tesselator");
var _pathTesselatorDefault = parcelHelpers.interopDefault(_pathTesselator);
var _pathLayerVertexGlsl = require("./path-layer-vertex.glsl");
var _pathLayerVertexGlslDefault = parcelHelpers.interopDefault(_pathLayerVertexGlsl);
var _pathLayerFragmentGlsl = require("./path-layer-fragment.glsl");
var _pathLayerFragmentGlslDefault = parcelHelpers.interopDefault(_pathLayerFragmentGlsl);
const DEFAULT_COLOR = [
    0,
    0,
    0,
    255
];
const defaultProps = {
    widthUnits: 'meters',
    widthScale: {
        type: 'number',
        min: 0,
        value: 1
    },
    widthMinPixels: {
        type: 'number',
        min: 0,
        value: 0
    },
    widthMaxPixels: {
        type: 'number',
        min: 0,
        value: Number.MAX_SAFE_INTEGER
    },
    jointRounded: false,
    capRounded: false,
    miterLimit: {
        type: 'number',
        min: 0,
        value: 4
    },
    billboard: false,
    _pathType: null,
    getPath: {
        type: 'accessor',
        value: (object)=>object.path
    },
    getColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getWidth: {
        type: 'accessor',
        value: 1
    },
    rounded: {
        deprecatedFor: [
            'jointRounded',
            'capRounded'
        ]
    }
};
const ATTRIBUTE_TRANSITION = {
    enter: (value, chunk)=>{
        return chunk.length ? chunk.subarray(chunk.length - value.length) : value;
    }
};
class PathLayer extends (0, _core.Layer) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "state", void 0);
    }
    getShaders() {
        return super.getShaders({
            vs: (0, _pathLayerVertexGlslDefault.default),
            fs: (0, _pathLayerFragmentGlslDefault.default),
            modules: [
                (0, _core.project32),
                (0, _core.picking)
            ]
        });
    }
    get wrapLongitude() {
        return false;
    }
    initializeState() {
        const noAlloc = true;
        const attributeManager = this.getAttributeManager();
        attributeManager.addInstanced({
            positions: {
                size: 3,
                vertexOffset: 1,
                type: 5130,
                fp64: this.use64bitPositions(),
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getPath',
                update: this.calculatePositions,
                noAlloc,
                shaderAttributes: {
                    instanceLeftPositions: {
                        vertexOffset: 0
                    },
                    instanceStartPositions: {
                        vertexOffset: 1
                    },
                    instanceEndPositions: {
                        vertexOffset: 2
                    },
                    instanceRightPositions: {
                        vertexOffset: 3
                    }
                }
            },
            instanceTypes: {
                size: 1,
                type: 5121,
                update: this.calculateSegmentTypes,
                noAlloc
            },
            instanceStrokeWidths: {
                size: 1,
                accessor: 'getWidth',
                transition: ATTRIBUTE_TRANSITION,
                defaultValue: 1
            },
            instanceColors: {
                size: this.props.colorFormat.length,
                type: 5121,
                normalized: true,
                accessor: 'getColor',
                transition: ATTRIBUTE_TRANSITION,
                defaultValue: DEFAULT_COLOR
            },
            instancePickingColors: {
                size: 3,
                type: 5121,
                accessor: (object, { index, target: value })=>this.encodePickingColor(object && object.__source ? object.__source.index : index, value)
            }
        });
        this.setState({
            pathTesselator: new (0, _pathTesselatorDefault.default)({
                fp64: this.use64bitPositions()
            })
        });
    }
    updateState(params) {
        super.updateState(params);
        const { props, changeFlags } = params;
        const attributeManager = this.getAttributeManager();
        const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);
        if (geometryChanged) {
            const { pathTesselator } = this.state;
            const buffers = props.data.attributes || {};
            pathTesselator.updateGeometry({
                data: props.data,
                geometryBuffer: buffers.getPath,
                buffers,
                normalize: !props._pathType,
                loop: props._pathType === 'loop',
                getGeometry: props.getPath,
                positionFormat: props.positionFormat,
                wrapLongitude: props.wrapLongitude,
                resolution: this.context.viewport.resolution,
                dataChanged: changeFlags.dataChanged
            });
            this.setState({
                numInstances: pathTesselator.instanceCount,
                startIndices: pathTesselator.vertexStarts
            });
            if (!changeFlags.dataChanged) attributeManager.invalidateAll();
        }
        if (changeFlags.extensionsChanged) {
            var _this$state$model;
            const { gl } = this.context;
            (_this$state$model = this.state.model) === null || _this$state$model === void 0 || _this$state$model.delete();
            this.state.model = this._getModel(gl);
            attributeManager.invalidateAll();
        }
    }
    getPickingInfo(params) {
        const info = super.getPickingInfo(params);
        const { index } = info;
        const { data } = this.props;
        if (data[0] && data[0].__source) info.object = data.find((d)=>d.__source.index === index);
        return info;
    }
    disablePickingIndex(objectIndex) {
        const { data } = this.props;
        if (data[0] && data[0].__source) {
            for(let i = 0; i < data.length; i++)if (data[i].__source.index === objectIndex) this._disablePickingIndex(i);
        } else super.disablePickingIndex(objectIndex);
    }
    draw({ uniforms }) {
        const { jointRounded, capRounded, billboard, miterLimit, widthUnits, widthScale, widthMinPixels, widthMaxPixels } = this.props;
        this.state.model.setUniforms(uniforms).setUniforms({
            jointType: Number(jointRounded),
            capType: Number(capRounded),
            billboard,
            widthUnits: (0, _core.UNIT)[widthUnits],
            widthScale,
            miterLimit,
            widthMinPixels,
            widthMaxPixels
        }).draw();
    }
    _getModel(gl) {
        const SEGMENT_INDICES = [
            0,
            1,
            2,
            1,
            4,
            2,
            1,
            3,
            4,
            3,
            5,
            4
        ];
        const SEGMENT_POSITIONS = [
            0,
            0,
            0,
            -1,
            0,
            1,
            1,
            -1,
            1,
            1,
            1,
            0
        ];
        return new (0, _core1.Model)(gl, {
            ...this.getShaders(),
            id: this.props.id,
            geometry: new (0, _core1.Geometry)({
                drawMode: 4,
                attributes: {
                    indices: new Uint16Array(SEGMENT_INDICES),
                    positions: {
                        value: new Float32Array(SEGMENT_POSITIONS),
                        size: 2
                    }
                }
            }),
            isInstanced: true
        });
    }
    calculatePositions(attribute) {
        const { pathTesselator } = this.state;
        attribute.startIndices = pathTesselator.vertexStarts;
        attribute.value = pathTesselator.get('positions');
    }
    calculateSegmentTypes(attribute) {
        const { pathTesselator } = this.state;
        attribute.startIndices = pathTesselator.vertexStarts;
        attribute.value = pathTesselator.get('segmentTypes');
    }
}
exports.default = PathLayer;
(0, _definePropertyDefault.default)(PathLayer, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(PathLayer, "layerName", 'PathLayer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","@luma.gl/core":"9rnrC","./path-tesselator":"cdwqq","./path-layer-vertex.glsl":"f2fmZ","./path-layer-fragment.glsl":"9jpCx","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cdwqq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _core = require("@deck.gl/core");
var _path = require("./path");
const START_CAP = 1;
const END_CAP = 2;
const INVALID = 4;
class PathTesselator extends (0, _core.Tesselator) {
    constructor(opts){
        super({
            ...opts,
            attributes: {
                positions: {
                    size: 3,
                    padding: 18,
                    initialize: true,
                    type: opts.fp64 ? Float64Array : Float32Array
                },
                segmentTypes: {
                    size: 1,
                    type: Uint8ClampedArray
                }
            }
        });
    }
    get(attributeName) {
        return this.attributes[attributeName];
    }
    getGeometryFromBuffer(buffer) {
        if (this.normalize) return super.getGeometryFromBuffer(buffer);
        return null;
    }
    normalizeGeometry(path) {
        if (this.normalize) return (0, _path.normalizePath)(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);
        return path;
    }
    getGeometrySize(path) {
        if (isCut(path)) {
            let size = 0;
            for (const subPath of path)size += this.getGeometrySize(subPath);
            return size;
        }
        const numPoints = this.getPathLength(path);
        if (numPoints < 2) return 0;
        if (this.isClosed(path)) return numPoints < 3 ? 0 : numPoints + 2;
        return numPoints;
    }
    updateGeometryAttributes(path, context) {
        if (context.geometrySize === 0) return;
        if (path && isCut(path)) for (const subPath of path){
            const geometrySize = this.getGeometrySize(subPath);
            context.geometrySize = geometrySize;
            this.updateGeometryAttributes(subPath, context);
            context.vertexStart += geometrySize;
        }
        else {
            this._updateSegmentTypes(path, context);
            this._updatePositions(path, context);
        }
    }
    _updateSegmentTypes(path, context) {
        const segmentTypes = this.attributes.segmentTypes;
        const isPathClosed = path ? this.isClosed(path) : false;
        const { vertexStart, geometrySize } = context;
        segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);
        if (isPathClosed) {
            segmentTypes[vertexStart] = INVALID;
            segmentTypes[vertexStart + geometrySize - 2] = INVALID;
        } else {
            segmentTypes[vertexStart] += START_CAP;
            segmentTypes[vertexStart + geometrySize - 2] += END_CAP;
        }
        segmentTypes[vertexStart + geometrySize - 1] = INVALID;
    }
    _updatePositions(path, context) {
        const { positions } = this.attributes;
        if (!positions || !path) return;
        const { vertexStart, geometrySize } = context;
        const p = new Array(3);
        for(let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++){
            this.getPointOnPath(path, ptIndex, p);
            positions[i * 3] = p[0];
            positions[i * 3 + 1] = p[1];
            positions[i * 3 + 2] = p[2];
        }
    }
    getPathLength(path) {
        return path.length / this.positionSize;
    }
    getPointOnPath(path, index, target = []) {
        const { positionSize } = this;
        if (index * positionSize >= path.length) index += 1 - path.length / positionSize;
        const i = index * positionSize;
        target[0] = path[i];
        target[1] = path[i + 1];
        target[2] = positionSize === 3 && path[i + 2] || 0;
        return target;
    }
    isClosed(path) {
        if (!this.normalize) return Boolean(this.opts.loop);
        const { positionSize } = this;
        const lastPointIndex = path.length - positionSize;
        return path[0] === path[lastPointIndex] && path[1] === path[lastPointIndex + 1] && (positionSize === 2 || path[2] === path[lastPointIndex + 2]);
    }
}
exports.default = PathTesselator;
function isCut(path) {
    return Array.isArray(path[0]);
}

},{"@deck.gl/core":"9zfJz","./path":"drHiz","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"drHiz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normalizePath", ()=>normalizePath);
var _polygon = require("@math.gl/polygon");
function normalizePath(path, size, gridResolution, wrapLongitude) {
    let flatPath;
    if (Array.isArray(path[0])) {
        const length = path.length * size;
        flatPath = new Array(length);
        for(let i = 0; i < path.length; i++)for(let j = 0; j < size; j++)flatPath[i * size + j] = path[i][j] || 0;
    } else flatPath = path;
    if (gridResolution) return (0, _polygon.cutPolylineByGrid)(flatPath, {
        size,
        gridResolution
    });
    if (wrapLongitude) return (0, _polygon.cutPolylineByMercatorBounds)(flatPath, {
        size
    });
    return flatPath;
}

},{"@math.gl/polygon":"7Oo4h","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"f2fmZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec3 instanceLeftPositions64Low;\nattribute vec3 instanceStartPositions64Low;\nattribute vec3 instanceEndPositions64Low;\nattribute vec3 instanceRightPositions64Low;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float capType;\nuniform float miterLimit;\nuniform bool billboard;\nuniform int widthUnits;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\nvec3 getLineJoinOffset(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  vec2 dir = isEnd ? dirA : dirB;\n  vec2 perp = isEnd ? perpA : perpB;\n  float L = isEnd ? lenA : lenB;\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * capType * 4.0 * flipIfTrue(isStartCap), isJoint);\n    vJointType = capType;\n  } else {\n    vJointType = jointType;\n  }\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return offset;\n}\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.pickingColor = instancePickingColors;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  geometry.worldPosition = currPosition;\n  vec2 widthPixels = vec2(clamp(\n    project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels) / 2.0);\n  vec3 width;\n\n  if (billboard) {\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    width = vec3(widthPixels, 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      project_pixel_size_to_clipspace(width.xy)\n    );\n\n    DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);\n    gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    width = vec3(project_pixel_size(widthPixels), 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);\n    geometry.position = vec4(currPosition + offset, 1.0);\n    gl_Position = project_common_position_to_clipspace(geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9jpCx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float miterLimit;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    if (vJointType < 0.5 && vMiterLength > miterLimit + 1.0) {\n      discard;\n    }\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kLpxB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _utils = require("../utils");
var _geojsonBinary = require("./geojson-binary");
var _subLayerMap = require("./sub-layer-map");
var _geojson = require("./geojson");
var _geojsonLayerProps = require("./geojson-layer-props");
const FEATURE_TYPES = [
    'points',
    'linestrings',
    'polygons'
];
const defaultProps = {
    ...(0, _subLayerMap.getDefaultProps)((0, _subLayerMap.POINT_LAYER).circle),
    ...(0, _subLayerMap.getDefaultProps)((0, _subLayerMap.POINT_LAYER).icon),
    ...(0, _subLayerMap.getDefaultProps)((0, _subLayerMap.POINT_LAYER).text),
    ...(0, _subLayerMap.getDefaultProps)((0, _subLayerMap.LINE_LAYER)),
    ...(0, _subLayerMap.getDefaultProps)((0, _subLayerMap.POLYGON_LAYER)),
    stroked: true,
    filled: true,
    extruded: false,
    wireframe: false,
    _full3d: false,
    iconAtlas: {
        type: 'object',
        value: null
    },
    iconMapping: {
        type: 'object',
        value: {}
    },
    getIcon: {
        type: 'accessor',
        value: (f)=>f.properties.icon
    },
    getText: {
        type: 'accessor',
        value: (f)=>f.properties.text
    },
    pointType: 'circle',
    getRadius: {
        deprecatedFor: 'getPointRadius'
    }
};
class GeoJsonLayer extends (0, _core.CompositeLayer) {
    initializeState() {
        this.state = {
            layerProps: {},
            features: {}
        };
    }
    updateState({ props, changeFlags }) {
        if (!changeFlags.dataChanged) return;
        const { data } = this.props;
        const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;
        this.setState({
            binary
        });
        if (binary) this._updateStateBinary({
            props,
            changeFlags
        });
        else this._updateStateJSON({
            props,
            changeFlags
        });
    }
    _updateStateBinary({ props, changeFlags }) {
        const layerProps = (0, _geojsonLayerProps.createLayerPropsFromBinary)(props.data, this.encodePickingColor);
        this.setState({
            layerProps
        });
    }
    _updateStateJSON({ props, changeFlags }) {
        const features = (0, _geojson.getGeojsonFeatures)(props.data);
        const wrapFeature = this.getSubLayerRow.bind(this);
        let newFeatures = {};
        const featuresDiff = {};
        if (Array.isArray(changeFlags.dataChanged)) {
            const oldFeatures = this.state.features;
            for(const key in oldFeatures){
                newFeatures[key] = oldFeatures[key].slice();
                featuresDiff[key] = [];
            }
            for (const dataRange of changeFlags.dataChanged){
                const partialFeatures = (0, _geojson.separateGeojsonFeatures)(features, wrapFeature, dataRange);
                for(const key in oldFeatures)featuresDiff[key].push((0, _utils.replaceInRange)({
                    data: newFeatures[key],
                    getIndex: (f)=>f.__source.index,
                    dataRange,
                    replace: partialFeatures[key]
                }));
            }
        } else newFeatures = (0, _geojson.separateGeojsonFeatures)(features, wrapFeature);
        const layerProps = (0, _geojsonLayerProps.createLayerPropsFromFeatures)(newFeatures, featuresDiff);
        this.setState({
            features: newFeatures,
            featuresDiff,
            layerProps
        });
    }
    getPickingInfo(params) {
        const info = super.getPickingInfo(params);
        const { index, sourceLayer } = info;
        info.featureType = FEATURE_TYPES.find((ft)=>sourceLayer.id.startsWith("".concat(this.id, "-").concat(ft, "-")));
        if (index >= 0 && sourceLayer.id.startsWith("".concat(this.id, "-points-text")) && this.state.binary) info.index = this.props.data.points.globalFeatureIds.value[index];
        return info;
    }
    _updateAutoHighlight(info) {
        const pointLayerIdPrefix = "".concat(this.id, "-points-");
        const sourceIsPoints = info.featureType === 'points';
        for (const layer of this.getSubLayers())if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) layer.updateAutoHighlight(info);
    }
    _renderPolygonLayer() {
        const { extruded, wireframe } = this.props;
        const { layerProps } = this.state;
        const id = 'polygons-fill';
        const PolygonFillLayer = this.shouldRenderSubLayer(id, layerProps.polygons.data) && this.getSubLayerClass(id, (0, _subLayerMap.POLYGON_LAYER).type);
        if (PolygonFillLayer) {
            const forwardedProps = (0, _subLayerMap.forwardProps)(this, (0, _subLayerMap.POLYGON_LAYER).props);
            const useLineColor = extruded && wireframe;
            if (!useLineColor) delete forwardedProps.getLineColor;
            forwardedProps.updateTriggers.lineColors = useLineColor;
            return new PolygonFillLayer(forwardedProps, this.getSubLayerProps({
                id,
                updateTriggers: forwardedProps.updateTriggers
            }), layerProps.polygons);
        }
        return null;
    }
    _renderLineLayers() {
        const { extruded, stroked } = this.props;
        const { layerProps } = this.state;
        const polygonStrokeLayerId = 'polygons-stroke';
        const lineStringsLayerId = 'linestrings';
        const PolygonStrokeLayer = !extruded && stroked && this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) && this.getSubLayerClass(polygonStrokeLayerId, (0, _subLayerMap.LINE_LAYER).type);
        const LineStringsLayer = this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) && this.getSubLayerClass(lineStringsLayerId, (0, _subLayerMap.LINE_LAYER).type);
        if (PolygonStrokeLayer || LineStringsLayer) {
            const forwardedProps = (0, _subLayerMap.forwardProps)(this, (0, _subLayerMap.LINE_LAYER).props);
            return [
                PolygonStrokeLayer && new PolygonStrokeLayer(forwardedProps, this.getSubLayerProps({
                    id: polygonStrokeLayerId,
                    updateTriggers: forwardedProps.updateTriggers
                }), layerProps.polygonsOutline),
                LineStringsLayer && new LineStringsLayer(forwardedProps, this.getSubLayerProps({
                    id: lineStringsLayerId,
                    updateTriggers: forwardedProps.updateTriggers
                }), layerProps.lines)
            ];
        }
        return null;
    }
    _renderPointLayers() {
        const { pointType } = this.props;
        const { layerProps, binary } = this.state;
        let { highlightedObjectIndex } = this.props;
        if (!binary && Number.isFinite(highlightedObjectIndex)) highlightedObjectIndex = layerProps.points.data.findIndex((d)=>d.__source.index === highlightedObjectIndex);
        const types = new Set(pointType.split('+'));
        const pointLayers = [];
        for (const type of types){
            const id = "points-".concat(type);
            const PointLayerMapping = (0, _subLayerMap.POINT_LAYER)[type];
            const PointsLayer = PointLayerMapping && this.shouldRenderSubLayer(id, layerProps.points.data) && this.getSubLayerClass(id, PointLayerMapping.type);
            if (PointsLayer) {
                const forwardedProps = (0, _subLayerMap.forwardProps)(this, PointLayerMapping.props);
                let pointsLayerProps = layerProps.points;
                if (type === 'text' && binary) {
                    const { instancePickingColors, ...rest } = pointsLayerProps.data.attributes;
                    pointsLayerProps = {
                        ...pointsLayerProps,
                        data: {
                            ...pointsLayerProps.data,
                            attributes: rest
                        }
                    };
                }
                pointLayers.push(new PointsLayer(forwardedProps, this.getSubLayerProps({
                    id,
                    updateTriggers: forwardedProps.updateTriggers,
                    highlightedObjectIndex
                }), pointsLayerProps));
            }
        }
        return pointLayers;
    }
    renderLayers() {
        const { extruded } = this.props;
        const polygonFillLayer = this._renderPolygonLayer();
        const lineLayers = this._renderLineLayers();
        const pointLayers = this._renderPointLayers();
        return [
            !extruded && polygonFillLayer,
            lineLayers,
            pointLayers,
            extruded && polygonFillLayer
        ];
    }
    getSubLayerAccessor(accessor) {
        const { binary } = this.state;
        if (!binary || typeof accessor !== 'function') return super.getSubLayerAccessor(accessor);
        return (object, info)=>{
            const { data, index } = info;
            const feature = (0, _geojsonBinary.binaryToFeatureForAccesor)(data, index);
            return accessor(feature, info);
        };
    }
}
exports.default = GeoJsonLayer;
(0, _definePropertyDefault.default)(GeoJsonLayer, "layerName", 'GeoJsonLayer');
(0, _definePropertyDefault.default)(GeoJsonLayer, "defaultProps", defaultProps);

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","../utils":"6mo42","./geojson-binary":"1gjd2","./sub-layer-map":"f14zC","./geojson":"1sBRC","./geojson-layer-props":"khmuJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6mo42":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "replaceInRange", ()=>replaceInRange);
function replaceInRange({ data, getIndex, dataRange, replace }) {
    const { startRow = 0, endRow = Infinity } = dataRange;
    const count = data.length;
    let replaceStart = count;
    let replaceEnd = count;
    for(let i = 0; i < count; i++){
        const row = getIndex(data[i]);
        if (replaceStart > i && row >= startRow) replaceStart = i;
        if (row >= endRow) {
            replaceEnd = i;
            break;
        }
    }
    let index = replaceStart;
    const dataLengthChanged = replaceEnd - replaceStart !== replace.length;
    const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;
    for(let i = 0; i < replace.length; i++)data[index++] = replace[i];
    if (endChunk) {
        for(let i = 0; i < endChunk.length; i++)data[index++] = endChunk[i];
        data.length = index;
    }
    return {
        startRow: replaceStart,
        endRow: replaceStart + replace.length
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1gjd2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "binaryToFeatureForAccesor", ()=>binaryToFeatureForAccesor);
parcelHelpers.export(exports, "calculatePickingColors", ()=>calculatePickingColors);
function binaryToFeatureForAccesor(data, index) {
    if (!data) return null;
    const featureIndex = 'startIndices' in data ? data.startIndices[index] : index;
    const geometryIndex = data.featureIds.value[featureIndex];
    if (featureIndex !== -1) return getPropertiesForIndex(data, geometryIndex, featureIndex);
    return null;
}
function getPropertiesForIndex(data, propertiesIndex, numericPropsIndex) {
    const feature = {
        properties: {
            ...data.properties[propertiesIndex]
        }
    };
    for(const prop in data.numericProps)feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];
    return feature;
}
function calculatePickingColors(geojsonBinary, encodePickingColor) {
    const pickingColors = {
        points: null,
        lines: null,
        polygons: null
    };
    for(const key in pickingColors){
        const featureIds = geojsonBinary[key].globalFeatureIds.value;
        pickingColors[key] = new Uint8ClampedArray(featureIds.length * 3);
        const pickingColor = [];
        for(let i = 0; i < featureIds.length; i++){
            encodePickingColor(featureIds[i], pickingColor);
            pickingColors[key][i * 3 + 0] = pickingColor[0];
            pickingColors[key][i * 3 + 1] = pickingColor[1];
            pickingColors[key][i * 3 + 2] = pickingColor[2];
        }
    }
    return pickingColors;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"f14zC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "POINT_LAYER", ()=>POINT_LAYER);
parcelHelpers.export(exports, "LINE_LAYER", ()=>LINE_LAYER);
parcelHelpers.export(exports, "POLYGON_LAYER", ()=>POLYGON_LAYER);
parcelHelpers.export(exports, "getDefaultProps", ()=>getDefaultProps);
parcelHelpers.export(exports, "forwardProps", ()=>forwardProps);
var _iconLayer = require("../icon-layer/icon-layer");
var _iconLayerDefault = parcelHelpers.interopDefault(_iconLayer);
var _scatterplotLayer = require("../scatterplot-layer/scatterplot-layer");
var _scatterplotLayerDefault = parcelHelpers.interopDefault(_scatterplotLayer);
var _textLayer = require("../text-layer/text-layer");
var _textLayerDefault = parcelHelpers.interopDefault(_textLayer);
var _pathLayer = require("../path-layer/path-layer");
var _pathLayerDefault = parcelHelpers.interopDefault(_pathLayer);
var _solidPolygonLayer = require("../solid-polygon-layer/solid-polygon-layer");
var _solidPolygonLayerDefault = parcelHelpers.interopDefault(_solidPolygonLayer);
const POINT_LAYER = {
    circle: {
        type: (0, _scatterplotLayerDefault.default),
        props: {
            filled: 'filled',
            stroked: 'stroked',
            lineWidthMaxPixels: 'lineWidthMaxPixels',
            lineWidthMinPixels: 'lineWidthMinPixels',
            lineWidthScale: 'lineWidthScale',
            lineWidthUnits: 'lineWidthUnits',
            pointRadiusMaxPixels: 'radiusMaxPixels',
            pointRadiusMinPixels: 'radiusMinPixels',
            pointRadiusScale: 'radiusScale',
            pointRadiusUnits: 'radiusUnits',
            pointAntialiasing: 'antialiasing',
            pointBillboard: 'billboard',
            getFillColor: 'getFillColor',
            getLineColor: 'getLineColor',
            getLineWidth: 'getLineWidth',
            getPointRadius: 'getRadius'
        }
    },
    icon: {
        type: (0, _iconLayerDefault.default),
        props: {
            iconAtlas: 'iconAtlas',
            iconMapping: 'iconMapping',
            iconSizeMaxPixels: 'sizeMaxPixels',
            iconSizeMinPixels: 'sizeMinPixels',
            iconSizeScale: 'sizeScale',
            iconSizeUnits: 'sizeUnits',
            iconAlphaCutoff: 'alphaCutoff',
            iconBillboard: 'billboard',
            getIcon: 'getIcon',
            getIconAngle: 'getAngle',
            getIconColor: 'getColor',
            getIconPixelOffset: 'getPixelOffset',
            getIconSize: 'getSize'
        }
    },
    text: {
        type: (0, _textLayerDefault.default),
        props: {
            textSizeMaxPixels: 'sizeMaxPixels',
            textSizeMinPixels: 'sizeMinPixels',
            textSizeScale: 'sizeScale',
            textSizeUnits: 'sizeUnits',
            textBackground: 'background',
            textBackgroundPadding: 'backgroundPadding',
            textFontFamily: 'fontFamily',
            textFontWeight: 'fontWeight',
            textLineHeight: 'lineHeight',
            textMaxWidth: 'maxWidth',
            textOutlineColor: 'outlineColor',
            textOutlineWidth: 'outlineWidth',
            textWordBreak: 'wordBreak',
            textCharacterSet: 'characterSet',
            textBillboard: 'billboard',
            textFontSettings: 'fontSettings',
            getText: 'getText',
            getTextAngle: 'getAngle',
            getTextColor: 'getColor',
            getTextPixelOffset: 'getPixelOffset',
            getTextSize: 'getSize',
            getTextAnchor: 'getTextAnchor',
            getTextAlignmentBaseline: 'getAlignmentBaseline',
            getTextBackgroundColor: 'getBackgroundColor',
            getTextBorderColor: 'getBorderColor',
            getTextBorderWidth: 'getBorderWidth'
        }
    }
};
const LINE_LAYER = {
    type: (0, _pathLayerDefault.default),
    props: {
        lineWidthUnits: 'widthUnits',
        lineWidthScale: 'widthScale',
        lineWidthMinPixels: 'widthMinPixels',
        lineWidthMaxPixels: 'widthMaxPixels',
        lineJointRounded: 'jointRounded',
        lineCapRounded: 'capRounded',
        lineMiterLimit: 'miterLimit',
        lineBillboard: 'billboard',
        getLineColor: 'getColor',
        getLineWidth: 'getWidth'
    }
};
const POLYGON_LAYER = {
    type: (0, _solidPolygonLayerDefault.default),
    props: {
        extruded: 'extruded',
        filled: 'filled',
        wireframe: 'wireframe',
        elevationScale: 'elevationScale',
        material: 'material',
        _full3d: '_full3d',
        getElevation: 'getElevation',
        getFillColor: 'getFillColor',
        getLineColor: 'getLineColor'
    }
};
function getDefaultProps({ type, props }) {
    const result = {};
    for(const key in props)result[key] = type.defaultProps[props[key]];
    return result;
}
function forwardProps(layer, mapping) {
    const { transitions, updateTriggers } = layer.props;
    const result = {
        updateTriggers: {},
        transitions: transitions && {
            getPosition: transitions.geometry
        }
    };
    for(const sourceKey in mapping){
        const targetKey = mapping[sourceKey];
        let value = layer.props[sourceKey];
        if (sourceKey.startsWith('get')) {
            value = layer.getSubLayerAccessor(value);
            result.updateTriggers[targetKey] = updateTriggers[sourceKey];
            if (transitions) result.transitions[targetKey] = transitions[sourceKey];
        }
        result[targetKey] = value;
    }
    return result;
}

},{"../icon-layer/icon-layer":"irQVL","../scatterplot-layer/scatterplot-layer":"6nz3j","../text-layer/text-layer":"leKcD","../path-layer/path-layer":"jlncy","../solid-polygon-layer/solid-polygon-layer":"76rlq","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"leKcD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _multiIconLayer = require("./multi-icon-layer/multi-icon-layer");
var _multiIconLayerDefault = parcelHelpers.interopDefault(_multiIconLayer);
var _fontAtlasManager = require("./font-atlas-manager");
var _fontAtlasManagerDefault = parcelHelpers.interopDefault(_fontAtlasManager);
var _utils = require("./utils");
var _textBackgroundLayer = require("./text-background-layer/text-background-layer");
var _textBackgroundLayerDefault = parcelHelpers.interopDefault(_textBackgroundLayer);
const TEXT_ANCHOR = {
    start: 1,
    middle: 0,
    end: -1
};
const ALIGNMENT_BASELINE = {
    top: 1,
    center: 0,
    bottom: -1
};
const DEFAULT_COLOR = [
    0,
    0,
    0,
    255
];
const DEFAULT_LINE_HEIGHT = 1.0;
const defaultProps = {
    billboard: true,
    sizeScale: 1,
    sizeUnits: 'pixels',
    sizeMinPixels: 0,
    sizeMaxPixels: Number.MAX_SAFE_INTEGER,
    background: false,
    getBackgroundColor: {
        type: 'accessor',
        value: [
            255,
            255,
            255,
            255
        ]
    },
    getBorderColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getBorderWidth: {
        type: 'accessor',
        value: 0
    },
    backgroundPadding: {
        type: 'array',
        value: [
            0,
            0,
            0,
            0
        ]
    },
    characterSet: {
        type: 'object',
        value: (0, _fontAtlasManager.DEFAULT_FONT_SETTINGS).characterSet
    },
    fontFamily: (0, _fontAtlasManager.DEFAULT_FONT_SETTINGS).fontFamily,
    fontWeight: (0, _fontAtlasManager.DEFAULT_FONT_SETTINGS).fontWeight,
    lineHeight: DEFAULT_LINE_HEIGHT,
    outlineWidth: {
        type: 'number',
        value: 0,
        min: 0
    },
    outlineColor: {
        type: 'color',
        value: DEFAULT_COLOR
    },
    fontSettings: {
        type: 'object',
        value: {},
        compare: 1
    },
    wordBreak: 'break-word',
    maxWidth: {
        type: 'number',
        value: -1
    },
    getText: {
        type: 'accessor',
        value: (x)=>x.text
    },
    getPosition: {
        type: 'accessor',
        value: (x)=>x.position
    },
    getColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getSize: {
        type: 'accessor',
        value: 32
    },
    getAngle: {
        type: 'accessor',
        value: 0
    },
    getTextAnchor: {
        type: 'accessor',
        value: 'middle'
    },
    getAlignmentBaseline: {
        type: 'accessor',
        value: 'center'
    },
    getPixelOffset: {
        type: 'accessor',
        value: [
            0,
            0
        ]
    },
    backgroundColor: {
        deprecatedFor: [
            'background',
            'getBackgroundColor'
        ]
    }
};
class TextLayer extends (0, _core.CompositeLayer) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "state", void 0);
        (0, _definePropertyDefault.default)(this, "getBoundingRect", (object, objectInfo)=>{
            let { size: [width, height] } = this.transformParagraph(object, objectInfo);
            const { fontSize } = this.state.fontAtlasManager.props;
            width /= fontSize;
            height /= fontSize;
            const { getTextAnchor, getAlignmentBaseline } = this.props;
            const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];
            const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];
            return [
                (anchorX - 1) * width / 2,
                (anchorY - 1) * height / 2,
                width,
                height
            ];
        });
        (0, _definePropertyDefault.default)(this, "getIconOffsets", (object, objectInfo)=>{
            const { getTextAnchor, getAlignmentBaseline } = this.props;
            const { x, y, rowWidth, size: [width, height] } = this.transformParagraph(object, objectInfo);
            const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];
            const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];
            const numCharacters = x.length;
            const offsets = new Array(numCharacters * 2);
            let index = 0;
            for(let i = 0; i < numCharacters; i++){
                const rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;
                offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];
                offsets[index++] = (anchorY - 1) * height / 2 + y[i];
            }
            return offsets;
        });
    }
    initializeState() {
        this.state = {
            styleVersion: 0,
            fontAtlasManager: new (0, _fontAtlasManagerDefault.default)()
        };
        if (this.props.maxWidth > 0) (0, _core.log).warn('v8.9 breaking change: TextLayer maxWidth is now relative to text size')();
    }
    updateState(params) {
        const { props, oldProps, changeFlags } = params;
        const textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);
        if (textChanged) this._updateText();
        const fontChanged = this._updateFontAtlas();
        const styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;
        if (styleChanged) this.setState({
            styleVersion: this.state.styleVersion + 1
        });
    }
    getPickingInfo({ info }) {
        info.object = info.index >= 0 ? this.props.data[info.index] : null;
        return info;
    }
    _updateFontAtlas() {
        const { fontSettings, fontFamily, fontWeight } = this.props;
        const { fontAtlasManager, characterSet } = this.state;
        const fontProps = {
            ...fontSettings,
            characterSet,
            fontFamily,
            fontWeight
        };
        if (!fontAtlasManager.mapping) {
            fontAtlasManager.setProps(fontProps);
            return true;
        }
        for(const key in fontProps)if (fontProps[key] !== fontAtlasManager.props[key]) {
            fontAtlasManager.setProps(fontProps);
            return true;
        }
        return false;
    }
    _updateText() {
        var _attributes;
        const { data, characterSet } = this.props;
        const textBuffer = (_attributes = data.attributes) === null || _attributes === void 0 ? void 0 : _attributes.getText;
        let { getText } = this.props;
        let startIndices = data.startIndices;
        let numInstances;
        const autoCharacterSet = characterSet === 'auto' && new Set();
        if (textBuffer && startIndices) {
            const { texts, characterCount } = (0, _utils.getTextFromBuffer)({
                ...ArrayBuffer.isView(textBuffer) ? {
                    value: textBuffer
                } : textBuffer,
                length: data.length,
                startIndices,
                characterSet: autoCharacterSet
            });
            numInstances = characterCount;
            getText = (_, { index })=>texts[index];
        } else {
            const { iterable, objectInfo } = (0, _core.createIterable)(data);
            startIndices = [
                0
            ];
            numInstances = 0;
            for (const object of iterable){
                objectInfo.index++;
                const text = Array.from(getText(object, objectInfo) || '');
                if (autoCharacterSet) text.forEach(autoCharacterSet.add, autoCharacterSet);
                numInstances += text.length;
                startIndices.push(numInstances);
            }
        }
        this.setState({
            getText,
            startIndices,
            numInstances,
            characterSet: autoCharacterSet || characterSet
        });
    }
    transformParagraph(object, objectInfo) {
        const { fontAtlasManager } = this.state;
        const iconMapping = fontAtlasManager.mapping;
        const getText = this.state.getText;
        const { wordBreak, lineHeight, maxWidth } = this.props;
        const paragraph = getText(object, objectInfo) || '';
        return (0, _utils.transformParagraph)(paragraph, lineHeight, wordBreak, maxWidth * fontAtlasManager.props.fontSize, iconMapping);
    }
    renderLayers() {
        const { startIndices, numInstances, getText, fontAtlasManager: { scale, texture, mapping }, styleVersion } = this.state;
        const { data, _dataDiff, getPosition, getColor, getSize, getAngle, getPixelOffset, getBackgroundColor, getBorderColor, getBorderWidth, backgroundPadding, background, billboard, fontSettings, outlineWidth, outlineColor, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, transitions, updateTriggers } = this.props;
        const CharactersLayerClass = this.getSubLayerClass('characters', (0, _multiIconLayerDefault.default));
        const BackgroundLayerClass = this.getSubLayerClass('background', (0, _textBackgroundLayerDefault.default));
        return [
            background && new BackgroundLayerClass({
                getFillColor: getBackgroundColor,
                getLineColor: getBorderColor,
                getLineWidth: getBorderWidth,
                padding: backgroundPadding,
                getPosition,
                getSize,
                getAngle,
                getPixelOffset,
                billboard,
                sizeScale,
                sizeUnits,
                sizeMinPixels,
                sizeMaxPixels,
                transitions: transitions && {
                    getPosition: transitions.getPosition,
                    getAngle: transitions.getAngle,
                    getSize: transitions.getSize,
                    getFillColor: transitions.getBackgroundColor,
                    getLineColor: transitions.getBorderColor,
                    getLineWidth: transitions.getBorderWidth,
                    getPixelOffset: transitions.getPixelOffset
                }
            }, this.getSubLayerProps({
                id: 'background',
                updateTriggers: {
                    getPosition: updateTriggers.getPosition,
                    getAngle: updateTriggers.getAngle,
                    getSize: updateTriggers.getSize,
                    getFillColor: updateTriggers.getBackgroundColor,
                    getLineColor: updateTriggers.getBorderColor,
                    getLineWidth: updateTriggers.getBorderWidth,
                    getPixelOffset: updateTriggers.getPixelOffset,
                    getBoundingRect: {
                        getText: updateTriggers.getText,
                        getTextAnchor: updateTriggers.getTextAnchor,
                        getAlignmentBaseline: updateTriggers.getAlignmentBaseline,
                        styleVersion
                    }
                }
            }), {
                data: data.attributes && data.attributes.background ? {
                    length: data.length,
                    attributes: data.attributes.background
                } : data,
                _dataDiff,
                autoHighlight: false,
                getBoundingRect: this.getBoundingRect
            }),
            new CharactersLayerClass({
                sdf: fontSettings.sdf,
                smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : (0, _fontAtlasManager.DEFAULT_FONT_SETTINGS).smoothing,
                outlineWidth: outlineWidth / (fontSettings.radius || (0, _fontAtlasManager.DEFAULT_FONT_SETTINGS).radius),
                outlineColor,
                iconAtlas: texture,
                iconMapping: mapping,
                getPosition,
                getColor,
                getSize,
                getAngle,
                getPixelOffset,
                billboard,
                sizeScale: sizeScale * scale,
                sizeUnits,
                sizeMinPixels: sizeMinPixels * scale,
                sizeMaxPixels: sizeMaxPixels * scale,
                transitions: transitions && {
                    getPosition: transitions.getPosition,
                    getAngle: transitions.getAngle,
                    getColor: transitions.getColor,
                    getSize: transitions.getSize,
                    getPixelOffset: transitions.getPixelOffset
                }
            }, this.getSubLayerProps({
                id: 'characters',
                updateTriggers: {
                    all: updateTriggers.getText,
                    getPosition: updateTriggers.getPosition,
                    getAngle: updateTriggers.getAngle,
                    getColor: updateTriggers.getColor,
                    getSize: updateTriggers.getSize,
                    getPixelOffset: updateTriggers.getPixelOffset,
                    getIconOffsets: {
                        getTextAnchor: updateTriggers.getTextAnchor,
                        getAlignmentBaseline: updateTriggers.getAlignmentBaseline,
                        styleVersion
                    }
                }
            }), {
                data,
                _dataDiff,
                startIndices,
                numInstances,
                getIconOffsets: this.getIconOffsets,
                getIcon: getText
            })
        ];
    }
    static set fontAtlasCacheLimit(limit) {
        (0, _fontAtlasManager.setFontAtlasCacheLimit)(limit);
    }
}
exports.default = TextLayer;
(0, _definePropertyDefault.default)(TextLayer, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(TextLayer, "layerName", 'TextLayer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","./multi-icon-layer/multi-icon-layer":"dAsh1","./font-atlas-manager":"jedon","./utils":"gIX1K","./text-background-layer/text-background-layer":"bzdpF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dAsh1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _iconLayer = require("../../icon-layer/icon-layer");
var _iconLayerDefault = parcelHelpers.interopDefault(_iconLayer);
var _multiIconLayerFragmentGlsl = require("./multi-icon-layer-fragment.glsl");
var _multiIconLayerFragmentGlslDefault = parcelHelpers.interopDefault(_multiIconLayerFragmentGlsl);
const DEFAULT_BUFFER = 0.75;
const EMPTY_ARRAY = [];
const defaultProps = {
    getIconOffsets: {
        type: 'accessor',
        value: (x)=>x.offsets
    },
    alphaCutoff: 0.001,
    smoothing: 0.1,
    outlineWidth: 0,
    outlineColor: {
        type: 'color',
        value: [
            0,
            0,
            0,
            255
        ]
    }
};
class MultiIconLayer extends (0, _iconLayerDefault.default) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "state", void 0);
    }
    getShaders() {
        return {
            ...super.getShaders(),
            fs: (0, _multiIconLayerFragmentGlslDefault.default)
        };
    }
    initializeState() {
        super.initializeState();
        const attributeManager = this.getAttributeManager();
        attributeManager.addInstanced({
            instanceOffsets: {
                size: 2,
                accessor: 'getIconOffsets'
            },
            instancePickingColors: {
                type: 5121,
                size: 3,
                accessor: (object, { index, target: value })=>this.encodePickingColor(index, value)
            }
        });
    }
    updateState(params) {
        super.updateState(params);
        const { props, oldProps } = params;
        let { outlineColor } = props;
        if (outlineColor !== oldProps.outlineColor) {
            outlineColor = outlineColor.map((x)=>x / 255);
            outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;
            this.setState({
                outlineColor
            });
        }
        if (!props.sdf && props.outlineWidth) (0, _core.log).warn("".concat(this.id, ": fontSettings.sdf is required to render outline"))();
    }
    draw(params) {
        const { sdf, smoothing, outlineWidth } = this.props;
        const { outlineColor } = this.state;
        const outlineBuffer = outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1;
        params.uniforms = {
            ...params.uniforms,
            sdfBuffer: DEFAULT_BUFFER,
            outlineBuffer,
            gamma: smoothing,
            sdf: Boolean(sdf),
            outlineColor
        };
        super.draw(params);
        if (sdf && outlineWidth) {
            const { iconManager } = this.state;
            const iconsTexture = iconManager.getTexture();
            if (iconsTexture) this.state.model.draw({
                uniforms: {
                    outlineBuffer: DEFAULT_BUFFER
                }
            });
        }
    }
    getInstanceOffset(icons) {
        return icons ? Array.from(icons).flatMap((icon)=>super.getInstanceOffset(icon)) : EMPTY_ARRAY;
    }
    getInstanceColorMode(icons) {
        return 1;
    }
    getInstanceIconFrame(icons) {
        return icons ? Array.from(icons).flatMap((icon)=>super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;
    }
}
exports.default = MultiIconLayer;
(0, _definePropertyDefault.default)(MultiIconLayer, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(MultiIconLayer, "layerName", 'MultiIconLayer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","../../icon-layer/icon-layer":"irQVL","./multi-icon-layer-fragment.glsl":"sbwhJ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"sbwhJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME multi-icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float gamma;\nuniform bool sdf;\nuniform float alphaCutoff;\nuniform float sdfBuffer;\nuniform float outlineBuffer;\nuniform vec4 outlineColor;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  if (!picking_uActive) {\n    float alpha = texture2D(iconsTexture, vTextureCoords).a;\n    vec4 color = vColor;\n    if (sdf) {\n      float distance = alpha;\n      alpha = smoothstep(sdfBuffer - gamma, sdfBuffer + gamma, distance);\n\n      if (outlineBuffer > 0.0) {\n        float inFill = alpha;\n        float inBorder = smoothstep(outlineBuffer - gamma, outlineBuffer + gamma, distance);\n        color = mix(outlineColor, vColor, inFill);\n        alpha = inBorder;\n      }\n    }\n    float a = alpha * color.a;\n    \n    if (a < alphaCutoff) {\n      discard;\n    }\n\n    gl_FragColor = vec4(color.rgb, a * opacity);\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jedon":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_FONT_SETTINGS", ()=>DEFAULT_FONT_SETTINGS);
parcelHelpers.export(exports, "setFontAtlasCacheLimit", ()=>setFontAtlasCacheLimit);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _tinySdf = require("@mapbox/tiny-sdf");
var _tinySdfDefault = parcelHelpers.interopDefault(_tinySdf);
var _core = require("@deck.gl/core");
var _utils = require("./utils");
var _lruCache = require("./lru-cache");
var _lruCacheDefault = parcelHelpers.interopDefault(_lruCache);
function getDefaultCharacterSet() {
    const charSet = [];
    for(let i = 32; i < 128; i++)charSet.push(String.fromCharCode(i));
    return charSet;
}
const DEFAULT_FONT_SETTINGS = {
    fontFamily: 'Monaco, monospace',
    fontWeight: 'normal',
    characterSet: getDefaultCharacterSet(),
    fontSize: 64,
    buffer: 4,
    sdf: false,
    cutoff: 0.25,
    radius: 12,
    smoothing: 0.1
};
const MAX_CANVAS_WIDTH = 1024;
const BASELINE_SCALE = 0.9;
const HEIGHT_SCALE = 1.2;
const CACHE_LIMIT = 3;
let cache = new (0, _lruCacheDefault.default)(CACHE_LIMIT);
function getNewChars(cacheKey, characterSet) {
    let newCharSet;
    if (typeof characterSet === 'string') newCharSet = new Set(Array.from(characterSet));
    else newCharSet = new Set(characterSet);
    const cachedFontAtlas = cache.get(cacheKey);
    if (!cachedFontAtlas) return newCharSet;
    for(const char in cachedFontAtlas.mapping)if (newCharSet.has(char)) newCharSet.delete(char);
    return newCharSet;
}
function populateAlphaChannel(alphaChannel, imageData) {
    for(let i = 0; i < alphaChannel.length; i++)imageData.data[4 * i + 3] = alphaChannel[i];
}
function setTextStyle(ctx, fontFamily, fontSize, fontWeight) {
    ctx.font = "".concat(fontWeight, " ").concat(fontSize, "px ").concat(fontFamily);
    ctx.fillStyle = '#000';
    ctx.textBaseline = 'alphabetic';
    ctx.textAlign = 'left';
}
function setFontAtlasCacheLimit(limit) {
    (0, _core.log).assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');
    cache = new (0, _lruCacheDefault.default)(limit);
}
class FontAtlasManager {
    constructor(){
        (0, _definePropertyDefault.default)(this, "props", {
            ...DEFAULT_FONT_SETTINGS
        });
        (0, _definePropertyDefault.default)(this, "_key", void 0);
        (0, _definePropertyDefault.default)(this, "_atlas", void 0);
    }
    get texture() {
        return this._atlas;
    }
    get mapping() {
        return this._atlas && this._atlas.mapping;
    }
    get scale() {
        const { fontSize, buffer } = this.props;
        return (fontSize * HEIGHT_SCALE + buffer * 2) / fontSize;
    }
    setProps(props = {}) {
        Object.assign(this.props, props);
        this._key = this._getKey();
        const charSet = getNewChars(this._key, this.props.characterSet);
        const cachedFontAtlas = cache.get(this._key);
        if (cachedFontAtlas && charSet.size === 0) {
            if (this._atlas !== cachedFontAtlas) this._atlas = cachedFontAtlas;
            return;
        }
        const fontAtlas = this._generateFontAtlas(charSet, cachedFontAtlas);
        this._atlas = fontAtlas;
        cache.set(this._key, fontAtlas);
    }
    _generateFontAtlas(characterSet, cachedFontAtlas) {
        const { fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff } = this.props;
        let canvas = cachedFontAtlas && cachedFontAtlas.data;
        if (!canvas) {
            canvas = document.createElement('canvas');
            canvas.width = MAX_CANVAS_WIDTH;
        }
        const ctx = canvas.getContext('2d', {
            willReadFrequently: true
        });
        setTextStyle(ctx, fontFamily, fontSize, fontWeight);
        const { mapping, canvasHeight, xOffset, yOffset } = (0, _utils.buildMapping)({
            getFontWidth: (char)=>ctx.measureText(char).width,
            fontHeight: fontSize * HEIGHT_SCALE,
            buffer,
            characterSet,
            maxCanvasWidth: MAX_CANVAS_WIDTH,
            ...cachedFontAtlas && {
                mapping: cachedFontAtlas.mapping,
                xOffset: cachedFontAtlas.xOffset,
                yOffset: cachedFontAtlas.yOffset
            }
        });
        if (canvas.height !== canvasHeight) {
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            canvas.height = canvasHeight;
            ctx.putImageData(imageData, 0, 0);
        }
        setTextStyle(ctx, fontFamily, fontSize, fontWeight);
        if (sdf) {
            const tinySDF = new (0, _tinySdfDefault.default)({
                fontSize,
                buffer,
                radius,
                cutoff,
                fontFamily,
                fontWeight: "".concat(fontWeight)
            });
            for (const char of characterSet){
                const { data, width, height, glyphTop } = tinySDF.draw(char);
                mapping[char].width = width;
                mapping[char].layoutOffsetY = fontSize * BASELINE_SCALE - glyphTop;
                const imageData = ctx.createImageData(width, height);
                populateAlphaChannel(data, imageData);
                ctx.putImageData(imageData, mapping[char].x, mapping[char].y);
            }
        } else for (const char of characterSet)ctx.fillText(char, mapping[char].x, mapping[char].y + buffer + fontSize * BASELINE_SCALE);
        return {
            xOffset,
            yOffset,
            mapping,
            data: canvas,
            width: canvas.width,
            height: canvas.height
        };
    }
    _getKey() {
        const { fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff } = this.props;
        if (sdf) return "".concat(fontFamily, " ").concat(fontWeight, " ").concat(fontSize, " ").concat(buffer, " ").concat(radius, " ").concat(cutoff);
        return "".concat(fontFamily, " ").concat(fontWeight, " ").concat(fontSize, " ").concat(buffer);
    }
}
exports.default = FontAtlasManager;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@mapbox/tiny-sdf":"98Kso","@deck.gl/core":"9zfJz","./utils":"gIX1K","./lru-cache":"gCicn","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"98Kso":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const INF = 1e20;
class TinySDF {
    constructor({ fontSize = 24, buffer = 3, radius = 8, cutoff = 0.25, fontFamily = 'sans-serif', fontWeight = 'normal', fontStyle = 'normal' } = {}){
        this.buffer = buffer;
        this.cutoff = cutoff;
        this.radius = radius;
        // make the canvas size big enough to both have the specified buffer around the glyph
        // for "halo", and account for some glyphs possibly being larger than their font size
        const size = this.size = fontSize + buffer * 4;
        const canvas = this._createCanvas(size);
        const ctx = this.ctx = canvas.getContext('2d', {
            willReadFrequently: true
        });
        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;
        ctx.textBaseline = 'alphabetic';
        ctx.textAlign = 'left'; // Necessary so that RTL text doesn't have different alignment
        ctx.fillStyle = 'black';
        // temporary arrays for the distance transform
        this.gridOuter = new Float64Array(size * size);
        this.gridInner = new Float64Array(size * size);
        this.f = new Float64Array(size);
        this.z = new Float64Array(size + 1);
        this.v = new Uint16Array(size);
    }
    _createCanvas(size) {
        const canvas = document.createElement('canvas');
        canvas.width = canvas.height = size;
        return canvas;
    }
    draw(char) {
        const { width: glyphAdvance, actualBoundingBoxAscent, actualBoundingBoxDescent, actualBoundingBoxLeft, actualBoundingBoxRight } = this.ctx.measureText(char);
        // The integer/pixel part of the top alignment is encoded in metrics.glyphTop
        // The remainder is implicitly encoded in the rasterization
        const glyphTop = Math.ceil(actualBoundingBoxAscent);
        const glyphLeft = 0;
        // If the glyph overflows the canvas size, it will be clipped at the bottom/right
        const glyphWidth = Math.max(0, Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft)));
        const glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));
        const width = glyphWidth + 2 * this.buffer;
        const height = glyphHeight + 2 * this.buffer;
        const len = Math.max(width * height, 0);
        const data = new Uint8ClampedArray(len);
        const glyph = {
            data,
            width,
            height,
            glyphWidth,
            glyphHeight,
            glyphTop,
            glyphLeft,
            glyphAdvance
        };
        if (glyphWidth === 0 || glyphHeight === 0) return glyph;
        const { ctx, buffer, gridInner, gridOuter } = this;
        ctx.clearRect(buffer, buffer, glyphWidth, glyphHeight);
        ctx.fillText(char, buffer, buffer + glyphTop);
        const imgData = ctx.getImageData(buffer, buffer, glyphWidth, glyphHeight);
        // Initialize grids outside the glyph range to alpha 0
        gridOuter.fill(INF, 0, len);
        gridInner.fill(0, 0, len);
        for(let y = 0; y < glyphHeight; y++)for(let x = 0; x < glyphWidth; x++){
            const a = imgData.data[4 * (y * glyphWidth + x) + 3] / 255; // alpha value
            if (a === 0) continue; // empty pixels
            const j = (y + buffer) * width + x + buffer;
            if (a === 1) {
                gridOuter[j] = 0;
                gridInner[j] = INF;
            } else {
                const d = 0.5 - a;
                gridOuter[j] = d > 0 ? d * d : 0;
                gridInner[j] = d < 0 ? d * d : 0;
            }
        }
        edt(gridOuter, 0, 0, width, height, width, this.f, this.v, this.z);
        edt(gridInner, buffer, buffer, glyphWidth, glyphHeight, width, this.f, this.v, this.z);
        for(let i = 0; i < len; i++){
            const d = Math.sqrt(gridOuter[i]) - Math.sqrt(gridInner[i]);
            data[i] = Math.round(255 - 255 * (d / this.radius + this.cutoff));
        }
        return glyph;
    }
}
exports.default = TinySDF;
// 2D Euclidean squared distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf
function edt(data, x0, y0, width, height, gridSize, f, v, z) {
    for(let x = x0; x < x0 + width; x++)edt1d(data, y0 * gridSize + x, gridSize, height, f, v, z);
    for(let y = y0; y < y0 + height; y++)edt1d(data, y * gridSize + x0, 1, width, f, v, z);
}
// 1D squared distance transform
function edt1d(grid, offset, stride, length, f, v, z) {
    v[0] = 0;
    z[0] = -INF;
    z[1] = INF;
    f[0] = grid[offset];
    for(let q = 1, k = 0, s = 0; q < length; q++){
        f[q] = grid[offset + q * stride];
        const q2 = q * q;
        do {
            const r = v[k];
            s = (f[q] - f[r] + q2 - r * r) / (q - r) / 2;
        }while (s <= z[k] && --k > -1);
        k++;
        v[k] = q;
        z[k] = s;
        z[k + 1] = INF;
    }
    for(let q = 0, k = 0; q < length; q++){
        while(z[k + 1] < q)k++;
        const r = v[k];
        const qr = q - r;
        grid[offset + q * stride] = f[r] + qr * qr;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gIX1K":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextPowOfTwo", ()=>nextPowOfTwo);
parcelHelpers.export(exports, "buildMapping", ()=>buildMapping);
parcelHelpers.export(exports, "autoWrapping", ()=>autoWrapping);
parcelHelpers.export(exports, "transformParagraph", ()=>transformParagraph);
parcelHelpers.export(exports, "getTextFromBuffer", ()=>getTextFromBuffer);
var _core = require("@deck.gl/core");
const MISSING_CHAR_WIDTH = 32;
const SINGLE_LINE = [];
function nextPowOfTwo(number) {
    return Math.pow(2, Math.ceil(Math.log2(number)));
}
function buildMapping({ characterSet, getFontWidth, fontHeight, buffer, maxCanvasWidth, mapping = {}, xOffset = 0, yOffset = 0 }) {
    let row = 0;
    let x = xOffset;
    const rowHeight = fontHeight + buffer * 2;
    for (const char of characterSet)if (!mapping[char]) {
        const width = getFontWidth(char);
        if (x + width + buffer * 2 > maxCanvasWidth) {
            x = 0;
            row++;
        }
        mapping[char] = {
            x: x + buffer,
            y: yOffset + row * rowHeight + buffer,
            width,
            height: rowHeight,
            layoutWidth: width,
            layoutHeight: fontHeight
        };
        x += width + buffer * 2;
    }
    return {
        mapping,
        xOffset: x,
        yOffset: yOffset + row * rowHeight,
        canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)
    };
}
function getTextWidth(text, startIndex, endIndex, mapping) {
    let width = 0;
    for(let i = startIndex; i < endIndex; i++){
        var _mapping$character;
        const character = text[i];
        width += ((_mapping$character = mapping[character]) === null || _mapping$character === void 0 ? void 0 : _mapping$character.layoutWidth) || 0;
    }
    return width;
}
function breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target) {
    let rowStartCharIndex = startIndex;
    let rowOffsetLeft = 0;
    for(let i = startIndex; i < endIndex; i++){
        const textWidth = getTextWidth(text, i, i + 1, iconMapping);
        if (rowOffsetLeft + textWidth > maxWidth) {
            if (rowStartCharIndex < i) target.push(i);
            rowStartCharIndex = i;
            rowOffsetLeft = 0;
        }
        rowOffsetLeft += textWidth;
    }
    return rowOffsetLeft;
}
function breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target) {
    let rowStartCharIndex = startIndex;
    let groupStartCharIndex = startIndex;
    let groupEndCharIndex = startIndex;
    let rowOffsetLeft = 0;
    for(let i = startIndex; i < endIndex; i++){
        if (text[i] === ' ') groupEndCharIndex = i + 1;
        else if (text[i + 1] === ' ' || i + 1 === endIndex) groupEndCharIndex = i + 1;
        if (groupEndCharIndex > groupStartCharIndex) {
            let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);
            if (rowOffsetLeft + groupWidth > maxWidth) {
                if (rowStartCharIndex < groupStartCharIndex) {
                    target.push(groupStartCharIndex);
                    rowStartCharIndex = groupStartCharIndex;
                    rowOffsetLeft = 0;
                }
                if (groupWidth > maxWidth) {
                    groupWidth = breakAll(text, groupStartCharIndex, groupEndCharIndex, maxWidth, iconMapping, target);
                    rowStartCharIndex = target[target.length - 1];
                }
            }
            groupStartCharIndex = groupEndCharIndex;
            rowOffsetLeft += groupWidth;
        }
    }
    return rowOffsetLeft;
}
function autoWrapping(text, wordBreak, maxWidth, iconMapping, startIndex = 0, endIndex) {
    if (endIndex === undefined) endIndex = text.length;
    const result = [];
    if (wordBreak === 'break-all') breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);
    else breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);
    return result;
}
function transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {
    let x = 0;
    let rowHeight = 0;
    for(let i = startIndex; i < endIndex; i++){
        const character = line[i];
        const frame = iconMapping[character];
        if (frame) {
            if (!rowHeight) rowHeight = frame.layoutHeight;
            leftOffsets[i] = x + frame.layoutWidth / 2;
            x += frame.layoutWidth;
        } else {
            (0, _core.log).warn("Missing character: ".concat(character, " (").concat(character.codePointAt(0), ")"))();
            leftOffsets[i] = x;
            x += MISSING_CHAR_WIDTH;
        }
    }
    rowSize[0] = x;
    rowSize[1] = rowHeight;
}
function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {
    const characters = Array.from(paragraph);
    const numCharacters = characters.length;
    const x = new Array(numCharacters);
    const y = new Array(numCharacters);
    const rowWidth = new Array(numCharacters);
    const autoWrappingEnabled = (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;
    const size = [
        0,
        0
    ];
    const rowSize = [
        0,
        0
    ];
    let rowOffsetTop = 0;
    let lineStartIndex = 0;
    let lineEndIndex = 0;
    for(let i = 0; i <= numCharacters; i++){
        const char = characters[i];
        if (char === '\n' || i === numCharacters) lineEndIndex = i;
        if (lineEndIndex > lineStartIndex) {
            const rows = autoWrappingEnabled ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex) : SINGLE_LINE;
            for(let rowIndex = 0; rowIndex <= rows.length; rowIndex++){
                const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];
                const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;
                transformRow(characters, rowStart, rowEnd, iconMapping, x, rowSize);
                for(let j = rowStart; j < rowEnd; j++){
                    var _iconMapping$char;
                    const char = characters[j];
                    const layoutOffsetY = ((_iconMapping$char = iconMapping[char]) === null || _iconMapping$char === void 0 ? void 0 : _iconMapping$char.layoutOffsetY) || 0;
                    y[j] = rowOffsetTop + rowSize[1] / 2 + layoutOffsetY;
                    rowWidth[j] = rowSize[0];
                }
                rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;
                size[0] = Math.max(size[0], rowSize[0]);
            }
            lineStartIndex = lineEndIndex;
        }
        if (char === '\n') {
            x[lineStartIndex] = 0;
            y[lineStartIndex] = 0;
            rowWidth[lineStartIndex] = 0;
            lineStartIndex++;
        }
    }
    size[1] = rowOffsetTop;
    return {
        x,
        y,
        rowWidth,
        size
    };
}
function getTextFromBuffer({ value, length, stride, offset, startIndices, characterSet }) {
    const bytesPerElement = value.BYTES_PER_ELEMENT;
    const elementStride = stride ? stride / bytesPerElement : 1;
    const elementOffset = offset ? offset / bytesPerElement : 0;
    const characterCount = startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);
    const autoCharacterSet = characterSet && new Set();
    const texts = new Array(length);
    let codes = value;
    if (elementStride > 1 || elementOffset > 0) {
        const ArrayType = value.constructor;
        codes = new ArrayType(characterCount);
        for(let i = 0; i < characterCount; i++)codes[i] = value[i * elementStride + elementOffset];
    }
    for(let index = 0; index < length; index++){
        const startIndex = startIndices[index];
        const endIndex = startIndices[index + 1] || characterCount;
        const codesAtIndex = codes.subarray(startIndex, endIndex);
        texts[index] = String.fromCodePoint.apply(null, codesAtIndex);
        if (autoCharacterSet) codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);
    }
    if (autoCharacterSet) for (const charCode of autoCharacterSet)characterSet.add(String.fromCodePoint(charCode));
    return {
        texts,
        characterCount
    };
}

},{"@deck.gl/core":"9zfJz","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gCicn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
class LRUCache {
    constructor(limit = 5){
        (0, _definePropertyDefault.default)(this, "limit", void 0);
        (0, _definePropertyDefault.default)(this, "_cache", {});
        (0, _definePropertyDefault.default)(this, "_order", []);
        this.limit = limit;
    }
    get(key) {
        const value = this._cache[key];
        if (value) {
            this._deleteOrder(key);
            this._appendOrder(key);
        }
        return value;
    }
    set(key, value) {
        if (!this._cache[key]) {
            if (Object.keys(this._cache).length === this.limit) this.delete(this._order[0]);
            this._cache[key] = value;
            this._appendOrder(key);
        } else {
            this.delete(key);
            this._cache[key] = value;
            this._appendOrder(key);
        }
    }
    delete(key) {
        const value = this._cache[key];
        if (value) {
            delete this._cache[key];
            this._deleteOrder(key);
        }
    }
    _deleteOrder(key) {
        const index = this._order.indexOf(key);
        if (index >= 0) this._order.splice(index, 1);
    }
    _appendOrder(key) {
        this._order.push(key);
    }
}
exports.default = LRUCache;

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bzdpF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _core1 = require("@luma.gl/core");
var _textBackgroundLayerVertexGlsl = require("./text-background-layer-vertex.glsl");
var _textBackgroundLayerVertexGlslDefault = parcelHelpers.interopDefault(_textBackgroundLayerVertexGlsl);
var _textBackgroundLayerFragmentGlsl = require("./text-background-layer-fragment.glsl");
var _textBackgroundLayerFragmentGlslDefault = parcelHelpers.interopDefault(_textBackgroundLayerFragmentGlsl);
const defaultProps = {
    billboard: true,
    sizeScale: 1,
    sizeUnits: 'pixels',
    sizeMinPixels: 0,
    sizeMaxPixels: Number.MAX_SAFE_INTEGER,
    padding: {
        type: 'array',
        value: [
            0,
            0,
            0,
            0
        ]
    },
    getPosition: {
        type: 'accessor',
        value: (x)=>x.position
    },
    getSize: {
        type: 'accessor',
        value: 1
    },
    getAngle: {
        type: 'accessor',
        value: 0
    },
    getPixelOffset: {
        type: 'accessor',
        value: [
            0,
            0
        ]
    },
    getBoundingRect: {
        type: 'accessor',
        value: [
            0,
            0,
            0,
            0
        ]
    },
    getFillColor: {
        type: 'accessor',
        value: [
            0,
            0,
            0,
            255
        ]
    },
    getLineColor: {
        type: 'accessor',
        value: [
            0,
            0,
            0,
            255
        ]
    },
    getLineWidth: {
        type: 'accessor',
        value: 1
    }
};
class TextBackgroundLayer extends (0, _core.Layer) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "state", void 0);
    }
    getShaders() {
        return super.getShaders({
            vs: (0, _textBackgroundLayerVertexGlslDefault.default),
            fs: (0, _textBackgroundLayerFragmentGlslDefault.default),
            modules: [
                (0, _core.project32),
                (0, _core.picking)
            ]
        });
    }
    initializeState() {
        this.getAttributeManager().addInstanced({
            instancePositions: {
                size: 3,
                type: 5130,
                fp64: this.use64bitPositions(),
                transition: true,
                accessor: 'getPosition'
            },
            instanceSizes: {
                size: 1,
                transition: true,
                accessor: 'getSize',
                defaultValue: 1
            },
            instanceAngles: {
                size: 1,
                transition: true,
                accessor: 'getAngle'
            },
            instanceRects: {
                size: 4,
                accessor: 'getBoundingRect'
            },
            instancePixelOffsets: {
                size: 2,
                transition: true,
                accessor: 'getPixelOffset'
            },
            instanceFillColors: {
                size: 4,
                transition: true,
                normalized: true,
                type: 5121,
                accessor: 'getFillColor',
                defaultValue: [
                    0,
                    0,
                    0,
                    255
                ]
            },
            instanceLineColors: {
                size: 4,
                transition: true,
                normalized: true,
                type: 5121,
                accessor: 'getLineColor',
                defaultValue: [
                    0,
                    0,
                    0,
                    255
                ]
            },
            instanceLineWidths: {
                size: 1,
                transition: true,
                accessor: 'getLineWidth',
                defaultValue: 1
            }
        });
    }
    updateState(params) {
        super.updateState(params);
        const { changeFlags } = params;
        if (changeFlags.extensionsChanged) {
            var _this$state$model;
            const { gl } = this.context;
            (_this$state$model = this.state.model) === null || _this$state$model === void 0 || _this$state$model.delete();
            this.state.model = this._getModel(gl);
            this.getAttributeManager().invalidateAll();
        }
    }
    draw({ uniforms }) {
        const { billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth } = this.props;
        let { padding } = this.props;
        if (padding.length < 4) padding = [
            padding[0],
            padding[1],
            padding[0],
            padding[1]
        ];
        this.state.model.setUniforms(uniforms).setUniforms({
            billboard,
            stroked: Boolean(getLineWidth),
            padding,
            sizeUnits: (0, _core.UNIT)[sizeUnits],
            sizeScale,
            sizeMinPixels,
            sizeMaxPixels
        }).draw();
    }
    _getModel(gl) {
        const positions = [
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            1
        ];
        return new (0, _core1.Model)(gl, {
            ...this.getShaders(),
            id: this.props.id,
            geometry: new (0, _core1.Geometry)({
                drawMode: 6,
                vertexCount: 4,
                attributes: {
                    positions: {
                        size: 2,
                        value: new Float32Array(positions)
                    }
                }
            }),
            isInstanced: true
        });
    }
}
exports.default = TextBackgroundLayer;
(0, _definePropertyDefault.default)(TextBackgroundLayer, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(TextBackgroundLayer, "layerName", 'TextBackgroundLayer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","@luma.gl/core":"9rnrC","./text-background-layer-vertex.glsl":"cybdb","./text-background-layer-fragment.glsl":"6nZmL","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cybdb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME text-background-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute vec4 instanceRects;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec2 instancePixelOffsets;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform bool billboard;\nuniform float opacity;\nuniform float sizeScale;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform vec4 padding;\nuniform int sizeUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = radians(angle);\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n  vLineWidth = instanceLineWidths;\n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits),\n    sizeMinPixels, sizeMaxPixels\n  );\n\n  dimensions = instanceRects.zw * sizePixels + padding.xy + padding.zw;\n\n  vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-padding.xy, padding.zw, positions);\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);\n  pixelOffset += instancePixelOffsets;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6nZmL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME text-background-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool stroked;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec2 pixelPosition = uv * dimensions;\n  if (stroked) {\n    float distToEdge = min(\n      min(pixelPosition.x, dimensions.x - pixelPosition.x),\n      min(pixelPosition.y, dimensions.y - pixelPosition.y)\n    );\n    float isBorder = smoothedge(distToEdge, vLineWidth);\n    gl_FragColor = mix(vFillColor, vLineColor, isBorder);\n  } else {\n    gl_FragColor = vFillColor;\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"76rlq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _core = require("@deck.gl/core");
var _core1 = require("@luma.gl/core");
var _polygonTesselator = require("./polygon-tesselator");
var _polygonTesselatorDefault = parcelHelpers.interopDefault(_polygonTesselator);
var _solidPolygonLayerVertexTopGlsl = require("./solid-polygon-layer-vertex-top.glsl");
var _solidPolygonLayerVertexTopGlslDefault = parcelHelpers.interopDefault(_solidPolygonLayerVertexTopGlsl);
var _solidPolygonLayerVertexSideGlsl = require("./solid-polygon-layer-vertex-side.glsl");
var _solidPolygonLayerVertexSideGlslDefault = parcelHelpers.interopDefault(_solidPolygonLayerVertexSideGlsl);
var _solidPolygonLayerFragmentGlsl = require("./solid-polygon-layer-fragment.glsl");
var _solidPolygonLayerFragmentGlslDefault = parcelHelpers.interopDefault(_solidPolygonLayerFragmentGlsl);
const DEFAULT_COLOR = [
    0,
    0,
    0,
    255
];
const defaultProps = {
    filled: true,
    extruded: false,
    wireframe: false,
    _normalize: true,
    _windingOrder: 'CW',
    _full3d: false,
    elevationScale: {
        type: 'number',
        min: 0,
        value: 1
    },
    getPolygon: {
        type: 'accessor',
        value: (f)=>f.polygon
    },
    getElevation: {
        type: 'accessor',
        value: 1000
    },
    getFillColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    getLineColor: {
        type: 'accessor',
        value: DEFAULT_COLOR
    },
    material: true
};
const ATTRIBUTE_TRANSITION = {
    enter: (value, chunk)=>{
        return chunk.length ? chunk.subarray(chunk.length - value.length) : value;
    }
};
class SolidPolygonLayer extends (0, _core.Layer) {
    constructor(...args){
        super(...args);
        (0, _definePropertyDefault.default)(this, "state", void 0);
    }
    getShaders(type) {
        return super.getShaders({
            vs: type === 'top' ? (0, _solidPolygonLayerVertexTopGlslDefault.default) : (0, _solidPolygonLayerVertexSideGlslDefault.default),
            fs: (0, _solidPolygonLayerFragmentGlslDefault.default),
            defines: {
                RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1
            },
            modules: [
                (0, _core.project32),
                (0, _core.gouraudLighting),
                (0, _core.picking)
            ]
        });
    }
    get wrapLongitude() {
        return false;
    }
    initializeState() {
        const { gl, viewport } = this.context;
        let { coordinateSystem } = this.props;
        const { _full3d } = this.props;
        if (viewport.isGeospatial && coordinateSystem === (0, _core.COORDINATE_SYSTEM).DEFAULT) coordinateSystem = (0, _core.COORDINATE_SYSTEM).LNGLAT;
        let preproject;
        if (coordinateSystem === (0, _core.COORDINATE_SYSTEM).LNGLAT) {
            if (_full3d) preproject = viewport.projectPosition.bind(viewport);
            else preproject = viewport.projectFlat.bind(viewport);
        }
        this.setState({
            numInstances: 0,
            polygonTesselator: new (0, _polygonTesselatorDefault.default)({
                preproject,
                fp64: this.use64bitPositions(),
                IndexType: !gl || (0, _core1.hasFeatures)(gl, (0, _core1.FEATURES).ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array
            })
        });
        const attributeManager = this.getAttributeManager();
        const noAlloc = true;
        attributeManager.remove([
            'instancePickingColors'
        ]);
        attributeManager.add({
            indices: {
                size: 1,
                isIndexed: true,
                update: this.calculateIndices,
                noAlloc
            },
            positions: {
                size: 3,
                type: 5130,
                fp64: this.use64bitPositions(),
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getPolygon',
                update: this.calculatePositions,
                noAlloc,
                shaderAttributes: {
                    positions: {
                        vertexOffset: 0,
                        divisor: 0
                    },
                    instancePositions: {
                        vertexOffset: 0,
                        divisor: 1
                    },
                    nextPositions: {
                        vertexOffset: 1,
                        divisor: 1
                    }
                }
            },
            vertexValid: {
                size: 1,
                divisor: 1,
                type: 5121,
                update: this.calculateVertexValid,
                noAlloc
            },
            elevations: {
                size: 1,
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getElevation',
                shaderAttributes: {
                    elevations: {
                        divisor: 0
                    },
                    instanceElevations: {
                        divisor: 1
                    }
                }
            },
            fillColors: {
                size: this.props.colorFormat.length,
                type: 5121,
                normalized: true,
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getFillColor',
                defaultValue: DEFAULT_COLOR,
                shaderAttributes: {
                    fillColors: {
                        divisor: 0
                    },
                    instanceFillColors: {
                        divisor: 1
                    }
                }
            },
            lineColors: {
                size: this.props.colorFormat.length,
                type: 5121,
                normalized: true,
                transition: ATTRIBUTE_TRANSITION,
                accessor: 'getLineColor',
                defaultValue: DEFAULT_COLOR,
                shaderAttributes: {
                    lineColors: {
                        divisor: 0
                    },
                    instanceLineColors: {
                        divisor: 1
                    }
                }
            },
            pickingColors: {
                size: 3,
                type: 5121,
                accessor: (object, { index, target: value })=>this.encodePickingColor(object && object.__source ? object.__source.index : index, value),
                shaderAttributes: {
                    pickingColors: {
                        divisor: 0
                    },
                    instancePickingColors: {
                        divisor: 1
                    }
                }
            }
        });
    }
    getPickingInfo(params) {
        const info = super.getPickingInfo(params);
        const { index } = info;
        const { data } = this.props;
        if (data[0] && data[0].__source) info.object = data.find((d)=>d.__source.index === index);
        return info;
    }
    disablePickingIndex(objectIndex) {
        const { data } = this.props;
        if (data[0] && data[0].__source) {
            for(let i = 0; i < data.length; i++)if (data[i].__source.index === objectIndex) this._disablePickingIndex(i);
        } else super.disablePickingIndex(objectIndex);
    }
    draw({ uniforms }) {
        const { extruded, filled, wireframe, elevationScale } = this.props;
        const { topModel, sideModel, polygonTesselator } = this.state;
        const renderUniforms = {
            ...uniforms,
            extruded: Boolean(extruded),
            elevationScale
        };
        if (sideModel) {
            sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);
            sideModel.setUniforms(renderUniforms);
            if (wireframe) {
                sideModel.setDrawMode(3);
                sideModel.setUniforms({
                    isWireframe: true
                }).draw();
            }
            if (filled) {
                sideModel.setDrawMode(6);
                sideModel.setUniforms({
                    isWireframe: false
                }).draw();
            }
        }
        if (topModel) {
            topModel.setVertexCount(polygonTesselator.vertexCount);
            topModel.setUniforms(renderUniforms).draw();
        }
    }
    updateState(updateParams) {
        super.updateState(updateParams);
        this.updateGeometry(updateParams);
        const { props, oldProps, changeFlags } = updateParams;
        const attributeManager = this.getAttributeManager();
        const regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;
        if (regenerateModels) {
            var _this$state$models;
            (_this$state$models = this.state.models) === null || _this$state$models === void 0 || _this$state$models.forEach((model)=>model.delete());
            this.setState(this._getModels(this.context.gl));
            attributeManager.invalidateAll();
        }
    }
    updateGeometry({ props, oldProps, changeFlags }) {
        const geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);
        if (geometryConfigChanged) {
            const { polygonTesselator } = this.state;
            const buffers = props.data.attributes || {};
            polygonTesselator.updateGeometry({
                data: props.data,
                normalize: props._normalize,
                geometryBuffer: buffers.getPolygon,
                buffers,
                getGeometry: props.getPolygon,
                positionFormat: props.positionFormat,
                wrapLongitude: props.wrapLongitude,
                resolution: this.context.viewport.resolution,
                fp64: this.use64bitPositions(),
                dataChanged: changeFlags.dataChanged,
                full3d: props._full3d
            });
            this.setState({
                numInstances: polygonTesselator.instanceCount,
                startIndices: polygonTesselator.vertexStarts
            });
            if (!changeFlags.dataChanged) this.getAttributeManager().invalidateAll();
        }
    }
    _getModels(gl) {
        const { id, filled, extruded } = this.props;
        let topModel;
        let sideModel;
        if (filled) {
            const shaders = this.getShaders('top');
            shaders.defines.NON_INSTANCED_MODEL = 1;
            topModel = new (0, _core1.Model)(gl, {
                ...shaders,
                id: "".concat(id, "-top"),
                drawMode: 4,
                attributes: {
                    vertexPositions: new Float32Array([
                        0,
                        1
                    ])
                },
                uniforms: {
                    isWireframe: false,
                    isSideVertex: false
                },
                vertexCount: 0,
                isIndexed: true
            });
        }
        if (extruded) {
            sideModel = new (0, _core1.Model)(gl, {
                ...this.getShaders('side'),
                id: "".concat(id, "-side"),
                geometry: new (0, _core1.Geometry)({
                    drawMode: 1,
                    vertexCount: 4,
                    attributes: {
                        vertexPositions: {
                            size: 2,
                            value: new Float32Array([
                                1,
                                0,
                                0,
                                0,
                                0,
                                1,
                                1,
                                1
                            ])
                        }
                    }
                }),
                instanceCount: 0,
                isInstanced: 1
            });
            sideModel.userData.excludeAttributes = {
                indices: true
            };
        }
        return {
            models: [
                sideModel,
                topModel
            ].filter(Boolean),
            topModel,
            sideModel
        };
    }
    calculateIndices(attribute) {
        const { polygonTesselator } = this.state;
        attribute.startIndices = polygonTesselator.indexStarts;
        attribute.value = polygonTesselator.get('indices');
    }
    calculatePositions(attribute) {
        const { polygonTesselator } = this.state;
        attribute.startIndices = polygonTesselator.vertexStarts;
        attribute.value = polygonTesselator.get('positions');
    }
    calculateVertexValid(attribute) {
        attribute.value = this.state.polygonTesselator.get('vertexValid');
    }
}
exports.default = SolidPolygonLayer;
(0, _definePropertyDefault.default)(SolidPolygonLayer, "defaultProps", defaultProps);
(0, _definePropertyDefault.default)(SolidPolygonLayer, "layerName", 'SolidPolygonLayer');

},{"@babel/runtime/helpers/esm/defineProperty":"9ZxLF","@deck.gl/core":"9zfJz","@luma.gl/core":"9rnrC","./polygon-tesselator":"kzPyf","./solid-polygon-layer-vertex-top.glsl":"jz3Bf","./solid-polygon-layer-vertex-side.glsl":"hnjPz","./solid-polygon-layer-fragment.glsl":"gyTx0","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kzPyf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _polygon = require("./polygon");
var _core = require("@deck.gl/core");
var _polygon1 = require("@math.gl/polygon");
class PolygonTesselator extends (0, _core.Tesselator) {
    constructor(opts){
        const { fp64, IndexType = Uint32Array } = opts;
        super({
            ...opts,
            attributes: {
                positions: {
                    size: 3,
                    type: fp64 ? Float64Array : Float32Array
                },
                vertexValid: {
                    type: Uint8ClampedArray,
                    size: 1
                },
                indices: {
                    type: IndexType,
                    size: 1
                }
            }
        });
    }
    get(attributeName) {
        const { attributes } = this;
        if (attributeName === 'indices') return attributes.indices && attributes.indices.subarray(0, this.vertexCount);
        return attributes[attributeName];
    }
    updateGeometry(opts) {
        super.updateGeometry(opts);
        const externalIndices = this.buffers.indices;
        if (externalIndices) this.vertexCount = (externalIndices.value || externalIndices).length;
        else if (this.data && !this.getGeometry) throw new Error('missing indices buffer');
    }
    normalizeGeometry(polygon) {
        if (this.normalize) {
            const normalizedPolygon = _polygon.normalize(polygon, this.positionSize);
            if (this.opts.resolution) return (0, _polygon1.cutPolygonByGrid)(_polygon.getPositions(normalizedPolygon), _polygon.getHoleIndices(normalizedPolygon), {
                size: this.positionSize,
                gridResolution: this.opts.resolution,
                edgeTypes: true
            });
            if (this.opts.wrapLongitude) return (0, _polygon1.cutPolygonByMercatorBounds)(_polygon.getPositions(normalizedPolygon), _polygon.getHoleIndices(normalizedPolygon), {
                size: this.positionSize,
                maxLatitude: 86,
                edgeTypes: true
            });
            return normalizedPolygon;
        }
        return polygon;
    }
    getGeometrySize(polygon) {
        if (isCut(polygon)) {
            let size = 0;
            for (const subPolygon of polygon)size += this.getGeometrySize(subPolygon);
            return size;
        }
        return _polygon.getPositions(polygon).length / this.positionSize;
    }
    getGeometryFromBuffer(buffer) {
        if (this.normalize || !this.buffers.indices) return super.getGeometryFromBuffer(buffer);
        return null;
    }
    updateGeometryAttributes(polygon, context) {
        if (polygon && isCut(polygon)) for (const subPolygon of polygon){
            const geometrySize = this.getGeometrySize(subPolygon);
            context.geometrySize = geometrySize;
            this.updateGeometryAttributes(subPolygon, context);
            context.vertexStart += geometrySize;
            context.indexStart = this.indexStarts[context.geometryIndex + 1];
        }
        else {
            this._updateIndices(polygon, context);
            this._updatePositions(polygon, context);
            this._updateVertexValid(polygon, context);
        }
    }
    _updateIndices(polygon, { geometryIndex, vertexStart: offset, indexStart }) {
        const { attributes, indexStarts, typedArrayManager } = this;
        let target = attributes.indices;
        if (!target || !polygon) return;
        let i = indexStart;
        const indices = _polygon.getSurfaceIndices(polygon, this.positionSize, this.opts.preproject, this.opts.full3d);
        target = typedArrayManager.allocate(target, indexStart + indices.length, {
            copy: true
        });
        for(let j = 0; j < indices.length; j++)target[i++] = indices[j] + offset;
        indexStarts[geometryIndex + 1] = indexStart + indices.length;
        attributes.indices = target;
    }
    _updatePositions(polygon, { vertexStart, geometrySize }) {
        const { attributes: { positions }, positionSize } = this;
        if (!positions || !polygon) return;
        const polygonPositions = _polygon.getPositions(polygon);
        for(let i = vertexStart, j = 0; j < geometrySize; i++, j++){
            const x = polygonPositions[j * positionSize];
            const y = polygonPositions[j * positionSize + 1];
            const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;
            positions[i * 3] = x;
            positions[i * 3 + 1] = y;
            positions[i * 3 + 2] = z;
        }
    }
    _updateVertexValid(polygon, { vertexStart, geometrySize }) {
        const { positionSize } = this;
        const vertexValid = this.attributes.vertexValid;
        const holeIndices = polygon && _polygon.getHoleIndices(polygon);
        if (polygon && polygon.edgeTypes) vertexValid.set(polygon.edgeTypes, vertexStart);
        else vertexValid.fill(1, vertexStart, vertexStart + geometrySize);
        if (holeIndices) for(let j = 0; j < holeIndices.length; j++)vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;
        vertexValid[vertexStart + geometrySize - 1] = 0;
    }
}
exports.default = PolygonTesselator;
function isCut(polygon) {
    return Array.isArray(polygon) && polygon.length > 0 && !Number.isFinite(polygon[0]);
}

},{"./polygon":"bhOjx","@deck.gl/core":"9zfJz","@math.gl/polygon":"7Oo4h","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bhOjx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPositions", ()=>getPositions);
parcelHelpers.export(exports, "getHoleIndices", ()=>getHoleIndices);
parcelHelpers.export(exports, "normalize", ()=>normalize);
parcelHelpers.export(exports, "getSurfaceIndices", ()=>getSurfaceIndices);
var _earcut = require("earcut");
var _earcutDefault = parcelHelpers.interopDefault(_earcut);
var _polygon = require("@math.gl/polygon");
const OUTER_POLYGON_WINDING = (0, _polygon.WINDING).CLOCKWISE;
const HOLE_POLYGON_WINDING = (0, _polygon.WINDING).COUNTER_CLOCKWISE;
const windingOptions = {
    isClosed: true
};
function validate(polygon) {
    polygon = polygon && polygon.positions || polygon;
    if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) throw new Error('invalid polygon');
}
function getPositions(polygon) {
    return 'positions' in polygon ? polygon.positions : polygon;
}
function getHoleIndices(polygon) {
    return 'holeIndices' in polygon ? polygon.holeIndices : null;
}
function isNested(polygon) {
    return Array.isArray(polygon[0]);
}
function isSimple(polygon) {
    return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);
}
function isNestedRingClosed(simplePolygon) {
    const p0 = simplePolygon[0];
    const p1 = simplePolygon[simplePolygon.length - 1];
    return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];
}
function isFlatRingClosed(positions, size, startIndex, endIndex) {
    for(let i = 0; i < size; i++){
        if (positions[startIndex + i] !== positions[endIndex - size + i]) return false;
    }
    return true;
}
function copyNestedRing(target, targetStartIndex, simplePolygon, size, windingDirection) {
    let targetIndex = targetStartIndex;
    const len = simplePolygon.length;
    for(let i = 0; i < len; i++)for(let j = 0; j < size; j++)target[targetIndex++] = simplePolygon[i][j] || 0;
    if (!isNestedRingClosed(simplePolygon)) for(let j = 0; j < size; j++)target[targetIndex++] = simplePolygon[0][j] || 0;
    windingOptions.start = targetStartIndex;
    windingOptions.end = targetIndex;
    windingOptions.size = size;
    (0, _polygon.modifyPolygonWindingDirection)(target, windingDirection, windingOptions);
    return targetIndex;
}
function copyFlatRing(target, targetStartIndex, positions, size, srcStartIndex = 0, srcEndIndex, windingDirection) {
    srcEndIndex = srcEndIndex || positions.length;
    const srcLength = srcEndIndex - srcStartIndex;
    if (srcLength <= 0) return targetStartIndex;
    let targetIndex = targetStartIndex;
    for(let i = 0; i < srcLength; i++)target[targetIndex++] = positions[srcStartIndex + i];
    if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) for(let i = 0; i < size; i++)target[targetIndex++] = positions[srcStartIndex + i];
    windingOptions.start = targetStartIndex;
    windingOptions.end = targetIndex;
    windingOptions.size = size;
    (0, _polygon.modifyPolygonWindingDirection)(target, windingDirection, windingOptions);
    return targetIndex;
}
function normalize(polygon, positionSize) {
    validate(polygon);
    const positions = [];
    const holeIndices = [];
    if ('positions' in polygon) {
        const { positions: srcPositions, holeIndices: srcHoleIndices } = polygon;
        if (srcHoleIndices) {
            let targetIndex = 0;
            for(let i = 0; i <= srcHoleIndices.length; i++){
                targetIndex = copyFlatRing(positions, targetIndex, srcPositions, positionSize, srcHoleIndices[i - 1], srcHoleIndices[i], i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);
                holeIndices.push(targetIndex);
            }
            holeIndices.pop();
            return {
                positions,
                holeIndices
            };
        }
        polygon = srcPositions;
    }
    if (!isNested(polygon)) {
        copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);
        return positions;
    }
    if (!isSimple(polygon)) {
        let targetIndex = 0;
        for (const [polygonIndex, simplePolygon] of polygon.entries()){
            targetIndex = copyNestedRing(positions, targetIndex, simplePolygon, positionSize, polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);
            holeIndices.push(targetIndex);
        }
        holeIndices.pop();
        return {
            positions,
            holeIndices
        };
    }
    copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);
    return positions;
}
function getPlaneArea(positions, xIndex, yIndex) {
    const numVerts = positions.length / 3;
    let area = 0;
    for(let i = 0; i < numVerts; i++){
        const j = (i + 1) % numVerts;
        area += positions[i * 3 + xIndex] * positions[j * 3 + yIndex];
        area -= positions[j * 3 + xIndex] * positions[i * 3 + yIndex];
    }
    return Math.abs(area / 2);
}
function permutePositions(positions, xIndex, yIndex, zIndex) {
    const numVerts = positions.length / 3;
    for(let i = 0; i < numVerts; i++){
        const o = i * 3;
        const x = positions[o + 0];
        const y = positions[o + 1];
        const z = positions[o + 2];
        positions[o + xIndex] = x;
        positions[o + yIndex] = y;
        positions[o + zIndex] = z;
    }
}
function getSurfaceIndices(polygon, positionSize, preproject, full3d) {
    let holeIndices = getHoleIndices(polygon);
    if (holeIndices) holeIndices = holeIndices.map((positionIndex)=>positionIndex / positionSize);
    let positions = getPositions(polygon);
    const is3d = full3d && positionSize === 3;
    if (preproject) {
        const n = positions.length;
        positions = positions.slice();
        const p = [];
        for(let i = 0; i < n; i += positionSize){
            p[0] = positions[i];
            p[1] = positions[i + 1];
            if (is3d) p[2] = positions[i + 2];
            const xy = preproject(p);
            positions[i] = xy[0];
            positions[i + 1] = xy[1];
            if (is3d) positions[i + 2] = xy[2];
        }
    }
    if (is3d) {
        const xyArea = getPlaneArea(positions, 0, 1);
        const xzArea = getPlaneArea(positions, 0, 2);
        const yzArea = getPlaneArea(positions, 1, 2);
        if (!xyArea && !xzArea && !yzArea) return [];
        if (xyArea > xzArea && xyArea > yzArea) ;
        else if (xzArea > yzArea) {
            if (!preproject) positions = positions.slice();
            permutePositions(positions, 0, 2, 1);
        } else {
            if (!preproject) positions = positions.slice();
            permutePositions(positions, 2, 0, 1);
        }
    }
    return (0, _earcutDefault.default)(positions, holeIndices, positionSize);
}

},{"earcut":"4F20W","@math.gl/polygon":"7Oo4h","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4F20W":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = earcut;
module.exports.default = earcut;
function earcut(data, holeIndices, dim) {
    dim = dim || 2;
    var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, true), triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    var minX, minY, maxX, maxY, x, y, invSize;
    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];
        for(var i = dim; i < outerLen; i += dim){
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }
        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 32767 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
    return triangles;
}
// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;
    if (clockwise === signedArea(data, start, end, dim) > 0) for(i = start; i < end; i += dim)last = insertNode(i, data[i], data[i + 1], last);
    else for(i = end - dim; i >= start; i -= dim)last = insertNode(i, data[i], data[i + 1], last);
    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }
    return last;
}
// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    var p = start, again;
    do {
        again = false;
        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
        } else p = p.next;
    }while (again || p !== end);
    return end;
}
// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;
    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
    var stop = ear, prev, next;
    // iterate through ears, slicing them one by one
    while(ear.prev !== ear.next){
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);
            removeNode(ear);
            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) splitEarcut(ear, triangles, dim, minX, minY, invSize);
            break;
        }
    }
}
// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear
    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    // triangle bbox; min & max are calculated like this for speed
    var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    var p = c.next;
    while(p !== a){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }
    return true;
}
function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    // triangle bbox; min & max are calculated like this for speed
    var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    // z-order range for the current triangle bbox;
    var minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
    var p = ear.prevZ, n = ear.nextZ;
    // look for points inside the triangle in both directions
    while(p && p.z >= minZ && n && n.z <= maxZ){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    // look for remaining points in decreasing z-order
    while(p && p.z >= minZ){
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }
    // look for remaining points in increasing z-order
    while(n && n.z <= maxZ){
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    return true;
}
// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev, b = p.next.next;
        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);
            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    }while (p !== start);
    return filterPoints(p);
}
// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while(b !== a.prev){
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);
                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);
                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                return;
            }
            b = b.next;
        }
        a = a.next;
    }while (a !== start);
}
// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [], i, len, start, end, list;
    for(i = 0, len = holeIndices.length; i < len; i++){
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    // process holes from left to right
    for(i = 0; i < queue.length; i++)outerNode = eliminateHole(queue[i], outerNode);
    return outerNode;
}
function compareX(a, b) {
    return a.x - b.x;
}
// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    var bridge = findHoleBridge(hole, outerNode);
    if (!bridge) return outerNode;
    var bridgeReverse = splitPolygon(bridge, hole);
    // filter collinear points around the cuts
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
}
// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m;
    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                m = p.x < p.next.x ? p : p.next;
                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint
            }
        }
        p = p.next;
    }while (p !== outerNode);
    if (!m) return null;
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point
    var stop = m, mx = m.x, my = m.y, tanMin = Infinity, tan;
    p = m;
    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
            if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    }while (p !== stop);
    return m;
}
// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}
// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    }while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
}
// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while(p){
            numMerges++;
            q = p;
            pSize = 0;
            for(i = 0; i < inSize; i++){
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;
            while(pSize > 0 || qSize > 0 && q){
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail) tail.nextZ = e;
                else list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    }while (numMerges > 1);
    return list;
}
// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = (x - minX) * invSize | 0;
    y = (y - minY) * invSize | 0;
    x = (x | x << 8) & 0x00FF00FF;
    x = (x | x << 4) & 0x0F0F0F0F;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    y = (y | y << 8) & 0x00FF00FF;
    y = (y | y << 4) & 0x0F0F0F0F;
    y = (y | y << 2) & 0x33333333;
    y = (y | y << 1) & 0x55555555;
    return x | y << 1;
}
// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start, leftmost = start;
    do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
        p = p.next;
    }while (p !== start);
    return leftmost;
}
// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
}
// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
    (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
    (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
    equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
}
// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    var o1 = sign(area(p1, q1, p2));
    var o2 = sign(area(p1, q1, q2));
    var o3 = sign(area(p2, q2, p1));
    var o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true; // general case
    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
    return false;
}
// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
        p = p.next;
    }while (p !== a);
    return false;
}
// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a, inside = false, px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
    do {
        if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
        p = p.next;
    }while (p !== a);
    return inside;
}
// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;
    // vertex coordinates
    this.x = x;
    this.y = y;
    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;
    // z-order curve value
    this.z = 0;
    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;
    // indicates whether this is a steiner point
    this.steiner = false;
}
// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function(data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) for(var i = 0, len = holeIndices.length; i < len; i++){
        var start = holeIndices[i] * dim;
        var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        polygonArea -= Math.abs(signedArea(data, start, end, dim));
    }
    var trianglesArea = 0;
    for(i = 0; i < triangles.length; i += 3){
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }
    return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
};
function signedArea(data, start, end, dim) {
    var sum = 0;
    for(var i = start, j = end - dim; i < end; i += dim){
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}
// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function(data) {
    var dim = data[0][0].length, result = {
        vertices: [],
        holes: [],
        dimensions: dim
    }, holeIndex = 0;
    for(var i = 0; i < data.length; i++){
        for(var j = 0; j < data[i].length; j++)for(var d = 0; d < dim; d++)result.vertices.push(data[i][j][d]);
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};

},{}],"jz3Bf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _solidPolygonLayerVertexMainGlsl = require("./solid-polygon-layer-vertex-main.glsl");
var _solidPolygonLayerVertexMainGlslDefault = parcelHelpers.interopDefault(_solidPolygonLayerVertexMainGlsl);
exports.default = "#define SHADER_NAME solid-polygon-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute float elevations;\nattribute vec4 fillColors;\nattribute vec4 lineColors;\nattribute vec3 pickingColors;\n\n".concat((0, _solidPolygonLayerVertexMainGlslDefault.default), "\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = positions;\n  props.positions64Low = positions64Low;\n  props.elevations = elevations;\n  props.fillColors = fillColors;\n  props.lineColors = lineColors;\n  props.pickingColors = pickingColors;\n\n  calculatePosition(props);\n}\n");

},{"./solid-polygon-layer-vertex-main.glsl":"9LlWL","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9LlWL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "\nattribute vec2 vertexPositions;\nattribute float vertexValid;\n\nuniform bool extruded;\nuniform bool isWireframe;\nuniform float elevationScale;\nuniform float opacity;\n\nvarying vec4 vColor;\n\nstruct PolygonProps {\n  vec4 fillColors;\n  vec4 lineColors;\n  vec3 positions;\n  vec3 nextPositions;\n  vec3 pickingColors;\n  vec3 positions64Low;\n  vec3 nextPositions64Low;\n  float elevations;\n};\n\nvec3 project_offset_normal(vec3 vector) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    return normalize(vector * project_uCommonUnitsPerWorldUnit);\n  }\n  return project_normal(vector);\n}\n\nvoid calculatePosition(PolygonProps props) {\n#ifdef IS_SIDE_VERTEX\n  if(vertexValid < 0.5){\n    gl_Position = vec4(0.);\n    return;\n  }\n#endif\n\n  vec3 pos;\n  vec3 pos64Low;\n  vec3 normal;\n  vec4 colors = isWireframe ? props.lineColors : props.fillColors;\n\n  geometry.worldPosition = props.positions;\n  geometry.worldPositionAlt = props.nextPositions;\n  geometry.pickingColor = props.pickingColors;\n\n#ifdef IS_SIDE_VERTEX\n  pos = mix(props.positions, props.nextPositions, vertexPositions.x);\n  pos64Low = mix(props.positions64Low, props.nextPositions64Low, vertexPositions.x);\n#else\n  pos = props.positions;\n  pos64Low = props.positions64Low;\n#endif\n\n  if (extruded) {\n    pos.z += props.elevations * vertexPositions.y * elevationScale;\n  }\n  gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);\n\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  if (extruded) {\n  #ifdef IS_SIDE_VERTEX\n    normal = vec3(\n      props.positions.y - props.nextPositions.y + (props.positions64Low.y - props.nextPositions64Low.y),\n      props.nextPositions.x - props.positions.x + (props.nextPositions64Low.x - props.positions64Low.x),\n      0.0);\n    normal = project_offset_normal(normal);\n  #else\n    normal = project_normal(vec3(0.0, 0.0, 1.0));\n  #endif\n    geometry.normal = normal;\n    vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, geometry.position.xyz, normal);\n    vColor = vec4(lightColor, colors.a * opacity);\n  } else {\n    vColor = vec4(colors.rgb, colors.a * opacity);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hnjPz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _solidPolygonLayerVertexMainGlsl = require("./solid-polygon-layer-vertex-main.glsl");
var _solidPolygonLayerVertexMainGlslDefault = parcelHelpers.interopDefault(_solidPolygonLayerVertexMainGlsl);
exports.default = "#define SHADER_NAME solid-polygon-layer-vertex-shader-side\n#define IS_SIDE_VERTEX\n\n\nattribute vec3 instancePositions;\nattribute vec3 nextPositions;\nattribute vec3 instancePositions64Low;\nattribute vec3 nextPositions64Low;\nattribute float instanceElevations;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\n".concat((0, _solidPolygonLayerVertexMainGlslDefault.default), "\n\nvoid main(void) {\n  PolygonProps props;\n\n  #if RING_WINDING_ORDER_CW == 1\n    props.positions = instancePositions;\n    props.positions64Low = instancePositions64Low;\n    props.nextPositions = nextPositions;\n    props.nextPositions64Low = nextPositions64Low;\n  #else\n    props.positions = nextPositions;\n    props.positions64Low = nextPositions64Low;\n    props.nextPositions = instancePositions;\n    props.nextPositions64Low = instancePositions64Low;\n  #endif\n  props.elevations = instanceElevations;\n  props.fillColors = instanceFillColors;\n  props.lineColors = instanceLineColors;\n  props.pickingColors = instancePickingColors;\n\n  calculatePosition(props);\n}\n");

},{"./solid-polygon-layer-vertex-main.glsl":"9LlWL","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gyTx0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "#define SHADER_NAME solid-polygon-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1sBRC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getGeojsonFeatures", ()=>getGeojsonFeatures);
parcelHelpers.export(exports, "separateGeojsonFeatures", ()=>separateGeojsonFeatures);
parcelHelpers.export(exports, "validateGeometry", ()=>validateGeometry);
var _core = require("@deck.gl/core");
function getGeojsonFeatures(geojson) {
    if (Array.isArray(geojson)) return geojson;
    (0, _core.log).assert(geojson.type, 'GeoJSON does not have type');
    switch(geojson.type){
        case 'Feature':
            return [
                geojson
            ];
        case 'FeatureCollection':
            (0, _core.log).assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');
            return geojson.features;
        default:
            return [
                {
                    geometry: geojson
                }
            ];
    }
}
function separateGeojsonFeatures(features, wrapFeature, dataRange = {}) {
    const separated = {
        pointFeatures: [],
        lineFeatures: [],
        polygonFeatures: [],
        polygonOutlineFeatures: []
    };
    const { startRow = 0, endRow = features.length } = dataRange;
    for(let featureIndex = startRow; featureIndex < endRow; featureIndex++){
        const feature = features[featureIndex];
        const { geometry } = feature;
        if (!geometry) continue;
        if (geometry.type === 'GeometryCollection') {
            (0, _core.log).assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');
            const { geometries } = geometry;
            for(let i = 0; i < geometries.length; i++){
                const subGeometry = geometries[i];
                separateGeometry(subGeometry, separated, wrapFeature, feature, featureIndex);
            }
        } else separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);
    }
    return separated;
}
function separateGeometry(geometry, separated, wrapFeature, sourceFeature, sourceFeatureIndex) {
    const { type, coordinates } = geometry;
    const { pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures } = separated;
    if (!validateGeometry(type, coordinates)) {
        (0, _core.log).warn("".concat(type, " coordinates are malformed"))();
        return;
    }
    switch(type){
        case 'Point':
            pointFeatures.push(wrapFeature({
                geometry
            }, sourceFeature, sourceFeatureIndex));
            break;
        case 'MultiPoint':
            coordinates.forEach((point)=>{
                pointFeatures.push(wrapFeature({
                    geometry: {
                        type: 'Point',
                        coordinates: point
                    }
                }, sourceFeature, sourceFeatureIndex));
            });
            break;
        case 'LineString':
            lineFeatures.push(wrapFeature({
                geometry
            }, sourceFeature, sourceFeatureIndex));
            break;
        case 'MultiLineString':
            coordinates.forEach((path)=>{
                lineFeatures.push(wrapFeature({
                    geometry: {
                        type: 'LineString',
                        coordinates: path
                    }
                }, sourceFeature, sourceFeatureIndex));
            });
            break;
        case 'Polygon':
            polygonFeatures.push(wrapFeature({
                geometry
            }, sourceFeature, sourceFeatureIndex));
            coordinates.forEach((path)=>{
                polygonOutlineFeatures.push(wrapFeature({
                    geometry: {
                        type: 'LineString',
                        coordinates: path
                    }
                }, sourceFeature, sourceFeatureIndex));
            });
            break;
        case 'MultiPolygon':
            coordinates.forEach((polygon)=>{
                polygonFeatures.push(wrapFeature({
                    geometry: {
                        type: 'Polygon',
                        coordinates: polygon
                    }
                }, sourceFeature, sourceFeatureIndex));
                polygon.forEach((path)=>{
                    polygonOutlineFeatures.push(wrapFeature({
                        geometry: {
                            type: 'LineString',
                            coordinates: path
                        }
                    }, sourceFeature, sourceFeatureIndex));
                });
            });
            break;
        default:
    }
}
const COORDINATE_NEST_LEVEL = {
    Point: 1,
    MultiPoint: 2,
    LineString: 2,
    MultiLineString: 3,
    Polygon: 3,
    MultiPolygon: 4
};
function validateGeometry(type, coordinates) {
    let nestLevel = COORDINATE_NEST_LEVEL[type];
    (0, _core.log).assert(nestLevel, "Unknown GeoJSON type ".concat(type));
    while(coordinates && --nestLevel > 0)coordinates = coordinates[0];
    return coordinates && Number.isFinite(coordinates[0]);
}

},{"@deck.gl/core":"9zfJz","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"khmuJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLayerPropsFromFeatures", ()=>createLayerPropsFromFeatures);
parcelHelpers.export(exports, "createLayerPropsFromBinary", ()=>createLayerPropsFromBinary);
var _geojsonBinary = require("./geojson-binary");
function createEmptyLayerProps() {
    return {
        points: {},
        lines: {},
        polygons: {},
        polygonsOutline: {}
    };
}
function getCoordinates(f) {
    return f.geometry.coordinates;
}
function createLayerPropsFromFeatures(features, featuresDiff) {
    const layerProps = createEmptyLayerProps();
    const { pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures } = features;
    layerProps.points.data = pointFeatures;
    layerProps.points._dataDiff = featuresDiff.pointFeatures && (()=>featuresDiff.pointFeatures);
    layerProps.points.getPosition = getCoordinates;
    layerProps.lines.data = lineFeatures;
    layerProps.lines._dataDiff = featuresDiff.lineFeatures && (()=>featuresDiff.lineFeatures);
    layerProps.lines.getPath = getCoordinates;
    layerProps.polygons.data = polygonFeatures;
    layerProps.polygons._dataDiff = featuresDiff.polygonFeatures && (()=>featuresDiff.polygonFeatures);
    layerProps.polygons.getPolygon = getCoordinates;
    layerProps.polygonsOutline.data = polygonOutlineFeatures;
    layerProps.polygonsOutline._dataDiff = featuresDiff.polygonOutlineFeatures && (()=>featuresDiff.polygonOutlineFeatures);
    layerProps.polygonsOutline.getPath = getCoordinates;
    return layerProps;
}
function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {
    const layerProps = createEmptyLayerProps();
    const { points, lines, polygons } = geojsonBinary;
    const customPickingColors = (0, _geojsonBinary.calculatePickingColors)(geojsonBinary, encodePickingColor);
    layerProps.points.data = {
        length: points.positions.value.length / points.positions.size,
        attributes: {
            ...points.attributes,
            getPosition: points.positions,
            instancePickingColors: {
                size: 3,
                value: customPickingColors.points
            }
        },
        properties: points.properties,
        numericProps: points.numericProps,
        featureIds: points.featureIds
    };
    layerProps.lines.data = {
        length: lines.pathIndices.value.length - 1,
        startIndices: lines.pathIndices.value,
        attributes: {
            ...lines.attributes,
            getPath: lines.positions,
            instancePickingColors: {
                size: 3,
                value: customPickingColors.lines
            }
        },
        properties: lines.properties,
        numericProps: lines.numericProps,
        featureIds: lines.featureIds
    };
    layerProps.lines._pathType = 'open';
    layerProps.polygons.data = {
        length: polygons.polygonIndices.value.length - 1,
        startIndices: polygons.polygonIndices.value,
        attributes: {
            ...polygons.attributes,
            getPolygon: polygons.positions,
            pickingColors: {
                size: 3,
                value: customPickingColors.polygons
            }
        },
        properties: polygons.properties,
        numericProps: polygons.numericProps,
        featureIds: polygons.featureIds
    };
    layerProps.polygons._normalize = false;
    if (polygons.triangles) layerProps.polygons.data.attributes.indices = polygons.triangles.value;
    layerProps.polygonsOutline.data = {
        length: polygons.primitivePolygonIndices.value.length - 1,
        startIndices: polygons.primitivePolygonIndices.value,
        attributes: {
            ...polygons.attributes,
            getPath: polygons.positions,
            instancePickingColors: {
                size: 3,
                value: customPickingColors.polygons
            }
        },
        properties: polygons.properties,
        numericProps: polygons.numericProps,
        featureIds: polygons.featureIds
    };
    layerProps.polygonsOutline._pathType = 'open';
    return layerProps;
}

},{"./geojson-binary":"1gjd2","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9mWks":[function(require,module,exports,__globalThis) {
/**
 * @mui/material v7.1.1
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /* eslint-disable import/export */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Accordion", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "AccordionActions", ()=>(0, _indexJsDefault1.default));
parcelHelpers.export(exports, "AccordionDetails", ()=>(0, _indexJsDefault2.default));
parcelHelpers.export(exports, "AccordionSummary", ()=>(0, _indexJsDefault3.default));
parcelHelpers.export(exports, "Alert", ()=>(0, _indexJsDefault4.default));
parcelHelpers.export(exports, "AlertTitle", ()=>(0, _indexJsDefault5.default));
parcelHelpers.export(exports, "AppBar", ()=>(0, _indexJsDefault6.default));
parcelHelpers.export(exports, "Autocomplete", ()=>(0, _indexJsDefault7.default));
parcelHelpers.export(exports, "Avatar", ()=>(0, _indexJsDefault8.default));
parcelHelpers.export(exports, "AvatarGroup", ()=>(0, _indexJsDefault9.default));
parcelHelpers.export(exports, "Backdrop", ()=>(0, _indexJsDefault10.default));
parcelHelpers.export(exports, "Badge", ()=>(0, _indexJsDefault11.default));
parcelHelpers.export(exports, "BottomNavigation", ()=>(0, _indexJsDefault12.default));
parcelHelpers.export(exports, "BottomNavigationAction", ()=>(0, _indexJsDefault13.default));
parcelHelpers.export(exports, "Box", ()=>(0, _indexJsDefault14.default));
parcelHelpers.export(exports, "Breadcrumbs", ()=>(0, _indexJsDefault15.default));
parcelHelpers.export(exports, "Button", ()=>(0, _indexJsDefault16.default));
parcelHelpers.export(exports, "ButtonBase", ()=>(0, _indexJsDefault17.default));
parcelHelpers.export(exports, "ButtonGroup", ()=>(0, _indexJsDefault18.default));
parcelHelpers.export(exports, "Card", ()=>(0, _indexJsDefault19.default));
parcelHelpers.export(exports, "CardActionArea", ()=>(0, _indexJsDefault20.default));
parcelHelpers.export(exports, "CardActions", ()=>(0, _indexJsDefault21.default));
parcelHelpers.export(exports, "CardContent", ()=>(0, _indexJsDefault22.default));
parcelHelpers.export(exports, "CardHeader", ()=>(0, _indexJsDefault23.default));
parcelHelpers.export(exports, "CardMedia", ()=>(0, _indexJsDefault24.default));
parcelHelpers.export(exports, "Checkbox", ()=>(0, _indexJsDefault25.default));
parcelHelpers.export(exports, "Chip", ()=>(0, _indexJsDefault26.default));
parcelHelpers.export(exports, "CircularProgress", ()=>(0, _indexJsDefault27.default));
parcelHelpers.export(exports, "ClickAwayListener", ()=>(0, _indexJsDefault28.default));
parcelHelpers.export(exports, "Collapse", ()=>(0, _indexJsDefault29.default));
parcelHelpers.export(exports, "Container", ()=>(0, _indexJsDefault30.default));
parcelHelpers.export(exports, "CssBaseline", ()=>(0, _indexJsDefault31.default));
parcelHelpers.export(exports, "darkScrollbar", ()=>(0, _indexJsDefault32.default));
parcelHelpers.export(exports, "Dialog", ()=>(0, _indexJsDefault33.default));
parcelHelpers.export(exports, "DialogActions", ()=>(0, _indexJsDefault34.default));
parcelHelpers.export(exports, "DialogContent", ()=>(0, _indexJsDefault35.default));
parcelHelpers.export(exports, "DialogContentText", ()=>(0, _indexJsDefault36.default));
parcelHelpers.export(exports, "DialogTitle", ()=>(0, _indexJsDefault37.default));
parcelHelpers.export(exports, "Divider", ()=>(0, _indexJsDefault38.default));
parcelHelpers.export(exports, "Drawer", ()=>(0, _indexJsDefault39.default));
parcelHelpers.export(exports, "Fab", ()=>(0, _indexJsDefault40.default));
parcelHelpers.export(exports, "Fade", ()=>(0, _indexJsDefault41.default));
parcelHelpers.export(exports, "FilledInput", ()=>(0, _indexJsDefault42.default));
parcelHelpers.export(exports, "FormControl", ()=>(0, _indexJsDefault43.default));
parcelHelpers.export(exports, "FormControlLabel", ()=>(0, _indexJsDefault44.default));
parcelHelpers.export(exports, "FormGroup", ()=>(0, _indexJsDefault45.default));
parcelHelpers.export(exports, "FormHelperText", ()=>(0, _indexJsDefault46.default));
parcelHelpers.export(exports, "FormLabel", ()=>(0, _indexJsDefault47.default));
parcelHelpers.export(exports, "GridLegacy", ()=>(0, _indexJsDefault48.default));
parcelHelpers.export(exports, "Grid", ()=>(0, _indexJsDefault49.default));
parcelHelpers.export(exports, "Grow", ()=>(0, _indexJsDefault50.default));
parcelHelpers.export(exports, "Icon", ()=>(0, _indexJsDefault51.default));
parcelHelpers.export(exports, "IconButton", ()=>(0, _indexJsDefault52.default));
parcelHelpers.export(exports, "ImageList", ()=>(0, _indexJsDefault53.default));
parcelHelpers.export(exports, "ImageListItem", ()=>(0, _indexJsDefault54.default));
parcelHelpers.export(exports, "ImageListItemBar", ()=>(0, _indexJsDefault55.default));
parcelHelpers.export(exports, "Input", ()=>(0, _indexJsDefault56.default));
parcelHelpers.export(exports, "InputAdornment", ()=>(0, _indexJsDefault57.default));
parcelHelpers.export(exports, "InputBase", ()=>(0, _indexJsDefault58.default));
parcelHelpers.export(exports, "InputLabel", ()=>(0, _indexJsDefault59.default));
parcelHelpers.export(exports, "LinearProgress", ()=>(0, _indexJsDefault60.default));
parcelHelpers.export(exports, "Link", ()=>(0, _indexJsDefault61.default));
parcelHelpers.export(exports, "List", ()=>(0, _indexJsDefault62.default));
parcelHelpers.export(exports, "ListItem", ()=>(0, _indexJsDefault63.default));
parcelHelpers.export(exports, "ListItemAvatar", ()=>(0, _indexJsDefault64.default));
parcelHelpers.export(exports, "ListItemButton", ()=>(0, _indexJsDefault65.default));
parcelHelpers.export(exports, "ListItemIcon", ()=>(0, _indexJsDefault66.default));
parcelHelpers.export(exports, "ListItemSecondaryAction", ()=>(0, _indexJsDefault67.default));
parcelHelpers.export(exports, "ListItemText", ()=>(0, _indexJsDefault68.default));
parcelHelpers.export(exports, "ListSubheader", ()=>(0, _indexJsDefault69.default));
parcelHelpers.export(exports, "Menu", ()=>(0, _indexJsDefault70.default));
parcelHelpers.export(exports, "MenuItem", ()=>(0, _indexJsDefault71.default));
parcelHelpers.export(exports, "MenuList", ()=>(0, _indexJsDefault72.default));
parcelHelpers.export(exports, "MobileStepper", ()=>(0, _indexJsDefault73.default));
parcelHelpers.export(exports, "Modal", ()=>(0, _indexJsDefault74.default));
parcelHelpers.export(exports, "NativeSelect", ()=>(0, _indexJsDefault75.default));
parcelHelpers.export(exports, "NoSsr", ()=>(0, _indexJsDefault76.default));
parcelHelpers.export(exports, "OutlinedInput", ()=>(0, _indexJsDefault77.default));
parcelHelpers.export(exports, "Pagination", ()=>(0, _indexJsDefault78.default));
parcelHelpers.export(exports, "PaginationItem", ()=>(0, _indexJsDefault79.default));
parcelHelpers.export(exports, "Paper", ()=>(0, _indexJsDefault80.default));
parcelHelpers.export(exports, "Popover", ()=>(0, _indexJsDefault81.default));
parcelHelpers.export(exports, "Popper", ()=>(0, _indexJsDefault82.default));
parcelHelpers.export(exports, "Portal", ()=>(0, _indexJsDefault83.default));
parcelHelpers.export(exports, "Radio", ()=>(0, _indexJsDefault84.default));
parcelHelpers.export(exports, "RadioGroup", ()=>(0, _indexJsDefault85.default));
parcelHelpers.export(exports, "Rating", ()=>(0, _indexJsDefault86.default));
parcelHelpers.export(exports, "ScopedCssBaseline", ()=>(0, _indexJsDefault87.default));
parcelHelpers.export(exports, "Select", ()=>(0, _indexJsDefault88.default));
parcelHelpers.export(exports, "Skeleton", ()=>(0, _indexJsDefault89.default));
parcelHelpers.export(exports, "Slide", ()=>(0, _indexJsDefault90.default));
parcelHelpers.export(exports, "Slider", ()=>(0, _indexJsDefault91.default));
parcelHelpers.export(exports, "Snackbar", ()=>(0, _indexJsDefault92.default));
parcelHelpers.export(exports, "SnackbarContent", ()=>(0, _indexJsDefault93.default));
parcelHelpers.export(exports, "SpeedDial", ()=>(0, _indexJsDefault94.default));
parcelHelpers.export(exports, "SpeedDialAction", ()=>(0, _indexJsDefault95.default));
parcelHelpers.export(exports, "SpeedDialIcon", ()=>(0, _indexJsDefault96.default));
parcelHelpers.export(exports, "Stack", ()=>(0, _indexJsDefault97.default));
parcelHelpers.export(exports, "Step", ()=>(0, _indexJsDefault98.default));
parcelHelpers.export(exports, "StepButton", ()=>(0, _indexJsDefault99.default));
parcelHelpers.export(exports, "StepConnector", ()=>(0, _indexJsDefault100.default));
parcelHelpers.export(exports, "StepContent", ()=>(0, _indexJsDefault101.default));
parcelHelpers.export(exports, "StepIcon", ()=>(0, _indexJsDefault102.default));
parcelHelpers.export(exports, "StepLabel", ()=>(0, _indexJsDefault103.default));
parcelHelpers.export(exports, "Stepper", ()=>(0, _indexJsDefault104.default));
parcelHelpers.export(exports, "SvgIcon", ()=>(0, _indexJsDefault105.default));
parcelHelpers.export(exports, "SwipeableDrawer", ()=>(0, _indexJsDefault106.default));
parcelHelpers.export(exports, "Switch", ()=>(0, _indexJsDefault107.default));
parcelHelpers.export(exports, "Tab", ()=>(0, _indexJsDefault108.default));
parcelHelpers.export(exports, "Table", ()=>(0, _indexJsDefault109.default));
parcelHelpers.export(exports, "TableBody", ()=>(0, _indexJsDefault110.default));
parcelHelpers.export(exports, "TableCell", ()=>(0, _indexJsDefault111.default));
parcelHelpers.export(exports, "TableContainer", ()=>(0, _indexJsDefault112.default));
parcelHelpers.export(exports, "TableFooter", ()=>(0, _indexJsDefault113.default));
parcelHelpers.export(exports, "TableHead", ()=>(0, _indexJsDefault114.default));
parcelHelpers.export(exports, "TablePagination", ()=>(0, _indexJsDefault115.default));
parcelHelpers.export(exports, "TablePaginationActions", ()=>(0, _indexJsDefault116.default));
parcelHelpers.export(exports, "TableRow", ()=>(0, _indexJsDefault117.default));
parcelHelpers.export(exports, "TableSortLabel", ()=>(0, _indexJsDefault118.default));
parcelHelpers.export(exports, "Tabs", ()=>(0, _indexJsDefault119.default));
parcelHelpers.export(exports, "TabScrollButton", ()=>(0, _indexJsDefault120.default));
parcelHelpers.export(exports, "TextField", ()=>(0, _indexJsDefault121.default));
parcelHelpers.export(exports, "TextareaAutosize", ()=>(0, _indexJsDefault122.default));
parcelHelpers.export(exports, "ToggleButton", ()=>(0, _indexJsDefault123.default));
parcelHelpers.export(exports, "ToggleButtonGroup", ()=>(0, _indexJsDefault124.default));
parcelHelpers.export(exports, "Toolbar", ()=>(0, _indexJsDefault125.default));
parcelHelpers.export(exports, "Tooltip", ()=>(0, _indexJsDefault126.default));
parcelHelpers.export(exports, "Typography", ()=>(0, _indexJsDefault127.default));
parcelHelpers.export(exports, "useMediaQuery", ()=>(0, _indexJsDefault128.default));
parcelHelpers.export(exports, "usePagination", ()=>(0, _indexJsDefault129.default));
parcelHelpers.export(exports, "useScrollTrigger", ()=>(0, _indexJsDefault130.default));
parcelHelpers.export(exports, "Zoom", ()=>(0, _indexJsDefault131.default));
// createFilterOptions is exported from Autocomplete
parcelHelpers.export(exports, "useAutocomplete", ()=>(0, _indexJsDefault132.default));
parcelHelpers.export(exports, "GlobalStyles", ()=>(0, _indexJsDefault133.default));
parcelHelpers.export(exports, "unstable_composeClasses", ()=>(0, _composeClassesDefault.default));
parcelHelpers.export(exports, "generateUtilityClass", ()=>(0, _indexJsDefault134.default));
parcelHelpers.export(exports, "generateUtilityClasses", ()=>(0, _indexJsDefault135.default));
parcelHelpers.export(exports, "Unstable_TrapFocus", ()=>(0, _indexJsDefault136.default));
parcelHelpers.export(exports, "InitColorSchemeScript", ()=>(0, _indexJsDefault137.default));
parcelHelpers.export(exports, "colors", ()=>_indexJs);
var _indexJs = require("./colors/index.js");
var _indexJs1 = require("./styles/index.js");
parcelHelpers.exportAll(_indexJs1, exports);
// TODO remove, import directly from Base UI or create one folder per module
var _indexJs2 = require("./utils/index.js");
parcelHelpers.exportAll(_indexJs2, exports);
var _indexJs3 = require("./Accordion/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs3);
parcelHelpers.exportAll(_indexJs3, exports);
var _indexJs4 = require("./AccordionActions/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs4);
parcelHelpers.exportAll(_indexJs4, exports);
var _indexJs5 = require("./AccordionDetails/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs5);
parcelHelpers.exportAll(_indexJs5, exports);
var _indexJs6 = require("./AccordionSummary/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs6);
parcelHelpers.exportAll(_indexJs6, exports);
var _indexJs7 = require("./Alert/index.js");
var _indexJsDefault4 = parcelHelpers.interopDefault(_indexJs7);
parcelHelpers.exportAll(_indexJs7, exports);
var _indexJs8 = require("./AlertTitle/index.js");
var _indexJsDefault5 = parcelHelpers.interopDefault(_indexJs8);
parcelHelpers.exportAll(_indexJs8, exports);
var _indexJs9 = require("./AppBar/index.js");
var _indexJsDefault6 = parcelHelpers.interopDefault(_indexJs9);
parcelHelpers.exportAll(_indexJs9, exports);
var _indexJs10 = require("./Autocomplete/index.js");
var _indexJsDefault7 = parcelHelpers.interopDefault(_indexJs10);
parcelHelpers.exportAll(_indexJs10, exports);
var _indexJs11 = require("./Avatar/index.js");
var _indexJsDefault8 = parcelHelpers.interopDefault(_indexJs11);
parcelHelpers.exportAll(_indexJs11, exports);
var _indexJs12 = require("./AvatarGroup/index.js");
var _indexJsDefault9 = parcelHelpers.interopDefault(_indexJs12);
parcelHelpers.exportAll(_indexJs12, exports);
var _indexJs13 = require("./Backdrop/index.js");
var _indexJsDefault10 = parcelHelpers.interopDefault(_indexJs13);
parcelHelpers.exportAll(_indexJs13, exports);
var _indexJs14 = require("./Badge/index.js");
var _indexJsDefault11 = parcelHelpers.interopDefault(_indexJs14);
parcelHelpers.exportAll(_indexJs14, exports);
var _indexJs15 = require("./BottomNavigation/index.js");
var _indexJsDefault12 = parcelHelpers.interopDefault(_indexJs15);
parcelHelpers.exportAll(_indexJs15, exports);
var _indexJs16 = require("./BottomNavigationAction/index.js");
var _indexJsDefault13 = parcelHelpers.interopDefault(_indexJs16);
parcelHelpers.exportAll(_indexJs16, exports);
var _indexJs17 = require("./Box/index.js");
var _indexJsDefault14 = parcelHelpers.interopDefault(_indexJs17);
parcelHelpers.exportAll(_indexJs17, exports);
var _indexJs18 = require("./Breadcrumbs/index.js");
var _indexJsDefault15 = parcelHelpers.interopDefault(_indexJs18);
parcelHelpers.exportAll(_indexJs18, exports);
var _indexJs19 = require("./Button/index.js");
var _indexJsDefault16 = parcelHelpers.interopDefault(_indexJs19);
parcelHelpers.exportAll(_indexJs19, exports);
var _indexJs20 = require("./ButtonBase/index.js");
var _indexJsDefault17 = parcelHelpers.interopDefault(_indexJs20);
parcelHelpers.exportAll(_indexJs20, exports);
var _indexJs21 = require("./ButtonGroup/index.js");
var _indexJsDefault18 = parcelHelpers.interopDefault(_indexJs21);
parcelHelpers.exportAll(_indexJs21, exports);
var _indexJs22 = require("./Card/index.js");
var _indexJsDefault19 = parcelHelpers.interopDefault(_indexJs22);
parcelHelpers.exportAll(_indexJs22, exports);
var _indexJs23 = require("./CardActionArea/index.js");
var _indexJsDefault20 = parcelHelpers.interopDefault(_indexJs23);
parcelHelpers.exportAll(_indexJs23, exports);
var _indexJs24 = require("./CardActions/index.js");
var _indexJsDefault21 = parcelHelpers.interopDefault(_indexJs24);
parcelHelpers.exportAll(_indexJs24, exports);
var _indexJs25 = require("./CardContent/index.js");
var _indexJsDefault22 = parcelHelpers.interopDefault(_indexJs25);
parcelHelpers.exportAll(_indexJs25, exports);
var _indexJs26 = require("./CardHeader/index.js");
var _indexJsDefault23 = parcelHelpers.interopDefault(_indexJs26);
parcelHelpers.exportAll(_indexJs26, exports);
var _indexJs27 = require("./CardMedia/index.js");
var _indexJsDefault24 = parcelHelpers.interopDefault(_indexJs27);
parcelHelpers.exportAll(_indexJs27, exports);
var _indexJs28 = require("./Checkbox/index.js");
var _indexJsDefault25 = parcelHelpers.interopDefault(_indexJs28);
parcelHelpers.exportAll(_indexJs28, exports);
var _indexJs29 = require("./Chip/index.js");
var _indexJsDefault26 = parcelHelpers.interopDefault(_indexJs29);
parcelHelpers.exportAll(_indexJs29, exports);
var _indexJs30 = require("./CircularProgress/index.js");
var _indexJsDefault27 = parcelHelpers.interopDefault(_indexJs30);
parcelHelpers.exportAll(_indexJs30, exports);
var _indexJs31 = require("./ClickAwayListener/index.js");
var _indexJsDefault28 = parcelHelpers.interopDefault(_indexJs31);
parcelHelpers.exportAll(_indexJs31, exports);
var _indexJs32 = require("./Collapse/index.js");
var _indexJsDefault29 = parcelHelpers.interopDefault(_indexJs32);
parcelHelpers.exportAll(_indexJs32, exports);
var _indexJs33 = require("./Container/index.js");
var _indexJsDefault30 = parcelHelpers.interopDefault(_indexJs33);
parcelHelpers.exportAll(_indexJs33, exports);
var _indexJs34 = require("./CssBaseline/index.js");
var _indexJsDefault31 = parcelHelpers.interopDefault(_indexJs34);
parcelHelpers.exportAll(_indexJs34, exports);
var _indexJs35 = require("./darkScrollbar/index.js");
var _indexJsDefault32 = parcelHelpers.interopDefault(_indexJs35);
parcelHelpers.exportAll(_indexJs35, exports);
var _indexJs36 = require("./Dialog/index.js");
var _indexJsDefault33 = parcelHelpers.interopDefault(_indexJs36);
parcelHelpers.exportAll(_indexJs36, exports);
var _indexJs37 = require("./DialogActions/index.js");
var _indexJsDefault34 = parcelHelpers.interopDefault(_indexJs37);
parcelHelpers.exportAll(_indexJs37, exports);
var _indexJs38 = require("./DialogContent/index.js");
var _indexJsDefault35 = parcelHelpers.interopDefault(_indexJs38);
parcelHelpers.exportAll(_indexJs38, exports);
var _indexJs39 = require("./DialogContentText/index.js");
var _indexJsDefault36 = parcelHelpers.interopDefault(_indexJs39);
parcelHelpers.exportAll(_indexJs39, exports);
var _indexJs40 = require("./DialogTitle/index.js");
var _indexJsDefault37 = parcelHelpers.interopDefault(_indexJs40);
parcelHelpers.exportAll(_indexJs40, exports);
var _indexJs41 = require("./Divider/index.js");
var _indexJsDefault38 = parcelHelpers.interopDefault(_indexJs41);
parcelHelpers.exportAll(_indexJs41, exports);
var _indexJs42 = require("./Drawer/index.js");
var _indexJsDefault39 = parcelHelpers.interopDefault(_indexJs42);
parcelHelpers.exportAll(_indexJs42, exports);
var _indexJs43 = require("./Fab/index.js");
var _indexJsDefault40 = parcelHelpers.interopDefault(_indexJs43);
parcelHelpers.exportAll(_indexJs43, exports);
var _indexJs44 = require("./Fade/index.js");
var _indexJsDefault41 = parcelHelpers.interopDefault(_indexJs44);
parcelHelpers.exportAll(_indexJs44, exports);
var _indexJs45 = require("./FilledInput/index.js");
var _indexJsDefault42 = parcelHelpers.interopDefault(_indexJs45);
parcelHelpers.exportAll(_indexJs45, exports);
var _indexJs46 = require("./FormControl/index.js");
var _indexJsDefault43 = parcelHelpers.interopDefault(_indexJs46);
parcelHelpers.exportAll(_indexJs46, exports);
var _indexJs47 = require("./FormControlLabel/index.js");
var _indexJsDefault44 = parcelHelpers.interopDefault(_indexJs47);
parcelHelpers.exportAll(_indexJs47, exports);
var _indexJs48 = require("./FormGroup/index.js");
var _indexJsDefault45 = parcelHelpers.interopDefault(_indexJs48);
parcelHelpers.exportAll(_indexJs48, exports);
var _indexJs49 = require("./FormHelperText/index.js");
var _indexJsDefault46 = parcelHelpers.interopDefault(_indexJs49);
parcelHelpers.exportAll(_indexJs49, exports);
var _indexJs50 = require("./FormLabel/index.js");
var _indexJsDefault47 = parcelHelpers.interopDefault(_indexJs50);
parcelHelpers.exportAll(_indexJs50, exports);
var _indexJs51 = require("./GridLegacy/index.js");
var _indexJsDefault48 = parcelHelpers.interopDefault(_indexJs51);
var _indexJs52 = require("./Grid/index.js");
var _indexJsDefault49 = parcelHelpers.interopDefault(_indexJs52);
parcelHelpers.exportAll(_indexJs52, exports);
var _indexJs53 = require("./Grow/index.js");
var _indexJsDefault50 = parcelHelpers.interopDefault(_indexJs53);
parcelHelpers.exportAll(_indexJs53, exports);
var _indexJs54 = require("./Icon/index.js");
var _indexJsDefault51 = parcelHelpers.interopDefault(_indexJs54);
parcelHelpers.exportAll(_indexJs54, exports);
var _indexJs55 = require("./IconButton/index.js");
var _indexJsDefault52 = parcelHelpers.interopDefault(_indexJs55);
parcelHelpers.exportAll(_indexJs55, exports);
var _indexJs56 = require("./ImageList/index.js");
var _indexJsDefault53 = parcelHelpers.interopDefault(_indexJs56);
parcelHelpers.exportAll(_indexJs56, exports);
var _indexJs57 = require("./ImageListItem/index.js");
var _indexJsDefault54 = parcelHelpers.interopDefault(_indexJs57);
parcelHelpers.exportAll(_indexJs57, exports);
var _indexJs58 = require("./ImageListItemBar/index.js");
var _indexJsDefault55 = parcelHelpers.interopDefault(_indexJs58);
parcelHelpers.exportAll(_indexJs58, exports);
var _indexJs59 = require("./Input/index.js");
var _indexJsDefault56 = parcelHelpers.interopDefault(_indexJs59);
parcelHelpers.exportAll(_indexJs59, exports);
var _indexJs60 = require("./InputAdornment/index.js");
var _indexJsDefault57 = parcelHelpers.interopDefault(_indexJs60);
parcelHelpers.exportAll(_indexJs60, exports);
var _indexJs61 = require("./InputBase/index.js");
var _indexJsDefault58 = parcelHelpers.interopDefault(_indexJs61);
parcelHelpers.exportAll(_indexJs61, exports);
var _indexJs62 = require("./InputLabel/index.js");
var _indexJsDefault59 = parcelHelpers.interopDefault(_indexJs62);
parcelHelpers.exportAll(_indexJs62, exports);
var _indexJs63 = require("./LinearProgress/index.js");
var _indexJsDefault60 = parcelHelpers.interopDefault(_indexJs63);
parcelHelpers.exportAll(_indexJs63, exports);
var _indexJs64 = require("./Link/index.js");
var _indexJsDefault61 = parcelHelpers.interopDefault(_indexJs64);
parcelHelpers.exportAll(_indexJs64, exports);
var _indexJs65 = require("./List/index.js");
var _indexJsDefault62 = parcelHelpers.interopDefault(_indexJs65);
parcelHelpers.exportAll(_indexJs65, exports);
var _indexJs66 = require("./ListItem/index.js");
var _indexJsDefault63 = parcelHelpers.interopDefault(_indexJs66);
parcelHelpers.exportAll(_indexJs66, exports);
var _indexJs67 = require("./ListItemAvatar/index.js");
var _indexJsDefault64 = parcelHelpers.interopDefault(_indexJs67);
parcelHelpers.exportAll(_indexJs67, exports);
var _indexJs68 = require("./ListItemButton/index.js");
var _indexJsDefault65 = parcelHelpers.interopDefault(_indexJs68);
parcelHelpers.exportAll(_indexJs68, exports);
var _indexJs69 = require("./ListItemIcon/index.js");
var _indexJsDefault66 = parcelHelpers.interopDefault(_indexJs69);
parcelHelpers.exportAll(_indexJs69, exports);
var _indexJs70 = require("./ListItemSecondaryAction/index.js");
var _indexJsDefault67 = parcelHelpers.interopDefault(_indexJs70);
parcelHelpers.exportAll(_indexJs70, exports);
var _indexJs71 = require("./ListItemText/index.js");
var _indexJsDefault68 = parcelHelpers.interopDefault(_indexJs71);
parcelHelpers.exportAll(_indexJs71, exports);
var _indexJs72 = require("./ListSubheader/index.js");
var _indexJsDefault69 = parcelHelpers.interopDefault(_indexJs72);
parcelHelpers.exportAll(_indexJs72, exports);
var _indexJs73 = require("./Menu/index.js");
var _indexJsDefault70 = parcelHelpers.interopDefault(_indexJs73);
parcelHelpers.exportAll(_indexJs73, exports);
var _indexJs74 = require("./MenuItem/index.js");
var _indexJsDefault71 = parcelHelpers.interopDefault(_indexJs74);
parcelHelpers.exportAll(_indexJs74, exports);
var _indexJs75 = require("./MenuList/index.js");
var _indexJsDefault72 = parcelHelpers.interopDefault(_indexJs75);
parcelHelpers.exportAll(_indexJs75, exports);
var _indexJs76 = require("./MobileStepper/index.js");
var _indexJsDefault73 = parcelHelpers.interopDefault(_indexJs76);
parcelHelpers.exportAll(_indexJs76, exports);
var _indexJs77 = require("./Modal/index.js");
var _indexJsDefault74 = parcelHelpers.interopDefault(_indexJs77);
parcelHelpers.exportAll(_indexJs77, exports);
var _indexJs78 = require("./NativeSelect/index.js");
var _indexJsDefault75 = parcelHelpers.interopDefault(_indexJs78);
parcelHelpers.exportAll(_indexJs78, exports);
var _indexJs79 = require("./NoSsr/index.js");
var _indexJsDefault76 = parcelHelpers.interopDefault(_indexJs79);
parcelHelpers.exportAll(_indexJs79, exports);
var _indexJs80 = require("./OutlinedInput/index.js");
var _indexJsDefault77 = parcelHelpers.interopDefault(_indexJs80);
parcelHelpers.exportAll(_indexJs80, exports);
var _indexJs81 = require("./Pagination/index.js");
var _indexJsDefault78 = parcelHelpers.interopDefault(_indexJs81);
parcelHelpers.exportAll(_indexJs81, exports);
var _indexJs82 = require("./PaginationItem/index.js");
var _indexJsDefault79 = parcelHelpers.interopDefault(_indexJs82);
parcelHelpers.exportAll(_indexJs82, exports);
var _indexJs83 = require("./Paper/index.js");
var _indexJsDefault80 = parcelHelpers.interopDefault(_indexJs83);
parcelHelpers.exportAll(_indexJs83, exports);
var _indexJs84 = require("./Popover/index.js");
var _indexJsDefault81 = parcelHelpers.interopDefault(_indexJs84);
parcelHelpers.exportAll(_indexJs84, exports);
var _indexJs85 = require("./Popper/index.js");
var _indexJsDefault82 = parcelHelpers.interopDefault(_indexJs85);
parcelHelpers.exportAll(_indexJs85, exports);
var _indexJs86 = require("./Portal/index.js");
var _indexJsDefault83 = parcelHelpers.interopDefault(_indexJs86);
parcelHelpers.exportAll(_indexJs86, exports);
var _indexJs87 = require("./Radio/index.js");
var _indexJsDefault84 = parcelHelpers.interopDefault(_indexJs87);
parcelHelpers.exportAll(_indexJs87, exports);
var _indexJs88 = require("./RadioGroup/index.js");
var _indexJsDefault85 = parcelHelpers.interopDefault(_indexJs88);
parcelHelpers.exportAll(_indexJs88, exports);
var _indexJs89 = require("./Rating/index.js");
var _indexJsDefault86 = parcelHelpers.interopDefault(_indexJs89);
parcelHelpers.exportAll(_indexJs89, exports);
var _indexJs90 = require("./ScopedCssBaseline/index.js");
var _indexJsDefault87 = parcelHelpers.interopDefault(_indexJs90);
parcelHelpers.exportAll(_indexJs90, exports);
var _indexJs91 = require("./Select/index.js");
var _indexJsDefault88 = parcelHelpers.interopDefault(_indexJs91);
parcelHelpers.exportAll(_indexJs91, exports);
var _indexJs92 = require("./Skeleton/index.js");
var _indexJsDefault89 = parcelHelpers.interopDefault(_indexJs92);
parcelHelpers.exportAll(_indexJs92, exports);
var _indexJs93 = require("./Slide/index.js");
var _indexJsDefault90 = parcelHelpers.interopDefault(_indexJs93);
parcelHelpers.exportAll(_indexJs93, exports);
var _indexJs94 = require("./Slider/index.js");
var _indexJsDefault91 = parcelHelpers.interopDefault(_indexJs94);
parcelHelpers.exportAll(_indexJs94, exports);
var _indexJs95 = require("./Snackbar/index.js");
var _indexJsDefault92 = parcelHelpers.interopDefault(_indexJs95);
parcelHelpers.exportAll(_indexJs95, exports);
var _indexJs96 = require("./SnackbarContent/index.js");
var _indexJsDefault93 = parcelHelpers.interopDefault(_indexJs96);
parcelHelpers.exportAll(_indexJs96, exports);
var _indexJs97 = require("./SpeedDial/index.js");
var _indexJsDefault94 = parcelHelpers.interopDefault(_indexJs97);
parcelHelpers.exportAll(_indexJs97, exports);
var _indexJs98 = require("./SpeedDialAction/index.js");
var _indexJsDefault95 = parcelHelpers.interopDefault(_indexJs98);
parcelHelpers.exportAll(_indexJs98, exports);
var _indexJs99 = require("./SpeedDialIcon/index.js");
var _indexJsDefault96 = parcelHelpers.interopDefault(_indexJs99);
parcelHelpers.exportAll(_indexJs99, exports);
var _indexJs100 = require("./Stack/index.js");
var _indexJsDefault97 = parcelHelpers.interopDefault(_indexJs100);
parcelHelpers.exportAll(_indexJs100, exports);
var _indexJs101 = require("./Step/index.js");
var _indexJsDefault98 = parcelHelpers.interopDefault(_indexJs101);
parcelHelpers.exportAll(_indexJs101, exports);
var _indexJs102 = require("./StepButton/index.js");
var _indexJsDefault99 = parcelHelpers.interopDefault(_indexJs102);
parcelHelpers.exportAll(_indexJs102, exports);
var _indexJs103 = require("./StepConnector/index.js");
var _indexJsDefault100 = parcelHelpers.interopDefault(_indexJs103);
parcelHelpers.exportAll(_indexJs103, exports);
var _indexJs104 = require("./StepContent/index.js");
var _indexJsDefault101 = parcelHelpers.interopDefault(_indexJs104);
parcelHelpers.exportAll(_indexJs104, exports);
var _indexJs105 = require("./StepIcon/index.js");
var _indexJsDefault102 = parcelHelpers.interopDefault(_indexJs105);
parcelHelpers.exportAll(_indexJs105, exports);
var _indexJs106 = require("./StepLabel/index.js");
var _indexJsDefault103 = parcelHelpers.interopDefault(_indexJs106);
parcelHelpers.exportAll(_indexJs106, exports);
var _indexJs107 = require("./Stepper/index.js");
var _indexJsDefault104 = parcelHelpers.interopDefault(_indexJs107);
parcelHelpers.exportAll(_indexJs107, exports);
var _indexJs108 = require("./SvgIcon/index.js");
var _indexJsDefault105 = parcelHelpers.interopDefault(_indexJs108);
parcelHelpers.exportAll(_indexJs108, exports);
var _indexJs109 = require("./SwipeableDrawer/index.js");
var _indexJsDefault106 = parcelHelpers.interopDefault(_indexJs109);
parcelHelpers.exportAll(_indexJs109, exports);
var _indexJs110 = require("./Switch/index.js");
var _indexJsDefault107 = parcelHelpers.interopDefault(_indexJs110);
parcelHelpers.exportAll(_indexJs110, exports);
var _indexJs111 = require("./Tab/index.js");
var _indexJsDefault108 = parcelHelpers.interopDefault(_indexJs111);
parcelHelpers.exportAll(_indexJs111, exports);
var _indexJs112 = require("./Table/index.js");
var _indexJsDefault109 = parcelHelpers.interopDefault(_indexJs112);
parcelHelpers.exportAll(_indexJs112, exports);
var _indexJs113 = require("./TableBody/index.js");
var _indexJsDefault110 = parcelHelpers.interopDefault(_indexJs113);
parcelHelpers.exportAll(_indexJs113, exports);
var _indexJs114 = require("./TableCell/index.js");
var _indexJsDefault111 = parcelHelpers.interopDefault(_indexJs114);
parcelHelpers.exportAll(_indexJs114, exports);
var _indexJs115 = require("./TableContainer/index.js");
var _indexJsDefault112 = parcelHelpers.interopDefault(_indexJs115);
parcelHelpers.exportAll(_indexJs115, exports);
var _indexJs116 = require("./TableFooter/index.js");
var _indexJsDefault113 = parcelHelpers.interopDefault(_indexJs116);
parcelHelpers.exportAll(_indexJs116, exports);
var _indexJs117 = require("./TableHead/index.js");
var _indexJsDefault114 = parcelHelpers.interopDefault(_indexJs117);
parcelHelpers.exportAll(_indexJs117, exports);
var _indexJs118 = require("./TablePagination/index.js");
var _indexJsDefault115 = parcelHelpers.interopDefault(_indexJs118);
parcelHelpers.exportAll(_indexJs118, exports);
var _indexJs119 = require("./TablePaginationActions/index.js");
var _indexJsDefault116 = parcelHelpers.interopDefault(_indexJs119);
parcelHelpers.exportAll(_indexJs119, exports);
var _indexJs120 = require("./TableRow/index.js");
var _indexJsDefault117 = parcelHelpers.interopDefault(_indexJs120);
parcelHelpers.exportAll(_indexJs120, exports);
var _indexJs121 = require("./TableSortLabel/index.js");
var _indexJsDefault118 = parcelHelpers.interopDefault(_indexJs121);
parcelHelpers.exportAll(_indexJs121, exports);
var _indexJs122 = require("./Tabs/index.js");
var _indexJsDefault119 = parcelHelpers.interopDefault(_indexJs122);
parcelHelpers.exportAll(_indexJs122, exports);
var _indexJs123 = require("./TabScrollButton/index.js");
var _indexJsDefault120 = parcelHelpers.interopDefault(_indexJs123);
parcelHelpers.exportAll(_indexJs123, exports);
var _indexJs124 = require("./TextField/index.js");
var _indexJsDefault121 = parcelHelpers.interopDefault(_indexJs124);
parcelHelpers.exportAll(_indexJs124, exports);
var _indexJs125 = require("./TextareaAutosize/index.js");
var _indexJsDefault122 = parcelHelpers.interopDefault(_indexJs125);
parcelHelpers.exportAll(_indexJs125, exports);
var _indexJs126 = require("./ToggleButton/index.js");
var _indexJsDefault123 = parcelHelpers.interopDefault(_indexJs126);
parcelHelpers.exportAll(_indexJs126, exports);
var _indexJs127 = require("./ToggleButtonGroup/index.js");
var _indexJsDefault124 = parcelHelpers.interopDefault(_indexJs127);
parcelHelpers.exportAll(_indexJs127, exports);
var _indexJs128 = require("./Toolbar/index.js");
var _indexJsDefault125 = parcelHelpers.interopDefault(_indexJs128);
parcelHelpers.exportAll(_indexJs128, exports);
var _indexJs129 = require("./Tooltip/index.js");
var _indexJsDefault126 = parcelHelpers.interopDefault(_indexJs129);
parcelHelpers.exportAll(_indexJs129, exports);
var _indexJs130 = require("./Typography/index.js");
var _indexJsDefault127 = parcelHelpers.interopDefault(_indexJs130);
parcelHelpers.exportAll(_indexJs130, exports);
var _indexJs131 = require("./useMediaQuery/index.js");
var _indexJsDefault128 = parcelHelpers.interopDefault(_indexJs131);
parcelHelpers.exportAll(_indexJs131, exports);
var _indexJs132 = require("./usePagination/index.js");
var _indexJsDefault129 = parcelHelpers.interopDefault(_indexJs132);
parcelHelpers.exportAll(_indexJs132, exports);
var _indexJs133 = require("./useScrollTrigger/index.js");
var _indexJsDefault130 = parcelHelpers.interopDefault(_indexJs133);
parcelHelpers.exportAll(_indexJs133, exports);
var _indexJs134 = require("./Zoom/index.js");
var _indexJsDefault131 = parcelHelpers.interopDefault(_indexJs134);
parcelHelpers.exportAll(_indexJs134, exports);
var _indexJs135 = require("./useAutocomplete/index.js");
var _indexJsDefault132 = parcelHelpers.interopDefault(_indexJs135);
var _indexJs136 = require("./GlobalStyles/index.js");
var _indexJsDefault133 = parcelHelpers.interopDefault(_indexJs136);
parcelHelpers.exportAll(_indexJs136, exports);
var _composeClasses = require("@mui/utils/composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _indexJs137 = require("./generateUtilityClass/index.js");
var _indexJsDefault134 = parcelHelpers.interopDefault(_indexJs137);
parcelHelpers.exportAll(_indexJs137, exports);
var _indexJs138 = require("./generateUtilityClasses/index.js");
var _indexJsDefault135 = parcelHelpers.interopDefault(_indexJs138);
var _indexJs139 = require("./Unstable_TrapFocus/index.js");
var _indexJsDefault136 = parcelHelpers.interopDefault(_indexJs139);
var _indexJs140 = require("./version/index.js");
parcelHelpers.exportAll(_indexJs140, exports);
var _indexJs141 = require("./InitColorSchemeScript/index.js");
var _indexJsDefault137 = parcelHelpers.interopDefault(_indexJs141);

},{"./colors/index.js":false,"./styles/index.js":false,"./utils/index.js":false,"./Accordion/index.js":false,"./AccordionActions/index.js":false,"./AccordionDetails/index.js":false,"./AccordionSummary/index.js":false,"./Alert/index.js":false,"./AlertTitle/index.js":false,"./AppBar/index.js":false,"./Autocomplete/index.js":false,"./Avatar/index.js":false,"./AvatarGroup/index.js":false,"./Backdrop/index.js":false,"./Badge/index.js":false,"./BottomNavigation/index.js":false,"./BottomNavigationAction/index.js":false,"./Box/index.js":false,"./Breadcrumbs/index.js":false,"./Button/index.js":"8mNqw","./ButtonBase/index.js":false,"./ButtonGroup/index.js":false,"./Card/index.js":false,"./CardActionArea/index.js":false,"./CardActions/index.js":false,"./CardContent/index.js":false,"./CardHeader/index.js":false,"./CardMedia/index.js":false,"./Checkbox/index.js":false,"./Chip/index.js":false,"./CircularProgress/index.js":false,"./ClickAwayListener/index.js":false,"./Collapse/index.js":false,"./Container/index.js":false,"./CssBaseline/index.js":false,"./darkScrollbar/index.js":false,"./Dialog/index.js":false,"./DialogActions/index.js":false,"./DialogContent/index.js":false,"./DialogContentText/index.js":false,"./DialogTitle/index.js":false,"./Divider/index.js":false,"./Drawer/index.js":false,"./Fab/index.js":false,"./Fade/index.js":false,"./FilledInput/index.js":false,"./FormControl/index.js":false,"./FormControlLabel/index.js":false,"./FormGroup/index.js":false,"./FormHelperText/index.js":false,"./FormLabel/index.js":false,"./GridLegacy/index.js":false,"./Grid/index.js":false,"./Grow/index.js":false,"./Icon/index.js":false,"./IconButton/index.js":false,"./ImageList/index.js":false,"./ImageListItem/index.js":false,"./ImageListItemBar/index.js":false,"./Input/index.js":false,"./InputAdornment/index.js":false,"./InputBase/index.js":false,"./InputLabel/index.js":false,"./LinearProgress/index.js":false,"./Link/index.js":false,"./List/index.js":false,"./ListItem/index.js":false,"./ListItemAvatar/index.js":false,"./ListItemButton/index.js":false,"./ListItemIcon/index.js":false,"./ListItemSecondaryAction/index.js":false,"./ListItemText/index.js":false,"./ListSubheader/index.js":false,"./Menu/index.js":false,"./MenuItem/index.js":false,"./MenuList/index.js":false,"./MobileStepper/index.js":false,"./Modal/index.js":false,"./NativeSelect/index.js":false,"./NoSsr/index.js":false,"./OutlinedInput/index.js":false,"./Pagination/index.js":false,"./PaginationItem/index.js":false,"./Paper/index.js":false,"./Popover/index.js":false,"./Popper/index.js":false,"./Portal/index.js":false,"./Radio/index.js":false,"./RadioGroup/index.js":false,"./Rating/index.js":false,"./ScopedCssBaseline/index.js":false,"./Select/index.js":false,"./Skeleton/index.js":false,"./Slide/index.js":false,"./Slider/index.js":false,"./Snackbar/index.js":false,"./SnackbarContent/index.js":false,"./SpeedDial/index.js":false,"./SpeedDialAction/index.js":false,"./SpeedDialIcon/index.js":false,"./Stack/index.js":false,"./Step/index.js":false,"./StepButton/index.js":false,"./StepConnector/index.js":false,"./StepContent/index.js":false,"./StepIcon/index.js":false,"./StepLabel/index.js":false,"./Stepper/index.js":false,"./SvgIcon/index.js":false,"./SwipeableDrawer/index.js":false,"./Switch/index.js":false,"./Tab/index.js":false,"./Table/index.js":false,"./TableBody/index.js":false,"./TableCell/index.js":false,"./TableContainer/index.js":false,"./TableFooter/index.js":false,"./TableHead/index.js":false,"./TablePagination/index.js":false,"./TablePaginationActions/index.js":false,"./TableRow/index.js":false,"./TableSortLabel/index.js":false,"./Tabs/index.js":false,"./TabScrollButton/index.js":false,"./TextField/index.js":false,"./TextareaAutosize/index.js":false,"./ToggleButton/index.js":false,"./ToggleButtonGroup/index.js":false,"./Toolbar/index.js":false,"./Tooltip/index.js":false,"./Typography/index.js":false,"./useMediaQuery/index.js":false,"./usePagination/index.js":false,"./useScrollTrigger/index.js":false,"./Zoom/index.js":false,"./useAutocomplete/index.js":false,"./GlobalStyles/index.js":false,"@mui/utils/composeClasses":false,"./generateUtilityClass/index.js":false,"./generateUtilityClasses/index.js":false,"./Unstable_TrapFocus/index.js":false,"./version/index.js":false,"./InitColorSchemeScript/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"72hxJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "capitalize", ()=>(0, _capitalizeJsDefault.default));
parcelHelpers.export(exports, "createChainedFunction", ()=>(0, _createChainedFunctionJsDefault.default));
parcelHelpers.export(exports, "createSvgIcon", ()=>(0, _createSvgIconJsDefault.default));
parcelHelpers.export(exports, "debounce", ()=>(0, _debounceJsDefault.default));
parcelHelpers.export(exports, "deprecatedPropType", ()=>(0, _deprecatedPropTypeJsDefault.default));
parcelHelpers.export(exports, "isMuiElement", ()=>(0, _isMuiElementJsDefault.default));
parcelHelpers.export(exports, "unstable_memoTheme", ()=>(0, _memoThemeJsDefault.default));
parcelHelpers.export(exports, "ownerDocument", ()=>(0, _ownerDocumentJsDefault.default));
parcelHelpers.export(exports, "ownerWindow", ()=>(0, _ownerWindowJsDefault.default));
parcelHelpers.export(exports, "requirePropFactory", ()=>(0, _requirePropFactoryJsDefault.default));
parcelHelpers.export(exports, "setRef", ()=>(0, _setRefJsDefault.default));
parcelHelpers.export(exports, "unstable_useEnhancedEffect", ()=>(0, _useEnhancedEffectJsDefault.default));
parcelHelpers.export(exports, "unstable_useId", ()=>(0, _useIdJsDefault.default));
parcelHelpers.export(exports, "unsupportedProp", ()=>(0, _unsupportedPropJsDefault.default));
parcelHelpers.export(exports, "useControlled", ()=>(0, _useControlledJsDefault.default));
parcelHelpers.export(exports, "useEventCallback", ()=>(0, _useEventCallbackJsDefault.default));
parcelHelpers.export(exports, "useForkRef", ()=>(0, _useForkRefJsDefault.default));
parcelHelpers.export(exports, "mergeSlotProps", ()=>(0, _mergeSlotPropsJsDefault.default));
parcelHelpers.export(exports, "unstable_ClassNameGenerator", ()=>unstable_ClassNameGenerator);
var _classNameGenerator = require("@mui/utils/ClassNameGenerator");
var _classNameGeneratorDefault = parcelHelpers.interopDefault(_classNameGenerator);
var _capitalizeJs = require("./capitalize.js");
var _capitalizeJsDefault = parcelHelpers.interopDefault(_capitalizeJs);
var _createChainedFunctionJs = require("./createChainedFunction.js");
var _createChainedFunctionJsDefault = parcelHelpers.interopDefault(_createChainedFunctionJs);
var _createSvgIconJs = require("./createSvgIcon.js");
var _createSvgIconJsDefault = parcelHelpers.interopDefault(_createSvgIconJs);
var _debounceJs = require("./debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _deprecatedPropTypeJs = require("./deprecatedPropType.js");
var _deprecatedPropTypeJsDefault = parcelHelpers.interopDefault(_deprecatedPropTypeJs);
var _isMuiElementJs = require("./isMuiElement.js");
var _isMuiElementJsDefault = parcelHelpers.interopDefault(_isMuiElementJs);
var _memoThemeJs = require("./memoTheme.js");
var _memoThemeJsDefault = parcelHelpers.interopDefault(_memoThemeJs);
var _ownerDocumentJs = require("./ownerDocument.js");
var _ownerDocumentJsDefault = parcelHelpers.interopDefault(_ownerDocumentJs);
var _ownerWindowJs = require("./ownerWindow.js");
var _ownerWindowJsDefault = parcelHelpers.interopDefault(_ownerWindowJs);
var _requirePropFactoryJs = require("./requirePropFactory.js");
var _requirePropFactoryJsDefault = parcelHelpers.interopDefault(_requirePropFactoryJs);
var _setRefJs = require("./setRef.js");
var _setRefJsDefault = parcelHelpers.interopDefault(_setRefJs);
var _useEnhancedEffectJs = require("./useEnhancedEffect.js");
var _useEnhancedEffectJsDefault = parcelHelpers.interopDefault(_useEnhancedEffectJs);
var _useIdJs = require("./useId.js");
var _useIdJsDefault = parcelHelpers.interopDefault(_useIdJs);
var _unsupportedPropJs = require("./unsupportedProp.js");
var _unsupportedPropJsDefault = parcelHelpers.interopDefault(_unsupportedPropJs);
var _useControlledJs = require("./useControlled.js");
var _useControlledJsDefault = parcelHelpers.interopDefault(_useControlledJs);
var _useEventCallbackJs = require("./useEventCallback.js");
var _useEventCallbackJsDefault = parcelHelpers.interopDefault(_useEventCallbackJs);
var _useForkRefJs = require("./useForkRef.js");
var _useForkRefJsDefault = parcelHelpers.interopDefault(_useForkRefJs);
var _mergeSlotPropsJs = require("./mergeSlotProps.js");
var _mergeSlotPropsJsDefault = parcelHelpers.interopDefault(_mergeSlotPropsJs);
'use client';
const unstable_ClassNameGenerator = {
    configure: (generator)=>{
        console.warn([
            'MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.',
            '',
            "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead",
            '',
            'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401',
            '',
            'The updated documentation: https://mui.com/guides/classname-generator/'
        ].join('\n'));
        (0, _classNameGeneratorDefault.default).configure(generator);
    }
};

},{"@mui/utils/ClassNameGenerator":"16RUE","./capitalize.js":false,"./createChainedFunction.js":false,"./createSvgIcon.js":false,"./debounce.js":false,"./deprecatedPropType.js":false,"./isMuiElement.js":false,"./memoTheme.js":false,"./ownerDocument.js":false,"./ownerWindow.js":false,"./requirePropFactory.js":false,"./setRef.js":false,"./useEnhancedEffect.js":false,"./useId.js":"6Xphm","./unsupportedProp.js":false,"./useControlled.js":false,"./useEventCallback.js":false,"./useForkRef.js":false,"./mergeSlotProps.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"16RUE":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("df424a7de586c49b").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _ClassNameGenerator.default;
    }
});
var _ClassNameGenerator = _interopRequireDefault(require("7e3b9dcb9e23db8f"));

},{"df424a7de586c49b":"1P3rZ","7e3b9dcb9e23db8f":"7ywQd"}],"1P3rZ":[function(require,module,exports,__globalThis) {
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        "default": e
    };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"7ywQd":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
const defaultGenerator = (componentName)=>componentName;
const createClassNameGenerator = ()=>{
    let generate = defaultGenerator;
    return {
        configure (generator) {
            generate = generator;
        },
        generate (componentName) {
            return generate(componentName);
        },
        reset () {
            generate = defaultGenerator;
        }
    };
};
const ClassNameGenerator = createClassNameGenerator();
var _default = exports.default = ClassNameGenerator;

},{}],"iSGWv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _capitalize = require("@mui/utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
exports.default = (0, _capitalizeDefault.default);

},{"@mui/utils/capitalize":"igOKi","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"igOKi":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("f33d5c34454e99d8").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _capitalize.default;
    }
});
var _capitalize = _interopRequireDefault(require("925664e156164044"));

},{"f33d5c34454e99d8":"1P3rZ","925664e156164044":"jRJMj"}],"jRJMj":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("d039b89513d81de0").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = capitalize;
var _formatMuiErrorMessage = _interopRequireDefault(require("a23f41b4ce1c9118"));
// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
//
// A strict capitalization should uppercase the first letter of each word in the sentence.
// We only handle the first word.
function capitalize(string) {
    if (typeof string !== 'string') throw new Error('MUI: `capitalize(string)` expects a string argument.');
    return string.charAt(0).toUpperCase() + string.slice(1);
}

},{"d039b89513d81de0":"1P3rZ","a23f41b4ce1c9118":"cXsuk"}],"cXsuk":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("3789a633fdd91012").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _formatMuiErrorMessage.default;
    }
});
var _formatMuiErrorMessage = _interopRequireDefault(require("dea94008ecf6d708"));

},{"3789a633fdd91012":"1P3rZ","dea94008ecf6d708":"kH35D"}],"kH35D":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = formatMuiErrorMessage;
/**
 * WARNING: Don't import this directly. It's imported by the code generated by
 * `@mui/interal-babel-plugin-minify-errors`. Make sure to always use string literals in `Error`
 * constructors to ensure the plugin works as expected. Supported patterns include:
 *   throw new Error('My message');
 *   throw new Error(`My message: ${foo}`);
 *   throw new Error(`My message: ${foo}` + 'another string');
 *   ...
 * @param {number} code
 */ function formatMuiErrorMessage(code, ...args) {
    const url = new URL(`https://mui.com/production-error/?code=${code}`);
    args.forEach((arg)=>url.searchParams.append('args[]', arg));
    return `Minified MUI error #${code}; visit ${url} for the full message.`;
}

},{}],"eiXb0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _system = require("@mui/system");
const memoTheme = (0, _system.unstable_memoTheme);
exports.default = memoTheme;

},{"@mui/system":"1WaIj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1WaIj":[function(require,module,exports,__globalThis) {
/**
 * @mui/system v7.1.1
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "css", ()=>(0, _styledEngine.css));
parcelHelpers.export(exports, "keyframes", ()=>(0, _styledEngine.keyframes));
parcelHelpers.export(exports, "StyledEngineProvider", ()=>(0, _styledEngine.StyledEngineProvider));
parcelHelpers.export(exports, "GlobalStyles", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "borders", ()=>(0, _indexJsDefault1.default));
parcelHelpers.export(exports, "breakpoints", ()=>(0, _indexJsDefault2.default));
parcelHelpers.export(exports, "cssContainerQueries", ()=>(0, _indexJsDefault3.default));
parcelHelpers.export(exports, "handleBreakpoints", ()=>(0, _indexJs2.handleBreakpoints));
parcelHelpers.export(exports, "mergeBreakpointsInOrder", ()=>(0, _indexJs2.mergeBreakpointsInOrder));
parcelHelpers.export(exports, "unstable_resolveBreakpointValues", ()=>(0, _indexJs2.resolveBreakpointValues));
parcelHelpers.export(exports, "compose", ()=>(0, _indexJsDefault4.default));
parcelHelpers.export(exports, "display", ()=>(0, _indexJsDefault5.default));
parcelHelpers.export(exports, "flexbox", ()=>(0, _indexJsDefault6.default));
parcelHelpers.export(exports, "grid", ()=>(0, _indexJsDefault7.default));
parcelHelpers.export(exports, "palette", ()=>(0, _indexJsDefault8.default));
parcelHelpers.export(exports, "positions", ()=>(0, _indexJsDefault9.default));
parcelHelpers.export(exports, "shadows", ()=>(0, _indexJsDefault10.default));
parcelHelpers.export(exports, "sizing", ()=>(0, _indexJsDefault11.default));
parcelHelpers.export(exports, "spacing", ()=>(0, _indexJsDefault12.default));
parcelHelpers.export(exports, "style", ()=>(0, _indexJsDefault13.default));
parcelHelpers.export(exports, "getPath", ()=>(0, _indexJs13.getPath));
parcelHelpers.export(exports, "getStyleValue", ()=>(0, _indexJs13.getStyleValue));
parcelHelpers.export(exports, "typography", ()=>(0, _indexJsDefault14.default));
parcelHelpers.export(exports, "unstable_styleFunctionSx", ()=>(0, _indexJsDefault15.default));
parcelHelpers.export(exports, "unstable_createStyleFunctionSx", ()=>(0, _indexJs15.unstable_createStyleFunctionSx));
parcelHelpers.export(exports, "unstable_extendSxProp", ()=>(0, _indexJs15.extendSxProp));
parcelHelpers.export(exports, "unstable_defaultSxConfig", ()=>(0, _indexJs15.unstable_defaultSxConfig));
parcelHelpers.export(exports, "unstable_getThemeValue", ()=>(0, _indexJsDefault16.default));
parcelHelpers.export(exports, "Box", ()=>(0, _indexJsDefault17.default));
parcelHelpers.export(exports, "createBox", ()=>(0, _indexJsDefault18.default));
parcelHelpers.export(exports, "createStyled", ()=>(0, _indexJsDefault19.default));
parcelHelpers.export(exports, "styled", ()=>(0, _indexJsDefault20.default));
parcelHelpers.export(exports, "createTheme", ()=>(0, _indexJsDefault21.default));
parcelHelpers.export(exports, "createBreakpoints", ()=>(0, _createBreakpointsJsDefault.default));
parcelHelpers.export(exports, "createSpacing", ()=>(0, _createSpacingJsDefault.default));
parcelHelpers.export(exports, "shape", ()=>(0, _shapeJsDefault.default));
parcelHelpers.export(exports, "useThemeProps", ()=>(0, _indexJsDefault22.default));
parcelHelpers.export(exports, "getThemeProps", ()=>(0, _indexJs22.getThemeProps));
parcelHelpers.export(exports, "useTheme", ()=>(0, _indexJsDefault23.default));
parcelHelpers.export(exports, "useThemeWithoutDefault", ()=>(0, _indexJsDefault24.default));
parcelHelpers.export(exports, "useMediaQuery", ()=>(0, _indexJsDefault25.default));
parcelHelpers.export(exports, "ThemeProvider", ()=>(0, _indexJsDefault26.default));
parcelHelpers.export(exports, "unstable_memoTheme", ()=>(0, _memoThemeJsDefault.default));
parcelHelpers.export(exports, "unstable_createCssVarsProvider", ()=>(0, _createCssVarsProviderJsDefault.default));
parcelHelpers.export(exports, "unstable_createGetCssVar", ()=>(0, _createGetCssVarJsDefault.default));
parcelHelpers.export(exports, "unstable_cssVarsParser", ()=>(0, _cssVarsParserJsDefault.default));
parcelHelpers.export(exports, "unstable_prepareCssVars", ()=>(0, _prepareCssVarsJsDefault.default));
parcelHelpers.export(exports, "unstable_createCssVarsTheme", ()=>(0, _createCssVarsThemeJsDefault.default));
parcelHelpers.export(exports, "responsivePropType", ()=>(0, _indexJsDefault27.default));
parcelHelpers.export(exports, "RtlProvider", ()=>(0, _indexJsDefault28.default));
/** ----------------- */ /** Layout components */ parcelHelpers.export(exports, "createContainer", ()=>(0, _createContainerJsDefault.default));
parcelHelpers.export(exports, "Container", ()=>(0, _indexJsDefault29.default));
parcelHelpers.export(exports, "Grid", ()=>(0, _gridJsDefault.default));
parcelHelpers.export(exports, "Stack", ()=>(0, _stackJsDefault.default));
// TODO: Remove this function in v6
// eslint-disable-next-line @typescript-eslint/naming-convention
parcelHelpers.export(exports, "experimental_sx", ()=>experimental_sx);
var _formatMuiErrorMessage = require("@mui/utils/formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
var _styledEngine = require("@mui/styled-engine");
var _indexJs = require("./GlobalStyles/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("./borders/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
parcelHelpers.exportAll(_indexJs1, exports);
var _indexJs2 = require("./breakpoints/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("./cssContainerQueries/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs3);
var _indexJs4 = require("./compose/index.js");
var _indexJsDefault4 = parcelHelpers.interopDefault(_indexJs4);
var _indexJs5 = require("./display/index.js");
var _indexJsDefault5 = parcelHelpers.interopDefault(_indexJs5);
var _indexJs6 = require("./flexbox/index.js");
var _indexJsDefault6 = parcelHelpers.interopDefault(_indexJs6);
parcelHelpers.exportAll(_indexJs6, exports);
var _indexJs7 = require("./cssGrid/index.js");
var _indexJsDefault7 = parcelHelpers.interopDefault(_indexJs7);
parcelHelpers.exportAll(_indexJs7, exports);
var _indexJs8 = require("./palette/index.js");
var _indexJsDefault8 = parcelHelpers.interopDefault(_indexJs8);
parcelHelpers.exportAll(_indexJs8, exports);
var _indexJs9 = require("./positions/index.js");
var _indexJsDefault9 = parcelHelpers.interopDefault(_indexJs9);
parcelHelpers.exportAll(_indexJs9, exports);
var _indexJs10 = require("./shadows/index.js");
var _indexJsDefault10 = parcelHelpers.interopDefault(_indexJs10);
var _indexJs11 = require("./sizing/index.js");
var _indexJsDefault11 = parcelHelpers.interopDefault(_indexJs11);
parcelHelpers.exportAll(_indexJs11, exports);
var _indexJs12 = require("./spacing/index.js");
var _indexJsDefault12 = parcelHelpers.interopDefault(_indexJs12);
parcelHelpers.exportAll(_indexJs12, exports);
var _indexJs13 = require("./style/index.js");
var _indexJsDefault13 = parcelHelpers.interopDefault(_indexJs13);
var _indexJs14 = require("./typography/index.js");
var _indexJsDefault14 = parcelHelpers.interopDefault(_indexJs14);
parcelHelpers.exportAll(_indexJs14, exports);
var _indexJs15 = require("./styleFunctionSx/index.js");
var _indexJsDefault15 = parcelHelpers.interopDefault(_indexJs15);
var _indexJs16 = require("./getThemeValue/index.js");
var _indexJsDefault16 = parcelHelpers.interopDefault(_indexJs16);
var _indexJs17 = require("./Box/index.js");
var _indexJsDefault17 = parcelHelpers.interopDefault(_indexJs17);
var _indexJs18 = require("./createBox/index.js");
var _indexJsDefault18 = parcelHelpers.interopDefault(_indexJs18);
var _indexJs19 = require("./createStyled/index.js");
var _indexJsDefault19 = parcelHelpers.interopDefault(_indexJs19);
parcelHelpers.exportAll(_indexJs19, exports);
var _indexJs20 = require("./styled/index.js");
var _indexJsDefault20 = parcelHelpers.interopDefault(_indexJs20);
var _indexJs21 = require("./createTheme/index.js");
var _indexJsDefault21 = parcelHelpers.interopDefault(_indexJs21);
var _createBreakpointsJs = require("./createBreakpoints/createBreakpoints.js");
var _createBreakpointsJsDefault = parcelHelpers.interopDefault(_createBreakpointsJs);
var _createSpacingJs = require("./createTheme/createSpacing.js");
var _createSpacingJsDefault = parcelHelpers.interopDefault(_createSpacingJs);
var _shapeJs = require("./createTheme/shape.js");
var _shapeJsDefault = parcelHelpers.interopDefault(_shapeJs);
var _indexJs22 = require("./useThemeProps/index.js");
var _indexJsDefault22 = parcelHelpers.interopDefault(_indexJs22);
var _indexJs23 = require("./useTheme/index.js");
var _indexJsDefault23 = parcelHelpers.interopDefault(_indexJs23);
var _indexJs24 = require("./useThemeWithoutDefault/index.js");
var _indexJsDefault24 = parcelHelpers.interopDefault(_indexJs24);
var _indexJs25 = require("./useMediaQuery/index.js");
var _indexJsDefault25 = parcelHelpers.interopDefault(_indexJs25);
var _indexJs26 = require("./colorManipulator/index.js");
parcelHelpers.exportAll(_indexJs26, exports);
var _indexJs27 = require("./ThemeProvider/index.js");
var _indexJsDefault26 = parcelHelpers.interopDefault(_indexJs27);
var _memoThemeJs = require("./memoTheme.js");
var _memoThemeJsDefault = parcelHelpers.interopDefault(_memoThemeJs);
var _createCssVarsProviderJs = require("./cssVars/createCssVarsProvider.js");
var _createCssVarsProviderJsDefault = parcelHelpers.interopDefault(_createCssVarsProviderJs);
var _createGetCssVarJs = require("./cssVars/createGetCssVar.js");
var _createGetCssVarJsDefault = parcelHelpers.interopDefault(_createGetCssVarJs);
var _cssVarsParserJs = require("./cssVars/cssVarsParser.js");
var _cssVarsParserJsDefault = parcelHelpers.interopDefault(_cssVarsParserJs);
var _prepareCssVarsJs = require("./cssVars/prepareCssVars.js");
var _prepareCssVarsJsDefault = parcelHelpers.interopDefault(_prepareCssVarsJs);
var _createCssVarsThemeJs = require("./cssVars/createCssVarsTheme.js");
var _createCssVarsThemeJsDefault = parcelHelpers.interopDefault(_createCssVarsThemeJs);
var _indexJs28 = require("./responsivePropType/index.js");
var _indexJsDefault27 = parcelHelpers.interopDefault(_indexJs28);
var _indexJs29 = require("./RtlProvider/index.js");
var _indexJsDefault28 = parcelHelpers.interopDefault(_indexJs29);
parcelHelpers.exportAll(_indexJs29, exports);
var _indexJs30 = require("./version/index.js");
parcelHelpers.exportAll(_indexJs30, exports);
var _createContainerJs = require("./Container/createContainer.js");
var _createContainerJsDefault = parcelHelpers.interopDefault(_createContainerJs);
var _indexJs31 = require("./Container/index.js");
var _indexJsDefault29 = parcelHelpers.interopDefault(_indexJs31);
parcelHelpers.exportAll(_indexJs31, exports);
var _gridJs = require("./Grid/Grid.js");
var _gridJsDefault = parcelHelpers.interopDefault(_gridJs);
var _indexJs32 = require("./Grid/index.js");
parcelHelpers.exportAll(_indexJs32, exports);
var _stackJs = require("./Stack/Stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _indexJs33 = require("./Stack/index.js");
parcelHelpers.exportAll(_indexJs33, exports);
function experimental_sx() {
    throw new Error("MUI: The `experimental_sx` has been moved to `theme.unstable_sx`.For more details, see https://github.com/mui/material-ui/pull/35150.");
}

},{"@mui/utils/formatMuiErrorMessage":"cXsuk","@mui/styled-engine":"g3Wsb","./GlobalStyles/index.js":"gydLr","./borders/index.js":false,"./breakpoints/index.js":false,"./cssContainerQueries/index.js":false,"./compose/index.js":false,"./display/index.js":false,"./flexbox/index.js":false,"./cssGrid/index.js":false,"./palette/index.js":false,"./positions/index.js":false,"./shadows/index.js":false,"./sizing/index.js":false,"./spacing/index.js":false,"./style/index.js":false,"./typography/index.js":false,"./styleFunctionSx/index.js":false,"./getThemeValue/index.js":false,"./Box/index.js":false,"./createBox/index.js":false,"./createStyled/index.js":false,"./styled/index.js":false,"./createTheme/index.js":false,"./createBreakpoints/createBreakpoints.js":false,"./createTheme/createSpacing.js":"kfQyL","./createTheme/shape.js":false,"./useThemeProps/index.js":false,"./useTheme/index.js":false,"./useThemeWithoutDefault/index.js":false,"./useMediaQuery/index.js":false,"./colorManipulator/index.js":false,"./ThemeProvider/index.js":false,"./memoTheme.js":"d9QFz","./cssVars/createCssVarsProvider.js":false,"./cssVars/createGetCssVar.js":"fpIeq","./cssVars/cssVarsParser.js":false,"./cssVars/prepareCssVars.js":false,"./cssVars/createCssVarsTheme.js":false,"./responsivePropType/index.js":false,"./RtlProvider/index.js":false,"./version/index.js":false,"./Container/createContainer.js":false,"./Container/index.js":false,"./Grid/Grid.js":false,"./Grid/index.js":false,"./Stack/Stack.js":false,"./Stack/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"g3Wsb":[function(require,module,exports,__globalThis) {
/**
 * @mui/styled-engine v7.1.1
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ThemeContext", ()=>(0, _react.ThemeContext));
parcelHelpers.export(exports, "keyframes", ()=>(0, _react.keyframes));
parcelHelpers.export(exports, "css", ()=>(0, _react.css));
parcelHelpers.export(exports, "StyledEngineProvider", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "GlobalStyles", ()=>(0, _indexJsDefault1.default));
parcelHelpers.export(exports, "default", ()=>styled);
// eslint-disable-next-line @typescript-eslint/naming-convention
parcelHelpers.export(exports, "internal_mutateStyles", ()=>internal_mutateStyles);
// eslint-disable-next-line @typescript-eslint/naming-convention
parcelHelpers.export(exports, "internal_serializeStyles", ()=>internal_serializeStyles);
/* eslint-disable no-underscore-dangle */ var _styled = require("@emotion/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _serialize = require("@emotion/serialize");
var _react = require("@emotion/react");
var _indexJs = require("./StyledEngineProvider/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("./GlobalStyles/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
'use client';
function styled(tag, options) {
    const stylesFactory = (0, _styledDefault.default)(tag, options);
    return (...styles)=>{
        const component = typeof tag === 'string' ? `"${tag}"` : 'component';
        if (styles.length === 0) console.error([
            `MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`,
            'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'
        ].join('\n'));
        else if (styles.some((style)=>style === undefined)) console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        return stylesFactory(...styles);
    };
}
function internal_mutateStyles(tag, processor) {
    // Emotion attaches all the styles as `__emotion_styles`.
    // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
    if (Array.isArray(tag.__emotion_styles)) tag.__emotion_styles = processor(tag.__emotion_styles);
}
// Emotion only accepts an array, but we want to avoid allocations
const wrapper = [];
function internal_serializeStyles(styles) {
    wrapper[0] = styles;
    return (0, _serialize.serializeStyles)(wrapper);
}

},{"@emotion/styled":"5FnKv","@emotion/serialize":"4vIHo","@emotion/react":"cLTfV","./StyledEngineProvider/index.js":"c8dr0","./GlobalStyles/index.js":"63bLm","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5FnKv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>newStyled);
var _emotionStyledBaseEsmJs = require("../base/dist/emotion-styled-base.esm.js");
var _emotionStyledBaseEsmJsDefault = parcelHelpers.interopDefault(_emotionStyledBaseEsmJs);
var _extends = require("@babel/runtime/helpers/extends");
var _react = require("@emotion/react");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var _utils = require("@emotion/utils");
var _react1 = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var tags = [
    'a',
    'abbr',
    'address',
    'area',
    'article',
    'aside',
    'audio',
    'b',
    'base',
    'bdi',
    'bdo',
    'big',
    'blockquote',
    'body',
    'br',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'col',
    'colgroup',
    'data',
    'datalist',
    'dd',
    'del',
    'details',
    'dfn',
    'dialog',
    'div',
    'dl',
    'dt',
    'em',
    'embed',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hgroup',
    'hr',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'keygen',
    'label',
    'legend',
    'li',
    'link',
    'main',
    'map',
    'mark',
    'marquee',
    'menu',
    'menuitem',
    'meta',
    'meter',
    'nav',
    'noscript',
    'object',
    'ol',
    'optgroup',
    'option',
    'output',
    'p',
    'param',
    'picture',
    'pre',
    'progress',
    'q',
    'rp',
    'rt',
    'ruby',
    's',
    'samp',
    'script',
    'section',
    'select',
    'small',
    'source',
    'span',
    'strong',
    'style',
    'sub',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'title',
    'tr',
    'track',
    'u',
    'ul',
    'var',
    'video',
    'wbr',
    'circle',
    'clipPath',
    'defs',
    'ellipse',
    'foreignObject',
    'g',
    'image',
    'line',
    'linearGradient',
    'mask',
    'path',
    'pattern',
    'polygon',
    'polyline',
    'radialGradient',
    'rect',
    'stop',
    'svg',
    'text',
    'tspan'
];
// bind it to avoid mutating the original function
var newStyled = (0, _emotionStyledBaseEsmJsDefault.default).bind(null);
tags.forEach(function(tagName) {
    newStyled[tagName] = newStyled(tagName);
});

},{"../base/dist/emotion-styled-base.esm.js":"2iZ47","@babel/runtime/helpers/extends":"lKa0J","@emotion/react":"cLTfV","@emotion/serialize":"4vIHo","@emotion/use-insertion-effect-with-fallbacks":"fImkp","@emotion/utils":"cQ0xH","react":"jMk1U","@emotion/is-prop-valid":"64e9S","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2iZ47":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createStyled);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("@emotion/react");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var _utils = require("@emotion/utils");
var _react1 = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _isPropValidDefault = parcelHelpers.interopDefault(_isPropValid);
var isBrowser = typeof document !== 'undefined';
var isDevelopment = false;
var testOmitPropsOnStringTag = (0, _isPropValidDefault.default);
var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
    return key !== 'theme';
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
    return typeof tag === 'string' && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
    var shouldForwardProp;
    if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp !== 'function' && isReal) shouldForwardProp = tag.__emotion_forwardProp;
    return shouldForwardProp;
};
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    (0, _utils.registerStyles)(cache, serialized, isStringTag);
    var rules = (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        return (0, _utils.insertStyles)(cache, serialized, isStringTag);
    });
    if (!isBrowser && rules !== undefined) {
        var _ref2;
        var serializedNames = serialized.name;
        var next = serialized.next;
        while(next !== undefined){
            serializedNames += ' ' + next.name;
            next = next.next;
        }
        return /*#__PURE__*/ _react1.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
    }
    return null;
};
var createStyled = function createStyled(tag, options) {
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== undefined) {
        identifierName = options.label;
        targetClassName = options.target;
    }
    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp('as');
    return function() {
        // eslint-disable-next-line prefer-rest-params
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== undefined) styles.push("label:" + identifierName + ";");
        if (args[0] == null || args[0].raw === undefined) // eslint-disable-next-line prefer-spread
        styles.push.apply(styles, args);
        else {
            var templateStringsArr = args[0];
            styles.push(templateStringsArr[0]);
            var len = args.length;
            var i = 1;
            for(; i < len; i++)styles.push(args[i], templateStringsArr[i]);
        }
        var Styled = (0, _react.withEmotionCache)(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = '';
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
                mergedProps = {};
                for(var key in props)mergedProps[key] = props[key];
                mergedProps.theme = _react1.useContext((0, _react.ThemeContext));
            }
            if (typeof props.className === 'string') className = (0, _utils.getRegisteredStyles)(cache.registered, classInterpolations, props.className);
            else if (props.className != null) className = props.className + " ";
            var serialized = (0, _serialize.serializeStyles)(styles.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== undefined) className += " " + targetClassName;
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for(var _key in props){
                if (shouldUseAs && _key === 'as') continue;
                if (finalShouldForwardProp(_key)) newProps[_key] = props[_key];
            }
            newProps.className = className;
            if (ref) newProps.ref = ref;
            return /*#__PURE__*/ _react1.createElement(_react1.Fragment, null, /*#__PURE__*/ _react1.createElement(Insertion, {
                cache: cache,
                serialized: serialized,
                isStringTag: typeof FinalTag === 'string'
            }), /*#__PURE__*/ _react1.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, 'toString', {
            value: function value() {
                if (targetClassName === undefined && isDevelopment) return 'NO_COMPONENT_SELECTOR';
                return "." + targetClassName;
            }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
            var newStyled = createStyled(nextTag, (0, _extendsDefault.default)({}, options, nextOptions, {
                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            }));
            return newStyled.apply(void 0, styles);
        };
        return Styled;
    };
};

},{"@babel/runtime/helpers/esm/extends":"20my9","@emotion/react":"cLTfV","@emotion/serialize":"4vIHo","@emotion/use-insertion-effect-with-fallbacks":"fImkp","@emotion/utils":"cQ0xH","react":"jMk1U","@emotion/is-prop-valid":"64e9S","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"20my9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_extends);
function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for(var e = 1; e < arguments.length; e++){
            var t = arguments[e];
            for(var r in t)({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
        }
        return n;
    }, _extends.apply(null, arguments);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cLTfV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheProvider", ()=>(0, _emotionElementD59E098FEsmJs.C));
parcelHelpers.export(exports, "ThemeContext", ()=>(0, _emotionElementD59E098FEsmJs.T));
parcelHelpers.export(exports, "ThemeProvider", ()=>(0, _emotionElementD59E098FEsmJs.b));
parcelHelpers.export(exports, "__unsafe_useEmotionCache", ()=>(0, _emotionElementD59E098FEsmJs._));
parcelHelpers.export(exports, "useTheme", ()=>(0, _emotionElementD59E098FEsmJs.u));
parcelHelpers.export(exports, "withEmotionCache", ()=>(0, _emotionElementD59E098FEsmJs.w));
parcelHelpers.export(exports, "withTheme", ()=>(0, _emotionElementD59E098FEsmJs.d));
parcelHelpers.export(exports, "ClassNames", ()=>ClassNames);
parcelHelpers.export(exports, "Global", ()=>Global);
parcelHelpers.export(exports, "createElement", ()=>jsx);
parcelHelpers.export(exports, "css", ()=>css);
parcelHelpers.export(exports, "jsx", ()=>jsx);
parcelHelpers.export(exports, "keyframes", ()=>keyframes);
var _emotionElementD59E098FEsmJs = require("./emotion-element-d59e098f.esm.js");
var _react = require("react");
var _utils = require("@emotion/utils");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var _serialize = require("@emotion/serialize");
var _cache = require("@emotion/cache");
var _extends = require("@babel/runtime/helpers/extends");
var _weakMemoize = require("@emotion/weak-memoize");
var _emotionReactIsolatedHnrsEsmJs = require("../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js");
var _hoistNonReactStatics = require("hoist-non-react-statics");
var jsx = function jsx(type, props) {
    // eslint-disable-next-line prefer-rest-params
    var args = arguments;
    if (props == null || !(0, _emotionElementD59E098FEsmJs.h).call(props, 'css')) return _react.createElement.apply(undefined, args);
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = (0, _emotionElementD59E098FEsmJs.E);
    createElementArgArray[1] = (0, _emotionElementD59E098FEsmJs.c)(type, props);
    for(var i = 2; i < argsLength; i++)createElementArgArray[i] = args[i];
    return _react.createElement.apply(null, createElementArgArray);
};
(function(_jsx) {
    var JSX;
    JSX || (JSX = _jsx.JSX || (_jsx.JSX = {}));
})(jsx || (jsx = {}));
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag
var Global = /* #__PURE__ */ (0, _emotionElementD59E098FEsmJs.w)(function(props, cache) {
    var styles = props.styles;
    var serialized = (0, _serialize.serializeStyles)([
        styles
    ], undefined, _react.useContext((0, _emotionElementD59E098FEsmJs.T)));
    if (!(0, _emotionElementD59E098FEsmJs.i)) {
        var _ref;
        var serializedNames = serialized.name;
        var serializedStyles = serialized.styles;
        var next = serialized.next;
        while(next !== undefined){
            serializedNames += ' ' + next.name;
            serializedStyles += next.styles;
            next = next.next;
        }
        var shouldCache = cache.compat === true;
        var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
        }, cache.sheet, shouldCache);
        if (shouldCache) return null;
        return /*#__PURE__*/ _react.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref.nonce = cache.sheet.nonce, _ref));
    } // yes, i know these hooks are used conditionally
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything
    var sheetRef = _react.useRef();
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback)(function() {
        var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675
        var sheet = new cache.sheet.constructor({
            key: key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false;
        var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");
        if (cache.sheet.tags.length) sheet.before = cache.sheet.tags[0];
        if (node !== null) {
            rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s
            node.setAttribute('data-emotion', key);
            sheet.hydrate([
                node
            ]);
        }
        sheetRef.current = [
            sheet,
            rehydrating
        ];
        return function() {
            sheet.flush();
        };
    }, [
        cache
    ]);
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback)(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
        }
        if (serialized.next !== undefined) // insert keyframes
        (0, _utils.insertStyles)(cache, serialized.next, true);
        if (sheet.tags.length) {
            // if this doesn't exist then it will be null so the style element will be appended
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
    }, [
        cache,
        serialized.name
    ]);
    return null;
});
function css() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return (0, _serialize.serializeStyles)(args);
}
function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
    };
}
var classnames = function classnames(args) {
    var len = args.length;
    var i = 0;
    var cls = '';
    for(; i < len; i++){
        var arg = args[i];
        if (arg == null) continue;
        var toAdd = void 0;
        switch(typeof arg){
            case 'boolean':
                break;
            case 'object':
                if (Array.isArray(arg)) toAdd = classnames(arg);
                else {
                    toAdd = '';
                    for(var k in arg)if (arg[k] && k) {
                        toAdd && (toAdd += ' ');
                        toAdd += k;
                    }
                }
                break;
            default:
                toAdd = arg;
        }
        if (toAdd) {
            cls && (cls += ' ');
            cls += toAdd;
        }
    }
    return cls;
};
function merge(registered, css, className) {
    var registeredStyles = [];
    var rawClassName = (0, _utils.getRegisteredStyles)(registered, registeredStyles, className);
    if (registeredStyles.length < 2) return className;
    return rawClassName + css(registeredStyles);
}
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serializedArr = _ref.serializedArr;
    var rules = (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        var rules = '';
        for(var i = 0; i < serializedArr.length; i++){
            var res = (0, _utils.insertStyles)(cache, serializedArr[i], false);
            if (!(0, _emotionElementD59E098FEsmJs.i) && res !== undefined) rules += res;
        }
        if (!(0, _emotionElementD59E098FEsmJs.i)) return rules;
    });
    if (!(0, _emotionElementD59E098FEsmJs.i) && rules.length !== 0) {
        var _ref2;
        return /*#__PURE__*/ _react.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function(serialized) {
            return serialized.name;
        }).join(' '), _ref2.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
    }
    return null;
};
var ClassNames = /* #__PURE__ */ (0, _emotionElementD59E098FEsmJs.w)(function(props, cache) {
    var hasRendered = false;
    var serializedArr = [];
    var css = function css() {
        if (hasRendered && (0, _emotionElementD59E098FEsmJs.a)) throw new Error('css can only be used during render');
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var serialized = (0, _serialize.serializeStyles)(args, cache.registered);
        serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`
        (0, _utils.registerStyles)(cache, serialized, false);
        return cache.key + "-" + serialized.name;
    };
    var cx = function cx() {
        if (hasRendered && (0, _emotionElementD59E098FEsmJs.a)) throw new Error('cx can only be used during render');
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return merge(cache.registered, css, classnames(args));
    };
    var content = {
        css: css,
        cx: cx,
        theme: _react.useContext((0, _emotionElementD59E098FEsmJs.T))
    };
    var ele = props.children(content);
    hasRendered = true;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
        cache: cache,
        serializedArr: serializedArr
    }), ele);
});

},{"./emotion-element-d59e098f.esm.js":"9DJEV","react":"jMk1U","@emotion/utils":"cQ0xH","@emotion/use-insertion-effect-with-fallbacks":"fImkp","@emotion/serialize":"4vIHo","@emotion/cache":"4A5M2","@babel/runtime/helpers/extends":"lKa0J","@emotion/weak-memoize":"hrHkX","../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js":"d7gCT","hoist-non-react-statics":"h7WK5","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9DJEV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "C", ()=>CacheProvider);
parcelHelpers.export(exports, "E", ()=>Emotion$1);
parcelHelpers.export(exports, "T", ()=>ThemeContext);
parcelHelpers.export(exports, "_", ()=>__unsafe_useEmotionCache);
parcelHelpers.export(exports, "a", ()=>isDevelopment);
parcelHelpers.export(exports, "b", ()=>ThemeProvider);
parcelHelpers.export(exports, "c", ()=>createEmotionProps);
parcelHelpers.export(exports, "d", ()=>withTheme);
parcelHelpers.export(exports, "h", ()=>hasOwn);
parcelHelpers.export(exports, "i", ()=>isBrowser);
parcelHelpers.export(exports, "u", ()=>useTheme);
parcelHelpers.export(exports, "w", ()=>withEmotionCache);
var _react = require("react");
var _cache = require("@emotion/cache");
var _cacheDefault = parcelHelpers.interopDefault(_cache);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _weakMemoize = require("@emotion/weak-memoize");
var _weakMemoizeDefault = parcelHelpers.interopDefault(_weakMemoize);
var _emotionReactIsolatedHnrsEsmJs = require("../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js");
var _emotionReactIsolatedHnrsEsmJsDefault = parcelHelpers.interopDefault(_emotionReactIsolatedHnrsEsmJs);
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var isDevelopment = false;
var isBrowser = typeof document !== 'undefined';
var EmotionCacheContext = /* #__PURE__ */ _react.createContext(// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */ (0, _cacheDefault.default)({
    key: 'css'
}) : null);
var CacheProvider = EmotionCacheContext.Provider;
var __unsafe_useEmotionCache = function useEmotionCache() {
    return (0, _react.useContext)(EmotionCacheContext);
};
var withEmotionCache = function withEmotionCache(func) {
    return /*#__PURE__*/ (0, _react.forwardRef)(function(props, ref) {
        // the cache will never be null in the browser
        var cache = (0, _react.useContext)(EmotionCacheContext);
        return func(props, cache, ref);
    });
};
if (!isBrowser) withEmotionCache = function withEmotionCache(func) {
    return function(props) {
        var cache = (0, _react.useContext)(EmotionCacheContext);
        if (cache === null) {
            // yes, we're potentially creating this on every render
            // it doesn't actually matter though since it's only on the server
            // so there will only every be a single render
            // that could change in the future because of suspense and etc. but for now,
            // this works and i don't want to optimise for a future thing that we aren't sure about
            cache = (0, _cacheDefault.default)({
                key: 'css'
            });
            return /*#__PURE__*/ _react.createElement(EmotionCacheContext.Provider, {
                value: cache
            }, func(props, cache));
        } else return func(props, cache);
    };
};
var ThemeContext = /* #__PURE__ */ _react.createContext({});
var useTheme = function useTheme() {
    return _react.useContext(ThemeContext);
};
var getTheme = function getTheme(outerTheme, theme) {
    if (typeof theme === 'function') {
        var mergedTheme = theme(outerTheme);
        return mergedTheme;
    }
    return (0, _extendsDefault.default)({}, outerTheme, theme);
};
var createCacheWithTheme = /* #__PURE__ */ (0, _weakMemoizeDefault.default)(function(outerTheme) {
    return (0, _weakMemoizeDefault.default)(function(theme) {
        return getTheme(outerTheme, theme);
    });
});
var ThemeProvider = function ThemeProvider(props) {
    var theme = _react.useContext(ThemeContext);
    if (props.theme !== theme) theme = createCacheWithTheme(theme)(props.theme);
    return /*#__PURE__*/ _react.createElement(ThemeContext.Provider, {
        value: theme
    }, props.children);
};
function withTheme(Component) {
    var componentName = Component.displayName || Component.name || 'Component';
    var WithTheme = /*#__PURE__*/ _react.forwardRef(function render(props, ref) {
        var theme = _react.useContext(ThemeContext);
        return /*#__PURE__*/ _react.createElement(Component, (0, _extendsDefault.default)({
            theme: theme,
            ref: ref
        }, props));
    });
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return (0, _emotionReactIsolatedHnrsEsmJsDefault.default)(WithTheme, Component);
}
var hasOwn = {}.hasOwnProperty;
var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps(type, props) {
    var newProps = {};
    for(var _key in props)if (hasOwn.call(props, _key)) newProps[_key] = props[_key];
    newProps[typePropName] = type; // Runtime labeling is an opt-in feature because:
    return newProps;
};
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    (0, _utils.registerStyles)(cache, serialized, isStringTag);
    var rules = (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        return (0, _utils.insertStyles)(cache, serialized, isStringTag);
    });
    if (!isBrowser && rules !== undefined) {
        var _ref2;
        var serializedNames = serialized.name;
        var next = serialized.next;
        while(next !== undefined){
            serializedNames += ' ' + next.name;
            next = next.next;
        }
        return /*#__PURE__*/ _react.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
    }
    return null;
};
var Emotion = /* #__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible
    if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) cssProp = cache.registered[cssProp];
    var WrappedComponent = props[typePropName];
    var registeredStyles = [
        cssProp
    ];
    var className = '';
    if (typeof props.className === 'string') className = (0, _utils.getRegisteredStyles)(cache.registered, registeredStyles, props.className);
    else if (props.className != null) className = props.className + " ";
    var serialized = (0, _serialize.serializeStyles)(registeredStyles, undefined, _react.useContext(ThemeContext));
    className += cache.key + "-" + serialized.name;
    var newProps = {};
    for(var _key2 in props)if (hasOwn.call(props, _key2) && _key2 !== 'css' && _key2 !== typePropName && !isDevelopment) newProps[_key2] = props[_key2];
    newProps.className = className;
    if (ref) newProps.ref = ref;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof WrappedComponent === 'string'
    }), /*#__PURE__*/ _react.createElement(WrappedComponent, newProps));
});
var Emotion$1 = Emotion;

},{"react":"jMk1U","@emotion/cache":"4A5M2","@babel/runtime/helpers/esm/extends":"20my9","@emotion/weak-memoize":"hrHkX","../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js":"d7gCT","@emotion/utils":"cQ0xH","@emotion/serialize":"4vIHo","@emotion/use-insertion-effect-with-fallbacks":"fImkp","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4A5M2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createCache);
var _sheet = require("@emotion/sheet");
var _stylis = require("stylis");
var _weakMemoize = require("@emotion/weak-memoize");
var _weakMemoizeDefault = parcelHelpers.interopDefault(_weakMemoize);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var isBrowser = typeof document !== 'undefined';
var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
    var previous = 0;
    var character = 0;
    while(true){
        previous = character;
        character = (0, _stylis.peek)(); // &\f
        if (previous === 38 && character === 12) points[index] = 1;
        if ((0, _stylis.token)(character)) break;
        (0, _stylis.next)();
    }
    return (0, _stylis.slice)(begin, (0, _stylis.position));
};
var toRules = function toRules(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;
    do switch((0, _stylis.token)(character)){
        case 0:
            // &\f
            if (character === 38 && (0, _stylis.peek)() === 12) // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
            // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
            // and when it should just concatenate the outer and inner selectors
            // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
            points[index] = 1;
            parsed[index] += identifierWithPointTracking((0, _stylis.position) - 1, points, index);
            break;
        case 2:
            parsed[index] += (0, _stylis.delimit)(character);
            break;
        case 4:
            // comma
            if (character === 44) {
                // colon
                parsed[++index] = (0, _stylis.peek)() === 58 ? '&\f' : '';
                points[index] = parsed[index].length;
                break;
            }
        // fallthrough
        default:
            parsed[index] += (0, _stylis.from)(character);
    }
    while (character = (0, _stylis.next)());
    return parsed;
};
var getRules = function getRules(value, points) {
    return (0, _stylis.dealloc)(toRules((0, _stylis.alloc)(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11
var fixedElements = /* #__PURE__ */ new WeakMap();
var compat = function compat(element) {
    if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) return;
    var value = element.value;
    var parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while(parent.type !== 'rule'){
        parent = parent.parent;
        if (!parent) return;
    } // short-circuit for the simplest case
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) return;
     // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"
    if (isImplicitRule) return;
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for(var i = 0, k = 0; i < rules.length; i++)for(var j = 0; j < parentRules.length; j++, k++)element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
};
var removeLabel = function removeLabel(element) {
    if (element.type === 'decl') {
        var value = element.value;
        if (value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98) {
            // this ignores label
            element["return"] = '';
            element.value = '';
        }
    }
};
/* eslint-disable no-fallthrough */ function prefix(value, length) {
    switch((0, _stylis.hash)(value, length)){
        // color-adjust
        case 5103:
            return (0, _stylis.WEBKIT) + 'print-' + value + value;
        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return (0, _stylis.WEBKIT) + value + value;
        // appearance, user-select, transform, hyphens, text-size-adjust
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MOZ) + value + (0, _stylis.MS) + value + value;
        // flex, flex-direction
        case 6828:
        case 4268:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + value + value;
        // order
        case 6165:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + 'flex-' + value + value;
        // align-items
        case 5187:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.replace)(value, /(\w+).+(:[^]+)/, (0, _stylis.WEBKIT) + 'box-$1$2' + (0, _stylis.MS) + 'flex-$1$2') + value;
        // align-self
        case 5443:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + 'flex-item-' + (0, _stylis.replace)(value, /flex-|-self/, '') + value;
        // align-content
        case 4675:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + 'flex-line-pack' + (0, _stylis.replace)(value, /align-content|flex-|-self/, '') + value;
        // flex-shrink
        case 5548:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, 'shrink', 'negative') + value;
        // flex-basis
        case 5292:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, 'basis', 'preferred-size') + value;
        // flex-grow
        case 6060:
            return (0, _stylis.WEBKIT) + 'box-' + (0, _stylis.replace)(value, '-grow', '') + (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, 'grow', 'positive') + value;
        // transition
        case 4554:
            return (0, _stylis.WEBKIT) + (0, _stylis.replace)(value, /([^-])(transform)/g, '$1' + (0, _stylis.WEBKIT) + '$2') + value;
        // cursor
        case 6187:
            return (0, _stylis.replace)((0, _stylis.replace)((0, _stylis.replace)(value, /(zoom-|grab)/, (0, _stylis.WEBKIT) + '$1'), /(image-set)/, (0, _stylis.WEBKIT) + '$1'), value, '') + value;
        // background, background-image
        case 5495:
        case 3959:
            return (0, _stylis.replace)(value, /(image-set\([^]*)/, (0, _stylis.WEBKIT) + '$1' + '$`$1');
        // justify-content
        case 4968:
            return (0, _stylis.replace)((0, _stylis.replace)(value, /(.+:)(flex-)?(.*)/, (0, _stylis.WEBKIT) + 'box-pack:$3' + (0, _stylis.MS) + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + (0, _stylis.WEBKIT) + value + value;
        // (margin|padding)-inline-(start|end)
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return (0, _stylis.replace)(value, /(.+)-inline(.+)/, (0, _stylis.WEBKIT) + '$1$2') + value;
        // (min|max)?(width|height|inline-size|block-size)
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            // stretch, max-content, min-content, fill-available
            if ((0, _stylis.strlen)(value) - 1 - length > 6) switch((0, _stylis.charat)(value, length + 1)){
                // (m)ax-content, (m)in-content
                case 109:
                    // -
                    if ((0, _stylis.charat)(value, length + 4) !== 45) break;
                // (f)ill-available, (f)it-content
                case 102:
                    return (0, _stylis.replace)(value, /(.+:)(.+)-([^]+)/, '$1' + (0, _stylis.WEBKIT) + '$2-$3' + '$1' + (0, _stylis.MOZ) + ((0, _stylis.charat)(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
                // (s)tretch
                case 115:
                    return ~(0, _stylis.indexof)(value, 'stretch') ? prefix((0, _stylis.replace)(value, 'stretch', 'fill-available'), length) + value : value;
            }
            break;
        // position: sticky
        case 4949:
            // (s)ticky?
            if ((0, _stylis.charat)(value, length + 1) !== 115) break;
        // display: (flex|inline-flex)
        case 6444:
            switch((0, _stylis.charat)(value, (0, _stylis.strlen)(value) - 3 - (~(0, _stylis.indexof)(value, '!important') && 10))){
                // stic(k)y
                case 107:
                    return (0, _stylis.replace)(value, ':', ':' + (0, _stylis.WEBKIT)) + value;
                // (inline-)?fl(e)x
                case 101:
                    return (0, _stylis.replace)(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + (0, _stylis.WEBKIT) + ((0, _stylis.charat)(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + (0, _stylis.WEBKIT) + '$2$3' + '$1' + (0, _stylis.MS) + '$2box$3') + value;
            }
            break;
        // writing-mode
        case 5936:
            switch((0, _stylis.charat)(value, length + 11)){
                // vertical-l(r)
                case 114:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
                // vertical-r(l)
                case 108:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
                // horizontal(-)tb
                case 45:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
            }
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + value + value;
    }
    return value;
}
var prefixer = function prefixer(element, index, children, callback) {
    if (element.length > -1) {
        if (!element["return"]) switch(element.type){
            case 0, _stylis.DECLARATION:
                element["return"] = prefix(element.value, element.length);
                break;
            case 0, _stylis.KEYFRAMES:
                return (0, _stylis.serialize)([
                    (0, _stylis.copy)(element, {
                        value: (0, _stylis.replace)(element.value, '@', '@' + (0, _stylis.WEBKIT))
                    })
                ], callback);
            case 0, _stylis.RULESET:
                if (element.length) return (0, _stylis.combine)(element.props, function(value) {
                    switch((0, _stylis.match)(value, /(::plac\w+|:read-\w+)/)){
                        // :read-(only|write)
                        case ':read-only':
                        case ':read-write':
                            return (0, _stylis.serialize)([
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(read-\w+)/, ':' + (0, _stylis.MOZ) + '$1')
                                    ]
                                })
                            ], callback);
                        // :placeholder
                        case '::placeholder':
                            return (0, _stylis.serialize)([
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, ':' + (0, _stylis.WEBKIT) + 'input-$1')
                                    ]
                                }),
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, ':' + (0, _stylis.MOZ) + '$1')
                                    ]
                                }),
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, (0, _stylis.MS) + 'input-$1')
                                    ]
                                })
                            ], callback);
                    }
                    return '';
                });
        }
    }
};
var getServerStylisCache = isBrowser ? undefined : (0, _weakMemoizeDefault.default)(function() {
    return (0, _memoizeDefault.default)(function() {
        return {};
    });
});
var defaultStylisPlugins = [
    prefixer
];
var createCache = function createCache(options) {
    var key = options.key;
    if (isBrowser && key === 'css') {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component
        Array.prototype.forEach.call(ssrStyles, function(node) {
            // we want to only move elements which have a space in the data-emotion attribute value
            // because that indicates that it is an Emotion 11 server-side rendered style elements
            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
            // will not result in the Emotion 10 styles being destroyed
            var dataEmotionAttribute = node.getAttribute('data-emotion');
            if (dataEmotionAttribute.indexOf(' ') === -1) return;
            document.head.appendChild(node);
            node.setAttribute('data-s', '');
        });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    if (isBrowser) {
        container = options.container || document.head;
        Array.prototype.forEach.call(// means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function(node) {
            var attrib = node.getAttribute("data-emotion").split(' ');
            for(var i = 1; i < attrib.length; i++)inserted[attrib[i]] = true;
            nodesToHydrate.push(node);
        });
    }
    var _insert;
    var omnipresentPlugins = [
        compat,
        removeLabel
    ];
    if (!getServerStylisCache) {
        var currentSheet;
        var finalizingPlugins = [
            (0, _stylis.stringify),
            (0, _stylis.rulesheet)(function(rule) {
                currentSheet.insert(rule);
            })
        ];
        var serializer = (0, _stylis.middleware)(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
        var stylis = function stylis(styles) {
            return (0, _stylis.serialize)((0, _stylis.compile)(styles), serializer);
        };
        _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet;
            stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) cache.inserted[serialized.name] = true;
        };
    } else {
        var _finalizingPlugins = [
            (0, _stylis.stringify)
        ];
        var _serializer = (0, _stylis.middleware)(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
        var _stylis1 = function _stylis1(styles) {
            return (0, _stylis.serialize)((0, _stylis.compile)(styles), _serializer);
        };
        var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
        var getRules = function getRules(selector, serialized) {
            var name = serialized.name;
            if (serverStylisCache[name] === undefined) serverStylisCache[name] = _stylis1(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            return serverStylisCache[name];
        };
        _insert = function _insert(selector, serialized, sheet, shouldCache) {
            var name = serialized.name;
            var rules = getRules(selector, serialized);
            if (cache.compat === undefined) {
                // in regular mode, we don't set the styles on the inserted cache
                // since we don't need to and that would be wasting memory
                // we return them so that they are rendered in a style tag
                if (shouldCache) cache.inserted[name] = true;
                return rules;
            } else {
                // in compat mode, we put the styles on the inserted cache so
                // that emotion-server can pull out the styles
                // except when we don't want to cache it which was in Global but now
                // is nowhere but we don't want to do a major right now
                // and just in case we're going to leave the case here
                // it's also not affecting client side bundle size
                // so it's really not a big deal
                if (shouldCache) cache.inserted[name] = rules;
                else return rules;
            }
        };
    }
    var cache = {
        key: key,
        sheet: new (0, _sheet.StyleSheet)({
            key: key,
            container: container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {},
        insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
};

},{"@emotion/sheet":"5xfHB","stylis":"jLaPU","@emotion/weak-memoize":"hrHkX","@emotion/memoize":"a2LeB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5xfHB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StyleSheet", ()=>StyleSheet);
var isDevelopment = false;
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/ function sheetForTag(tag) {
    if (tag.sheet) return tag.sheet;
     // this weirdness brought to you by firefox
    /* istanbul ignore next */ for(var i = 0; i < document.styleSheets.length; i++){
        if (document.styleSheets[i].ownerNode === tag) return document.styleSheets[i];
    } // this function should always return with a value
    // TS can't understand it though so we make it stop complaining here
    return undefined;
}
function createStyleElement(options) {
    var tag = document.createElement('style');
    tag.setAttribute('data-emotion', options.key);
    if (options.nonce !== undefined) tag.setAttribute('nonce', options.nonce);
    tag.appendChild(document.createTextNode(''));
    tag.setAttribute('data-s', '');
    return tag;
}
var StyleSheet = /*#__PURE__*/ function() {
    // Using Node instead of HTMLElement since container may be a ShadowRoot
    function StyleSheet(options) {
        var _this = this;
        this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
                if (_this.insertionPoint) before = _this.insertionPoint.nextSibling;
                else if (_this.prepend) before = _this.container.firstChild;
                else before = _this.before;
            } else before = _this.tags[_this.tags.length - 1].nextSibling;
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === undefined ? !isDevelopment : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
    }
    var _proto = StyleSheet.prototype;
    _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) this._insertTag(createStyleElement(this));
        var tag = this.tags[this.tags.length - 1];
        if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
                // this is the ultrafast version, works across browsers
                // the big drawback is that the css won't be editable in devtools
                sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {}
        } else tag.appendChild(document.createTextNode(rule));
        this.ctr++;
    };
    _proto.flush = function flush() {
        this.tags.forEach(function(tag) {
            var _tag$parentNode;
            return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
    };
    return StyleSheet;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jLaPU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CHARSET", ()=>f);
parcelHelpers.export(exports, "COMMENT", ()=>n);
parcelHelpers.export(exports, "COUNTER_STYLE", ()=>w);
parcelHelpers.export(exports, "DECLARATION", ()=>s);
parcelHelpers.export(exports, "DOCUMENT", ()=>v);
parcelHelpers.export(exports, "FONT_FACE", ()=>b);
parcelHelpers.export(exports, "FONT_FEATURE_VALUES", ()=>d);
parcelHelpers.export(exports, "IMPORT", ()=>i);
parcelHelpers.export(exports, "KEYFRAMES", ()=>h);
parcelHelpers.export(exports, "LAYER", ()=>$);
parcelHelpers.export(exports, "MEDIA", ()=>u);
parcelHelpers.export(exports, "MOZ", ()=>r);
parcelHelpers.export(exports, "MS", ()=>e);
parcelHelpers.export(exports, "NAMESPACE", ()=>p);
parcelHelpers.export(exports, "PAGE", ()=>t);
parcelHelpers.export(exports, "RULESET", ()=>c);
parcelHelpers.export(exports, "SUPPORTS", ()=>l);
parcelHelpers.export(exports, "VIEWPORT", ()=>o);
parcelHelpers.export(exports, "WEBKIT", ()=>a);
parcelHelpers.export(exports, "abs", ()=>g);
parcelHelpers.export(exports, "alloc", ()=>V);
parcelHelpers.export(exports, "append", ()=>q);
parcelHelpers.export(exports, "assign", ()=>m);
parcelHelpers.export(exports, "caret", ()=>R);
parcelHelpers.export(exports, "char", ()=>L);
parcelHelpers.export(exports, "character", ()=>H);
parcelHelpers.export(exports, "characters", ()=>I);
parcelHelpers.export(exports, "charat", ()=>O);
parcelHelpers.export(exports, "column", ()=>E);
parcelHelpers.export(exports, "combine", ()=>B);
parcelHelpers.export(exports, "comment", ()=>ue);
parcelHelpers.export(exports, "commenter", ()=>ae);
parcelHelpers.export(exports, "compile", ()=>ce);
parcelHelpers.export(exports, "copy", ()=>K);
parcelHelpers.export(exports, "dealloc", ()=>W);
parcelHelpers.export(exports, "declaration", ()=>ie);
parcelHelpers.export(exports, "delimit", ()=>X);
parcelHelpers.export(exports, "delimiter", ()=>re);
parcelHelpers.export(exports, "escaping", ()=>ee);
parcelHelpers.export(exports, "from", ()=>k);
parcelHelpers.export(exports, "hash", ()=>x);
parcelHelpers.export(exports, "identifier", ()=>ne);
parcelHelpers.export(exports, "indexof", ()=>C);
parcelHelpers.export(exports, "length", ()=>F);
parcelHelpers.export(exports, "line", ()=>D);
parcelHelpers.export(exports, "match", ()=>j);
parcelHelpers.export(exports, "middleware", ()=>ve);
parcelHelpers.export(exports, "namespace", ()=>be);
parcelHelpers.export(exports, "next", ()=>P);
parcelHelpers.export(exports, "node", ()=>J);
parcelHelpers.export(exports, "parse", ()=>se);
parcelHelpers.export(exports, "peek", ()=>Q);
parcelHelpers.export(exports, "position", ()=>G);
parcelHelpers.export(exports, "prefix", ()=>fe);
parcelHelpers.export(exports, "prefixer", ()=>he);
parcelHelpers.export(exports, "prev", ()=>N);
parcelHelpers.export(exports, "replace", ()=>z);
parcelHelpers.export(exports, "ruleset", ()=>te);
parcelHelpers.export(exports, "rulesheet", ()=>pe);
parcelHelpers.export(exports, "serialize", ()=>oe);
parcelHelpers.export(exports, "sizeof", ()=>S);
parcelHelpers.export(exports, "slice", ()=>T);
parcelHelpers.export(exports, "stringify", ()=>le);
parcelHelpers.export(exports, "strlen", ()=>M);
parcelHelpers.export(exports, "substr", ()=>A);
parcelHelpers.export(exports, "token", ()=>U);
parcelHelpers.export(exports, "tokenize", ()=>Y);
parcelHelpers.export(exports, "tokenizer", ()=>_);
parcelHelpers.export(exports, "trim", ()=>y);
parcelHelpers.export(exports, "whitespace", ()=>Z);
var e = "-ms-";
var r = "-moz-";
var a = "-webkit-";
var n = "comm";
var c = "rule";
var s = "decl";
var t = "@page";
var u = "@media";
var i = "@import";
var f = "@charset";
var o = "@viewport";
var l = "@supports";
var v = "@document";
var p = "@namespace";
var h = "@keyframes";
var b = "@font-face";
var w = "@counter-style";
var d = "@font-feature-values";
var $ = "@layer";
var g = Math.abs;
var k = String.fromCharCode;
var m = Object.assign;
function x(e, r) {
    return O(e, 0) ^ 45 ? (((r << 2 ^ O(e, 0)) << 2 ^ O(e, 1)) << 2 ^ O(e, 2)) << 2 ^ O(e, 3) : 0;
}
function y(e) {
    return e.trim();
}
function j(e, r) {
    return (e = r.exec(e)) ? e[0] : e;
}
function z(e, r, a) {
    return e.replace(r, a);
}
function C(e, r) {
    return e.indexOf(r);
}
function O(e, r) {
    return e.charCodeAt(r) | 0;
}
function A(e, r, a) {
    return e.slice(r, a);
}
function M(e) {
    return e.length;
}
function S(e) {
    return e.length;
}
function q(e, r) {
    return r.push(e), e;
}
function B(e, r) {
    return e.map(r).join("");
}
var D = 1;
var E = 1;
var F = 0;
var G = 0;
var H = 0;
var I = "";
function J(e, r, a, n, c, s, t) {
    return {
        value: e,
        root: r,
        parent: a,
        type: n,
        props: c,
        children: s,
        line: D,
        column: E,
        length: t,
        return: ""
    };
}
function K(e, r) {
    return m(J("", null, null, "", null, null, 0), e, {
        length: -e.length
    }, r);
}
function L() {
    return H;
}
function N() {
    H = G > 0 ? O(I, --G) : 0;
    if (E--, H === 10) E = 1, D--;
    return H;
}
function P() {
    H = G < F ? O(I, G++) : 0;
    if (E++, H === 10) E = 1, D++;
    return H;
}
function Q() {
    return O(I, G);
}
function R() {
    return G;
}
function T(e, r) {
    return A(I, e, r);
}
function U(e) {
    switch(e){
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5;
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        case 59:
        case 123:
        case 125:
            return 4;
        case 58:
            return 3;
        case 34:
        case 39:
        case 40:
        case 91:
            return 2;
        case 41:
        case 93:
            return 1;
    }
    return 0;
}
function V(e) {
    return D = E = 1, F = M(I = e), G = 0, [];
}
function W(e) {
    return I = "", e;
}
function X(e) {
    return y(T(G - 1, re(e === 91 ? e + 2 : e === 40 ? e + 1 : e)));
}
function Y(e) {
    return W(_(V(e)));
}
function Z(e) {
    while(H = Q())if (H < 33) P();
    else break;
    return U(e) > 2 || U(H) > 3 ? "" : " ";
}
function _(e) {
    while(P())switch(U(H)){
        case 0:
            q(ne(G - 1), e);
            break;
        case 2:
            q(X(H), e);
            break;
        default:
            q(k(H), e);
    }
    return e;
}
function ee(e, r) {
    while(--r && P())if (H < 48 || H > 102 || H > 57 && H < 65 || H > 70 && H < 97) break;
    return T(e, R() + (r < 6 && Q() == 32 && P() == 32));
}
function re(e) {
    while(P())switch(H){
        case e:
            return G;
        case 34:
        case 39:
            if (e !== 34 && e !== 39) re(H);
            break;
        case 40:
            if (e === 41) re(e);
            break;
        case 92:
            P();
            break;
    }
    return G;
}
function ae(e, r) {
    while(P())if (e + H === 57) break;
    else if (e + H === 84 && Q() === 47) break;
    return "/*" + T(r, G - 1) + "*" + k(e === 47 ? e : P());
}
function ne(e) {
    while(!U(Q()))P();
    return T(e, G);
}
function ce(e) {
    return W(se("", null, null, null, [
        ""
    ], e = V(e), 0, [
        0
    ], e));
}
function se(e, r, a, n, c, s, t, u, i) {
    var f = 0;
    var o = 0;
    var l = t;
    var v = 0;
    var p = 0;
    var h = 0;
    var b = 1;
    var w = 1;
    var d = 1;
    var $ = 0;
    var g = "";
    var m = c;
    var x = s;
    var y = n;
    var j = g;
    while(w)switch(h = $, $ = P()){
        case 40:
            if (h != 108 && O(j, l - 1) == 58) {
                if (C(j += z(X($), "&", "&\f"), "&\f") != -1) d = -1;
                break;
            }
        case 34:
        case 39:
        case 91:
            j += X($);
            break;
        case 9:
        case 10:
        case 13:
        case 32:
            j += Z(h);
            break;
        case 92:
            j += ee(R() - 1, 7);
            continue;
        case 47:
            switch(Q()){
                case 42:
                case 47:
                    q(ue(ae(P(), R()), r, a), i);
                    break;
                default:
                    j += "/";
            }
            break;
        case 123 * b:
            u[f++] = M(j) * d;
        case 125 * b:
        case 59:
        case 0:
            switch($){
                case 0:
                case 125:
                    w = 0;
                case 59 + o:
                    if (d == -1) j = z(j, /\f/g, "");
                    if (p > 0 && M(j) - l) q(p > 32 ? ie(j + ";", n, a, l - 1) : ie(z(j, " ", "") + ";", n, a, l - 2), i);
                    break;
                case 59:
                    j += ";";
                default:
                    q(y = te(j, r, a, f, o, c, u, g, m = [], x = [], l), s);
                    if ($ === 123) {
                        if (o === 0) se(j, r, y, y, m, s, l, u, x);
                        else switch(v === 99 && O(j, 3) === 110 ? 100 : v){
                            case 100:
                            case 108:
                            case 109:
                            case 115:
                                se(e, y, y, n && q(te(e, y, y, 0, 0, c, u, g, c, m = [], l), x), c, x, l, u, n ? m : x);
                                break;
                            default:
                                se(j, y, y, y, [
                                    ""
                                ], x, 0, u, x);
                        }
                    }
            }
            f = o = p = 0, b = d = 1, g = j = "", l = t;
            break;
        case 58:
            l = 1 + M(j), p = h;
        default:
            if (b < 1) {
                if ($ == 123) --b;
                else if ($ == 125 && b++ == 0 && N() == 125) continue;
            }
            switch(j += k($), $ * b){
                case 38:
                    d = o > 0 ? 1 : (j += "\f", -1);
                    break;
                case 44:
                    u[f++] = (M(j) - 1) * d, d = 1;
                    break;
                case 64:
                    if (Q() === 45) j += X(P());
                    v = Q(), o = l = M(g = j += ne(R())), $++;
                    break;
                case 45:
                    if (h === 45 && M(j) == 2) b = 0;
            }
    }
    return s;
}
function te(e, r, a, n, s, t, u, i, f, o, l) {
    var v = s - 1;
    var p = s === 0 ? t : [
        ""
    ];
    var h = S(p);
    for(var b = 0, w = 0, d = 0; b < n; ++b)for(var $ = 0, k = A(e, v + 1, v = g(w = u[b])), m = e; $ < h; ++$)if (m = y(w > 0 ? p[$] + " " + k : z(k, /&\f/g, p[$]))) f[d++] = m;
    return J(e, r, a, s === 0 ? c : i, f, o, l);
}
function ue(e, r, a) {
    return J(e, r, a, n, k(L()), A(e, 2, -2), 0);
}
function ie(e, r, a, n) {
    return J(e, r, a, s, A(e, 0, n), A(e, n + 1, -1), n);
}
function fe(n, c, s) {
    switch(x(n, c)){
        case 5103:
            return a + "print-" + n + n;
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return a + n + n;
        case 4789:
            return r + n + n;
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return a + n + r + n + e + n + n;
        case 5936:
            switch(O(n, c + 11)){
                case 114:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "tb") + n;
                case 108:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "tb-rl") + n;
                case 45:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "lr") + n;
            }
        case 6828:
        case 4268:
        case 2903:
            return a + n + e + n + n;
        case 6165:
            return a + n + e + "flex-" + n + n;
        case 5187:
            return a + n + z(n, /(\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + n;
        case 5443:
            return a + n + e + "flex-item-" + z(n, /flex-|-self/g, "") + (!j(n, /flex-|baseline/) ? e + "grid-row-" + z(n, /flex-|-self/g, "") : "") + n;
        case 4675:
            return a + n + e + "flex-line-pack" + z(n, /align-content|flex-|-self/g, "") + n;
        case 5548:
            return a + n + e + z(n, "shrink", "negative") + n;
        case 5292:
            return a + n + e + z(n, "basis", "preferred-size") + n;
        case 6060:
            return a + "box-" + z(n, "-grow", "") + a + n + e + z(n, "grow", "positive") + n;
        case 4554:
            return a + z(n, /([^-])(transform)/g, "$1" + a + "$2") + n;
        case 6187:
            return z(z(z(n, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), n, "") + n;
        case 5495:
        case 3959:
            return z(n, /(image-set\([^]*)/, a + "$1" + "$`$1");
        case 4968:
            return z(z(n, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + n + n;
        case 4200:
            if (!j(n, /flex-|baseline/)) return e + "grid-column-align" + A(n, c) + n;
            break;
        case 2592:
        case 3360:
            return e + z(n, "template-", "") + n;
        case 4384:
        case 3616:
            if (s && s.some(function(e, r) {
                return c = r, j(e.props, /grid-\w+-end/);
            })) return ~C(n + (s = s[c].value), "span") ? n : e + z(n, "-start", "") + n + e + "grid-row-span:" + (~C(s, "span") ? j(s, /\d+/) : +j(s, /\d+/) - +j(n, /\d+/)) + ";";
            return e + z(n, "-start", "") + n;
        case 4896:
        case 4128:
            return s && s.some(function(e) {
                return j(e.props, /grid-\w+-start/);
            }) ? n : e + z(z(n, "-end", "-span"), "span ", "") + n;
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return z(n, /(.+)-inline(.+)/, a + "$1$2") + n;
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            if (M(n) - 1 - c > 6) switch(O(n, c + 1)){
                case 109:
                    if (O(n, c + 4) !== 45) break;
                case 102:
                    return z(n, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3" + "$1" + r + (O(n, c + 3) == 108 ? "$3" : "$2-$3")) + n;
                case 115:
                    return ~C(n, "stretch") ? fe(z(n, "stretch", "fill-available"), c, s) + n : n;
            }
            break;
        case 5152:
        case 5920:
            return z(n, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(r, a, c, s, t, u, i) {
                return e + a + ":" + c + i + (s ? e + a + "-span:" + (t ? u : +u - +c) + i : "") + n;
            });
        case 4949:
            if (O(n, c + 6) === 121) return z(n, ":", ":" + a) + n;
            break;
        case 6444:
            switch(O(n, O(n, 14) === 45 ? 18 : 11)){
                case 120:
                    return z(n, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + a + (O(n, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + a + "$2$3" + "$1" + e + "$2box$3") + n;
                case 100:
                    return z(n, ":", ":" + e) + n;
            }
            break;
        case 5719:
        case 2647:
        case 2135:
        case 3927:
        case 2391:
            return z(n, "scroll-", "scroll-snap-") + n;
    }
    return n;
}
function oe(e, r) {
    var a = "";
    var n = S(e);
    for(var c = 0; c < n; c++)a += r(e[c], c, e, r) || "";
    return a;
}
function le(e, r, a, t) {
    switch(e.type){
        case $:
            if (e.children.length) break;
        case i:
        case s:
            return e.return = e.return || e.value;
        case n:
            return "";
        case h:
            return e.return = e.value + "{" + oe(e.children, t) + "}";
        case c:
            e.value = e.props.join(",");
    }
    return M(a = oe(e.children, t)) ? e.return = e.value + "{" + a + "}" : "";
}
function ve(e) {
    var r = S(e);
    return function(a, n, c, s) {
        var t = "";
        for(var u = 0; u < r; u++)t += e[u](a, n, c, s) || "";
        return t;
    };
}
function pe(e) {
    return function(r) {
        if (!r.root) {
            if (r = r.return) e(r);
        }
    };
}
function he(n, t, u, i) {
    if (n.length > -1) {
        if (!n.return) switch(n.type){
            case s:
                n.return = fe(n.value, n.length, u);
                return;
            case h:
                return oe([
                    K(n, {
                        value: z(n.value, "@", "@" + a)
                    })
                ], i);
            case c:
                if (n.length) return B(n.props, function(c) {
                    switch(j(c, /(::plac\w+|:read-\w+)/)){
                        case ":read-only":
                        case ":read-write":
                            return oe([
                                K(n, {
                                    props: [
                                        z(c, /:(read-\w+)/, ":" + r + "$1")
                                    ]
                                })
                            ], i);
                        case "::placeholder":
                            return oe([
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, ":" + a + "input-$1")
                                    ]
                                }),
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, ":" + r + "$1")
                                    ]
                                }),
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, e + "input-$1")
                                    ]
                                })
                            ], i);
                    }
                    return "";
                });
        }
    }
}
function be(e) {
    switch(e.type){
        case c:
            e.props = e.props.map(function(r) {
                return B(Y(r), function(r, a, n) {
                    switch(O(r, 0)){
                        case 12:
                            return A(r, 1, M(r));
                        case 0:
                        case 40:
                        case 43:
                        case 62:
                        case 126:
                            return r;
                        case 58:
                            if (n[++a] === "global") n[a] = "", n[++a] = "\f" + A(n[a], a = 1, -1);
                        case 32:
                            return a === 1 ? "" : r;
                        default:
                            switch(a){
                                case 0:
                                    e = r;
                                    return S(n) > 1 ? "" : r;
                                case a = S(n) - 1:
                                case 2:
                                    return a === 2 ? r + e + e : r + e;
                                default:
                                    return r;
                            }
                    }
                });
            });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hrHkX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>weakMemoize);
var weakMemoize = function weakMemoize(func) {
    var cache = new WeakMap();
    return function(arg) {
        if (cache.has(arg)) // Use non-null assertion because we just checked that the cache `has` it
        // This allows us to remove `undefined` from the return value
        return cache.get(arg);
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"a2LeB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>memoize);
function memoize(fn) {
    var cache = Object.create(null);
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"d7gCT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>hoistNonReactStatics);
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
// this file isolates this package that is not tree-shakeable
// and if this module doesn't actually contain any logic of its own
// then Rollup just use 'hoist-non-react-statics' directly in other chunks
var hoistNonReactStatics = function(targetComponent, sourceComponent) {
    return (0, _hoistNonReactStaticsDefault.default)(targetComponent, sourceComponent);
};

},{"hoist-non-react-statics":"h7WK5","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"h7WK5":[function(require,module,exports,__globalThis) {
'use strict';
var reactIs = require("c03b486d83967636");
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"c03b486d83967636":"aR4fD"}],"aR4fD":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("cffb0a4e8f761a01");

},{"cffb0a4e8f761a01":"f7umo"}],"f7umo":[function(require,module,exports,__globalThis) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    'use strict';
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"cQ0xH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRegisteredStyles", ()=>getRegisteredStyles);
parcelHelpers.export(exports, "insertStyles", ()=>insertStyles);
parcelHelpers.export(exports, "registerStyles", ()=>registerStyles);
var isBrowser = typeof document !== 'undefined';
function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = '';
    classNames.split(' ').forEach(function(className) {
        if (registered[className] !== undefined) registeredStyles.push(registered[className] + ";");
        else if (className) rawClassName += className + " ";
    });
    return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;
    if (// class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false && cache.compat !== undefined) && cache.registered[className] === undefined) cache.registered[className] = serialized.styles;
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag);
    var className = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === undefined) {
        var stylesForSSR = '';
        var current = serialized;
        do {
            var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
            if (!isBrowser && maybeStyles !== undefined) stylesForSSR += maybeStyles;
            current = current.next;
        }while (current !== undefined);
        if (!isBrowser && stylesForSSR.length !== 0) return stylesForSSR;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4vIHo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeStyles", ()=>serializeStyles);
var _hash = require("@emotion/hash");
var _hashDefault = parcelHelpers.interopDefault(_hash);
var _unitless = require("@emotion/unitless");
var _unitlessDefault = parcelHelpers.interopDefault(_unitless);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var isDevelopment = false;
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty(property) {
    return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue(value) {
    return value != null && typeof value !== 'boolean';
};
var processStyleName = /* #__PURE__ */ (0, _memoizeDefault.default)(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});
var processStyleValue = function processStyleValue(key, value) {
    switch(key){
        case 'animation':
        case 'animationName':
            if (typeof value === 'string') return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                    name: p1,
                    styles: p2,
                    next: cursor
                };
                return p1;
            });
    }
    if ((0, _unitlessDefault.default)[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) return value + 'px';
    return value;
};
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) return '';
    var componentSelector = interpolation;
    if (componentSelector.__emotion_styles !== undefined) return componentSelector;
    switch(typeof interpolation){
        case 'boolean':
            return '';
        case 'object':
            var keyframes = interpolation;
            if (keyframes.anim === 1) {
                cursor = {
                    name: keyframes.name,
                    styles: keyframes.styles,
                    next: cursor
                };
                return keyframes.name;
            }
            var serializedStyles = interpolation;
            if (serializedStyles.styles !== undefined) {
                var next = serializedStyles.next;
                if (next !== undefined) // not the most efficient thing ever but this is a pretty rare case
                // and there will be very few iterations of this generally
                while(next !== undefined){
                    cursor = {
                        name: next.name,
                        styles: next.styles,
                        next: cursor
                    };
                    next = next.next;
                }
                var styles = serializedStyles.styles + ";";
                return styles;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
        case 'function':
            if (mergedProps !== undefined) {
                var previousCursor = cursor;
                var result = interpolation(mergedProps);
                cursor = previousCursor;
                return handleInterpolation(mergedProps, registered, result);
            }
            break;
    } // finalize string values (regular strings and functions interpolated into css calls)
    var asString = interpolation;
    if (registered == null) return asString;
    var cached = registered[asString];
    return cached !== undefined ? cached : asString;
}
function createStringFromObject(mergedProps, registered, obj) {
    var string = '';
    if (Array.isArray(obj)) for(var i = 0; i < obj.length; i++)string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    else for(var key in obj){
        var value = obj[key];
        if (typeof value !== 'object') {
            var asString = value;
            if (registered != null && registered[asString] !== undefined) string += key + "{" + registered[asString] + "}";
            else if (isProcessableValue(asString)) string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        } else {
            if (key === 'NO_COMPONENT_SELECTOR' && isDevelopment) throw new Error(noComponentSelectorMessage);
            if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
                for(var _i = 0; _i < value.length; _i++)if (isProcessableValue(value[_i])) string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
            } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch(key){
                    case 'animation':
                    case 'animationName':
                        string += processStyleName(key) + ":" + interpolated + ";";
                        break;
                    default:
                        string += key + "{" + interpolated + "}";
                }
            }
        }
    }
    return string;
}
var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g; // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list
var cursor;
function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) return args[0];
    var stringMode = true;
    var styles = '';
    cursor = undefined;
    var strings = args[0];
    if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
    } else {
        var asTemplateStringsArr = strings;
        styles += asTemplateStringsArr[0];
    } // we start at 1 since we've already handled the first arg
    for(var i = 1; i < args.length; i++){
        styles += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
            var templateStringsArr = strings;
            styles += templateStringsArr[i];
        }
    } // using a global regex with .exec is stateful so lastIndex has to be reset each time
    labelPattern.lastIndex = 0;
    var identifierName = '';
    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
    while((match = labelPattern.exec(styles)) !== null)identifierName += '-' + match[1];
    var name = (0, _hashDefault.default)(styles) + identifierName;
    return {
        name: name,
        styles: styles,
        next: cursor
    };
}

},{"@emotion/hash":"45L46","@emotion/unitless":"kL23J","@emotion/memoize":"a2LeB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"45L46":[function(require,module,exports,__globalThis) {
/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>murmur2);
function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash
    var k, i = 0, len = str.length;
    for(; len >= 4; ++i, len -= 4){
        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
        k = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
        k ^= /* k >>> r: */ k >>> 24;
        h = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Handle the last few bytes of the input array
    switch(len){
        case 3:
            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 0xff;
            h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kL23J":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>unitlessKeys);
var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    scale: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fImkp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useInsertionEffectAlwaysWithSyncFallback", ()=>useInsertionEffectAlwaysWithSyncFallback);
parcelHelpers.export(exports, "useInsertionEffectWithLayoutFallback", ()=>useInsertionEffectWithLayoutFallback);
var _react = require("react");
var isBrowser = typeof document !== 'undefined';
var syncFallback = function syncFallback(create) {
    return create();
};
var useInsertionEffect = _react["useInsertionEffect"] ? _react["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = !isBrowser ? syncFallback : useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || _react.useLayoutEffect;

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lKa0J":[function(require,module,exports,__globalThis) {
function _extends() {
    return module.exports = _extends = Object.assign ? Object.assign.bind() : function(n) {
        for(var e = 1; e < arguments.length; e++){
            var t = arguments[e];
            for(var r in t)({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
        }
        return n;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _extends.apply(null, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"64e9S":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isPropValid);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
// eslint-disable-next-line no-undef
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var isPropValid = /* #__PURE__ */ (0, _memoizeDefault.default)(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});

},{"@emotion/memoize":"a2LeB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"c8dr0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _styledEngineProviderJsDefault.default));
var _styledEngineProviderJs = require("./StyledEngineProvider.js");
var _styledEngineProviderJsDefault = parcelHelpers.interopDefault(_styledEngineProviderJs);

},{"./StyledEngineProvider.js":"5asLO","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5asLO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TEST_INTERNALS_DO_NOT_USE", ()=>TEST_INTERNALS_DO_NOT_USE);
parcelHelpers.export(exports, "default", ()=>StyledEngineProvider);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react1 = require("@emotion/react");
var _cache = require("@emotion/cache");
var _cacheDefault = parcelHelpers.interopDefault(_cache);
var _sheet = require("@emotion/sheet");
// To fix [Jest performance](https://github.com/mui/material-ui/issues/45638).
var _jsxRuntime = require("react/jsx-runtime");
'use client';
const cacheMap = new Map();
const TEST_INTERNALS_DO_NOT_USE = {
    /**
   * to intercept the generated CSS before inserting to the style tag, so that we can check the generated CSS.
   *
   * let rule;
   * TEST_INTERNALS_DO_NOT_USE.insert = (...args) => {
   *    rule = args[0];
   * };
   *
   * expect(rule).to.equal(...);
   */ insert: undefined
};
// We might be able to remove this when this issue is fixed:
// https://github.com/emotion-js/emotion/issues/2790
const createEmotionCache = (options, CustomSheet)=>{
    const cache = (0, _cacheDefault.default)(options);
    // Do the same as https://github.com/emotion-js/emotion/blob/main/packages/cache/src/index.js#L238-L245
    cache.sheet = new CustomSheet({
        key: cache.key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy,
        prepend: cache.sheet.prepend,
        insertionPoint: cache.sheet.insertionPoint
    });
    return cache;
};
let insertionPoint;
if (typeof document === 'object') {
    // Use `insertionPoint` over `prepend`(deprecated) because it can be controlled for GlobalStyles injection order
    // For more information, see https://github.com/mui/material-ui/issues/44597
    insertionPoint = document.querySelector('[name="emotion-insertion-point"]');
    if (!insertionPoint) {
        insertionPoint = document.createElement('meta');
        insertionPoint.setAttribute('name', 'emotion-insertion-point');
        insertionPoint.setAttribute('content', '');
        const head = document.querySelector('head');
        if (head) head.prepend(insertionPoint);
    }
}
function getCache(injectFirst, enableCssLayer) {
    if (injectFirst || enableCssLayer) {
        /**
     * This is for client-side apps only.
     * A custom sheet is required to make the GlobalStyles API injected above the insertion point.
     * This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.
     */ class MyStyleSheet extends (0, _sheet.StyleSheet) {
            insert(rule, options) {
                if (TEST_INTERNALS_DO_NOT_USE.insert) return TEST_INTERNALS_DO_NOT_USE.insert(rule, options);
                if (this.key && this.key.endsWith('global')) this.before = insertionPoint;
                return super.insert(rule, options);
            }
        }
        const emotionCache = createEmotionCache({
            key: 'css',
            insertionPoint: injectFirst ? insertionPoint : undefined
        }, MyStyleSheet);
        if (enableCssLayer) {
            const prevInsert = emotionCache.insert;
            emotionCache.insert = (...args)=>{
                if (!args[1].styles.startsWith('@layer')) // avoid nested @layer
                args[1].styles = `@layer mui {${args[1].styles}}`;
                return prevInsert(...args);
            };
        }
        return emotionCache;
    }
    return undefined;
}
function StyledEngineProvider(props) {
    const { injectFirst, enableCssLayer, children } = props;
    const cache = _react.useMemo(()=>{
        const cacheKey = `${injectFirst}-${enableCssLayer}`;
        if (cacheMap.has(cacheKey)) return cacheMap.get(cacheKey);
        const fresh = getCache(injectFirst, enableCssLayer);
        cacheMap.set(cacheKey, fresh);
        return fresh;
    }, [
        injectFirst,
        enableCssLayer
    ]);
    return cache ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _react1.CacheProvider), {
        value: cache,
        children: children
    }) : children;
}
StyledEngineProvider.propTypes = {
    /**
   * Your component tree.
   */ children: (0, _propTypesDefault.default).node,
    /**
   * If `true`, the styles are wrapped in `@layer mui`.
   * Learn more about [Cascade layers](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Cascade_layers).
   */ enableCssLayer: (0, _propTypesDefault.default).bool,
    /**
   * By default, the styles are injected last in the <head> element of the page.
   * As a result, they gain more specificity than any other style sheet.
   * If you want to override MUI's styles, set this prop.
   */ injectFirst: (0, _propTypesDefault.default).bool
};

},{"react":"jMk1U","prop-types":"GNqOQ","@emotion/react":"cLTfV","@emotion/cache":"4A5M2","@emotion/sheet":"5xfHB","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"GNqOQ":[function(require,module,exports,__globalThis) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var ReactIs = require("96e34ae03f5a2631");
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require("cb216452e2171041")(ReactIs.isElement, throwOnDirectAccess);

},{"96e34ae03f5a2631":"dmkDW","cb216452e2171041":"32b0h"}],"dmkDW":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("ad47820528c6facb");

},{"ad47820528c6facb":"8ZhZ7"}],"8ZhZ7":[function(require,module,exports,__globalThis) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    'use strict';
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"32b0h":[function(require,module,exports,__globalThis) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require("c437388b089702c3");
var assign = require("c067a60101d8520c");
var ReactPropTypesSecret = require("74a0f89a70b9f3c2");
var has = require("18441b11647bc78");
var checkPropTypes = require("bec3f6ff89f0b072");
var printWarning = function() {};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {}
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bigint: createPrimitiveTypeChecker('bigint'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === 'object' ? data : {};
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
                    expectedType: expectedType
                });
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for(var i = 0; i < arrayOfTypeCheckers.length; i++){
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                if (checkerResult == null) return null;
                if (checkerResult.data && has(checkerResult.data, 'expectedType')) expectedTypes.push(checkerResult.data.expectedType);
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from props.
            var allKeys = assign({}, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (has(shapeTypes, key) && typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"c437388b089702c3":"dmkDW","c067a60101d8520c":"grVLZ","74a0f89a70b9f3c2":"ggXkd","18441b11647bc78":"cnEYJ","bec3f6ff89f0b072":"gaN1l"}],"grVLZ":[function(require,module,exports,__globalThis) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"ggXkd":[function(require,module,exports,__globalThis) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"cnEYJ":[function(require,module,exports,__globalThis) {
module.exports = Function.call.bind(Object.prototype.hasOwnProperty);

},{}],"gaN1l":[function(require,module,exports,__globalThis) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {};
var ReactPropTypesSecret = require("24ba1e58d167a82c");
var loggedTypeFailures = {};
var has = require("898bc82f39d83f7c");
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {}
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {};
};
module.exports = checkPropTypes;

},{"24ba1e58d167a82c":"ggXkd","898bc82f39d83f7c":"cnEYJ"}],"05iiF":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("c4c10cbba9862d5f");

},{"c4c10cbba9862d5f":"gKzlX"}],"gKzlX":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    'use strict';
    var React = require("593632ccebda0d3a");
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = '' + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = '' + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    var didWarnAboutKeySpread = {};
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (hasOwnProperty.call(props, 'key')) {
            var componentName = getComponentNameFromType(type);
            var keys = Object.keys(props).filter(function(k) {
                return k !== 'key';
            });
            var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';
            if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';
                error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                didWarnAboutKeySpread[componentName + beforeExample] = true;
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"593632ccebda0d3a":"jMk1U"}],"63bLm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _globalStylesJsDefault.default));
var _globalStylesJs = require("./GlobalStyles.js");
var _globalStylesJsDefault = parcelHelpers.interopDefault(_globalStylesJs);

},{"./GlobalStyles.js":"hrszd","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hrszd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>GlobalStyles);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react1 = require("@emotion/react");
var _jsxRuntime = require("react/jsx-runtime");
'use client';
function isEmpty(obj) {
    return obj === undefined || obj === null || Object.keys(obj).length === 0;
}
function GlobalStyles(props) {
    const { styles, defaultTheme = {} } = props;
    const globalStyles = typeof styles === 'function' ? (themeInput)=>styles(isEmpty(themeInput) ? defaultTheme : themeInput) : styles;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _react1.Global), {
        styles: globalStyles
    });
}
GlobalStyles.propTypes = {
    defaultTheme: (0, _propTypesDefault.default).object,
    styles: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).array,
        (0, _propTypesDefault.default).string,
        (0, _propTypesDefault.default).object,
        (0, _propTypesDefault.default).func
    ])
};

},{"react":"jMk1U","prop-types":"GNqOQ","@emotion/react":"cLTfV","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gydLr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _globalStylesJsDefault.default));
var _globalStylesJs = require("./GlobalStyles.js");
var _globalStylesJsDefault = parcelHelpers.interopDefault(_globalStylesJs);
parcelHelpers.exportAll(_globalStylesJs, exports);

},{"./GlobalStyles.js":"kJ0Et","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kJ0Et":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _styledEngine = require("@mui/styled-engine");
var _indexJs = require("../useTheme/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _jsxRuntime = require("react/jsx-runtime");
'use client';
function GlobalStyles({ styles, themeId, defaultTheme = {} }) {
    const upperTheme = (0, _indexJsDefault.default)(defaultTheme);
    const globalStyles = typeof styles === 'function' ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _styledEngine.GlobalStyles), {
        styles: globalStyles
    });
}
GlobalStyles.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * @ignore
   */ defaultTheme: (0, _propTypesDefault.default).object,
    /**
   * @ignore
   */ styles: (0, _propTypesDefault.default /* @typescript-to-proptypes-ignore */ ).oneOfType([
        (0, _propTypesDefault.default).array,
        (0, _propTypesDefault.default).func,
        (0, _propTypesDefault.default).number,
        (0, _propTypesDefault.default).object,
        (0, _propTypesDefault.default).string,
        (0, _propTypesDefault.default).bool
    ]),
    /**
   * @ignore
   */ themeId: (0, _propTypesDefault.default).string
};
exports.default = GlobalStyles;

},{"react":"jMk1U","prop-types":"GNqOQ","@mui/styled-engine":"g3Wsb","../useTheme/index.js":"dQKAT","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dQKAT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _useThemeJsDefault.default));
var _useThemeJs = require("./useTheme.js");
var _useThemeJsDefault = parcelHelpers.interopDefault(_useThemeJs);
parcelHelpers.exportAll(_useThemeJs, exports);

},{"./useTheme.js":"jbSzY","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jbSzY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "systemDefaultTheme", ()=>systemDefaultTheme);
var _indexJs = require("../createTheme/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../useThemeWithoutDefault/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
'use client';
const systemDefaultTheme = (0, _indexJsDefault.default)();
function useTheme(defaultTheme = systemDefaultTheme) {
    return (0, _indexJsDefault1.default)(defaultTheme);
}
exports.default = useTheme;

},{"../createTheme/index.js":"iH9Ok","../useThemeWithoutDefault/index.js":"hKnql","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"iH9Ok":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _createThemeJsDefault.default));
parcelHelpers.export(exports, "private_createBreakpoints", ()=>(0, _createBreakpointsJsDefault.default));
parcelHelpers.export(exports, "unstable_applyStyles", ()=>(0, _applyStylesJsDefault.default));
var _createThemeJs = require("./createTheme.js");
var _createThemeJsDefault = parcelHelpers.interopDefault(_createThemeJs);
var _createBreakpointsJs = require("../createBreakpoints/createBreakpoints.js");
var _createBreakpointsJsDefault = parcelHelpers.interopDefault(_createBreakpointsJs);
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);

},{"./createTheme.js":"bp00i","../createBreakpoints/createBreakpoints.js":false,"./applyStyles.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bp00i":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deepmerge = require("@mui/utils/deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _createBreakpointsJs = require("../createBreakpoints/createBreakpoints.js");
var _createBreakpointsJsDefault = parcelHelpers.interopDefault(_createBreakpointsJs);
var _indexJs = require("../cssContainerQueries/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _shapeJs = require("./shape.js");
var _shapeJsDefault = parcelHelpers.interopDefault(_shapeJs);
var _createSpacingJs = require("./createSpacing.js");
var _createSpacingJsDefault = parcelHelpers.interopDefault(_createSpacingJs);
var _styleFunctionSxJs = require("../styleFunctionSx/styleFunctionSx.js");
var _styleFunctionSxJsDefault = parcelHelpers.interopDefault(_styleFunctionSxJs);
var _defaultSxConfigJs = require("../styleFunctionSx/defaultSxConfig.js");
var _defaultSxConfigJsDefault = parcelHelpers.interopDefault(_defaultSxConfigJs);
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
function createTheme(options = {}, ...args) {
    const { breakpoints: breakpointsInput = {}, palette: paletteInput = {}, spacing: spacingInput, shape: shapeInput = {}, ...other } = options;
    const breakpoints = (0, _createBreakpointsJsDefault.default)(breakpointsInput);
    const spacing = (0, _createSpacingJsDefault.default)(spacingInput);
    let muiTheme = (0, _deepmergeDefault.default)({
        breakpoints,
        direction: 'ltr',
        components: {},
        // Inject component definitions.
        palette: {
            mode: 'light',
            ...paletteInput
        },
        spacing,
        shape: {
            ...(0, _shapeJsDefault.default),
            ...shapeInput
        }
    }, other);
    muiTheme = (0, _indexJsDefault.default)(muiTheme);
    muiTheme.applyStyles = (0, _applyStylesJsDefault.default);
    muiTheme = args.reduce((acc, argument)=>(0, _deepmergeDefault.default)(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = {
        ...(0, _defaultSxConfigJsDefault.default),
        ...other?.unstable_sxConfig
    };
    muiTheme.unstable_sx = function sx(props) {
        return (0, _styleFunctionSxJsDefault.default)({
            sx: props,
            theme: this
        });
    };
    return muiTheme;
}
exports.default = createTheme;

},{"@mui/utils/deepmerge":"bLPf1","../createBreakpoints/createBreakpoints.js":"j9n13","../cssContainerQueries/index.js":"rHSbd","./shape.js":"2tX7J","./createSpacing.js":"kfQyL","../styleFunctionSx/styleFunctionSx.js":"feC9L","../styleFunctionSx/defaultSxConfig.js":"2J5LT","./applyStyles.js":"lE7To","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bLPf1":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("be266a6c32a542a8").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _deepmerge.default;
    }
});
var _deepmerge = _interopRequireWildcard(require("8cfea4a5b2a8b14f"));
Object.keys(_deepmerge).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _deepmerge[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _deepmerge[key];
        }
    });
});

},{"be266a6c32a542a8":"6TFJp","8cfea4a5b2a8b14f":"g09X3"}],"6TFJp":[function(require,module,exports,__globalThis) {
var _typeof = require("41c629e90a135a51")["default"];
function _interopRequireWildcard(e, t) {
    if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap();
    return (module.exports = _interopRequireWildcard = function _interopRequireWildcard(e, t) {
        if (!t && e && e.__esModule) return e;
        var o, i, f = {
            __proto__: null,
            "default": e
        };
        if (null === e || "object" != _typeof(e) && "function" != typeof e) return f;
        if (o = t ? n : r) {
            if (o.has(e)) return o.get(e);
            o.set(e, f);
        }
        for(var _t in e)"default" !== _t && ({}).hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]);
        return f;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports)(e, t);
}
module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{"41c629e90a135a51":"7EL9t"}],"7EL9t":[function(require,module,exports,__globalThis) {
function _typeof(o) {
    "@babel/helpers - typeof";
    return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"g09X3":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("1d13046138688e9e").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = deepmerge;
exports.isPlainObject = isPlainObject;
var React = _interopRequireWildcard(require("4493c42670b8e346"));
var _reactIs = require("f08e6f02d91d21a3");
// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js
function isPlainObject(item) {
    if (typeof item !== 'object' || item === null) return false;
    const prototype = Object.getPrototypeOf(item);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
}
function deepClone(source) {
    if (/*#__PURE__*/ React.isValidElement(source) || (0, _reactIs.isValidElementType)(source) || !isPlainObject(source)) return source;
    const output = {};
    Object.keys(source).forEach((key)=>{
        output[key] = deepClone(source[key]);
    });
    return output;
}
/**
 * Merge objects deeply.
 * It will shallow copy React elements.
 *
 * If `options.clone` is set to `false` the source object will be merged directly into the target object.
 *
 * @example
 * ```ts
 * deepmerge({ a: { b: 1 }, d: 2 }, { a: { c: 2 }, d: 4 });
 * // => { a: { b: 1, c: 2 }, d: 4 }
 * ````
 *
 * @param target The target object.
 * @param source The source object.
 * @param options The merge options.
 * @param options.clone Set to `false` to merge the source object directly into the target object.
 * @returns The merged object.
 */ function deepmerge(target, source, options = {
    clone: true
}) {
    const output = options.clone ? {
        ...target
    } : target;
    if (isPlainObject(target) && isPlainObject(source)) Object.keys(source).forEach((key)=>{
        if (/*#__PURE__*/ React.isValidElement(source[key]) || (0, _reactIs.isValidElementType)(source[key])) output[key] = source[key];
        else if (isPlainObject(source[key]) && // Avoid prototype pollution
        Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
        output[key] = deepmerge(target[key], source[key], options);
        else if (options.clone) output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
        else output[key] = source[key];
    });
    return output;
}

},{"1d13046138688e9e":"6TFJp","4493c42670b8e346":"jMk1U","f08e6f02d91d21a3":"59S9B"}],"59S9B":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("2255125a8e8b1051");

},{"2255125a8e8b1051":"dFjTC"}],"dFjTC":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    function typeOf(object) {
        if ("object" === typeof object && null !== object) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    switch(object = object.type, object){
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                        case REACT_SUSPENSE_LIST_TYPE:
                        case REACT_VIEW_TRANSITION_TYPE:
                            return object;
                        default:
                            switch(object = object && object.$$typeof, object){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                    return object;
                                case REACT_CONSUMER_TYPE:
                                    return object;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
    }
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_VIEW_TRANSITION_TYPE = Symbol.for("react.view_transition"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
    exports.ContextConsumer = REACT_CONSUMER_TYPE;
    exports.ContextProvider = REACT_CONTEXT_TYPE;
    exports.Element = REACT_ELEMENT_TYPE;
    exports.ForwardRef = REACT_FORWARD_REF_TYPE;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Lazy = REACT_LAZY_TYPE;
    exports.Memo = REACT_MEMO_TYPE;
    exports.Portal = REACT_PORTAL_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
    exports.isContextConsumer = function(object) {
        return typeOf(object) === REACT_CONSUMER_TYPE;
    };
    exports.isContextProvider = function(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    };
    exports.isElement = function(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    };
    exports.isForwardRef = function(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    };
    exports.isFragment = function(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    };
    exports.isLazy = function(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    };
    exports.isMemo = function(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    };
    exports.isPortal = function(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    };
    exports.isProfiler = function(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    };
    exports.isStrictMode = function(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    };
    exports.isSuspense = function(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    };
    exports.isSuspenseList = function(object) {
        return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
    };
    exports.isValidElementType = function(type) {
        return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? !0 : !1;
    };
    exports.typeOf = typeOf;
})();

},{}],"j9n13":[function(require,module,exports,__globalThis) {
// Sorted ASC by size. That's important.
// It can't be configured as it's used statically for propTypes.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "breakpointKeys", ()=>breakpointKeys);
parcelHelpers.export(exports, "default", ()=>createBreakpoints);
const breakpointKeys = [
    'xs',
    'sm',
    'md',
    'lg',
    'xl'
];
const sortBreakpointsValues = (values)=>{
    const breakpointsAsArray = Object.keys(values).map((key)=>({
            key,
            val: values[key]
        })) || [];
    // Sort in ascending order
    breakpointsAsArray.sort((breakpoint1, breakpoint2)=>breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj)=>{
        return {
            ...acc,
            [obj.key]: obj.val
        };
    }, {});
};
function createBreakpoints(breakpoints) {
    const { // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536 // large screen
    }, unit = 'px', step = 5, ...other } = breakpoints;
    const sortedValues = sortBreakpointsValues(values);
    const keys = Object.keys(sortedValues);
    function up(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start, end) {
        const endIndex = keys.indexOf(end);
        return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
    }
    function only(key) {
        if (keys.indexOf(key) + 1 < keys.length) return between(key, keys[keys.indexOf(key) + 1]);
        return up(key);
    }
    function not(key) {
        // handle first and last key separately, for better readability
        const keyIndex = keys.indexOf(key);
        if (keyIndex === 0) return up(keys[1]);
        if (keyIndex === keys.length - 1) return down(keys[keyIndex]);
        return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
    }
    return {
        keys,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit,
        ...other
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"rHSbd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _cssContainerQueriesJsDefault.default));
parcelHelpers.export(exports, "isCqShorthand", ()=>(0, _cssContainerQueriesJs.isCqShorthand));
parcelHelpers.export(exports, "getContainerQuery", ()=>(0, _cssContainerQueriesJs.getContainerQuery));
parcelHelpers.export(exports, "sortContainerQueries", ()=>(0, _cssContainerQueriesJs.sortContainerQueries));
var _cssContainerQueriesJs = require("./cssContainerQueries.js");
var _cssContainerQueriesJsDefault = parcelHelpers.interopDefault(_cssContainerQueriesJs);

},{"./cssContainerQueries.js":"jg5UE","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jg5UE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * For using in `sx` prop to sort the breakpoint from low to high.
 * Note: this function does not work and will not support multiple units.
 *       e.g. input: { '@container (min-width:300px)': '1rem', '@container (min-width:40rem)': '2rem' }
 *            output: { '@container (min-width:40rem)': '2rem', '@container (min-width:300px)': '1rem' } // since 40 < 300 eventhough 40rem > 300px
 */ parcelHelpers.export(exports, "sortContainerQueries", ()=>sortContainerQueries);
parcelHelpers.export(exports, "isCqShorthand", ()=>isCqShorthand);
parcelHelpers.export(exports, "getContainerQuery", ()=>getContainerQuery);
parcelHelpers.export(exports, "default", ()=>cssContainerQueries);
var _formatMuiErrorMessage = require("@mui/utils/formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
function sortContainerQueries(theme, css) {
    if (!theme.containerQueries) return css;
    const sorted = Object.keys(css).filter((key)=>key.startsWith('@container')).sort((a, b)=>{
        const regex = /min-width:\s*([0-9.]+)/;
        return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);
    });
    if (!sorted.length) return css;
    return sorted.reduce((acc, key)=>{
        const value = css[key];
        delete acc[key];
        acc[key] = value;
        return acc;
    }, {
        ...css
    });
}
function isCqShorthand(breakpointKeys, value) {
    return value === '@' || value.startsWith('@') && (breakpointKeys.some((key)=>value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
}
function getContainerQuery(theme, shorthand) {
    const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
    if (!matches) throw new Error(`MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.\n` + 'For example, `@sm` or `@600` or `@40rem/sidebar`.');
    const [, containerQuery, containerName] = matches;
    const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
    return theme.containerQueries(containerName).up(value);
}
function cssContainerQueries(themeInput) {
    const toContainerQuery = (mediaQuery, name)=>mediaQuery.replace('@media', name ? `@container ${name}` : '@container');
    function attachCq(node, name) {
        node.up = (...args)=>toContainerQuery(themeInput.breakpoints.up(...args), name);
        node.down = (...args)=>toContainerQuery(themeInput.breakpoints.down(...args), name);
        node.between = (...args)=>toContainerQuery(themeInput.breakpoints.between(...args), name);
        node.only = (...args)=>toContainerQuery(themeInput.breakpoints.only(...args), name);
        node.not = (...args)=>{
            const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
            if (result.includes('not all and')) // `@container` does not work with `not all and`, so need to invert the logic
            return result.replace('not all and ', '').replace('min-width:', 'width<').replace('max-width:', 'width>').replace('and', 'or');
            return result;
        };
    }
    const node = {};
    const containerQueries = (name)=>{
        attachCq(node, name);
        return node;
    };
    attachCq(containerQueries);
    return {
        ...themeInput,
        containerQueries
    };
}

},{"@mui/utils/formatMuiErrorMessage":"cXsuk","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2tX7J":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const shape = {
    borderRadius: 4
};
exports.default = shape;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kfQyL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createSpacing);
var _indexJs = require("../spacing/index.js");
function createSpacing(spacingInput = 8, // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
// Smaller components, such as icons, can align to a 4dp grid.
// https://m2.material.io/design/layout/understanding-layout.html
transform = (0, _indexJs.createUnarySpacing)({
    spacing: spacingInput
})) {
    // Already transformed.
    if (spacingInput.mui) return spacingInput;
    const spacing = (...argsInput)=>{
        if (!(argsInput.length <= 4)) console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        const args = argsInput.length === 0 ? [
            1
        ] : argsInput;
        return args.map((argument)=>{
            const output = transform(argument);
            return typeof output === 'number' ? `${output}px` : output;
        }).join(' ');
    };
    spacing.mui = true;
    return spacing;
}

},{"../spacing/index.js":"aFm0j","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aFm0j":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _spacingJsDefault.default));
var _spacingJs = require("./spacing.js");
var _spacingJsDefault = parcelHelpers.interopDefault(_spacingJs);
parcelHelpers.exportAll(_spacingJs, exports);

},{"./spacing.js":"trEav","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"trEav":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "marginKeys", ()=>marginKeys);
parcelHelpers.export(exports, "paddingKeys", ()=>paddingKeys);
parcelHelpers.export(exports, "createUnaryUnit", ()=>createUnaryUnit);
parcelHelpers.export(exports, "createUnarySpacing", ()=>createUnarySpacing);
parcelHelpers.export(exports, "getValue", ()=>getValue);
parcelHelpers.export(exports, "getStyleFromPropValue", ()=>getStyleFromPropValue);
parcelHelpers.export(exports, "margin", ()=>margin);
parcelHelpers.export(exports, "padding", ()=>padding);
var _indexJs = require("../responsivePropType/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../breakpoints/index.js");
var _indexJs2 = require("../style/index.js");
var _indexJs3 = require("../merge/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs3);
var _indexJs4 = require("../memoize/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs4);
const properties = {
    m: 'margin',
    p: 'padding'
};
const directions = {
    t: 'Top',
    r: 'Right',
    b: 'Bottom',
    l: 'Left',
    x: [
        'Left',
        'Right'
    ],
    y: [
        'Top',
        'Bottom'
    ]
};
const aliases = {
    marginX: 'mx',
    marginY: 'my',
    paddingX: 'px',
    paddingY: 'py'
};
// memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec
const getCssProperties = (0, _indexJsDefault2.default)((prop)=>{
    // It's not a shorthand notation.
    if (prop.length > 2) {
        if (aliases[prop]) prop = aliases[prop];
        else return [
            prop
        ];
    }
    const [a, b] = prop.split('');
    const property = properties[a];
    const direction = directions[b] || '';
    return Array.isArray(direction) ? direction.map((dir)=>property + dir) : [
        property + direction
    ];
});
const marginKeys = [
    'm',
    'mt',
    'mr',
    'mb',
    'ml',
    'mx',
    'my',
    'margin',
    'marginTop',
    'marginRight',
    'marginBottom',
    'marginLeft',
    'marginX',
    'marginY',
    'marginInline',
    'marginInlineStart',
    'marginInlineEnd',
    'marginBlock',
    'marginBlockStart',
    'marginBlockEnd'
];
const paddingKeys = [
    'p',
    'pt',
    'pr',
    'pb',
    'pl',
    'px',
    'py',
    'padding',
    'paddingTop',
    'paddingRight',
    'paddingBottom',
    'paddingLeft',
    'paddingX',
    'paddingY',
    'paddingInline',
    'paddingInlineStart',
    'paddingInlineEnd',
    'paddingBlock',
    'paddingBlockStart',
    'paddingBlockEnd'
];
const spacingKeys = [
    ...marginKeys,
    ...paddingKeys
];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    const themeSpacing = (0, _indexJs2.getPath)(theme, themeKey, true) ?? defaultValue;
    if (typeof themeSpacing === 'number' || typeof themeSpacing === 'string') return (val)=>{
        if (typeof val === 'string') return val;
        if (typeof val !== 'number') console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
        if (typeof themeSpacing === 'string') {
            if (themeSpacing.startsWith('var(') && val === 0) return 0;
            if (themeSpacing.startsWith('var(') && val === 1) return themeSpacing;
            return `calc(${val} * ${themeSpacing})`;
        }
        return themeSpacing * val;
    };
    if (Array.isArray(themeSpacing)) return (val)=>{
        if (typeof val === 'string') return val;
        const abs = Math.abs(val);
        if (!Number.isInteger(abs)) console.error([
            `MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`
        ].join('\n'));
        else if (abs > themeSpacing.length - 1) console.error([
            `MUI: The value provided (${abs}) overflows.`,
            `The supported values are: ${JSON.stringify(themeSpacing)}.`,
            `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`
        ].join('\n'));
        const transformed = themeSpacing[abs];
        if (val >= 0) return transformed;
        if (typeof transformed === 'number') return -transformed;
        if (typeof transformed === 'string' && transformed.startsWith('var(')) return `calc(-1 * ${transformed})`;
        return `-${transformed}`;
    };
    if (typeof themeSpacing === 'function') return themeSpacing;
    console.error([
        `MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`,
        'It should be a number, an array or a function.'
    ].join('\n'));
    return ()=>undefined;
}
function createUnarySpacing(theme) {
    return createUnaryUnit(theme, 'spacing', 8, 'spacing');
}
function getValue(transformer, propValue) {
    if (typeof propValue === 'string' || propValue == null) return propValue;
    return transformer(propValue);
}
function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue)=>cssProperties.reduce((acc, cssProperty)=>{
            acc[cssProperty] = getValue(transformer, propValue);
            return acc;
        }, {});
}
function resolveCssProperty(props, keys, prop, transformer) {
    // Using a hash computation over an array iteration could be faster, but with only 28 items,
    // it's doesn't worth the bundle size.
    if (!keys.includes(prop)) return null;
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return (0, _indexJs1.handleBreakpoints)(props, propValue, styleFromPropValue);
}
function style(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop)=>resolveCssProperty(props, keys, prop, transformer)).reduce((0, _indexJsDefault1.default), {});
}
function margin(props) {
    return style(props, marginKeys);
}
margin.propTypes = marginKeys.reduce((obj, key)=>{
    obj[key] = (0, _indexJsDefault.default);
    return obj;
}, {});
margin.filterProps = marginKeys;
function padding(props) {
    return style(props, paddingKeys);
}
padding.propTypes = paddingKeys.reduce((obj, key)=>{
    obj[key] = (0, _indexJsDefault.default);
    return obj;
}, {});
padding.filterProps = paddingKeys;
function spacing(props) {
    return style(props, spacingKeys);
}
spacing.propTypes = spacingKeys.reduce((obj, key)=>{
    obj[key] = (0, _indexJsDefault.default);
    return obj;
}, {});
spacing.filterProps = spacingKeys;
exports.default = spacing;

},{"../responsivePropType/index.js":"gnPYs","../breakpoints/index.js":"w58nR","../style/index.js":"ehG9v","../merge/index.js":"3VP2g","../memoize/index.js":"9RVMM","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gnPYs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _responsivePropTypeJsDefault.default));
var _responsivePropTypeJs = require("./responsivePropType.js");
var _responsivePropTypeJsDefault = parcelHelpers.interopDefault(_responsivePropTypeJs);

},{"./responsivePropType.js":"8FaLo","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8FaLo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
const responsivePropType = (0, _propTypesDefault.default).oneOfType([
    (0, _propTypesDefault.default).number,
    (0, _propTypesDefault.default).string,
    (0, _propTypesDefault.default).object,
    (0, _propTypesDefault.default).array
]);
exports.default = responsivePropType;

},{"prop-types":"GNqOQ","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"w58nR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _breakpointsJsDefault.default));
var _breakpointsJs = require("./breakpoints.js");
var _breakpointsJsDefault = parcelHelpers.interopDefault(_breakpointsJs);
parcelHelpers.exportAll(_breakpointsJs, exports);

},{"./breakpoints.js":"3T6KU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3T6KU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "values", ()=>values);
parcelHelpers.export(exports, "handleBreakpoints", ()=>handleBreakpoints);
parcelHelpers.export(exports, "createEmptyBreakpointObject", ()=>createEmptyBreakpointObject);
parcelHelpers.export(exports, "removeUnusedBreakpoints", ()=>removeUnusedBreakpoints);
parcelHelpers.export(exports, "mergeBreakpointsInOrder", ()=>mergeBreakpointsInOrder);
// compute base for responsive values; e.g.,
// [1,2,3] => {xs: true, sm: true, md: true}
// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}
parcelHelpers.export(exports, "computeBreakpointsBase", ()=>computeBreakpointsBase);
parcelHelpers.export(exports, "resolveBreakpointValues", ()=>resolveBreakpointValues);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _deepmerge = require("@mui/utils/deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _indexJs = require("../merge/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../cssContainerQueries/index.js");
const values = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536 // large screen
};
const defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: [
        'xs',
        'sm',
        'md',
        'lg',
        'xl'
    ],
    up: (key)=>`@media (min-width:${values[key]}px)`
};
const defaultContainerQueries = {
    containerQueries: (containerName)=>({
            up: (key)=>{
                let result = typeof key === 'number' ? key : values[key] || key;
                if (typeof result === 'number') result = `${result}px`;
                return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
            }
        })
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index)=>{
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
        }, {});
    }
    if (typeof propValue === 'object') {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint)=>{
            if ((0, _indexJs1.isCqShorthand)(themeBreakpoints.keys, breakpoint)) {
                const containerKey = (0, _indexJs1.getContainerQuery)(theme.containerQueries ? theme : defaultContainerQueries, breakpoint);
                if (containerKey) acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {
                const mediaKey = themeBreakpoints.up(breakpoint);
                acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
                const cssKey = breakpoint;
                acc[cssKey] = propValue[cssKey];
            }
            return acc;
        }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
}
function breakpoints(styleFunction) {
    // false positive
    // eslint-disable-next-line react/function-component-definition
    const newStyleFunction = (props)=>{
        const theme = props.theme || {};
        const base = styleFunction(props);
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        const extended = themeBreakpoints.keys.reduce((acc, key)=>{
            if (props[key]) {
                acc = acc || {};
                acc[themeBreakpoints.up(key)] = styleFunction({
                    theme,
                    ...props[key]
                });
            }
            return acc;
        }, null);
        return (0, _indexJsDefault.default)(base, extended);
    };
    newStyleFunction.propTypes = {
        ...styleFunction.propTypes,
        xs: (0, _propTypesDefault.default).object,
        sm: (0, _propTypesDefault.default).object,
        md: (0, _propTypesDefault.default).object,
        lg: (0, _propTypesDefault.default).object,
        xl: (0, _propTypesDefault.default).object
    };
    newStyleFunction.filterProps = [
        'xs',
        'sm',
        'md',
        'lg',
        'xl',
        ...styleFunction.filterProps
    ];
    return newStyleFunction;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
    const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key)=>{
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
    }, {});
    return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style) {
    return breakpointKeys.reduce((acc, key)=>{
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) delete acc[key];
        return acc;
    }, style);
}
function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [
        emptyBreakpoints,
        ...styles
    ].reduce((prev, next)=>(0, _deepmergeDefault.default)(prev, next), {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
}
function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    // fixed value
    if (typeof breakpointValues !== 'object') return {};
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) breakpointsKeys.forEach((breakpoint, i)=>{
        if (i < breakpointValues.length) base[breakpoint] = true;
    });
    else breakpointsKeys.forEach((breakpoint)=>{
        if (breakpointValues[breakpoint] != null) base[breakpoint] = true;
    });
    return base;
}
function resolveBreakpointValues({ values: breakpointValues, breakpoints: themeBreakpoints, base: customBase }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);
    if (keys.length === 0) return breakpointValues;
    let previous;
    return keys.reduce((acc, breakpoint, i)=>{
        if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
        } else if (typeof breakpointValues === 'object') {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
        } else acc[breakpoint] = breakpointValues;
        return acc;
    }, {});
}
exports.default = breakpoints;

},{"prop-types":"GNqOQ","@mui/utils/deepmerge":"bLPf1","../merge/index.js":"3VP2g","../cssContainerQueries/index.js":"rHSbd","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3VP2g":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _mergeJsDefault.default));
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);

},{"./merge.js":"7ZblL","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7ZblL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deepmerge = require("@mui/utils/deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
function merge(acc, item) {
    if (!item) return acc;
    return (0, _deepmergeDefault.default)(acc, item, {
        clone: false // No need to clone deep, it's way faster.
    });
}
exports.default = merge;

},{"@mui/utils/deepmerge":"bLPf1","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ehG9v":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _styleJsDefault.default));
var _styleJs = require("./style.js");
var _styleJsDefault = parcelHelpers.interopDefault(_styleJs);
parcelHelpers.exportAll(_styleJs, exports);

},{"./style.js":"4yB8z","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4yB8z":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPath", ()=>getPath);
parcelHelpers.export(exports, "getStyleValue", ()=>getStyleValue);
var _capitalize = require("@mui/utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _indexJs = require("../responsivePropType/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../breakpoints/index.js");
function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== 'string') return null;
    // Check if CSS variables are used
    if (obj && obj.vars && checkVars) {
        const val = `vars.${path}`.split('.').reduce((acc, item)=>acc && acc[item] ? acc[item] : null, obj);
        if (val != null) return val;
    }
    return path.split('.').reduce((acc, item)=>{
        if (acc && acc[item] != null) return acc[item];
        return null;
    }, obj);
}
function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === 'function') value = themeMapping(propValueFinal);
    else if (Array.isArray(themeMapping)) value = themeMapping[propValueFinal] || userValue;
    else value = getPath(themeMapping, propValueFinal) || userValue;
    if (transform) value = transform(value, userValue, themeMapping);
    return value;
}
function style(options) {
    const { prop, cssProperty = options.prop, themeKey, transform } = options;
    // false positive
    // eslint-disable-next-line react/function-component-definition
    const fn = (props)=>{
        if (props[prop] == null) return null;
        const propValue = props[prop];
        const theme = props.theme;
        const themeMapping = getPath(theme, themeKey) || {};
        const styleFromPropValue = (propValueFinal)=>{
            let value = getStyleValue(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === 'string') // Haven't found value
            value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : (0, _capitalizeDefault.default)(propValueFinal)}`, propValueFinal);
            if (cssProperty === false) return value;
            return {
                [cssProperty]: value
            };
        };
        return (0, _indexJs1.handleBreakpoints)(props, propValue, styleFromPropValue);
    };
    fn.propTypes = {
        [prop]: (0, _indexJsDefault.default)
    };
    fn.filterProps = [
        prop
    ];
    return fn;
}
exports.default = style;

},{"@mui/utils/capitalize":"igOKi","../responsivePropType/index.js":"gnPYs","../breakpoints/index.js":"w58nR","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9RVMM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _memoizeJsDefault.default));
var _memoizeJs = require("./memoize.js");
var _memoizeJsDefault = parcelHelpers.interopDefault(_memoizeJs);

},{"./memoize.js":"jKIdv","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jKIdv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>memoize);
function memoize(fn) {
    const cache = {};
    return (arg)=>{
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"feC9L":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// eslint-disable-next-line @typescript-eslint/naming-convention
parcelHelpers.export(exports, "unstable_createStyleFunctionSx", ()=>unstable_createStyleFunctionSx);
var _capitalize = require("@mui/utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _indexJs = require("../merge/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../style/index.js");
var _indexJs2 = require("../breakpoints/index.js");
var _indexJs3 = require("../cssContainerQueries/index.js");
var _defaultSxConfigJs = require("./defaultSxConfig.js");
var _defaultSxConfigJsDefault = parcelHelpers.interopDefault(_defaultSxConfigJs);
function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object)=>keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object)=>union.size === Object.keys(object).length);
}
function callIfFn(maybeFn, arg) {
    return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
}
function unstable_createStyleFunctionSx() {
    function getThemeValue(prop, val, theme, config) {
        const props = {
            [prop]: val,
            theme
        };
        const options = config[prop];
        if (!options) return {
            [prop]: val
        };
        const { cssProperty = prop, themeKey, transform, style } = options;
        if (val == null) return null;
        // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
        if (themeKey === 'typography' && val === 'inherit') return {
            [prop]: val
        };
        const themeMapping = (0, _indexJs1.getPath)(theme, themeKey) || {};
        if (style) return style(props);
        const styleFromPropValue = (propValueFinal)=>{
            let value = (0, _indexJs1.getStyleValue)(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === 'string') // Haven't found value
            value = (0, _indexJs1.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : (0, _capitalizeDefault.default)(propValueFinal)}`, propValueFinal);
            if (cssProperty === false) return value;
            return {
                [cssProperty]: value
            };
        };
        return (0, _indexJs2.handleBreakpoints)(props, val, styleFromPropValue);
    }
    function styleFunctionSx(props) {
        const { sx, theme = {} } = props || {};
        if (!sx) return null; // Emotion & styled-components will neglect null
        const config = theme.unstable_sxConfig ?? (0, _defaultSxConfigJsDefault.default);
        /*
     * Receive `sxInput` as object or callback
     * and then recursively check keys & values to create media query object styles.
     * (the result will be used in `styled`)
     */ function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === 'function') sxObject = sxInput(theme);
            else if (typeof sxInput !== 'object') // value
            return sxInput;
            if (!sxObject) return null;
            const emptyBreakpoints = (0, _indexJs2.createEmptyBreakpointObject)(theme.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey)=>{
                const value = callIfFn(sxObject[styleKey], theme);
                if (value !== null && value !== undefined) {
                    if (typeof value === 'object') {
                        if (config[styleKey]) css = (0, _indexJsDefault.default)(css, getThemeValue(styleKey, value, theme, config));
                        else {
                            const breakpointsValues = (0, _indexJs2.handleBreakpoints)({
                                theme
                            }, value, (x)=>({
                                    [styleKey]: x
                                }));
                            if (objectsHaveSameKeys(breakpointsValues, value)) css[styleKey] = styleFunctionSx({
                                sx: value,
                                theme
                            });
                            else css = (0, _indexJsDefault.default)(css, breakpointsValues);
                        }
                    } else css = (0, _indexJsDefault.default)(css, getThemeValue(styleKey, value, theme, config));
                }
            });
            return (0, _indexJs3.sortContainerQueries)(theme, (0, _indexJs2.removeUnusedBreakpoints)(breakpointsKeys, css));
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx;
}
const styleFunctionSx = unstable_createStyleFunctionSx();
styleFunctionSx.filterProps = [
    'sx'
];
exports.default = styleFunctionSx;

},{"@mui/utils/capitalize":"igOKi","../merge/index.js":"3VP2g","../style/index.js":"ehG9v","../breakpoints/index.js":"w58nR","../cssContainerQueries/index.js":"rHSbd","./defaultSxConfig.js":"2J5LT","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2J5LT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../spacing/index.js");
var _indexJs1 = require("../borders/index.js");
var _indexJs2 = require("../cssGrid/index.js");
var _indexJs3 = require("../palette/index.js");
var _indexJs4 = require("../sizing/index.js");
const defaultSxConfig = {
    // borders
    border: {
        themeKey: 'borders',
        transform: (0, _indexJs1.borderTransform)
    },
    borderTop: {
        themeKey: 'borders',
        transform: (0, _indexJs1.borderTransform)
    },
    borderRight: {
        themeKey: 'borders',
        transform: (0, _indexJs1.borderTransform)
    },
    borderBottom: {
        themeKey: 'borders',
        transform: (0, _indexJs1.borderTransform)
    },
    borderLeft: {
        themeKey: 'borders',
        transform: (0, _indexJs1.borderTransform)
    },
    borderColor: {
        themeKey: 'palette'
    },
    borderTopColor: {
        themeKey: 'palette'
    },
    borderRightColor: {
        themeKey: 'palette'
    },
    borderBottomColor: {
        themeKey: 'palette'
    },
    borderLeftColor: {
        themeKey: 'palette'
    },
    outline: {
        themeKey: 'borders',
        transform: (0, _indexJs1.borderTransform)
    },
    outlineColor: {
        themeKey: 'palette'
    },
    borderRadius: {
        themeKey: 'shape.borderRadius',
        style: (0, _indexJs1.borderRadius)
    },
    // palette
    color: {
        themeKey: 'palette',
        transform: (0, _indexJs3.paletteTransform)
    },
    bgcolor: {
        themeKey: 'palette',
        cssProperty: 'backgroundColor',
        transform: (0, _indexJs3.paletteTransform)
    },
    backgroundColor: {
        themeKey: 'palette',
        transform: (0, _indexJs3.paletteTransform)
    },
    // spacing
    p: {
        style: (0, _indexJs.padding)
    },
    pt: {
        style: (0, _indexJs.padding)
    },
    pr: {
        style: (0, _indexJs.padding)
    },
    pb: {
        style: (0, _indexJs.padding)
    },
    pl: {
        style: (0, _indexJs.padding)
    },
    px: {
        style: (0, _indexJs.padding)
    },
    py: {
        style: (0, _indexJs.padding)
    },
    padding: {
        style: (0, _indexJs.padding)
    },
    paddingTop: {
        style: (0, _indexJs.padding)
    },
    paddingRight: {
        style: (0, _indexJs.padding)
    },
    paddingBottom: {
        style: (0, _indexJs.padding)
    },
    paddingLeft: {
        style: (0, _indexJs.padding)
    },
    paddingX: {
        style: (0, _indexJs.padding)
    },
    paddingY: {
        style: (0, _indexJs.padding)
    },
    paddingInline: {
        style: (0, _indexJs.padding)
    },
    paddingInlineStart: {
        style: (0, _indexJs.padding)
    },
    paddingInlineEnd: {
        style: (0, _indexJs.padding)
    },
    paddingBlock: {
        style: (0, _indexJs.padding)
    },
    paddingBlockStart: {
        style: (0, _indexJs.padding)
    },
    paddingBlockEnd: {
        style: (0, _indexJs.padding)
    },
    m: {
        style: (0, _indexJs.margin)
    },
    mt: {
        style: (0, _indexJs.margin)
    },
    mr: {
        style: (0, _indexJs.margin)
    },
    mb: {
        style: (0, _indexJs.margin)
    },
    ml: {
        style: (0, _indexJs.margin)
    },
    mx: {
        style: (0, _indexJs.margin)
    },
    my: {
        style: (0, _indexJs.margin)
    },
    margin: {
        style: (0, _indexJs.margin)
    },
    marginTop: {
        style: (0, _indexJs.margin)
    },
    marginRight: {
        style: (0, _indexJs.margin)
    },
    marginBottom: {
        style: (0, _indexJs.margin)
    },
    marginLeft: {
        style: (0, _indexJs.margin)
    },
    marginX: {
        style: (0, _indexJs.margin)
    },
    marginY: {
        style: (0, _indexJs.margin)
    },
    marginInline: {
        style: (0, _indexJs.margin)
    },
    marginInlineStart: {
        style: (0, _indexJs.margin)
    },
    marginInlineEnd: {
        style: (0, _indexJs.margin)
    },
    marginBlock: {
        style: (0, _indexJs.margin)
    },
    marginBlockStart: {
        style: (0, _indexJs.margin)
    },
    marginBlockEnd: {
        style: (0, _indexJs.margin)
    },
    // display
    displayPrint: {
        cssProperty: false,
        transform: (value)=>({
                '@media print': {
                    display: value
                }
            })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
        style: (0, _indexJs2.gap)
    },
    rowGap: {
        style: (0, _indexJs2.rowGap)
    },
    columnGap: {
        style: (0, _indexJs2.columnGap)
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
        themeKey: 'zIndex'
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
        themeKey: 'shadows'
    },
    // sizing
    width: {
        transform: (0, _indexJs4.sizingTransform)
    },
    maxWidth: {
        style: (0, _indexJs4.maxWidth)
    },
    minWidth: {
        transform: (0, _indexJs4.sizingTransform)
    },
    height: {
        transform: (0, _indexJs4.sizingTransform)
    },
    maxHeight: {
        transform: (0, _indexJs4.sizingTransform)
    },
    minHeight: {
        transform: (0, _indexJs4.sizingTransform)
    },
    boxSizing: {},
    // typography
    font: {
        themeKey: 'font'
    },
    fontFamily: {
        themeKey: 'typography'
    },
    fontSize: {
        themeKey: 'typography'
    },
    fontStyle: {
        themeKey: 'typography'
    },
    fontWeight: {
        themeKey: 'typography'
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
        cssProperty: false,
        themeKey: 'typography'
    }
};
exports.default = defaultSxConfig;

},{"../spacing/index.js":"aFm0j","../borders/index.js":"9ZCIV","../cssGrid/index.js":"23cb0","../palette/index.js":"kne7J","../sizing/index.js":"fO9AT","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9ZCIV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _bordersJsDefault.default));
var _bordersJs = require("./borders.js");
var _bordersJsDefault = parcelHelpers.interopDefault(_bordersJs);
parcelHelpers.exportAll(_bordersJs, exports);

},{"./borders.js":"6bLYH","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6bLYH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "borderTransform", ()=>borderTransform);
parcelHelpers.export(exports, "border", ()=>border);
parcelHelpers.export(exports, "borderTop", ()=>borderTop);
parcelHelpers.export(exports, "borderRight", ()=>borderRight);
parcelHelpers.export(exports, "borderBottom", ()=>borderBottom);
parcelHelpers.export(exports, "borderLeft", ()=>borderLeft);
parcelHelpers.export(exports, "borderColor", ()=>borderColor);
parcelHelpers.export(exports, "borderTopColor", ()=>borderTopColor);
parcelHelpers.export(exports, "borderRightColor", ()=>borderRightColor);
parcelHelpers.export(exports, "borderBottomColor", ()=>borderBottomColor);
parcelHelpers.export(exports, "borderLeftColor", ()=>borderLeftColor);
parcelHelpers.export(exports, "outline", ()=>outline);
parcelHelpers.export(exports, "outlineColor", ()=>outlineColor);
parcelHelpers.export(exports, "borderRadius", ()=>borderRadius);
var _indexJs = require("../responsivePropType/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../style/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../compose/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../spacing/index.js");
var _indexJs4 = require("../breakpoints/index.js");
function borderTransform(value) {
    if (typeof value !== 'number') return value;
    return `${value}px solid`;
}
function createBorderStyle(prop, transform) {
    return (0, _indexJsDefault1.default)({
        prop,
        themeKey: 'borders',
        transform
    });
}
const border = createBorderStyle('border', borderTransform);
const borderTop = createBorderStyle('borderTop', borderTransform);
const borderRight = createBorderStyle('borderRight', borderTransform);
const borderBottom = createBorderStyle('borderBottom', borderTransform);
const borderLeft = createBorderStyle('borderLeft', borderTransform);
const borderColor = createBorderStyle('borderColor');
const borderTopColor = createBorderStyle('borderTopColor');
const borderRightColor = createBorderStyle('borderRightColor');
const borderBottomColor = createBorderStyle('borderBottomColor');
const borderLeftColor = createBorderStyle('borderLeftColor');
const outline = createBorderStyle('outline', borderTransform);
const outlineColor = createBorderStyle('outlineColor');
const borderRadius = (props)=>{
    if (props.borderRadius !== undefined && props.borderRadius !== null) {
        const transformer = (0, _indexJs3.createUnaryUnit)(props.theme, 'shape.borderRadius', 4, 'borderRadius');
        const styleFromPropValue = (propValue)=>({
                borderRadius: (0, _indexJs3.getValue)(transformer, propValue)
            });
        return (0, _indexJs4.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
    }
    return null;
};
borderRadius.propTypes = {
    borderRadius: (0, _indexJsDefault.default)
};
borderRadius.filterProps = [
    'borderRadius'
];
const borders = (0, _indexJsDefault2.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);
exports.default = borders;

},{"../responsivePropType/index.js":"gnPYs","../style/index.js":"ehG9v","../compose/index.js":"bceMB","../spacing/index.js":"aFm0j","../breakpoints/index.js":"w58nR","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bceMB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _composeJsDefault.default));
var _composeJs = require("./compose.js");
var _composeJsDefault = parcelHelpers.interopDefault(_composeJs);

},{"./compose.js":"gS7C0","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gS7C0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../merge/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function compose(...styles) {
    const handlers = styles.reduce((acc, style)=>{
        style.filterProps.forEach((prop)=>{
            acc[prop] = style;
        });
        return acc;
    }, {});
    // false positive
    // eslint-disable-next-line react/function-component-definition
    const fn = (props)=>{
        return Object.keys(props).reduce((acc, prop)=>{
            if (handlers[prop]) return (0, _indexJsDefault.default)(acc, handlers[prop](props));
            return acc;
        }, {});
    };
    fn.propTypes = styles.reduce((acc, style)=>Object.assign(acc, style.propTypes), {});
    fn.filterProps = styles.reduce((acc, style)=>acc.concat(style.filterProps), []);
    return fn;
}
exports.default = compose;

},{"../merge/index.js":"3VP2g","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"23cb0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _cssGridJsDefault.default));
var _cssGridJs = require("./cssGrid.js");
var _cssGridJsDefault = parcelHelpers.interopDefault(_cssGridJs);
parcelHelpers.exportAll(_cssGridJs, exports);

},{"./cssGrid.js":"1J1L8","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1J1L8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gap", ()=>gap);
parcelHelpers.export(exports, "columnGap", ()=>columnGap);
parcelHelpers.export(exports, "rowGap", ()=>rowGap);
parcelHelpers.export(exports, "gridColumn", ()=>gridColumn);
parcelHelpers.export(exports, "gridRow", ()=>gridRow);
parcelHelpers.export(exports, "gridAutoFlow", ()=>gridAutoFlow);
parcelHelpers.export(exports, "gridAutoColumns", ()=>gridAutoColumns);
parcelHelpers.export(exports, "gridAutoRows", ()=>gridAutoRows);
parcelHelpers.export(exports, "gridTemplateColumns", ()=>gridTemplateColumns);
parcelHelpers.export(exports, "gridTemplateRows", ()=>gridTemplateRows);
parcelHelpers.export(exports, "gridTemplateAreas", ()=>gridTemplateAreas);
parcelHelpers.export(exports, "gridArea", ()=>gridArea);
var _indexJs = require("../style/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../compose/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../spacing/index.js");
var _indexJs3 = require("../breakpoints/index.js");
var _indexJs4 = require("../responsivePropType/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs4);
const gap = (props)=>{
    if (props.gap !== undefined && props.gap !== null) {
        const transformer = (0, _indexJs2.createUnaryUnit)(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = (propValue)=>({
                gap: (0, _indexJs2.getValue)(transformer, propValue)
            });
        return (0, _indexJs3.handleBreakpoints)(props, props.gap, styleFromPropValue);
    }
    return null;
};
gap.propTypes = {
    gap: (0, _indexJsDefault2.default)
};
gap.filterProps = [
    'gap'
];
const columnGap = (props)=>{
    if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = (0, _indexJs2.createUnaryUnit)(props.theme, 'spacing', 8, 'columnGap');
        const styleFromPropValue = (propValue)=>({
                columnGap: (0, _indexJs2.getValue)(transformer, propValue)
            });
        return (0, _indexJs3.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
    }
    return null;
};
columnGap.propTypes = {
    columnGap: (0, _indexJsDefault2.default)
};
columnGap.filterProps = [
    'columnGap'
];
const rowGap = (props)=>{
    if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = (0, _indexJs2.createUnaryUnit)(props.theme, 'spacing', 8, 'rowGap');
        const styleFromPropValue = (propValue)=>({
                rowGap: (0, _indexJs2.getValue)(transformer, propValue)
            });
        return (0, _indexJs3.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
    }
    return null;
};
rowGap.propTypes = {
    rowGap: (0, _indexJsDefault2.default)
};
rowGap.filterProps = [
    'rowGap'
];
const gridColumn = (0, _indexJsDefault.default)({
    prop: 'gridColumn'
});
const gridRow = (0, _indexJsDefault.default)({
    prop: 'gridRow'
});
const gridAutoFlow = (0, _indexJsDefault.default)({
    prop: 'gridAutoFlow'
});
const gridAutoColumns = (0, _indexJsDefault.default)({
    prop: 'gridAutoColumns'
});
const gridAutoRows = (0, _indexJsDefault.default)({
    prop: 'gridAutoRows'
});
const gridTemplateColumns = (0, _indexJsDefault.default)({
    prop: 'gridTemplateColumns'
});
const gridTemplateRows = (0, _indexJsDefault.default)({
    prop: 'gridTemplateRows'
});
const gridTemplateAreas = (0, _indexJsDefault.default)({
    prop: 'gridTemplateAreas'
});
const gridArea = (0, _indexJsDefault.default)({
    prop: 'gridArea'
});
const grid = (0, _indexJsDefault1.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
exports.default = grid;

},{"../style/index.js":"ehG9v","../compose/index.js":"bceMB","../spacing/index.js":"aFm0j","../breakpoints/index.js":"w58nR","../responsivePropType/index.js":"gnPYs","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kne7J":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _paletteJsDefault.default));
var _paletteJs = require("./palette.js");
var _paletteJsDefault = parcelHelpers.interopDefault(_paletteJs);
parcelHelpers.exportAll(_paletteJs, exports);

},{"./palette.js":"5rDLI","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5rDLI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paletteTransform", ()=>paletteTransform);
parcelHelpers.export(exports, "color", ()=>color);
parcelHelpers.export(exports, "bgcolor", ()=>bgcolor);
parcelHelpers.export(exports, "backgroundColor", ()=>backgroundColor);
var _indexJs = require("../style/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../compose/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
function paletteTransform(value, userValue) {
    if (userValue === 'grey') return userValue;
    return value;
}
const color = (0, _indexJsDefault.default)({
    prop: 'color',
    themeKey: 'palette',
    transform: paletteTransform
});
const bgcolor = (0, _indexJsDefault.default)({
    prop: 'bgcolor',
    cssProperty: 'backgroundColor',
    themeKey: 'palette',
    transform: paletteTransform
});
const backgroundColor = (0, _indexJsDefault.default)({
    prop: 'backgroundColor',
    themeKey: 'palette',
    transform: paletteTransform
});
const palette = (0, _indexJsDefault1.default)(color, bgcolor, backgroundColor);
exports.default = palette;

},{"../style/index.js":"ehG9v","../compose/index.js":"bceMB","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fO9AT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _sizingJsDefault.default));
var _sizingJs = require("./sizing.js");
var _sizingJsDefault = parcelHelpers.interopDefault(_sizingJs);
parcelHelpers.exportAll(_sizingJs, exports);

},{"./sizing.js":"9eIhj","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9eIhj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sizingTransform", ()=>sizingTransform);
parcelHelpers.export(exports, "width", ()=>width);
parcelHelpers.export(exports, "maxWidth", ()=>maxWidth);
parcelHelpers.export(exports, "minWidth", ()=>minWidth);
parcelHelpers.export(exports, "height", ()=>height);
parcelHelpers.export(exports, "maxHeight", ()=>maxHeight);
parcelHelpers.export(exports, "minHeight", ()=>minHeight);
parcelHelpers.export(exports, "sizeWidth", ()=>sizeWidth);
parcelHelpers.export(exports, "sizeHeight", ()=>sizeHeight);
parcelHelpers.export(exports, "boxSizing", ()=>boxSizing);
var _indexJs = require("../style/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../compose/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../breakpoints/index.js");
function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = (0, _indexJsDefault.default)({
    prop: 'width',
    transform: sizingTransform
});
const maxWidth = (props)=>{
    if (props.maxWidth !== undefined && props.maxWidth !== null) {
        const styleFromPropValue = (propValue)=>{
            const breakpoint = props.theme?.breakpoints?.values?.[propValue] || (0, _indexJs2.values)[propValue];
            if (!breakpoint) return {
                maxWidth: sizingTransform(propValue)
            };
            if (props.theme?.breakpoints?.unit !== 'px') return {
                maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
            };
            return {
                maxWidth: breakpoint
            };
        };
        return (0, _indexJs2.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
    }
    return null;
};
maxWidth.filterProps = [
    'maxWidth'
];
const minWidth = (0, _indexJsDefault.default)({
    prop: 'minWidth',
    transform: sizingTransform
});
const height = (0, _indexJsDefault.default)({
    prop: 'height',
    transform: sizingTransform
});
const maxHeight = (0, _indexJsDefault.default)({
    prop: 'maxHeight',
    transform: sizingTransform
});
const minHeight = (0, _indexJsDefault.default)({
    prop: 'minHeight',
    transform: sizingTransform
});
const sizeWidth = (0, _indexJsDefault.default)({
    prop: 'size',
    cssProperty: 'width',
    transform: sizingTransform
});
const sizeHeight = (0, _indexJsDefault.default)({
    prop: 'size',
    cssProperty: 'height',
    transform: sizingTransform
});
const boxSizing = (0, _indexJsDefault.default)({
    prop: 'boxSizing'
});
const sizing = (0, _indexJsDefault1.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
exports.default = sizing;

},{"../style/index.js":"ehG9v","../compose/index.js":"bceMB","../breakpoints/index.js":"w58nR","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lE7To":[function(require,module,exports,__globalThis) {
/**
 * A universal utility to style components with multiple color modes. Always use it from the theme object.
 * It works with:
 *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)
 *  - [CSS theme variables](https://mui.com/material-ui/customization/css-theme-variables/overview/)
 *  - Zero-runtime engine
 *
 * Tips: Use an array over object spread and place `theme.applyStyles()` last.
 *
 * With the styled function:
 * ✅ [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]
 * 🚫 { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}
 *
 * With the sx prop:
 * ✅ [{ background: '#e5e5e5' }, theme => theme.applyStyles('dark', { background: '#1c1c1c' })]
 * 🚫 { background: '#e5e5e5', ...theme => theme.applyStyles('dark', { background: '#1c1c1c' })}
 *
 * @example
 * 1. using with `styled`:
 * ```jsx
 *   const Component = styled('div')(({ theme }) => [
 *     { background: '#e5e5e5' },
 *     theme.applyStyles('dark', {
 *       background: '#1c1c1c',
 *       color: '#fff',
 *     }),
 *   ]);
 * ```
 *
 * @example
 * 2. using with `sx` prop:
 * ```jsx
 *   <Box sx={[
 *     { background: '#e5e5e5' },
 *     theme => theme.applyStyles('dark', {
 *        background: '#1c1c1c',
 *        color: '#fff',
 *      }),
 *     ]}
 *   />
 * ```
 *
 * @example
 * 3. theming a component:
 * ```jsx
 *   extendTheme({
 *     components: {
 *       MuiButton: {
 *         styleOverrides: {
 *           root: ({ theme }) => [
 *             { background: '#e5e5e5' },
 *             theme.applyStyles('dark', {
 *               background: '#1c1c1c',
 *               color: '#fff',
 *             }),
 *           ],
 *         },
 *       }
 *     }
 *   })
 *```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>applyStyles);
function applyStyles(key, styles) {
    // @ts-expect-error this is 'any' type
    const theme = this;
    if (theme.vars) {
        if (!theme.colorSchemes?.[key] || typeof theme.getColorSchemeSelector !== 'function') return {};
        // If CssVarsProvider is used as a provider, returns '*:where({selector}) &'
        let selector = theme.getColorSchemeSelector(key);
        if (selector === '&') return styles;
        if (selector.includes('data-') || selector.includes('.')) // '*' is required as a workaround for Emotion issue (https://github.com/emotion-js/emotion/issues/2836)
        selector = `*:where(${selector.replace(/\s*&$/, '')}) &`;
        return {
            [selector]: styles
        };
    }
    if (theme.palette.mode === key) return styles;
    return {};
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hKnql":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _useThemeWithoutDefaultJsDefault.default));
var _useThemeWithoutDefaultJs = require("./useThemeWithoutDefault.js");
var _useThemeWithoutDefaultJsDefault = parcelHelpers.interopDefault(_useThemeWithoutDefaultJs);

},{"./useThemeWithoutDefault.js":"86RIU","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"86RIU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _styledEngine = require("@mui/styled-engine");
'use client';
function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
}
function useTheme(defaultTheme = null) {
    const contextTheme = _react.useContext((0, _styledEngine.ThemeContext));
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
}
exports.default = useTheme;

},{"react":"jMk1U","@mui/styled-engine":"g3Wsb","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"d9QFz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>unstable_memoTheme);
var _preprocessStylesJs = require("./preprocessStyles.js");
var _preprocessStylesJsDefault = parcelHelpers.interopDefault(_preprocessStylesJs);
/* eslint-disable @typescript-eslint/naming-convention */ // We need to pass an argument as `{ theme }` for PigmentCSS, but we don't want to
// allocate more objects.
const arg = {
    theme: undefined
};
function unstable_memoTheme(styleFn) {
    let lastValue;
    let lastTheme;
    return function styleMemoized(props) {
        let value = lastValue;
        if (value === undefined || props.theme !== lastTheme) {
            arg.theme = props.theme;
            value = (0, _preprocessStylesJsDefault.default)(styleFn(arg));
            lastValue = value;
            lastTheme = props.theme;
        }
        return value;
    };
}

},{"./preprocessStyles.js":"ihQDo","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ihQDo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>preprocessStyles);
var _styledEngine = require("@mui/styled-engine");
function preprocessStyles(input) {
    const { variants, ...style } = input;
    const result = {
        variants,
        style: (0, _styledEngine.internal_serializeStyles)(style),
        isProcessed: true
    };
    // Not supported on styled-components
    if (result.style === style) return result;
    if (variants) variants.forEach((variant)=>{
        if (typeof variant.style !== 'function') variant.style = (0, _styledEngine.internal_serializeStyles)(variant.style);
    });
    return result;
}

},{"@mui/styled-engine":"g3Wsb","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fpIeq":[function(require,module,exports,__globalThis) {
/**
 * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable
 * and they does not need to remember the prefix (defined once).
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createGetCssVar);
function createGetCssVar(prefix = '') {
    function appendVar(...vars) {
        if (!vars.length) return '';
        const value = vars[0];
        if (typeof value === 'string' && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;
        return `, ${value}`;
    }
    // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.
    const getCssVar = (field, ...fallbacks)=>{
        return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;
    };
    return getCssVar;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6Xphm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useId = require("@mui/utils/useId");
var _useIdDefault = parcelHelpers.interopDefault(_useId);
'use client';
exports.default = (0, _useIdDefault.default);

},{"@mui/utils/useId":"ko2Df","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ko2Df":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("255675d84f92bae").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _useId.default;
    }
});
var _useId = _interopRequireDefault(require("25989ce2deac7de"));

},{"255675d84f92bae":"1P3rZ","25989ce2deac7de":"c4oMX"}],"c4oMX":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireWildcard = require("24efb0879cb32d1").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = useId;
var React = _interopRequireWildcard(require("38095c9d28295399"));
let globalId = 0;
// TODO React 17: Remove `useGlobalId` once React 17 support is removed
function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React.useState(idOverride);
    const id = idOverride || defaultId;
    React.useEffect(()=>{
        if (defaultId == null) {
            // Fallback to this default id when possible.
            // Use the incrementing value for client-side rendering only.
            // We can't use it server-side.
            // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
            globalId += 1;
            setDefaultId(`mui-${globalId}`);
        }
    }, [
        defaultId
    ]);
    return id;
}
// See https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379 for why
const safeReact = {
    ...React
};
const maybeReactUseId = safeReact.useId;
/**
 *
 * @example <div id={useId()} />
 * @param idOverride
 * @returns {string}
 */ function useId(idOverride) {
    // React.useId() is only available from React 17.0.0.
    if (maybeReactUseId !== undefined) {
        const reactId = maybeReactUseId();
        return idOverride ?? reactId;
    }
    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler
    // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
    return useGlobalId(idOverride);
}

},{"24efb0879cb32d1":"6TFJp","38095c9d28295399":"jMk1U"}],"jzmCg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useEventCallback = require("@mui/utils/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
'use client';
exports.default = (0, _useEventCallbackDefault.default);

},{"@mui/utils/useEventCallback":"7odel","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7odel":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("52c799e74f10efbb").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _useEventCallback.default;
    }
});
var _useEventCallback = _interopRequireDefault(require("e162981f063f520c"));

},{"52c799e74f10efbb":"1P3rZ","e162981f063f520c":"fqVPL"}],"fqVPL":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireDefault = require("97395a092909d98c").default;
var _interopRequireWildcard = require("b7e73551969fa13d").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("564559aa06a2b11"));
var _useEnhancedEffect = _interopRequireDefault(require("deaacaef493326fc"));
/**
 * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892
 * See RFC in https://github.com/reactjs/rfcs/pull/220
 */ function useEventCallback(fn) {
    const ref = React.useRef(fn);
    (0, _useEnhancedEffect.default)(()=>{
        ref.current = fn;
    });
    return React.useRef((...args)=>// @ts-expect-error hide `this`
        (0, ref.current)(...args)).current;
}
var _default = exports.default = useEventCallback;

},{"97395a092909d98c":"1P3rZ","b7e73551969fa13d":"6TFJp","564559aa06a2b11":"jMk1U","deaacaef493326fc":"egHZg"}],"egHZg":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("5b2184198e37aa64").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _useEnhancedEffect.default;
    }
});
var _useEnhancedEffect = _interopRequireDefault(require("8f8a7b5a80fae0b2"));

},{"5b2184198e37aa64":"1P3rZ","8f8a7b5a80fae0b2":"6O69A"}],"6O69A":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireWildcard = require("278d2b4895ae89f8").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("c37b032de779b244"));
/**
 * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.
 * This is useful for effects that are only needed for client-side rendering but not for SSR.
 *
 * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
 * and confirm it doesn't apply to your use-case.
 */ const useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;
var _default = exports.default = useEnhancedEffect;

},{"278d2b4895ae89f8":"6TFJp","c37b032de779b244":"jMk1U"}],"74KXf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useForkRef = require("@mui/utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
'use client';
exports.default = (0, _useForkRefDefault.default);

},{"@mui/utils/useForkRef":"g7kn5","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"g7kn5":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("e65de141a07c5e4b").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _useForkRef.default;
    }
});
var _useForkRef = _interopRequireDefault(require("76422d3c27bc6864"));

},{"e65de141a07c5e4b":"1P3rZ","76422d3c27bc6864":"bY4YC"}],"bY4YC":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireWildcard = require("c5001007a90df00").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = useForkRef;
var React = _interopRequireWildcard(require("ba3eef59680b5588"));
/**
 * Merges refs into a single memoized callback ref or `null`.
 *
 * ```tsx
 * const rootRef = React.useRef<Instance>(null);
 * const refFork = useForkRef(rootRef, props.ref);
 *
 * return (
 *   <Root {...props} ref={refFork} />
 * );
 * ```
 *
 * @param {Array<React.Ref<Instance> | undefined>} refs The ref array.
 * @returns {React.RefCallback<Instance> | null} The new ref callback.
 */ function useForkRef(...refs) {
    const cleanupRef = React.useRef(undefined);
    const refEffect = React.useCallback((instance)=>{
        const cleanups = refs.map((ref)=>{
            if (ref == null) return null;
            if (typeof ref === 'function') {
                const refCallback = ref;
                const refCleanup = refCallback(instance);
                return typeof refCleanup === 'function' ? refCleanup : ()=>{
                    refCallback(null);
                };
            }
            ref.current = instance;
            return ()=>{
                ref.current = null;
            };
        });
        return ()=>{
            cleanups.forEach((refCleanup)=>refCleanup?.());
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, refs);
    return React.useMemo(()=>{
        if (refs.every((ref)=>ref == null)) return null;
        return (value)=>{
            if (cleanupRef.current) {
                cleanupRef.current();
                cleanupRef.current = undefined;
            }
            if (value != null) cleanupRef.current = refEffect(value);
        };
    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- intentionally ignoring that the dependency array must be an array literal
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, refs);
}

},{"c5001007a90df00":"6TFJp","ba3eef59680b5588":"jMk1U"}],"8mNqw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _buttonJsDefault.default));
parcelHelpers.export(exports, "buttonClasses", ()=>(0, _buttonClassesJsDefault.default));
var _buttonJs = require("./Button.js");
var _buttonJsDefault = parcelHelpers.interopDefault(_buttonJs);
var _buttonClassesJs = require("./buttonClasses.js");
var _buttonClassesJsDefault = parcelHelpers.interopDefault(_buttonClassesJs);
parcelHelpers.exportAll(_buttonClassesJs, exports);

},{"./Button.js":"6lQhq","./buttonClasses.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6lQhq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _resolveProps = require("@mui/utils/resolveProps");
var _resolvePropsDefault = parcelHelpers.interopDefault(_resolveProps);
var _composeClasses = require("@mui/utils/composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _colorManipulator = require("@mui/system/colorManipulator");
var _indexJs = require("../utils/index.js");
var _rootShouldForwardPropJs = require("../styles/rootShouldForwardProp.js");
var _rootShouldForwardPropJsDefault = parcelHelpers.interopDefault(_rootShouldForwardPropJs);
var _indexJs1 = require("../zero-styled/index.js");
var _memoThemeJs = require("../utils/memoTheme.js");
var _memoThemeJsDefault = parcelHelpers.interopDefault(_memoThemeJs);
var _indexJs2 = require("../DefaultPropsProvider/index.js");
var _indexJs3 = require("../ButtonBase/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs3);
var _indexJs4 = require("../CircularProgress/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs4);
var _capitalizeJs = require("../utils/capitalize.js");
var _capitalizeJsDefault = parcelHelpers.interopDefault(_capitalizeJs);
var _createSimplePaletteValueFilterJs = require("../utils/createSimplePaletteValueFilter.js");
var _createSimplePaletteValueFilterJsDefault = parcelHelpers.interopDefault(_createSimplePaletteValueFilterJs);
var _buttonClassesJs = require("./buttonClasses.js");
var _buttonClassesJsDefault = parcelHelpers.interopDefault(_buttonClassesJs);
var _buttonGroupContextJs = require("../ButtonGroup/ButtonGroupContext.js");
var _buttonGroupContextJsDefault = parcelHelpers.interopDefault(_buttonGroupContextJs);
var _buttonGroupButtonContextJs = require("../ButtonGroup/ButtonGroupButtonContext.js");
var _buttonGroupButtonContextJsDefault = parcelHelpers.interopDefault(_buttonGroupButtonContextJs);
var _jsxRuntime = require("react/jsx-runtime");
'use client';
const useUtilityClasses = (ownerState)=>{
    const { color, disableElevation, fullWidth, size, variant, loading, loadingPosition, classes } = ownerState;
    const slots = {
        root: [
            'root',
            loading && 'loading',
            variant,
            `${variant}${(0, _capitalizeJsDefault.default)(color)}`,
            `size${(0, _capitalizeJsDefault.default)(size)}`,
            `${variant}Size${(0, _capitalizeJsDefault.default)(size)}`,
            `color${(0, _capitalizeJsDefault.default)(color)}`,
            disableElevation && 'disableElevation',
            fullWidth && 'fullWidth',
            loading && `loadingPosition${(0, _capitalizeJsDefault.default)(loadingPosition)}`
        ],
        startIcon: [
            'icon',
            'startIcon',
            `iconSize${(0, _capitalizeJsDefault.default)(size)}`
        ],
        endIcon: [
            'icon',
            'endIcon',
            `iconSize${(0, _capitalizeJsDefault.default)(size)}`
        ],
        loadingIndicator: [
            'loadingIndicator'
        ],
        loadingWrapper: [
            'loadingWrapper'
        ]
    };
    const composedClasses = (0, _composeClassesDefault.default)(slots, (0, _buttonClassesJs.getButtonUtilityClass), classes);
    return {
        ...classes,
        // forward the focused, disabled, etc. classes to the ButtonBase
        ...composedClasses
    };
};
const commonIconStyles = [
    {
        props: {
            size: 'small'
        },
        style: {
            '& > *:nth-of-type(1)': {
                fontSize: 18
            }
        }
    },
    {
        props: {
            size: 'medium'
        },
        style: {
            '& > *:nth-of-type(1)': {
                fontSize: 20
            }
        }
    },
    {
        props: {
            size: 'large'
        },
        style: {
            '& > *:nth-of-type(1)': {
                fontSize: 22
            }
        }
    }
];
const ButtonRoot = (0, _indexJs1.styled)((0, _indexJsDefault.default), {
    shouldForwardProp: (prop)=>(0, _rootShouldForwardPropJsDefault.default)(prop) || prop === 'classes',
    name: 'MuiButton',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState } = props;
        return [
            styles.root,
            styles[ownerState.variant],
            styles[`${ownerState.variant}${(0, _capitalizeJsDefault.default)(ownerState.color)}`],
            styles[`size${(0, _capitalizeJsDefault.default)(ownerState.size)}`],
            styles[`${ownerState.variant}Size${(0, _capitalizeJsDefault.default)(ownerState.size)}`],
            ownerState.color === 'inherit' && styles.colorInherit,
            ownerState.disableElevation && styles.disableElevation,
            ownerState.fullWidth && styles.fullWidth,
            ownerState.loading && styles.loading
        ];
    }
})((0, _memoThemeJsDefault.default)(({ theme })=>{
    const inheritContainedBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey[300] : theme.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey.A100 : theme.palette.grey[700];
    return {
        ...theme.typography.button,
        minWidth: 64,
        padding: '6px 16px',
        border: 0,
        borderRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create([
            'background-color',
            'box-shadow',
            'border-color',
            'color'
        ], {
            duration: theme.transitions.duration.short
        }),
        '&:hover': {
            textDecoration: 'none'
        },
        [`&.${(0, _buttonClassesJsDefault.default).disabled}`]: {
            color: (theme.vars || theme).palette.action.disabled
        },
        variants: [
            {
                props: {
                    variant: 'contained'
                },
                style: {
                    color: `var(--variant-containedColor)`,
                    backgroundColor: `var(--variant-containedBg)`,
                    boxShadow: (theme.vars || theme).shadows[2],
                    '&:hover': {
                        boxShadow: (theme.vars || theme).shadows[4],
                        // Reset on touch devices, it doesn't add specificity
                        '@media (hover: none)': {
                            boxShadow: (theme.vars || theme).shadows[2]
                        }
                    },
                    '&:active': {
                        boxShadow: (theme.vars || theme).shadows[8]
                    },
                    [`&.${(0, _buttonClassesJsDefault.default).focusVisible}`]: {
                        boxShadow: (theme.vars || theme).shadows[6]
                    },
                    [`&.${(0, _buttonClassesJsDefault.default).disabled}`]: {
                        color: (theme.vars || theme).palette.action.disabled,
                        boxShadow: (theme.vars || theme).shadows[0],
                        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
                    }
                }
            },
            {
                props: {
                    variant: 'outlined'
                },
                style: {
                    padding: '5px 15px',
                    border: '1px solid currentColor',
                    borderColor: `var(--variant-outlinedBorder, currentColor)`,
                    backgroundColor: `var(--variant-outlinedBg)`,
                    color: `var(--variant-outlinedColor)`,
                    [`&.${(0, _buttonClassesJsDefault.default).disabled}`]: {
                        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
                    }
                }
            },
            {
                props: {
                    variant: 'text'
                },
                style: {
                    padding: '6px 8px',
                    color: `var(--variant-textColor)`,
                    backgroundColor: `var(--variant-textBg)`
                }
            },
            ...Object.entries(theme.palette).filter((0, _createSimplePaletteValueFilterJsDefault.default)()).map(([color])=>({
                    props: {
                        color
                    },
                    style: {
                        '--variant-textColor': (theme.vars || theme).palette[color].main,
                        '--variant-outlinedColor': (theme.vars || theme).palette[color].main,
                        '--variant-outlinedBorder': theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / 0.5)` : (0, _colorManipulator.alpha)(theme.palette[color].main, 0.5),
                        '--variant-containedColor': (theme.vars || theme).palette[color].contrastText,
                        '--variant-containedBg': (theme.vars || theme).palette[color].main,
                        '@media (hover: hover)': {
                            '&:hover': {
                                '--variant-containedBg': (theme.vars || theme).palette[color].dark,
                                '--variant-textBg': theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)(theme.palette[color].main, theme.palette.action.hoverOpacity),
                                '--variant-outlinedBorder': (theme.vars || theme).palette[color].main,
                                '--variant-outlinedBg': theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)(theme.palette[color].main, theme.palette.action.hoverOpacity)
                            }
                        }
                    }
                })),
            {
                props: {
                    color: 'inherit'
                },
                style: {
                    color: 'inherit',
                    borderColor: 'currentColor',
                    '--variant-containedBg': theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
                    '@media (hover: hover)': {
                        '&:hover': {
                            '--variant-containedBg': theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
                            '--variant-textBg': theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity),
                            '--variant-outlinedBg': theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _colorManipulator.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity)
                        }
                    }
                }
            },
            {
                props: {
                    size: 'small',
                    variant: 'text'
                },
                style: {
                    padding: '4px 5px',
                    fontSize: theme.typography.pxToRem(13)
                }
            },
            {
                props: {
                    size: 'large',
                    variant: 'text'
                },
                style: {
                    padding: '8px 11px',
                    fontSize: theme.typography.pxToRem(15)
                }
            },
            {
                props: {
                    size: 'small',
                    variant: 'outlined'
                },
                style: {
                    padding: '3px 9px',
                    fontSize: theme.typography.pxToRem(13)
                }
            },
            {
                props: {
                    size: 'large',
                    variant: 'outlined'
                },
                style: {
                    padding: '7px 21px',
                    fontSize: theme.typography.pxToRem(15)
                }
            },
            {
                props: {
                    size: 'small',
                    variant: 'contained'
                },
                style: {
                    padding: '4px 10px',
                    fontSize: theme.typography.pxToRem(13)
                }
            },
            {
                props: {
                    size: 'large',
                    variant: 'contained'
                },
                style: {
                    padding: '8px 22px',
                    fontSize: theme.typography.pxToRem(15)
                }
            },
            {
                props: {
                    disableElevation: true
                },
                style: {
                    boxShadow: 'none',
                    '&:hover': {
                        boxShadow: 'none'
                    },
                    [`&.${(0, _buttonClassesJsDefault.default).focusVisible}`]: {
                        boxShadow: 'none'
                    },
                    '&:active': {
                        boxShadow: 'none'
                    },
                    [`&.${(0, _buttonClassesJsDefault.default).disabled}`]: {
                        boxShadow: 'none'
                    }
                }
            },
            {
                props: {
                    fullWidth: true
                },
                style: {
                    width: '100%'
                }
            },
            {
                props: {
                    loadingPosition: 'center'
                },
                style: {
                    transition: theme.transitions.create([
                        'background-color',
                        'box-shadow',
                        'border-color'
                    ], {
                        duration: theme.transitions.duration.short
                    }),
                    [`&.${(0, _buttonClassesJsDefault.default).loading}`]: {
                        color: 'transparent'
                    }
                }
            }
        ]
    };
}));
const ButtonStartIcon = (0, _indexJs1.styled)('span', {
    name: 'MuiButton',
    slot: 'StartIcon',
    overridesResolver: (props, styles)=>{
        const { ownerState } = props;
        return [
            styles.startIcon,
            ownerState.loading && styles.startIconLoadingStart,
            styles[`iconSize${(0, _capitalizeJsDefault.default)(ownerState.size)}`]
        ];
    }
})(({ theme })=>({
        display: 'inherit',
        marginRight: 8,
        marginLeft: -4,
        variants: [
            {
                props: {
                    size: 'small'
                },
                style: {
                    marginLeft: -2
                }
            },
            {
                props: {
                    loadingPosition: 'start',
                    loading: true
                },
                style: {
                    transition: theme.transitions.create([
                        'opacity'
                    ], {
                        duration: theme.transitions.duration.short
                    }),
                    opacity: 0
                }
            },
            {
                props: {
                    loadingPosition: 'start',
                    loading: true,
                    fullWidth: true
                },
                style: {
                    marginRight: -8
                }
            },
            ...commonIconStyles
        ]
    }));
const ButtonEndIcon = (0, _indexJs1.styled)('span', {
    name: 'MuiButton',
    slot: 'EndIcon',
    overridesResolver: (props, styles)=>{
        const { ownerState } = props;
        return [
            styles.endIcon,
            ownerState.loading && styles.endIconLoadingEnd,
            styles[`iconSize${(0, _capitalizeJsDefault.default)(ownerState.size)}`]
        ];
    }
})(({ theme })=>({
        display: 'inherit',
        marginRight: -4,
        marginLeft: 8,
        variants: [
            {
                props: {
                    size: 'small'
                },
                style: {
                    marginRight: -2
                }
            },
            {
                props: {
                    loadingPosition: 'end',
                    loading: true
                },
                style: {
                    transition: theme.transitions.create([
                        'opacity'
                    ], {
                        duration: theme.transitions.duration.short
                    }),
                    opacity: 0
                }
            },
            {
                props: {
                    loadingPosition: 'end',
                    loading: true,
                    fullWidth: true
                },
                style: {
                    marginLeft: -8
                }
            },
            ...commonIconStyles
        ]
    }));
const ButtonLoadingIndicator = (0, _indexJs1.styled)('span', {
    name: 'MuiButton',
    slot: 'LoadingIndicator'
})(({ theme })=>({
        display: 'none',
        position: 'absolute',
        visibility: 'visible',
        variants: [
            {
                props: {
                    loading: true
                },
                style: {
                    display: 'flex'
                }
            },
            {
                props: {
                    loadingPosition: 'start'
                },
                style: {
                    left: 14
                }
            },
            {
                props: {
                    loadingPosition: 'start',
                    size: 'small'
                },
                style: {
                    left: 10
                }
            },
            {
                props: {
                    variant: 'text',
                    loadingPosition: 'start'
                },
                style: {
                    left: 6
                }
            },
            {
                props: {
                    loadingPosition: 'center'
                },
                style: {
                    left: '50%',
                    transform: 'translate(-50%)',
                    color: (theme.vars || theme).palette.action.disabled
                }
            },
            {
                props: {
                    loadingPosition: 'end'
                },
                style: {
                    right: 14
                }
            },
            {
                props: {
                    loadingPosition: 'end',
                    size: 'small'
                },
                style: {
                    right: 10
                }
            },
            {
                props: {
                    variant: 'text',
                    loadingPosition: 'end'
                },
                style: {
                    right: 6
                }
            },
            {
                props: {
                    loadingPosition: 'start',
                    fullWidth: true
                },
                style: {
                    position: 'relative',
                    left: -10
                }
            },
            {
                props: {
                    loadingPosition: 'end',
                    fullWidth: true
                },
                style: {
                    position: 'relative',
                    right: -10
                }
            }
        ]
    }));
const ButtonLoadingIconPlaceholder = (0, _indexJs1.styled)('span', {
    name: 'MuiButton',
    slot: 'LoadingIconPlaceholder'
})({
    display: 'inline-block',
    width: '1em',
    height: '1em'
});
const Button = /*#__PURE__*/ _react.forwardRef(function Button(inProps, ref) {
    // props priority: `inProps` > `contextProps` > `themeDefaultProps`
    const contextProps = _react.useContext((0, _buttonGroupContextJsDefault.default));
    const buttonGroupButtonContextPositionClassName = _react.useContext((0, _buttonGroupButtonContextJsDefault.default));
    const resolvedProps = (0, _resolvePropsDefault.default)(contextProps, inProps);
    const props = (0, _indexJs2.useDefaultProps)({
        props: resolvedProps,
        name: 'MuiButton'
    });
    const { children, color = 'primary', component = 'button', className, disabled = false, disableElevation = false, disableFocusRipple = false, endIcon: endIconProp, focusVisibleClassName, fullWidth = false, id: idProp, loading = null, loadingIndicator: loadingIndicatorProp, loadingPosition = 'center', size = 'medium', startIcon: startIconProp, type, variant = 'text', ...other } = props;
    const loadingId = (0, _indexJs.unstable_useId)(idProp);
    const loadingIndicator = loadingIndicatorProp ?? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _indexJsDefault1.default), {
        "aria-labelledby": loadingId,
        color: "inherit",
        size: 16
    });
    const ownerState = {
        ...props,
        color,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        fullWidth,
        loading,
        loadingIndicator,
        loadingPosition,
        size,
        type,
        variant
    };
    const classes = useUtilityClasses(ownerState);
    const startIcon = (startIconProp || loading && loadingPosition === 'start') && /*#__PURE__*/ (0, _jsxRuntime.jsx)(ButtonStartIcon, {
        className: classes.startIcon,
        ownerState: ownerState,
        children: startIconProp || /*#__PURE__*/ (0, _jsxRuntime.jsx)(ButtonLoadingIconPlaceholder, {
            className: classes.loadingIconPlaceholder,
            ownerState: ownerState
        })
    });
    const endIcon = (endIconProp || loading && loadingPosition === 'end') && /*#__PURE__*/ (0, _jsxRuntime.jsx)(ButtonEndIcon, {
        className: classes.endIcon,
        ownerState: ownerState,
        children: endIconProp || /*#__PURE__*/ (0, _jsxRuntime.jsx)(ButtonLoadingIconPlaceholder, {
            className: classes.loadingIconPlaceholder,
            ownerState: ownerState
        })
    });
    const positionClassName = buttonGroupButtonContextPositionClassName || '';
    const loader = typeof loading === 'boolean' ? /*#__PURE__*/ // use plain HTML span to minimize the runtime overhead
    (0, _jsxRuntime.jsx)("span", {
        className: classes.loadingWrapper,
        style: {
            display: 'contents'
        },
        children: loading && /*#__PURE__*/ (0, _jsxRuntime.jsx)(ButtonLoadingIndicator, {
            className: classes.loadingIndicator,
            ownerState: ownerState,
            children: loadingIndicator
        })
    }) : null;
    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(ButtonRoot, {
        ownerState: ownerState,
        className: (0, _clsxDefault.default)(contextProps.className, classes.root, className, positionClassName),
        component: component,
        disabled: disabled || loading,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: (0, _clsxDefault.default)(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type,
        id: loading ? loadingId : idProp,
        ...other,
        classes: classes,
        children: [
            startIcon,
            loadingPosition !== 'end' && loader,
            children,
            loadingPosition === 'end' && loader,
            endIcon
        ]
    });
});
Button.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * The content of the component.
   */ children: (0, _propTypesDefault.default).node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: (0, _propTypesDefault.default).object,
    /**
   * @ignore
   */ className: (0, _propTypesDefault.default).string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */ color: (0, _propTypesDefault.default /* @typescript-to-proptypes-ignore */ ).oneOfType([
        (0, _propTypesDefault.default).oneOf([
            'inherit',
            'primary',
            'secondary',
            'success',
            'error',
            'info',
            'warning'
        ]),
        (0, _propTypesDefault.default).string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: (0, _propTypesDefault.default).elementType,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: (0, _propTypesDefault.default).bool,
    /**
   * If `true`, no elevation is used.
   * @default false
   */ disableElevation: (0, _propTypesDefault.default).bool,
    /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: (0, _propTypesDefault.default).bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: (0, _propTypesDefault.default).bool,
    /**
   * Element placed after the children.
   */ endIcon: (0, _propTypesDefault.default).node,
    /**
   * @ignore
   */ focusVisibleClassName: (0, _propTypesDefault.default).string,
    /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */ fullWidth: (0, _propTypesDefault.default).bool,
    /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */ href: (0, _propTypesDefault.default).string,
    /**
   * @ignore
   */ id: (0, _propTypesDefault.default).string,
    /**
   * If `true`, the loading indicator is visible and the button is disabled.
   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
   * @default null
   */ loading: (0, _propTypesDefault.default).bool,
    /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default, it renders a `CircularProgress` that is labeled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */ loadingIndicator: (0, _propTypesDefault.default).node,
    /**
   * The loading indicator can be positioned on the start, end, or the center of the button.
   * @default 'center'
   */ loadingPosition: (0, _propTypesDefault.default).oneOf([
        'center',
        'end',
        'start'
    ]),
    /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */ size: (0, _propTypesDefault.default /* @typescript-to-proptypes-ignore */ ).oneOfType([
        (0, _propTypesDefault.default).oneOf([
            'small',
            'medium',
            'large'
        ]),
        (0, _propTypesDefault.default).string
    ]),
    /**
   * Element placed before the children.
   */ startIcon: (0, _propTypesDefault.default).node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).arrayOf((0, _propTypesDefault.default).oneOfType([
            (0, _propTypesDefault.default).func,
            (0, _propTypesDefault.default).object,
            (0, _propTypesDefault.default).bool
        ])),
        (0, _propTypesDefault.default).func,
        (0, _propTypesDefault.default).object
    ]),
    /**
   * @ignore
   */ type: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).oneOf([
            'button',
            'reset',
            'submit'
        ]),
        (0, _propTypesDefault.default).string
    ]),
    /**
   * The variant to use.
   * @default 'text'
   */ variant: (0, _propTypesDefault.default /* @typescript-to-proptypes-ignore */ ).oneOfType([
        (0, _propTypesDefault.default).oneOf([
            'contained',
            'outlined',
            'text'
        ]),
        (0, _propTypesDefault.default).string
    ])
};
exports.default = Button;

},{"react":"jMk1U","prop-types":"GNqOQ","clsx":"dOSJC","@mui/utils/resolveProps":"hO4GV","@mui/utils/composeClasses":"gluJr","@mui/system/colorManipulator":"b9Snp","../utils/index.js":"72hxJ","../styles/rootShouldForwardProp.js":"e3utG","../zero-styled/index.js":"kVFw5","../utils/memoTheme.js":"eiXb0","../DefaultPropsProvider/index.js":"8c3wU","../ButtonBase/index.js":"cI39M","../CircularProgress/index.js":"dU5Lz","../utils/capitalize.js":"iSGWv","../utils/createSimplePaletteValueFilter.js":"gtIh8","./buttonClasses.js":"cfK4C","../ButtonGroup/ButtonGroupContext.js":"jXJRq","../ButtonGroup/ButtonGroupButtonContext.js":"7wjM7","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dOSJC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clsx", ()=>clsx);
function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;
    else if ("object" == typeof e) {
        if (Array.isArray(e)) {
            var o = e.length;
            for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
        } else for(f in e)e[f] && (n && (n += " "), n += f);
    }
    return n;
}
function clsx() {
    for(var e, t, f = 0, n = "", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
}
exports.default = clsx;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hO4GV":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("3f6928a0993e3b8c").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _resolveProps.default;
    }
});
var _resolveProps = _interopRequireDefault(require("aef0274c88251f01"));

},{"3f6928a0993e3b8c":"1P3rZ","aef0274c88251f01":"cFC2p"}],"cFC2p":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = resolveProps;
/**
 * Add keys, values of `defaultProps` that does not exist in `props`
 * @param defaultProps
 * @param props
 * @returns resolved props
 */ function resolveProps(defaultProps, props) {
    const output = {
        ...props
    };
    for(const key in defaultProps)if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {
        const propName = key;
        if (propName === 'components' || propName === 'slots') output[propName] = {
            ...defaultProps[propName],
            ...output[propName]
        };
        else if (propName === 'componentsProps' || propName === 'slotProps') {
            const defaultSlotProps = defaultProps[propName];
            const slotProps = props[propName];
            if (!slotProps) output[propName] = defaultSlotProps || {};
            else if (!defaultSlotProps) output[propName] = slotProps;
            else {
                output[propName] = {
                    ...slotProps
                };
                for(const slotKey in defaultSlotProps)if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
                    const slotPropName = slotKey;
                    output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
                }
            }
        } else if (output[propName] === undefined) output[propName] = defaultProps[propName];
    }
    return output;
}

},{}],"gluJr":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("88d7eed2910b0f5").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _composeClasses.default;
    }
});
var _composeClasses = _interopRequireDefault(require("6d6e9f223fe30422"));

},{"88d7eed2910b0f5":"1P3rZ","6d6e9f223fe30422":"9g5W0"}],"9g5W0":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = composeClasses;
/* eslint no-restricted-syntax: 0, prefer-template: 0, guard-for-in: 0
   ---
   These rules are preventing the performance optimizations below.
 */ /**
 * Compose classes from multiple sources.
 *
 * @example
 * ```tsx
 * const slots = {
 *  root: ['root', 'primary'],
 *  label: ['label'],
 * };
 *
 * const getUtilityClass = (slot) => `MuiButton-${slot}`;
 *
 * const classes = {
 *   root: 'my-root-class',
 * };
 *
 * const output = composeClasses(slots, getUtilityClass, classes);
 * // {
 * //   root: 'MuiButton-root MuiButton-primary my-root-class',
 * //   label: 'MuiButton-label',
 * // }
 * ```
 *
 * @param slots a list of classes for each possible slot
 * @param getUtilityClass a function to resolve the class based on the slot name
 * @param classes the input classes from props
 * @returns the resolved classes for all slots
 */ function composeClasses(slots, getUtilityClass, classes) {
    const output = {};
    for(const slotName in slots){
        const slot = slots[slotName];
        let buffer = '';
        let start = true;
        for(let i = 0; i < slot.length; i += 1){
            const value = slot[i];
            if (value) {
                buffer += (start === true ? '' : ' ') + getUtilityClass(value);
                start = false;
                if (classes && classes[value]) buffer += ' ' + classes[value];
            }
        }
        output[slotName] = buffer;
    }
    return output;
}

},{}],"b9Snp":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _colorManipulator = require("310dda5cb8c2fab9");
Object.keys(_colorManipulator).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _colorManipulator[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _colorManipulator[key];
        }
    });
});

},{"310dda5cb8c2fab9":"lEnzt"}],"lEnzt":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("a54f4eea3def311f").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.alpha = alpha;
exports.blend = blend;
exports.colorChannel = void 0;
exports.darken = darken;
exports.decomposeColor = decomposeColor;
exports.emphasize = emphasize;
exports.getContrastRatio = getContrastRatio;
exports.getLuminance = getLuminance;
exports.hexToRgb = hexToRgb;
exports.hslToRgb = hslToRgb;
exports.lighten = lighten;
exports.private_safeAlpha = private_safeAlpha;
exports.private_safeColorChannel = void 0;
exports.private_safeDarken = private_safeDarken;
exports.private_safeEmphasize = private_safeEmphasize;
exports.private_safeLighten = private_safeLighten;
exports.recomposeColor = recomposeColor;
exports.rgbToHex = rgbToHex;
var _formatMuiErrorMessage = _interopRequireDefault(require("47a311b376171898"));
var _clamp = _interopRequireDefault(require("dd0db14c48cc1331"));
/* eslint-disable @typescript-eslint/naming-convention */ /**
 * Returns a number whose value is limited to the given range.
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */ function clampWrapper(value, min = 0, max = 1) {
    if (value < min || value > max) console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    return (0, _clamp.default)(value, min, max);
}
/**
 * Converts a color from CSS hex format to CSS rgb format.
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */ function hexToRgb(color) {
    color = color.slice(1);
    const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
    let colors = color.match(re);
    if (colors && colors[0].length === 1) colors = colors.map((n)=>n + n);
    if (color.length !== color.trim().length) console.error(`MUI: The color: "${color}" is invalid. Make sure the color input doesn't contain leading/trailing space.`);
    return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index)=>{
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
    }).join(', ')})` : '';
}
function intToHex(int) {
    const hex = int.toString(16);
    return hex.length === 1 ? `0${hex}` : hex;
}
/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */ function decomposeColor(color) {
    // Idempotent
    if (color.type) return color;
    if (color.charAt(0) === '#') return decomposeColor(hexToRgb(color));
    const marker = color.indexOf('(');
    const type = color.substring(0, marker);
    if (![
        'rgb',
        'rgba',
        'hsl',
        'hsla',
        'color'
    ].includes(type)) throw new Error(`MUI: Unsupported \`${color}\` color.\n` + 'The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().');
    let values = color.substring(marker + 1, color.length - 1);
    let colorSpace;
    if (type === 'color') {
        values = values.split(' ');
        colorSpace = values.shift();
        if (values.length === 4 && values[3].charAt(0) === '/') values[3] = values[3].slice(1);
        if (![
            'srgb',
            'display-p3',
            'a98-rgb',
            'prophoto-rgb',
            'rec-2020'
        ].includes(colorSpace)) throw new Error(`MUI: unsupported \`${colorSpace}\` color space.\n` + 'The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.');
    } else values = values.split(',');
    values = values.map((value)=>parseFloat(value));
    return {
        type,
        values,
        colorSpace
    };
}
/**
 * Returns a channel created from the input color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {string} - The channel for the color, that can be used in rgba or hsla colors
 */ const colorChannel = (color)=>{
    const decomposedColor = decomposeColor(color);
    return decomposedColor.values.slice(0, 3).map((val, idx)=>decomposedColor.type.includes('hsl') && idx !== 0 ? `${val}%` : val).join(' ');
};
exports.colorChannel = colorChannel;
const private_safeColorChannel = (color, warning)=>{
    try {
        return colorChannel(color);
    } catch (error) {
        if (warning && true) console.warn(warning);
        return color;
    }
};
/**
 * Converts a color object with type and values to a string.
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */ exports.private_safeColorChannel = private_safeColorChannel;
function recomposeColor(color) {
    const { type, colorSpace } = color;
    let { values } = color;
    if (type.includes('rgb')) // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map((n, i)=>i < 3 ? parseInt(n, 10) : n);
    else if (type.includes('hsl')) {
        values[1] = `${values[1]}%`;
        values[2] = `${values[2]}%`;
    }
    if (type.includes('color')) values = `${colorSpace} ${values.join(' ')}`;
    else values = `${values.join(', ')}`;
    return `${type}(${values})`;
}
/**
 * Converts a color from CSS rgb format to CSS hex format.
 * @param {string} color - RGB color, i.e. rgb(n, n, n)
 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
 */ function rgbToHex(color) {
    // Idempotent
    if (color.startsWith('#')) return color;
    const { values } = decomposeColor(color);
    return `#${values.map((n, i)=>intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;
}
/**
 * Converts a color from hsl format to rgb format.
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */ function hslToRgb(color) {
    color = decomposeColor(color);
    const { values } = color;
    const h = values[0];
    const s = values[1] / 100;
    const l = values[2] / 100;
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    let type = 'rgb';
    const rgb = [
        Math.round(f(0) * 255),
        Math.round(f(8) * 255),
        Math.round(f(4) * 255)
    ];
    if (color.type === 'hsla') {
        type += 'a';
        rgb.push(values[3]);
    }
    return recomposeColor({
        type,
        values: rgb
    });
}
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */ function getLuminance(color) {
    color = decomposeColor(color);
    let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
    rgb = rgb.map((val)=>{
        if (color.type !== 'color') val /= 255; // normalized
        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    });
    // Truncate at 3 digits
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}
/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */ function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
/**
 * Sets the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} value - value to set the alpha channel to in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ function alpha(color, value) {
    color = decomposeColor(color);
    value = clampWrapper(value);
    if (color.type === 'rgb' || color.type === 'hsl') color.type += 'a';
    if (color.type === 'color') color.values[3] = `/${value}`;
    else color.values[3] = value;
    return recomposeColor(color);
}
function private_safeAlpha(color, value, warning) {
    try {
        return alpha(color, value);
    } catch (error) {
        if (warning && true) console.warn(warning);
        return color;
    }
}
/**
 * Darkens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ function darken(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clampWrapper(coefficient);
    if (color.type.includes('hsl')) color.values[2] *= 1 - coefficient;
    else if (color.type.includes('rgb') || color.type.includes('color')) for(let i = 0; i < 3; i += 1)color.values[i] *= 1 - coefficient;
    return recomposeColor(color);
}
function private_safeDarken(color, coefficient, warning) {
    try {
        return darken(color, coefficient);
    } catch (error) {
        if (warning && true) console.warn(warning);
        return color;
    }
}
/**
 * Lightens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ function lighten(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clampWrapper(coefficient);
    if (color.type.includes('hsl')) color.values[2] += (100 - color.values[2]) * coefficient;
    else if (color.type.includes('rgb')) for(let i = 0; i < 3; i += 1)color.values[i] += (255 - color.values[i]) * coefficient;
    else if (color.type.includes('color')) for(let i = 0; i < 3; i += 1)color.values[i] += (1 - color.values[i]) * coefficient;
    return recomposeColor(color);
}
function private_safeLighten(color, coefficient, warning) {
    try {
        return lighten(color, coefficient);
    } catch (error) {
        if (warning && true) console.warn(warning);
        return color;
    }
}
/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ function emphasize(color, coefficient = 0.15) {
    return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
}
function private_safeEmphasize(color, coefficient, warning) {
    try {
        return emphasize(color, coefficient);
    } catch (error) {
        if (warning && true) console.warn(warning);
        return color;
    }
}
/**
 * Blend a transparent overlay color with a background color, resulting in a single
 * RGB color.
 * @param {string} background - CSS color
 * @param {string} overlay - CSS color
 * @param {number} opacity - Opacity multiplier in the range 0 - 1
 * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.
 */ function blend(background, overlay, opacity, gamma = 1.0) {
    const blendChannel = (b, o)=>Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);
    const backgroundColor = decomposeColor(background);
    const overlayColor = decomposeColor(overlay);
    const rgb = [
        blendChannel(backgroundColor.values[0], overlayColor.values[0]),
        blendChannel(backgroundColor.values[1], overlayColor.values[1]),
        blendChannel(backgroundColor.values[2], overlayColor.values[2])
    ];
    return recomposeColor({
        type: 'rgb',
        values: rgb
    });
}

},{"a54f4eea3def311f":"1P3rZ","47a311b376171898":"cXsuk","dd0db14c48cc1331":"bju8l"}],"bju8l":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("2c1dbec64e810f4a").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _clamp.default;
    }
});
var _clamp = _interopRequireDefault(require("4e47c829b3573509"));

},{"2c1dbec64e810f4a":"1P3rZ","4e47c829b3573509":"f9RMU"}],"f9RMU":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
    return Math.max(min, Math.min(val, max));
}
var _default = exports.default = clamp;

},{}],"e3utG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _slotShouldForwardPropJs = require("./slotShouldForwardProp.js");
var _slotShouldForwardPropJsDefault = parcelHelpers.interopDefault(_slotShouldForwardPropJs);
const rootShouldForwardProp = (prop)=>(0, _slotShouldForwardPropJsDefault.default)(prop) && prop !== 'classes';
exports.default = rootShouldForwardProp;

},{"./slotShouldForwardProp.js":"bnx5h","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bnx5h":[function(require,module,exports,__globalThis) {
// copied from @mui/system/createStyled
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function slotShouldForwardProp(prop) {
    return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
exports.default = slotShouldForwardProp;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kVFw5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "css", ()=>(0, _system.css));
parcelHelpers.export(exports, "keyframes", ()=>(0, _system.keyframes));
parcelHelpers.export(exports, "styled", ()=>(0, _styledJsDefault.default));
parcelHelpers.export(exports, "globalCss", ()=>globalCss);
// eslint-disable-next-line @typescript-eslint/naming-convention
parcelHelpers.export(exports, "internal_createExtendSxProp", ()=>internal_createExtendSxProp);
parcelHelpers.export(exports, "useTheme", ()=>(0, _useThemeJsDefault.default));
var _react = require("react");
var _styleFunctionSx = require("@mui/system/styleFunctionSx");
var _useThemeJs = require("../styles/useTheme.js");
var _useThemeJsDefault = parcelHelpers.interopDefault(_useThemeJs);
var _indexJs = require("../GlobalStyles/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _jsxRuntime = require("react/jsx-runtime");
var _system = require("@mui/system");
var _styledJs = require("../styles/styled.js");
var _styledJsDefault = parcelHelpers.interopDefault(_styledJs);
function globalCss(styles) {
    return function GlobalStylesWrapper(props) {
        return(/*#__PURE__*/ // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.
        (0, _jsxRuntime.jsx)((0, _indexJsDefault.default), {
            styles: typeof styles === 'function' ? (theme)=>styles({
                    theme,
                    ...props
                }) : styles
        }));
    };
}
function internal_createExtendSxProp() {
    return 0, _styleFunctionSx.extendSxProp;
}

},{"react":"jMk1U","@mui/system/styleFunctionSx":"3qmy1","../styles/useTheme.js":false,"../GlobalStyles/index.js":"kZe0m","react/jsx-runtime":"05iiF","@mui/system":"1WaIj","../styles/styled.js":"gPJcT","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3qmy1":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("ebf92742dab40c54").default;
var _interopRequireWildcard = require("7bd85c2d391b9be3").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _styleFunctionSx.default;
    }
});
Object.defineProperty(exports, "extendSxProp", {
    enumerable: true,
    get: function() {
        return _extendSxProp.default;
    }
});
Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
    enumerable: true,
    get: function() {
        return _styleFunctionSx.unstable_createStyleFunctionSx;
    }
});
Object.defineProperty(exports, "unstable_defaultSxConfig", {
    enumerable: true,
    get: function() {
        return _defaultSxConfig.default;
    }
});
var _styleFunctionSx = _interopRequireWildcard(require("a36ab58f22476148"));
var _extendSxProp = _interopRequireDefault(require("2413bd638e69fe83"));
var _defaultSxConfig = _interopRequireDefault(require("465244391337dec0"));

},{"ebf92742dab40c54":"1P3rZ","7bd85c2d391b9be3":"6TFJp","a36ab58f22476148":"b0FDg","2413bd638e69fe83":"2iG1H","465244391337dec0":"4f7E8"}],"b0FDg":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("c0143919dad125fe").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
exports.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx;
var _capitalize = _interopRequireDefault(require("96896e59929bb199"));
var _merge = _interopRequireDefault(require("474adad98f2fe185"));
var _style = require("657abc912cdf60e4");
var _breakpoints = require("49e436695c9eeb7b");
var _cssContainerQueries = require("788160d5aa5dca63");
var _defaultSxConfig = _interopRequireDefault(require("ecd15981307fab21"));
function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object)=>keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object)=>union.size === Object.keys(object).length);
}
function callIfFn(maybeFn, arg) {
    return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function unstable_createStyleFunctionSx() {
    function getThemeValue(prop, val, theme, config) {
        const props = {
            [prop]: val,
            theme
        };
        const options = config[prop];
        if (!options) return {
            [prop]: val
        };
        const { cssProperty = prop, themeKey, transform, style } = options;
        if (val == null) return null;
        // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
        if (themeKey === 'typography' && val === 'inherit') return {
            [prop]: val
        };
        const themeMapping = (0, _style.getPath)(theme, themeKey) || {};
        if (style) return style(props);
        const styleFromPropValue = (propValueFinal)=>{
            let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === 'string') // Haven't found value
            value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            if (cssProperty === false) return value;
            return {
                [cssProperty]: value
            };
        };
        return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
    }
    function styleFunctionSx(props) {
        const { sx, theme = {} } = props || {};
        if (!sx) return null; // Emotion & styled-components will neglect null
        const config = theme.unstable_sxConfig ?? _defaultSxConfig.default;
        /*
     * Receive `sxInput` as object or callback
     * and then recursively check keys & values to create media query object styles.
     * (the result will be used in `styled`)
     */ function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === 'function') sxObject = sxInput(theme);
            else if (typeof sxInput !== 'object') // value
            return sxInput;
            if (!sxObject) return null;
            const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey)=>{
                const value = callIfFn(sxObject[styleKey], theme);
                if (value !== null && value !== undefined) {
                    if (typeof value === 'object') {
                        if (config[styleKey]) css = (0, _merge.default)(css, getThemeValue(styleKey, value, theme, config));
                        else {
                            const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                                theme
                            }, value, (x)=>({
                                    [styleKey]: x
                                }));
                            if (objectsHaveSameKeys(breakpointsValues, value)) css[styleKey] = styleFunctionSx({
                                sx: value,
                                theme
                            });
                            else css = (0, _merge.default)(css, breakpointsValues);
                        }
                    } else css = (0, _merge.default)(css, getThemeValue(styleKey, value, theme, config));
                }
            });
            return (0, _cssContainerQueries.sortContainerQueries)(theme, (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css));
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx;
}
const styleFunctionSx = unstable_createStyleFunctionSx();
styleFunctionSx.filterProps = [
    'sx'
];
var _default = exports.default = styleFunctionSx;

},{"c0143919dad125fe":"1P3rZ","96896e59929bb199":"igOKi","474adad98f2fe185":"bmR4g","657abc912cdf60e4":"58JeG","49e436695c9eeb7b":"148Xn","788160d5aa5dca63":"6Ko3S","ecd15981307fab21":"4f7E8"}],"bmR4g":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("fc6ab35294d6090c").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _merge.default;
    }
});
var _merge = _interopRequireDefault(require("5675c06187a9f579"));

},{"fc6ab35294d6090c":"1P3rZ","5675c06187a9f579":"cBkhW"}],"cBkhW":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("cd412d495236e54a").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _deepmerge = _interopRequireDefault(require("450a67cad5d36e5a"));
function merge(acc, item) {
    if (!item) return acc;
    return (0, _deepmerge.default)(acc, item, {
        clone: false // No need to clone deep, it's way faster.
    });
}
var _default = exports.default = merge;

},{"cd412d495236e54a":"1P3rZ","450a67cad5d36e5a":"bLPf1"}],"58JeG":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("c8a7c8d9b8f4e240").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _style.default;
    }
});
var _style = _interopRequireWildcard(require("744c9014913efcd8"));
Object.keys(_style).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _style[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _style[key];
        }
    });
});

},{"c8a7c8d9b8f4e240":"6TFJp","744c9014913efcd8":"bqOBL"}],"bqOBL":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("15c10178470582d").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
exports.getPath = getPath;
exports.getStyleValue = getStyleValue;
var _capitalize = _interopRequireDefault(require("913a49dd101c73af"));
var _responsivePropType = _interopRequireDefault(require("5a0088855d5ded69"));
var _breakpoints = require("19752313f867dee4");
function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== 'string') return null;
    // Check if CSS variables are used
    if (obj && obj.vars && checkVars) {
        const val = `vars.${path}`.split('.').reduce((acc, item)=>acc && acc[item] ? acc[item] : null, obj);
        if (val != null) return val;
    }
    return path.split('.').reduce((acc, item)=>{
        if (acc && acc[item] != null) return acc[item];
        return null;
    }, obj);
}
function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === 'function') value = themeMapping(propValueFinal);
    else if (Array.isArray(themeMapping)) value = themeMapping[propValueFinal] || userValue;
    else value = getPath(themeMapping, propValueFinal) || userValue;
    if (transform) value = transform(value, userValue, themeMapping);
    return value;
}
function style(options) {
    const { prop, cssProperty = options.prop, themeKey, transform } = options;
    // false positive
    // eslint-disable-next-line react/function-component-definition
    const fn = (props)=>{
        if (props[prop] == null) return null;
        const propValue = props[prop];
        const theme = props.theme;
        const themeMapping = getPath(theme, themeKey) || {};
        const styleFromPropValue = (propValueFinal)=>{
            let value = getStyleValue(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === 'string') // Haven't found value
            value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            if (cssProperty === false) return value;
            return {
                [cssProperty]: value
            };
        };
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
    };
    fn.propTypes = {
        [prop]: _responsivePropType.default
    };
    fn.filterProps = [
        prop
    ];
    return fn;
}
var _default = exports.default = style;

},{"15c10178470582d":"1P3rZ","913a49dd101c73af":"igOKi","5a0088855d5ded69":"9ApOU","19752313f867dee4":"148Xn"}],"9ApOU":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("ec6c7c0e1b7f6948").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _responsivePropType.default;
    }
});
var _responsivePropType = _interopRequireDefault(require("650457f449899290"));

},{"ec6c7c0e1b7f6948":"1P3rZ","650457f449899290":"2bpDZ"}],"2bpDZ":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("297608686d02322a").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("b35663a2342e647f"));
const responsivePropType = _propTypes.default.oneOfType([
    _propTypes.default.number,
    _propTypes.default.string,
    _propTypes.default.object,
    _propTypes.default.array
]);
var _default = exports.default = responsivePropType;

},{"297608686d02322a":"1P3rZ","b35663a2342e647f":"GNqOQ"}],"148Xn":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("298040812d0beba9").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _breakpoints.default;
    }
});
var _breakpoints = _interopRequireWildcard(require("a155ccd2323803e9"));
Object.keys(_breakpoints).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _breakpoints[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _breakpoints[key];
        }
    });
});

},{"298040812d0beba9":"6TFJp","a155ccd2323803e9":"4OSIl"}],"4OSIl":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("a6136cdc22d0813d").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.computeBreakpointsBase = computeBreakpointsBase;
exports.createEmptyBreakpointObject = createEmptyBreakpointObject;
exports.default = void 0;
exports.handleBreakpoints = handleBreakpoints;
exports.mergeBreakpointsInOrder = mergeBreakpointsInOrder;
exports.removeUnusedBreakpoints = removeUnusedBreakpoints;
exports.resolveBreakpointValues = resolveBreakpointValues;
exports.values = void 0;
var _propTypes = _interopRequireDefault(require("8e5b28389e20e17b"));
var _deepmerge = _interopRequireDefault(require("1d9f2e62540cf7b6"));
var _merge = _interopRequireDefault(require("5d17e0af0929002b"));
var _cssContainerQueries = require("6bd2fe12ec9a2caa");
// The breakpoint **start** at this value.
// For instance with the first breakpoint xs: [xs, sm[.
const values = exports.values = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536 // large screen
};
const defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: [
        'xs',
        'sm',
        'md',
        'lg',
        'xl'
    ],
    up: (key)=>`@media (min-width:${values[key]}px)`
};
const defaultContainerQueries = {
    containerQueries: (containerName)=>({
            up: (key)=>{
                let result = typeof key === 'number' ? key : values[key] || key;
                if (typeof result === 'number') result = `${result}px`;
                return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
            }
        })
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index)=>{
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
        }, {});
    }
    if (typeof propValue === 'object') {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint)=>{
            if ((0, _cssContainerQueries.isCqShorthand)(themeBreakpoints.keys, breakpoint)) {
                const containerKey = (0, _cssContainerQueries.getContainerQuery)(theme.containerQueries ? theme : defaultContainerQueries, breakpoint);
                if (containerKey) acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {
                const mediaKey = themeBreakpoints.up(breakpoint);
                acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
                const cssKey = breakpoint;
                acc[cssKey] = propValue[cssKey];
            }
            return acc;
        }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
}
function breakpoints(styleFunction) {
    // false positive
    // eslint-disable-next-line react/function-component-definition
    const newStyleFunction = (props)=>{
        const theme = props.theme || {};
        const base = styleFunction(props);
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        const extended = themeBreakpoints.keys.reduce((acc, key)=>{
            if (props[key]) {
                acc = acc || {};
                acc[themeBreakpoints.up(key)] = styleFunction({
                    theme,
                    ...props[key]
                });
            }
            return acc;
        }, null);
        return (0, _merge.default)(base, extended);
    };
    newStyleFunction.propTypes = {
        ...styleFunction.propTypes,
        xs: _propTypes.default.object,
        sm: _propTypes.default.object,
        md: _propTypes.default.object,
        lg: _propTypes.default.object,
        xl: _propTypes.default.object
    };
    newStyleFunction.filterProps = [
        'xs',
        'sm',
        'md',
        'lg',
        'xl',
        ...styleFunction.filterProps
    ];
    return newStyleFunction;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
    const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key)=>{
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
    }, {});
    return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style) {
    return breakpointKeys.reduce((acc, key)=>{
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) delete acc[key];
        return acc;
    }, style);
}
function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [
        emptyBreakpoints,
        ...styles
    ].reduce((prev, next)=>(0, _deepmerge.default)(prev, next), {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
}
// compute base for responsive values; e.g.,
// [1,2,3] => {xs: true, sm: true, md: true}
// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}
function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    // fixed value
    if (typeof breakpointValues !== 'object') return {};
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) breakpointsKeys.forEach((breakpoint, i)=>{
        if (i < breakpointValues.length) base[breakpoint] = true;
    });
    else breakpointsKeys.forEach((breakpoint)=>{
        if (breakpointValues[breakpoint] != null) base[breakpoint] = true;
    });
    return base;
}
function resolveBreakpointValues({ values: breakpointValues, breakpoints: themeBreakpoints, base: customBase }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);
    if (keys.length === 0) return breakpointValues;
    let previous;
    return keys.reduce((acc, breakpoint, i)=>{
        if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
        } else if (typeof breakpointValues === 'object') {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
        } else acc[breakpoint] = breakpointValues;
        return acc;
    }, {});
}
var _default = exports.default = breakpoints;

},{"a6136cdc22d0813d":"1P3rZ","8e5b28389e20e17b":"GNqOQ","1d9f2e62540cf7b6":"bLPf1","5d17e0af0929002b":"bmR4g","6bd2fe12ec9a2caa":"6Ko3S"}],"6Ko3S":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("b4cec13b20945773").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _cssContainerQueries.default;
    }
});
Object.defineProperty(exports, "getContainerQuery", {
    enumerable: true,
    get: function() {
        return _cssContainerQueries.getContainerQuery;
    }
});
Object.defineProperty(exports, "isCqShorthand", {
    enumerable: true,
    get: function() {
        return _cssContainerQueries.isCqShorthand;
    }
});
Object.defineProperty(exports, "sortContainerQueries", {
    enumerable: true,
    get: function() {
        return _cssContainerQueries.sortContainerQueries;
    }
});
var _cssContainerQueries = _interopRequireWildcard(require("59ff7536d9109ba6"));

},{"b4cec13b20945773":"6TFJp","59ff7536d9109ba6":"eXVnq"}],"eXVnq":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("63c97ab4ead71b1d").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = cssContainerQueries;
exports.getContainerQuery = getContainerQuery;
exports.isCqShorthand = isCqShorthand;
exports.sortContainerQueries = sortContainerQueries;
var _formatMuiErrorMessage = _interopRequireDefault(require("ed2a2f8b3caa624b"));
/**
 * For using in `sx` prop to sort the breakpoint from low to high.
 * Note: this function does not work and will not support multiple units.
 *       e.g. input: { '@container (min-width:300px)': '1rem', '@container (min-width:40rem)': '2rem' }
 *            output: { '@container (min-width:40rem)': '2rem', '@container (min-width:300px)': '1rem' } // since 40 < 300 eventhough 40rem > 300px
 */ function sortContainerQueries(theme, css) {
    if (!theme.containerQueries) return css;
    const sorted = Object.keys(css).filter((key)=>key.startsWith('@container')).sort((a, b)=>{
        const regex = /min-width:\s*([0-9.]+)/;
        return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);
    });
    if (!sorted.length) return css;
    return sorted.reduce((acc, key)=>{
        const value = css[key];
        delete acc[key];
        acc[key] = value;
        return acc;
    }, {
        ...css
    });
}
function isCqShorthand(breakpointKeys, value) {
    return value === '@' || value.startsWith('@') && (breakpointKeys.some((key)=>value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
}
function getContainerQuery(theme, shorthand) {
    const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
    if (!matches) throw new Error(`MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.\n` + 'For example, `@sm` or `@600` or `@40rem/sidebar`.');
    const [, containerQuery, containerName] = matches;
    const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
    return theme.containerQueries(containerName).up(value);
}
function cssContainerQueries(themeInput) {
    const toContainerQuery = (mediaQuery, name)=>mediaQuery.replace('@media', name ? `@container ${name}` : '@container');
    function attachCq(node, name) {
        node.up = (...args)=>toContainerQuery(themeInput.breakpoints.up(...args), name);
        node.down = (...args)=>toContainerQuery(themeInput.breakpoints.down(...args), name);
        node.between = (...args)=>toContainerQuery(themeInput.breakpoints.between(...args), name);
        node.only = (...args)=>toContainerQuery(themeInput.breakpoints.only(...args), name);
        node.not = (...args)=>{
            const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
            if (result.includes('not all and')) // `@container` does not work with `not all and`, so need to invert the logic
            return result.replace('not all and ', '').replace('min-width:', 'width<').replace('max-width:', 'width>').replace('and', 'or');
            return result;
        };
    }
    const node = {};
    const containerQueries = (name)=>{
        attachCq(node, name);
        return node;
    };
    attachCq(containerQueries);
    return {
        ...themeInput,
        containerQueries
    };
}

},{"63c97ab4ead71b1d":"1P3rZ","ed2a2f8b3caa624b":"cXsuk"}],"4f7E8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _spacing = require("c57d76f643a2b254");
var _borders = require("6c964eb5aa743c86");
var _cssGrid = require("10ca837dc3e62cc8");
var _palette = require("d96c52549a7b804d");
var _sizing = require("90d21174e5fb17be");
const defaultSxConfig = {
    // borders
    border: {
        themeKey: 'borders',
        transform: _borders.borderTransform
    },
    borderTop: {
        themeKey: 'borders',
        transform: _borders.borderTransform
    },
    borderRight: {
        themeKey: 'borders',
        transform: _borders.borderTransform
    },
    borderBottom: {
        themeKey: 'borders',
        transform: _borders.borderTransform
    },
    borderLeft: {
        themeKey: 'borders',
        transform: _borders.borderTransform
    },
    borderColor: {
        themeKey: 'palette'
    },
    borderTopColor: {
        themeKey: 'palette'
    },
    borderRightColor: {
        themeKey: 'palette'
    },
    borderBottomColor: {
        themeKey: 'palette'
    },
    borderLeftColor: {
        themeKey: 'palette'
    },
    outline: {
        themeKey: 'borders',
        transform: _borders.borderTransform
    },
    outlineColor: {
        themeKey: 'palette'
    },
    borderRadius: {
        themeKey: 'shape.borderRadius',
        style: _borders.borderRadius
    },
    // palette
    color: {
        themeKey: 'palette',
        transform: _palette.paletteTransform
    },
    bgcolor: {
        themeKey: 'palette',
        cssProperty: 'backgroundColor',
        transform: _palette.paletteTransform
    },
    backgroundColor: {
        themeKey: 'palette',
        transform: _palette.paletteTransform
    },
    // spacing
    p: {
        style: _spacing.padding
    },
    pt: {
        style: _spacing.padding
    },
    pr: {
        style: _spacing.padding
    },
    pb: {
        style: _spacing.padding
    },
    pl: {
        style: _spacing.padding
    },
    px: {
        style: _spacing.padding
    },
    py: {
        style: _spacing.padding
    },
    padding: {
        style: _spacing.padding
    },
    paddingTop: {
        style: _spacing.padding
    },
    paddingRight: {
        style: _spacing.padding
    },
    paddingBottom: {
        style: _spacing.padding
    },
    paddingLeft: {
        style: _spacing.padding
    },
    paddingX: {
        style: _spacing.padding
    },
    paddingY: {
        style: _spacing.padding
    },
    paddingInline: {
        style: _spacing.padding
    },
    paddingInlineStart: {
        style: _spacing.padding
    },
    paddingInlineEnd: {
        style: _spacing.padding
    },
    paddingBlock: {
        style: _spacing.padding
    },
    paddingBlockStart: {
        style: _spacing.padding
    },
    paddingBlockEnd: {
        style: _spacing.padding
    },
    m: {
        style: _spacing.margin
    },
    mt: {
        style: _spacing.margin
    },
    mr: {
        style: _spacing.margin
    },
    mb: {
        style: _spacing.margin
    },
    ml: {
        style: _spacing.margin
    },
    mx: {
        style: _spacing.margin
    },
    my: {
        style: _spacing.margin
    },
    margin: {
        style: _spacing.margin
    },
    marginTop: {
        style: _spacing.margin
    },
    marginRight: {
        style: _spacing.margin
    },
    marginBottom: {
        style: _spacing.margin
    },
    marginLeft: {
        style: _spacing.margin
    },
    marginX: {
        style: _spacing.margin
    },
    marginY: {
        style: _spacing.margin
    },
    marginInline: {
        style: _spacing.margin
    },
    marginInlineStart: {
        style: _spacing.margin
    },
    marginInlineEnd: {
        style: _spacing.margin
    },
    marginBlock: {
        style: _spacing.margin
    },
    marginBlockStart: {
        style: _spacing.margin
    },
    marginBlockEnd: {
        style: _spacing.margin
    },
    // display
    displayPrint: {
        cssProperty: false,
        transform: (value)=>({
                '@media print': {
                    display: value
                }
            })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
        style: _cssGrid.gap
    },
    rowGap: {
        style: _cssGrid.rowGap
    },
    columnGap: {
        style: _cssGrid.columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
        themeKey: 'zIndex'
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
        themeKey: 'shadows'
    },
    // sizing
    width: {
        transform: _sizing.sizingTransform
    },
    maxWidth: {
        style: _sizing.maxWidth
    },
    minWidth: {
        transform: _sizing.sizingTransform
    },
    height: {
        transform: _sizing.sizingTransform
    },
    maxHeight: {
        transform: _sizing.sizingTransform
    },
    minHeight: {
        transform: _sizing.sizingTransform
    },
    boxSizing: {},
    // typography
    font: {
        themeKey: 'font'
    },
    fontFamily: {
        themeKey: 'typography'
    },
    fontSize: {
        themeKey: 'typography'
    },
    fontStyle: {
        themeKey: 'typography'
    },
    fontWeight: {
        themeKey: 'typography'
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
        cssProperty: false,
        themeKey: 'typography'
    }
};
var _default = exports.default = defaultSxConfig;

},{"c57d76f643a2b254":"cUfeI","6c964eb5aa743c86":"4C4Ky","10ca837dc3e62cc8":"gnCob","d96c52549a7b804d":"keSw2","90d21174e5fb17be":"02guy"}],"cUfeI":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("606a2ed0ce831dd9").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _spacing.default;
    }
});
var _spacing = _interopRequireWildcard(require("e86ea1f53daffa96"));
Object.keys(_spacing).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _spacing[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _spacing[key];
        }
    });
});

},{"606a2ed0ce831dd9":"6TFJp","e86ea1f53daffa96":"eVrok"}],"eVrok":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("71d176b307068e0e").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createUnarySpacing = createUnarySpacing;
exports.createUnaryUnit = createUnaryUnit;
exports.default = void 0;
exports.getStyleFromPropValue = getStyleFromPropValue;
exports.getValue = getValue;
exports.margin = margin;
exports.marginKeys = void 0;
exports.padding = padding;
exports.paddingKeys = void 0;
var _responsivePropType = _interopRequireDefault(require("e629f08b8f852dff"));
var _breakpoints = require("c3fa080d2d3f53d3");
var _style = require("2dd9a87d7c34c534");
var _merge = _interopRequireDefault(require("26bf834107052fd6"));
var _memoize = _interopRequireDefault(require("e1785f73db1c256a"));
const properties = {
    m: 'margin',
    p: 'padding'
};
const directions = {
    t: 'Top',
    r: 'Right',
    b: 'Bottom',
    l: 'Left',
    x: [
        'Left',
        'Right'
    ],
    y: [
        'Top',
        'Bottom'
    ]
};
const aliases = {
    marginX: 'mx',
    marginY: 'my',
    paddingX: 'px',
    paddingY: 'py'
};
// memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec
const getCssProperties = (0, _memoize.default)((prop)=>{
    // It's not a shorthand notation.
    if (prop.length > 2) {
        if (aliases[prop]) prop = aliases[prop];
        else return [
            prop
        ];
    }
    const [a, b] = prop.split('');
    const property = properties[a];
    const direction = directions[b] || '';
    return Array.isArray(direction) ? direction.map((dir)=>property + dir) : [
        property + direction
    ];
});
const marginKeys = exports.marginKeys = [
    'm',
    'mt',
    'mr',
    'mb',
    'ml',
    'mx',
    'my',
    'margin',
    'marginTop',
    'marginRight',
    'marginBottom',
    'marginLeft',
    'marginX',
    'marginY',
    'marginInline',
    'marginInlineStart',
    'marginInlineEnd',
    'marginBlock',
    'marginBlockStart',
    'marginBlockEnd'
];
const paddingKeys = exports.paddingKeys = [
    'p',
    'pt',
    'pr',
    'pb',
    'pl',
    'px',
    'py',
    'padding',
    'paddingTop',
    'paddingRight',
    'paddingBottom',
    'paddingLeft',
    'paddingX',
    'paddingY',
    'paddingInline',
    'paddingInlineStart',
    'paddingInlineEnd',
    'paddingBlock',
    'paddingBlockStart',
    'paddingBlockEnd'
];
const spacingKeys = [
    ...marginKeys,
    ...paddingKeys
];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    const themeSpacing = (0, _style.getPath)(theme, themeKey, true) ?? defaultValue;
    if (typeof themeSpacing === 'number' || typeof themeSpacing === 'string') return (val)=>{
        if (typeof val === 'string') return val;
        if (typeof val !== 'number') console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
        if (typeof themeSpacing === 'string') {
            if (themeSpacing.startsWith('var(') && val === 0) return 0;
            if (themeSpacing.startsWith('var(') && val === 1) return themeSpacing;
            return `calc(${val} * ${themeSpacing})`;
        }
        return themeSpacing * val;
    };
    if (Array.isArray(themeSpacing)) return (val)=>{
        if (typeof val === 'string') return val;
        const abs = Math.abs(val);
        if (!Number.isInteger(abs)) console.error([
            `MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`
        ].join('\n'));
        else if (abs > themeSpacing.length - 1) console.error([
            `MUI: The value provided (${abs}) overflows.`,
            `The supported values are: ${JSON.stringify(themeSpacing)}.`,
            `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`
        ].join('\n'));
        const transformed = themeSpacing[abs];
        if (val >= 0) return transformed;
        if (typeof transformed === 'number') return -transformed;
        if (typeof transformed === 'string' && transformed.startsWith('var(')) return `calc(-1 * ${transformed})`;
        return `-${transformed}`;
    };
    if (typeof themeSpacing === 'function') return themeSpacing;
    console.error([
        `MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`,
        'It should be a number, an array or a function.'
    ].join('\n'));
    return ()=>undefined;
}
function createUnarySpacing(theme) {
    return createUnaryUnit(theme, 'spacing', 8, 'spacing');
}
function getValue(transformer, propValue) {
    if (typeof propValue === 'string' || propValue == null) return propValue;
    return transformer(propValue);
}
function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue)=>cssProperties.reduce((acc, cssProperty)=>{
            acc[cssProperty] = getValue(transformer, propValue);
            return acc;
        }, {});
}
function resolveCssProperty(props, keys, prop, transformer) {
    // Using a hash computation over an array iteration could be faster, but with only 28 items,
    // it's doesn't worth the bundle size.
    if (!keys.includes(prop)) return null;
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
}
function style(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop)=>resolveCssProperty(props, keys, prop, transformer)).reduce(_merge.default, {});
}
function margin(props) {
    return style(props, marginKeys);
}
margin.propTypes = marginKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropType.default;
    return obj;
}, {});
margin.filterProps = marginKeys;
function padding(props) {
    return style(props, paddingKeys);
}
padding.propTypes = paddingKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropType.default;
    return obj;
}, {});
padding.filterProps = paddingKeys;
function spacing(props) {
    return style(props, spacingKeys);
}
spacing.propTypes = spacingKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropType.default;
    return obj;
}, {});
spacing.filterProps = spacingKeys;
var _default = exports.default = spacing;

},{"71d176b307068e0e":"1P3rZ","e629f08b8f852dff":"9ApOU","c3fa080d2d3f53d3":"148Xn","2dd9a87d7c34c534":"58JeG","26bf834107052fd6":"bmR4g","e1785f73db1c256a":"2Wdlo"}],"2Wdlo":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("f213d6040afacb77").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _memoize.default;
    }
});
var _memoize = _interopRequireDefault(require("180b2e3d46554f10"));

},{"f213d6040afacb77":"1P3rZ","180b2e3d46554f10":"bgGMJ"}],"bgGMJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = memoize;
function memoize(fn) {
    const cache = {};
    return (arg)=>{
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}

},{}],"4C4Ky":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("dcce089d5908f568").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _borders.default;
    }
});
var _borders = _interopRequireWildcard(require("5fdcb604265ccfdc"));
Object.keys(_borders).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _borders[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _borders[key];
        }
    });
});

},{"dcce089d5908f568":"6TFJp","5fdcb604265ccfdc":"egW1Z"}],"egW1Z":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("e2dc5666a8871a7e").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.borderTopColor = exports.borderTop = exports.borderRightColor = exports.borderRight = exports.borderRadius = exports.borderLeftColor = exports.borderLeft = exports.borderColor = exports.borderBottomColor = exports.borderBottom = exports.border = void 0;
exports.borderTransform = borderTransform;
exports.outlineColor = exports.outline = exports.default = void 0;
var _responsivePropType = _interopRequireDefault(require("2c25771648e887a7"));
var _style = _interopRequireDefault(require("c2fb266b8e96749a"));
var _compose = _interopRequireDefault(require("dc05a15740d248e0"));
var _spacing = require("63b2b7100e242903");
var _breakpoints = require("2b87fd0661fd640");
function borderTransform(value) {
    if (typeof value !== 'number') return value;
    return `${value}px solid`;
}
function createBorderStyle(prop, transform) {
    return (0, _style.default)({
        prop,
        themeKey: 'borders',
        transform
    });
}
const border = exports.border = createBorderStyle('border', borderTransform);
const borderTop = exports.borderTop = createBorderStyle('borderTop', borderTransform);
const borderRight = exports.borderRight = createBorderStyle('borderRight', borderTransform);
const borderBottom = exports.borderBottom = createBorderStyle('borderBottom', borderTransform);
const borderLeft = exports.borderLeft = createBorderStyle('borderLeft', borderTransform);
const borderColor = exports.borderColor = createBorderStyle('borderColor');
const borderTopColor = exports.borderTopColor = createBorderStyle('borderTopColor');
const borderRightColor = exports.borderRightColor = createBorderStyle('borderRightColor');
const borderBottomColor = exports.borderBottomColor = createBorderStyle('borderBottomColor');
const borderLeftColor = exports.borderLeftColor = createBorderStyle('borderLeftColor');
const outline = exports.outline = createBorderStyle('outline', borderTransform);
const outlineColor = exports.outlineColor = createBorderStyle('outlineColor');
// false positive
// eslint-disable-next-line react/function-component-definition
const borderRadius = (props)=>{
    if (props.borderRadius !== undefined && props.borderRadius !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, 'shape.borderRadius', 4, 'borderRadius');
        const styleFromPropValue = (propValue)=>({
                borderRadius: (0, _spacing.getValue)(transformer, propValue)
            });
        return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
    }
    return null;
};
exports.borderRadius = borderRadius;
borderRadius.propTypes = {
    borderRadius: _responsivePropType.default
};
borderRadius.filterProps = [
    'borderRadius'
];
const borders = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);
var _default = exports.default = borders;

},{"e2dc5666a8871a7e":"1P3rZ","2c25771648e887a7":"9ApOU","c2fb266b8e96749a":"58JeG","dc05a15740d248e0":"32HuZ","63b2b7100e242903":"cUfeI","2b87fd0661fd640":"148Xn"}],"32HuZ":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("3d74380f49397bed").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _compose.default;
    }
});
var _compose = _interopRequireDefault(require("d391cd3bb4012335"));

},{"3d74380f49397bed":"1P3rZ","d391cd3bb4012335":"3lAMe"}],"3lAMe":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("14e4e4a88d602ae4").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _merge = _interopRequireDefault(require("ff50934fa3d5e60e"));
function compose(...styles) {
    const handlers = styles.reduce((acc, style)=>{
        style.filterProps.forEach((prop)=>{
            acc[prop] = style;
        });
        return acc;
    }, {});
    // false positive
    // eslint-disable-next-line react/function-component-definition
    const fn = (props)=>{
        return Object.keys(props).reduce((acc, prop)=>{
            if (handlers[prop]) return (0, _merge.default)(acc, handlers[prop](props));
            return acc;
        }, {});
    };
    fn.propTypes = styles.reduce((acc, style)=>Object.assign(acc, style.propTypes), {});
    fn.filterProps = styles.reduce((acc, style)=>acc.concat(style.filterProps), []);
    return fn;
}
var _default = exports.default = compose;

},{"14e4e4a88d602ae4":"1P3rZ","ff50934fa3d5e60e":"bmR4g"}],"gnCob":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("5b680ec5197bb2fc").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _cssGrid.default;
    }
});
var _cssGrid = _interopRequireWildcard(require("e0b08a3944a6d551"));
Object.keys(_cssGrid).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _cssGrid[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _cssGrid[key];
        }
    });
});

},{"5b680ec5197bb2fc":"6TFJp","e0b08a3944a6d551":"jBkFX"}],"jBkFX":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("300f35d57ddbfa95").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rowGap = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridTemplateAreas = exports.gridRow = exports.gridColumn = exports.gridAutoRows = exports.gridAutoFlow = exports.gridAutoColumns = exports.gridArea = exports.gap = exports.default = exports.columnGap = void 0;
var _style = _interopRequireDefault(require("927191ba8c0c341e"));
var _compose = _interopRequireDefault(require("d75713cdbc0b5233"));
var _spacing = require("55ed5a86f79ad101");
var _breakpoints = require("22f6d220a1401b69");
var _responsivePropType = _interopRequireDefault(require("d3962afb6cf389ca"));
// false positive
// eslint-disable-next-line react/function-component-definition
const gap = (props)=>{
    if (props.gap !== undefined && props.gap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = (propValue)=>({
                gap: (0, _spacing.getValue)(transformer, propValue)
            });
        return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
    }
    return null;
};
exports.gap = gap;
gap.propTypes = {
    gap: _responsivePropType.default
};
gap.filterProps = [
    'gap'
];
// false positive
// eslint-disable-next-line react/function-component-definition
const columnGap = (props)=>{
    if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, 'spacing', 8, 'columnGap');
        const styleFromPropValue = (propValue)=>({
                columnGap: (0, _spacing.getValue)(transformer, propValue)
            });
        return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
    }
    return null;
};
exports.columnGap = columnGap;
columnGap.propTypes = {
    columnGap: _responsivePropType.default
};
columnGap.filterProps = [
    'columnGap'
];
// false positive
// eslint-disable-next-line react/function-component-definition
const rowGap = (props)=>{
    if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = (0, _spacing.createUnaryUnit)(props.theme, 'spacing', 8, 'rowGap');
        const styleFromPropValue = (propValue)=>({
                rowGap: (0, _spacing.getValue)(transformer, propValue)
            });
        return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
    }
    return null;
};
exports.rowGap = rowGap;
rowGap.propTypes = {
    rowGap: _responsivePropType.default
};
rowGap.filterProps = [
    'rowGap'
];
const gridColumn = exports.gridColumn = (0, _style.default)({
    prop: 'gridColumn'
});
const gridRow = exports.gridRow = (0, _style.default)({
    prop: 'gridRow'
});
const gridAutoFlow = exports.gridAutoFlow = (0, _style.default)({
    prop: 'gridAutoFlow'
});
const gridAutoColumns = exports.gridAutoColumns = (0, _style.default)({
    prop: 'gridAutoColumns'
});
const gridAutoRows = exports.gridAutoRows = (0, _style.default)({
    prop: 'gridAutoRows'
});
const gridTemplateColumns = exports.gridTemplateColumns = (0, _style.default)({
    prop: 'gridTemplateColumns'
});
const gridTemplateRows = exports.gridTemplateRows = (0, _style.default)({
    prop: 'gridTemplateRows'
});
const gridTemplateAreas = exports.gridTemplateAreas = (0, _style.default)({
    prop: 'gridTemplateAreas'
});
const gridArea = exports.gridArea = (0, _style.default)({
    prop: 'gridArea'
});
const grid = (0, _compose.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
var _default = exports.default = grid;

},{"300f35d57ddbfa95":"1P3rZ","927191ba8c0c341e":"58JeG","d75713cdbc0b5233":"32HuZ","55ed5a86f79ad101":"cUfeI","22f6d220a1401b69":"148Xn","d3962afb6cf389ca":"9ApOU"}],"keSw2":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("e353c406c441666e").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _palette.default;
    }
});
var _palette = _interopRequireWildcard(require("7f0ad3806bebb455"));
Object.keys(_palette).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _palette[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _palette[key];
        }
    });
});

},{"e353c406c441666e":"6TFJp","7f0ad3806bebb455":"291OC"}],"291OC":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("34066a344d8daecf").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.color = exports.bgcolor = exports.backgroundColor = void 0;
exports.paletteTransform = paletteTransform;
var _style = _interopRequireDefault(require("c7773e82f050f56b"));
var _compose = _interopRequireDefault(require("779f4fad9951137b"));
function paletteTransform(value, userValue) {
    if (userValue === 'grey') return userValue;
    return value;
}
const color = exports.color = (0, _style.default)({
    prop: 'color',
    themeKey: 'palette',
    transform: paletteTransform
});
const bgcolor = exports.bgcolor = (0, _style.default)({
    prop: 'bgcolor',
    cssProperty: 'backgroundColor',
    themeKey: 'palette',
    transform: paletteTransform
});
const backgroundColor = exports.backgroundColor = (0, _style.default)({
    prop: 'backgroundColor',
    themeKey: 'palette',
    transform: paletteTransform
});
const palette = (0, _compose.default)(color, bgcolor, backgroundColor);
var _default = exports.default = palette;

},{"34066a344d8daecf":"1P3rZ","c7773e82f050f56b":"58JeG","779f4fad9951137b":"32HuZ"}],"02guy":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("781c1f35f5805a82").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _sizing.default;
    }
});
var _sizing = _interopRequireWildcard(require("ae93bb06e3e389f4"));
Object.keys(_sizing).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _sizing[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _sizing[key];
        }
    });
});

},{"781c1f35f5805a82":"6TFJp","ae93bb06e3e389f4":"aRnBR"}],"aRnBR":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("149b7315c3e764d").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sizeWidth = exports.sizeHeight = exports.minWidth = exports.minHeight = exports.maxWidth = exports.maxHeight = exports.height = exports.default = exports.boxSizing = void 0;
exports.sizingTransform = sizingTransform;
exports.width = void 0;
var _style = _interopRequireDefault(require("dc9f1f09def53b2b"));
var _compose = _interopRequireDefault(require("817e5b138a0e941c"));
var _breakpoints = require("d41bba6b0766ba5d");
function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = exports.width = (0, _style.default)({
    prop: 'width',
    transform: sizingTransform
});
const maxWidth = (props)=>{
    if (props.maxWidth !== undefined && props.maxWidth !== null) {
        const styleFromPropValue = (propValue)=>{
            const breakpoint = props.theme?.breakpoints?.values?.[propValue] || _breakpoints.values[propValue];
            if (!breakpoint) return {
                maxWidth: sizingTransform(propValue)
            };
            if (props.theme?.breakpoints?.unit !== 'px') return {
                maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
            };
            return {
                maxWidth: breakpoint
            };
        };
        return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
    }
    return null;
};
exports.maxWidth = maxWidth;
maxWidth.filterProps = [
    'maxWidth'
];
const minWidth = exports.minWidth = (0, _style.default)({
    prop: 'minWidth',
    transform: sizingTransform
});
const height = exports.height = (0, _style.default)({
    prop: 'height',
    transform: sizingTransform
});
const maxHeight = exports.maxHeight = (0, _style.default)({
    prop: 'maxHeight',
    transform: sizingTransform
});
const minHeight = exports.minHeight = (0, _style.default)({
    prop: 'minHeight',
    transform: sizingTransform
});
const sizeWidth = exports.sizeWidth = (0, _style.default)({
    prop: 'size',
    cssProperty: 'width',
    transform: sizingTransform
});
const sizeHeight = exports.sizeHeight = (0, _style.default)({
    prop: 'size',
    cssProperty: 'height',
    transform: sizingTransform
});
const boxSizing = exports.boxSizing = (0, _style.default)({
    prop: 'boxSizing'
});
const sizing = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
var _default = exports.default = sizing;

},{"149b7315c3e764d":"1P3rZ","dc9f1f09def53b2b":"58JeG","817e5b138a0e941c":"32HuZ","d41bba6b0766ba5d":"148Xn"}],"2iG1H":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("87b2fb8bb141f448").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = extendSxProp;
var _deepmerge = require("5c6e7a57f2743787");
var _defaultSxConfig = _interopRequireDefault(require("b647cc6fd4459669"));
const splitProps = (props)=>{
    const result = {
        systemProps: {},
        otherProps: {}
    };
    const config = props?.theme?.unstable_sxConfig ?? _defaultSxConfig.default;
    Object.keys(props).forEach((prop)=>{
        if (config[prop]) result.systemProps[prop] = props[prop];
        else result.otherProps[prop] = props[prop];
    });
    return result;
};
function extendSxProp(props) {
    const { sx: inSx, ...other } = props;
    const { systemProps, otherProps } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) finalSx = [
        systemProps,
        ...inSx
    ];
    else if (typeof inSx === 'function') finalSx = (...args)=>{
        const result = inSx(...args);
        if (!(0, _deepmerge.isPlainObject)(result)) return systemProps;
        return {
            ...systemProps,
            ...result
        };
    };
    else finalSx = {
        ...systemProps,
        ...inSx
    };
    return {
        ...otherProps,
        sx: finalSx
    };
}

},{"87b2fb8bb141f448":"1P3rZ","5c6e7a57f2743787":"bLPf1","b647cc6fd4459669":"4f7E8"}],"kZe0m":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _globalStylesJsDefault.default));
var _globalStylesJs = require("./GlobalStyles.js");
var _globalStylesJsDefault = parcelHelpers.interopDefault(_globalStylesJs);

},{"./GlobalStyles.js":"bXKjs","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"bXKjs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _system = require("@mui/system");
var _defaultThemeJs = require("../styles/defaultTheme.js");
var _defaultThemeJsDefault = parcelHelpers.interopDefault(_defaultThemeJs);
var _identifierJs = require("../styles/identifier.js");
var _identifierJsDefault = parcelHelpers.interopDefault(_identifierJs);
var _jsxRuntime = require("react/jsx-runtime");
'use client';
function GlobalStyles(props) {
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _system.GlobalStyles), {
        ...props,
        defaultTheme: (0, _defaultThemeJsDefault.default),
        themeId: (0, _identifierJsDefault.default)
    });
}
GlobalStyles.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * The styles you want to apply globally.
   */ styles: (0, _propTypesDefault.default /* @typescript-to-proptypes-ignore */ ).oneOfType([
        (0, _propTypesDefault.default).array,
        (0, _propTypesDefault.default).func,
        (0, _propTypesDefault.default).number,
        (0, _propTypesDefault.default).object,
        (0, _propTypesDefault.default).string,
        (0, _propTypesDefault.default).bool
    ])
};
exports.default = GlobalStyles;

},{"react":"jMk1U","prop-types":"GNqOQ","@mui/system":"1WaIj","../styles/defaultTheme.js":"azlot","../styles/identifier.js":"hyojE","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"azlot":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createThemeJs = require("./createTheme.js");
var _createThemeJsDefault = parcelHelpers.interopDefault(_createThemeJs);
'use client';
const defaultTheme = (0, _createThemeJsDefault.default)();
exports.default = defaultTheme;

},{"./createTheme.js":"5Ap6r","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5Ap6r":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createTheme);
var _createPaletteJs = require("./createPalette.js");
var _createPaletteJsDefault = parcelHelpers.interopDefault(_createPaletteJs);
var _createThemeWithVarsJs = require("./createThemeWithVars.js");
var _createThemeWithVarsJsDefault = parcelHelpers.interopDefault(_createThemeWithVarsJs);
var _createThemeNoVarsJs = require("./createThemeNoVars.js");
var _createThemeNoVarsJsDefault = parcelHelpers.interopDefault(_createThemeNoVarsJs);
// eslint-disable-next-line consistent-return
function attachColorScheme(theme, scheme, colorScheme) {
    if (!theme.colorSchemes) return undefined;
    if (colorScheme) theme.colorSchemes[scheme] = {
        ...colorScheme !== true && colorScheme,
        palette: (0, _createPaletteJsDefault.default)({
            ...colorScheme === true ? {} : colorScheme.palette,
            mode: scheme
        }) // cast type to skip module augmentation test
    };
}
function createTheme(options = {}, // cast type to skip module augmentation test
...args) {
    const { palette, cssVariables = false, colorSchemes: initialColorSchemes = !palette ? {
        light: true
    } : undefined, defaultColorScheme: initialDefaultColorScheme = palette?.mode, ...rest } = options;
    const defaultColorSchemeInput = initialDefaultColorScheme || 'light';
    const defaultScheme = initialColorSchemes?.[defaultColorSchemeInput];
    const colorSchemesInput = {
        ...initialColorSchemes,
        ...palette ? {
            [defaultColorSchemeInput]: {
                ...typeof defaultScheme !== 'boolean' && defaultScheme,
                palette
            }
        } : undefined
    };
    if (cssVariables === false) {
        if (!('colorSchemes' in options)) // Behaves exactly as v5
        return (0, _createThemeNoVarsJsDefault.default)(options, ...args);
        let paletteOptions = palette;
        if (!('palette' in options)) {
            if (colorSchemesInput[defaultColorSchemeInput]) {
                if (colorSchemesInput[defaultColorSchemeInput] !== true) paletteOptions = colorSchemesInput[defaultColorSchemeInput].palette;
                else if (defaultColorSchemeInput === 'dark') // @ts-ignore to prevent the module augmentation test from failing
                paletteOptions = {
                    mode: 'dark'
                };
            }
        }
        const theme = (0, _createThemeNoVarsJsDefault.default)({
            ...options,
            palette: paletteOptions
        }, ...args);
        theme.defaultColorScheme = defaultColorSchemeInput;
        theme.colorSchemes = colorSchemesInput;
        if (theme.palette.mode === 'light') {
            theme.colorSchemes.light = {
                ...colorSchemesInput.light !== true && colorSchemesInput.light,
                palette: theme.palette
            };
            attachColorScheme(theme, 'dark', colorSchemesInput.dark);
        }
        if (theme.palette.mode === 'dark') {
            theme.colorSchemes.dark = {
                ...colorSchemesInput.dark !== true && colorSchemesInput.dark,
                palette: theme.palette
            };
            attachColorScheme(theme, 'light', colorSchemesInput.light);
        }
        return theme;
    }
    if (!palette && !('light' in colorSchemesInput) && defaultColorSchemeInput === 'light') colorSchemesInput.light = true;
    return (0, _createThemeWithVarsJsDefault.default)({
        ...rest,
        colorSchemes: colorSchemesInput,
        defaultColorScheme: defaultColorSchemeInput,
        ...typeof cssVariables !== 'boolean' && cssVariables
    }, ...args);
}

},{"./createPalette.js":"4wkrW","./createThemeWithVars.js":"87eEP","./createThemeNoVars.js":"5B9Rs","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"4wkrW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "light", ()=>light);
parcelHelpers.export(exports, "dark", ()=>dark);
parcelHelpers.export(exports, "default", ()=>createPalette);
var _formatMuiErrorMessage = require("@mui/utils/formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
var _deepmerge = require("@mui/utils/deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _colorManipulator = require("@mui/system/colorManipulator");
var _commonJs = require("../colors/common.js");
var _commonJsDefault = parcelHelpers.interopDefault(_commonJs);
var _greyJs = require("../colors/grey.js");
var _greyJsDefault = parcelHelpers.interopDefault(_greyJs);
var _purpleJs = require("../colors/purple.js");
var _purpleJsDefault = parcelHelpers.interopDefault(_purpleJs);
var _redJs = require("../colors/red.js");
var _redJsDefault = parcelHelpers.interopDefault(_redJs);
var _orangeJs = require("../colors/orange.js");
var _orangeJsDefault = parcelHelpers.interopDefault(_orangeJs);
var _blueJs = require("../colors/blue.js");
var _blueJsDefault = parcelHelpers.interopDefault(_blueJs);
var _lightBlueJs = require("../colors/lightBlue.js");
var _lightBlueJsDefault = parcelHelpers.interopDefault(_lightBlueJs);
var _greenJs = require("../colors/green.js");
var _greenJsDefault = parcelHelpers.interopDefault(_greenJs);
function getLight() {
    return {
        // The colors used to style the text.
        text: {
            // The most important text.
            primary: 'rgba(0, 0, 0, 0.87)',
            // Secondary text.
            secondary: 'rgba(0, 0, 0, 0.6)',
            // Disabled text have even lower visual prominence.
            disabled: 'rgba(0, 0, 0, 0.38)'
        },
        // The color used to divide different elements.
        divider: 'rgba(0, 0, 0, 0.12)',
        // The background colors used to style the surfaces.
        // Consistency between these values is important.
        background: {
            paper: (0, _commonJsDefault.default).white,
            default: (0, _commonJsDefault.default).white
        },
        // The colors used to style the action elements.
        action: {
            // The color of an active action like an icon button.
            active: 'rgba(0, 0, 0, 0.54)',
            // The color of an hovered action.
            hover: 'rgba(0, 0, 0, 0.04)',
            hoverOpacity: 0.04,
            // The color of a selected action.
            selected: 'rgba(0, 0, 0, 0.08)',
            selectedOpacity: 0.08,
            // The color of a disabled action.
            disabled: 'rgba(0, 0, 0, 0.26)',
            // The background color of a disabled action.
            disabledBackground: 'rgba(0, 0, 0, 0.12)',
            disabledOpacity: 0.38,
            focus: 'rgba(0, 0, 0, 0.12)',
            focusOpacity: 0.12,
            activatedOpacity: 0.12
        }
    };
}
const light = getLight();
function getDark() {
    return {
        text: {
            primary: (0, _commonJsDefault.default).white,
            secondary: 'rgba(255, 255, 255, 0.7)',
            disabled: 'rgba(255, 255, 255, 0.5)',
            icon: 'rgba(255, 255, 255, 0.5)'
        },
        divider: 'rgba(255, 255, 255, 0.12)',
        background: {
            paper: '#121212',
            default: '#121212'
        },
        action: {
            active: (0, _commonJsDefault.default).white,
            hover: 'rgba(255, 255, 255, 0.08)',
            hoverOpacity: 0.08,
            selected: 'rgba(255, 255, 255, 0.16)',
            selectedOpacity: 0.16,
            disabled: 'rgba(255, 255, 255, 0.3)',
            disabledBackground: 'rgba(255, 255, 255, 0.12)',
            disabledOpacity: 0.38,
            focus: 'rgba(255, 255, 255, 0.12)',
            focusOpacity: 0.12,
            activatedOpacity: 0.24
        }
    };
}
const dark = getDark();
function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) intent[direction] = intent[shade];
        else if (direction === 'light') intent.light = (0, _colorManipulator.lighten)(intent.main, tonalOffsetLight);
        else if (direction === 'dark') intent.dark = (0, _colorManipulator.darken)(intent.main, tonalOffsetDark);
    }
}
function getDefaultPrimary(mode = 'light') {
    if (mode === 'dark') return {
        main: (0, _blueJsDefault.default)[200],
        light: (0, _blueJsDefault.default)[50],
        dark: (0, _blueJsDefault.default)[400]
    };
    return {
        main: (0, _blueJsDefault.default)[700],
        light: (0, _blueJsDefault.default)[400],
        dark: (0, _blueJsDefault.default)[800]
    };
}
function getDefaultSecondary(mode = 'light') {
    if (mode === 'dark') return {
        main: (0, _purpleJsDefault.default)[200],
        light: (0, _purpleJsDefault.default)[50],
        dark: (0, _purpleJsDefault.default)[400]
    };
    return {
        main: (0, _purpleJsDefault.default)[500],
        light: (0, _purpleJsDefault.default)[300],
        dark: (0, _purpleJsDefault.default)[700]
    };
}
function getDefaultError(mode = 'light') {
    if (mode === 'dark') return {
        main: (0, _redJsDefault.default)[500],
        light: (0, _redJsDefault.default)[300],
        dark: (0, _redJsDefault.default)[700]
    };
    return {
        main: (0, _redJsDefault.default)[700],
        light: (0, _redJsDefault.default)[400],
        dark: (0, _redJsDefault.default)[800]
    };
}
function getDefaultInfo(mode = 'light') {
    if (mode === 'dark') return {
        main: (0, _lightBlueJsDefault.default)[400],
        light: (0, _lightBlueJsDefault.default)[300],
        dark: (0, _lightBlueJsDefault.default)[700]
    };
    return {
        main: (0, _lightBlueJsDefault.default)[700],
        light: (0, _lightBlueJsDefault.default)[500],
        dark: (0, _lightBlueJsDefault.default)[900]
    };
}
function getDefaultSuccess(mode = 'light') {
    if (mode === 'dark') return {
        main: (0, _greenJsDefault.default)[400],
        light: (0, _greenJsDefault.default)[300],
        dark: (0, _greenJsDefault.default)[700]
    };
    return {
        main: (0, _greenJsDefault.default)[800],
        light: (0, _greenJsDefault.default)[500],
        dark: (0, _greenJsDefault.default)[900]
    };
}
function getDefaultWarning(mode = 'light') {
    if (mode === 'dark') return {
        main: (0, _orangeJsDefault.default)[400],
        light: (0, _orangeJsDefault.default)[300],
        dark: (0, _orangeJsDefault.default)[700]
    };
    return {
        main: '#ed6c02',
        // closest to orange[800] that pass 3:1.
        light: (0, _orangeJsDefault.default)[500],
        dark: (0, _orangeJsDefault.default)[900]
    };
}
function createPalette(palette) {
    const { mode = 'light', contrastThreshold = 3, tonalOffset = 0.2, ...other } = palette;
    const primary = palette.primary || getDefaultPrimary(mode);
    const secondary = palette.secondary || getDefaultSecondary(mode);
    const error = palette.error || getDefaultError(mode);
    const info = palette.info || getDefaultInfo(mode);
    const success = palette.success || getDefaultSuccess(mode);
    const warning = palette.warning || getDefaultWarning(mode);
    // Use the same logic as
    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
    function getContrastText(background) {
        const contrastText = (0, _colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
        {
            const contrast = (0, _colorManipulator.getContrastRatio)(background, contrastText);
            if (contrast < 3) console.error([
                `MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`,
                'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.',
                'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'
            ].join('\n'));
        }
        return contrastText;
    }
    const augmentColor = ({ color, name, mainShade = 500, lightShade = 300, darkShade = 700 })=>{
        color = {
            ...color
        };
        if (!color.main && color[mainShade]) color.main = color[mainShade];
        if (!color.hasOwnProperty('main')) throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\n` + `The color object needs to have a \`main\` property or a \`${mainShade}\` property.`);
        if (typeof color.main !== 'string') throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\n` + `\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.\n` + '\n' + 'Did you intend to use one of the following approaches?\n' + '\n' + 'import { green } from "@mui/material/colors";\n' + '\n' + 'const theme1 = createTheme({ palette: {\n' + '  primary: green,\n' + '} });\n' + '\n' + 'const theme2 = createTheme({ palette: {\n' + '  primary: { main: green[500] },\n' + '} });');
        addLightOrDark(color, 'light', lightShade, tonalOffset);
        addLightOrDark(color, 'dark', darkShade, tonalOffset);
        if (!color.contrastText) color.contrastText = getContrastText(color.main);
        return color;
    };
    let modeHydrated;
    if (mode === 'light') modeHydrated = getLight();
    else if (mode === 'dark') modeHydrated = getDark();
    if (!modeHydrated) console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
    const paletteOutput = (0, _deepmergeDefault.default)({
        // A collection of common colors.
        common: {
            ...(0, _commonJsDefault.default)
        },
        // prevent mutable object.
        // The palette mode, can be light or dark.
        mode,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor({
            color: primary,
            name: 'primary'
        }),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor({
            color: secondary,
            name: 'secondary',
            mainShade: 'A400',
            lightShade: 'A200',
            darkShade: 'A700'
        }),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor({
            color: error,
            name: 'error'
        }),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor({
            color: warning,
            name: 'warning'
        }),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor({
            color: info,
            name: 'info'
        }),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor({
            color: success,
            name: 'success'
        }),
        grey: // The grey colors.
        (0, _greyJsDefault.default),
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText,
        // Generate a rich color object.
        augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset,
        // The light and dark mode object.
        ...modeHydrated
    }, other);
    return paletteOutput;
}

},{"@mui/utils/formatMuiErrorMessage":"cXsuk","@mui/utils/deepmerge":"bLPf1","@mui/system/colorManipulator":"b9Snp","../colors/common.js":"k9XIG","../colors/grey.js":"azNI3","../colors/purple.js":"aMP5L","../colors/red.js":"647XR","../colors/orange.js":"Gdghp","../colors/blue.js":"hff2M","../colors/lightBlue.js":"1zWJL","../colors/green.js":"kefk1","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"k9XIG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const common = {
    black: '#000',
    white: '#fff'
};
exports.default = common;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"azNI3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const grey = {
    50: '#fafafa',
    100: '#f5f5f5',
    200: '#eeeeee',
    300: '#e0e0e0',
    400: '#bdbdbd',
    500: '#9e9e9e',
    600: '#757575',
    700: '#616161',
    800: '#424242',
    900: '#212121',
    A100: '#f5f5f5',
    A200: '#eeeeee',
    A400: '#bdbdbd',
    A700: '#616161'
};
exports.default = grey;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aMP5L":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const purple = {
    50: '#f3e5f5',
    100: '#e1bee7',
    200: '#ce93d8',
    300: '#ba68c8',
    400: '#ab47bc',
    500: '#9c27b0',
    600: '#8e24aa',
    700: '#7b1fa2',
    800: '#6a1b9a',
    900: '#4a148c',
    A100: '#ea80fc',
    A200: '#e040fb',
    A400: '#d500f9',
    A700: '#aa00ff'
};
exports.default = purple;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"647XR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const red = {
    50: '#ffebee',
    100: '#ffcdd2',
    200: '#ef9a9a',
    300: '#e57373',
    400: '#ef5350',
    500: '#f44336',
    600: '#e53935',
    700: '#d32f2f',
    800: '#c62828',
    900: '#b71c1c',
    A100: '#ff8a80',
    A200: '#ff5252',
    A400: '#ff1744',
    A700: '#d50000'
};
exports.default = red;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"Gdghp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const orange = {
    50: '#fff3e0',
    100: '#ffe0b2',
    200: '#ffcc80',
    300: '#ffb74d',
    400: '#ffa726',
    500: '#ff9800',
    600: '#fb8c00',
    700: '#f57c00',
    800: '#ef6c00',
    900: '#e65100',
    A100: '#ffd180',
    A200: '#ffab40',
    A400: '#ff9100',
    A700: '#ff6d00'
};
exports.default = orange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hff2M":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const blue = {
    50: '#e3f2fd',
    100: '#bbdefb',
    200: '#90caf9',
    300: '#64b5f6',
    400: '#42a5f5',
    500: '#2196f3',
    600: '#1e88e5',
    700: '#1976d2',
    800: '#1565c0',
    900: '#0d47a1',
    A100: '#82b1ff',
    A200: '#448aff',
    A400: '#2979ff',
    A700: '#2962ff'
};
exports.default = blue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1zWJL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const lightBlue = {
    50: '#e1f5fe',
    100: '#b3e5fc',
    200: '#81d4fa',
    300: '#4fc3f7',
    400: '#29b6f6',
    500: '#03a9f4',
    600: '#039be5',
    700: '#0288d1',
    800: '#0277bd',
    900: '#01579b',
    A100: '#80d8ff',
    A200: '#40c4ff',
    A400: '#00b0ff',
    A700: '#0091ea'
};
exports.default = lightBlue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kefk1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const green = {
    50: '#e8f5e9',
    100: '#c8e6c9',
    200: '#a5d6a7',
    300: '#81c784',
    400: '#66bb6a',
    500: '#4caf50',
    600: '#43a047',
    700: '#388e3c',
    800: '#2e7d32',
    900: '#1b5e20',
    A100: '#b9f6ca',
    A200: '#69f0ae',
    A400: '#00e676',
    A700: '#00c853'
};
exports.default = green;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"87eEP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGetCssVar", ()=>createGetCssVar);
parcelHelpers.export(exports, "default", ()=>createThemeWithVars);
var _formatMuiErrorMessage = require("@mui/utils/formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
var _deepmerge = require("@mui/utils/deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _system = require("@mui/system");
var _spacing = require("@mui/system/spacing");
var _cssVars = require("@mui/system/cssVars");
var _styleFunctionSx = require("@mui/system/styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _colorManipulator = require("@mui/system/colorManipulator");
var _createThemeNoVarsJs = require("./createThemeNoVars.js");
var _createThemeNoVarsJsDefault = parcelHelpers.interopDefault(_createThemeNoVarsJs);
var _createColorSchemeJs = require("./createColorScheme.js");
var _createColorSchemeJsDefault = parcelHelpers.interopDefault(_createColorSchemeJs);
var _shouldSkipGeneratingVarJs = require("./shouldSkipGeneratingVar.js");
var _shouldSkipGeneratingVarJsDefault = parcelHelpers.interopDefault(_shouldSkipGeneratingVarJs);
var _createGetSelectorJs = require("./createGetSelector.js");
var _createGetSelectorJsDefault = parcelHelpers.interopDefault(_createGetSelectorJs);
var _stringifyThemeJs = require("./stringifyTheme.js");
function assignNode(obj, keys) {
    keys.forEach((k)=>{
        if (!obj[k]) obj[k] = {};
    });
}
function setColor(obj, key, defaultValue) {
    if (!obj[key] && defaultValue) obj[key] = defaultValue;
}
function toRgb(color) {
    if (typeof color !== 'string' || !color.startsWith('hsl')) return color;
    return (0, _colorManipulator.hslToRgb)(color);
}
function setColorChannel(obj, key) {
    if (!(`${key}Channel` in obj)) // custom channel token is not provided, generate one.
    // if channel token can't be generated, show a warning.
    obj[`${key}Channel`] = (0, _colorManipulator.private_safeColorChannel)(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` + '\n' + `To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`);
}
function getSpacingVal(spacingInput) {
    if (typeof spacingInput === 'number') return `${spacingInput}px`;
    if (typeof spacingInput === 'string' || typeof spacingInput === 'function' || Array.isArray(spacingInput)) return spacingInput;
    return '8px';
}
const silent = (fn)=>{
    try {
        return fn();
    } catch (error) {
    // ignore error
    }
    return undefined;
};
const createGetCssVar = (cssVarPrefix = 'mui')=>(0, _system.unstable_createGetCssVar)(cssVarPrefix);
function attachColorScheme(colorSchemes, scheme, restTheme, colorScheme) {
    if (!scheme) return undefined;
    scheme = scheme === true ? {} : scheme;
    const mode = colorScheme === 'dark' ? 'dark' : 'light';
    if (!restTheme) {
        colorSchemes[colorScheme] = (0, _createColorSchemeJsDefault.default)({
            ...scheme,
            palette: {
                mode,
                ...scheme?.palette
            }
        });
        return undefined;
    }
    const { palette, ...muiTheme } = (0, _createThemeNoVarsJsDefault.default)({
        ...restTheme,
        palette: {
            mode,
            ...scheme?.palette
        }
    });
    colorSchemes[colorScheme] = {
        ...scheme,
        palette,
        opacity: {
            ...(0, _createColorSchemeJs.getOpacity)(mode),
            ...scheme?.opacity
        },
        overlays: scheme?.overlays || (0, _createColorSchemeJs.getOverlays)(mode)
    };
    return muiTheme;
}
function createThemeWithVars(options = {}, ...args) {
    const { colorSchemes: colorSchemesInput = {
        light: true
    }, defaultColorScheme: defaultColorSchemeInput, disableCssColorScheme = false, cssVarPrefix = 'mui', shouldSkipGeneratingVar = (0, _shouldSkipGeneratingVarJsDefault.default), colorSchemeSelector: selector = colorSchemesInput.light && colorSchemesInput.dark ? 'media' : undefined, rootSelector = ':root', ...input } = options;
    const firstColorScheme = Object.keys(colorSchemesInput)[0];
    const defaultColorScheme = defaultColorSchemeInput || (colorSchemesInput.light && firstColorScheme !== 'light' ? 'light' : firstColorScheme);
    const getCssVar = createGetCssVar(cssVarPrefix);
    const { [defaultColorScheme]: defaultSchemeInput, light: builtInLight, dark: builtInDark, ...customColorSchemes } = colorSchemesInput;
    const colorSchemes = {
        ...customColorSchemes
    };
    let defaultScheme = defaultSchemeInput;
    // For built-in light and dark color schemes, ensure that the value is valid if they are the default color scheme.
    if (defaultColorScheme === 'dark' && !('dark' in colorSchemesInput) || defaultColorScheme === 'light' && !('light' in colorSchemesInput)) defaultScheme = true;
    if (!defaultScheme) throw new Error(`MUI: The \`colorSchemes.${defaultColorScheme}\` option is either missing or invalid.`);
    // Create the palette for the default color scheme, either `light`, `dark`, or custom color scheme.
    const muiTheme = attachColorScheme(colorSchemes, defaultScheme, input, defaultColorScheme);
    if (builtInLight && !colorSchemes.light) attachColorScheme(colorSchemes, builtInLight, undefined, 'light');
    if (builtInDark && !colorSchemes.dark) attachColorScheme(colorSchemes, builtInDark, undefined, 'dark');
    let theme = {
        defaultColorScheme,
        ...muiTheme,
        cssVarPrefix,
        colorSchemeSelector: selector,
        rootSelector,
        getCssVar,
        colorSchemes,
        font: {
            ...(0, _cssVars.prepareTypographyVars)(muiTheme.typography),
            ...muiTheme.font
        },
        spacing: getSpacingVal(input.spacing)
    };
    Object.keys(theme.colorSchemes).forEach((key)=>{
        const palette = theme.colorSchemes[key].palette;
        const setCssVarColor = (cssVar)=>{
            const tokens = cssVar.split('-');
            const color = tokens[1];
            const colorToken = tokens[2];
            return getCssVar(cssVar, palette[color][colorToken]);
        };
        // attach black & white channels to common node
        if (palette.mode === 'light') {
            setColor(palette.common, 'background', '#fff');
            setColor(palette.common, 'onBackground', '#000');
        }
        if (palette.mode === 'dark') {
            setColor(palette.common, 'background', '#000');
            setColor(palette.common, 'onBackground', '#fff');
        }
        // assign component variables
        assignNode(palette, [
            'Alert',
            'AppBar',
            'Avatar',
            'Button',
            'Chip',
            'FilledInput',
            'LinearProgress',
            'Skeleton',
            'Slider',
            'SnackbarContent',
            'SpeedDialAction',
            'StepConnector',
            'StepContent',
            'Switch',
            'TableCell',
            'Tooltip'
        ]);
        if (palette.mode === 'light') {
            setColor(palette.Alert, 'errorColor', (0, _colorManipulator.private_safeDarken)(palette.error.light, 0.6));
            setColor(palette.Alert, 'infoColor', (0, _colorManipulator.private_safeDarken)(palette.info.light, 0.6));
            setColor(palette.Alert, 'successColor', (0, _colorManipulator.private_safeDarken)(palette.success.light, 0.6));
            setColor(palette.Alert, 'warningColor', (0, _colorManipulator.private_safeDarken)(palette.warning.light, 0.6));
            setColor(palette.Alert, 'errorFilledBg', setCssVarColor('palette-error-main'));
            setColor(palette.Alert, 'infoFilledBg', setCssVarColor('palette-info-main'));
            setColor(palette.Alert, 'successFilledBg', setCssVarColor('palette-success-main'));
            setColor(palette.Alert, 'warningFilledBg', setCssVarColor('palette-warning-main'));
            setColor(palette.Alert, 'errorFilledColor', silent(()=>palette.getContrastText(palette.error.main)));
            setColor(palette.Alert, 'infoFilledColor', silent(()=>palette.getContrastText(palette.info.main)));
            setColor(palette.Alert, 'successFilledColor', silent(()=>palette.getContrastText(palette.success.main)));
            setColor(palette.Alert, 'warningFilledColor', silent(()=>palette.getContrastText(palette.warning.main)));
            setColor(palette.Alert, 'errorStandardBg', (0, _colorManipulator.private_safeLighten)(palette.error.light, 0.9));
            setColor(palette.Alert, 'infoStandardBg', (0, _colorManipulator.private_safeLighten)(palette.info.light, 0.9));
            setColor(palette.Alert, 'successStandardBg', (0, _colorManipulator.private_safeLighten)(palette.success.light, 0.9));
            setColor(palette.Alert, 'warningStandardBg', (0, _colorManipulator.private_safeLighten)(palette.warning.light, 0.9));
            setColor(palette.Alert, 'errorIconColor', setCssVarColor('palette-error-main'));
            setColor(palette.Alert, 'infoIconColor', setCssVarColor('palette-info-main'));
            setColor(palette.Alert, 'successIconColor', setCssVarColor('palette-success-main'));
            setColor(palette.Alert, 'warningIconColor', setCssVarColor('palette-warning-main'));
            setColor(palette.AppBar, 'defaultBg', setCssVarColor('palette-grey-100'));
            setColor(palette.Avatar, 'defaultBg', setCssVarColor('palette-grey-400'));
            setColor(palette.Button, 'inheritContainedBg', setCssVarColor('palette-grey-300'));
            setColor(palette.Button, 'inheritContainedHoverBg', setCssVarColor('palette-grey-A100'));
            setColor(palette.Chip, 'defaultBorder', setCssVarColor('palette-grey-400'));
            setColor(palette.Chip, 'defaultAvatarColor', setCssVarColor('palette-grey-700'));
            setColor(palette.Chip, 'defaultIconColor', setCssVarColor('palette-grey-700'));
            setColor(palette.FilledInput, 'bg', 'rgba(0, 0, 0, 0.06)');
            setColor(palette.FilledInput, 'hoverBg', 'rgba(0, 0, 0, 0.09)');
            setColor(palette.FilledInput, 'disabledBg', 'rgba(0, 0, 0, 0.12)');
            setColor(palette.LinearProgress, 'primaryBg', (0, _colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
            setColor(palette.LinearProgress, 'secondaryBg', (0, _colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
            setColor(palette.LinearProgress, 'errorBg', (0, _colorManipulator.private_safeLighten)(palette.error.main, 0.62));
            setColor(palette.LinearProgress, 'infoBg', (0, _colorManipulator.private_safeLighten)(palette.info.main, 0.62));
            setColor(palette.LinearProgress, 'successBg', (0, _colorManipulator.private_safeLighten)(palette.success.main, 0.62));
            setColor(palette.LinearProgress, 'warningBg', (0, _colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
            setColor(palette.Skeleton, 'bg', `rgba(${setCssVarColor('palette-text-primaryChannel')} / 0.11)`);
            setColor(palette.Slider, 'primaryTrack', (0, _colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
            setColor(palette.Slider, 'secondaryTrack', (0, _colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
            setColor(palette.Slider, 'errorTrack', (0, _colorManipulator.private_safeLighten)(palette.error.main, 0.62));
            setColor(palette.Slider, 'infoTrack', (0, _colorManipulator.private_safeLighten)(palette.info.main, 0.62));
            setColor(palette.Slider, 'successTrack', (0, _colorManipulator.private_safeLighten)(palette.success.main, 0.62));
            setColor(palette.Slider, 'warningTrack', (0, _colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
            const snackbarContentBackground = (0, _colorManipulator.private_safeEmphasize)(palette.background.default, 0.8);
            setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
            setColor(palette.SnackbarContent, 'color', silent(()=>palette.getContrastText(snackbarContentBackground)));
            setColor(palette.SpeedDialAction, 'fabHoverBg', (0, _colorManipulator.private_safeEmphasize)(palette.background.paper, 0.15));
            setColor(palette.StepConnector, 'border', setCssVarColor('palette-grey-400'));
            setColor(palette.StepContent, 'border', setCssVarColor('palette-grey-400'));
            setColor(palette.Switch, 'defaultColor', setCssVarColor('palette-common-white'));
            setColor(palette.Switch, 'defaultDisabledColor', setCssVarColor('palette-grey-100'));
            setColor(palette.Switch, 'primaryDisabledColor', (0, _colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
            setColor(palette.Switch, 'secondaryDisabledColor', (0, _colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
            setColor(palette.Switch, 'errorDisabledColor', (0, _colorManipulator.private_safeLighten)(palette.error.main, 0.62));
            setColor(palette.Switch, 'infoDisabledColor', (0, _colorManipulator.private_safeLighten)(palette.info.main, 0.62));
            setColor(palette.Switch, 'successDisabledColor', (0, _colorManipulator.private_safeLighten)(palette.success.main, 0.62));
            setColor(palette.Switch, 'warningDisabledColor', (0, _colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
            setColor(palette.TableCell, 'border', (0, _colorManipulator.private_safeLighten)((0, _colorManipulator.private_safeAlpha)(palette.divider, 1), 0.88));
            setColor(palette.Tooltip, 'bg', (0, _colorManipulator.private_safeAlpha)(palette.grey[700], 0.92));
        }
        if (palette.mode === 'dark') {
            setColor(palette.Alert, 'errorColor', (0, _colorManipulator.private_safeLighten)(palette.error.light, 0.6));
            setColor(palette.Alert, 'infoColor', (0, _colorManipulator.private_safeLighten)(palette.info.light, 0.6));
            setColor(palette.Alert, 'successColor', (0, _colorManipulator.private_safeLighten)(palette.success.light, 0.6));
            setColor(palette.Alert, 'warningColor', (0, _colorManipulator.private_safeLighten)(palette.warning.light, 0.6));
            setColor(palette.Alert, 'errorFilledBg', setCssVarColor('palette-error-dark'));
            setColor(palette.Alert, 'infoFilledBg', setCssVarColor('palette-info-dark'));
            setColor(palette.Alert, 'successFilledBg', setCssVarColor('palette-success-dark'));
            setColor(palette.Alert, 'warningFilledBg', setCssVarColor('palette-warning-dark'));
            setColor(palette.Alert, 'errorFilledColor', silent(()=>palette.getContrastText(palette.error.dark)));
            setColor(palette.Alert, 'infoFilledColor', silent(()=>palette.getContrastText(palette.info.dark)));
            setColor(palette.Alert, 'successFilledColor', silent(()=>palette.getContrastText(palette.success.dark)));
            setColor(palette.Alert, 'warningFilledColor', silent(()=>palette.getContrastText(palette.warning.dark)));
            setColor(palette.Alert, 'errorStandardBg', (0, _colorManipulator.private_safeDarken)(palette.error.light, 0.9));
            setColor(palette.Alert, 'infoStandardBg', (0, _colorManipulator.private_safeDarken)(palette.info.light, 0.9));
            setColor(palette.Alert, 'successStandardBg', (0, _colorManipulator.private_safeDarken)(palette.success.light, 0.9));
            setColor(palette.Alert, 'warningStandardBg', (0, _colorManipulator.private_safeDarken)(palette.warning.light, 0.9));
            setColor(palette.Alert, 'errorIconColor', setCssVarColor('palette-error-main'));
            setColor(palette.Alert, 'infoIconColor', setCssVarColor('palette-info-main'));
            setColor(palette.Alert, 'successIconColor', setCssVarColor('palette-success-main'));
            setColor(palette.Alert, 'warningIconColor', setCssVarColor('palette-warning-main'));
            setColor(palette.AppBar, 'defaultBg', setCssVarColor('palette-grey-900'));
            setColor(palette.AppBar, 'darkBg', setCssVarColor('palette-background-paper')); // specific for dark mode
            setColor(palette.AppBar, 'darkColor', setCssVarColor('palette-text-primary')); // specific for dark mode
            setColor(palette.Avatar, 'defaultBg', setCssVarColor('palette-grey-600'));
            setColor(palette.Button, 'inheritContainedBg', setCssVarColor('palette-grey-800'));
            setColor(palette.Button, 'inheritContainedHoverBg', setCssVarColor('palette-grey-700'));
            setColor(palette.Chip, 'defaultBorder', setCssVarColor('palette-grey-700'));
            setColor(palette.Chip, 'defaultAvatarColor', setCssVarColor('palette-grey-300'));
            setColor(palette.Chip, 'defaultIconColor', setCssVarColor('palette-grey-300'));
            setColor(palette.FilledInput, 'bg', 'rgba(255, 255, 255, 0.09)');
            setColor(palette.FilledInput, 'hoverBg', 'rgba(255, 255, 255, 0.13)');
            setColor(palette.FilledInput, 'disabledBg', 'rgba(255, 255, 255, 0.12)');
            setColor(palette.LinearProgress, 'primaryBg', (0, _colorManipulator.private_safeDarken)(palette.primary.main, 0.5));
            setColor(palette.LinearProgress, 'secondaryBg', (0, _colorManipulator.private_safeDarken)(palette.secondary.main, 0.5));
            setColor(palette.LinearProgress, 'errorBg', (0, _colorManipulator.private_safeDarken)(palette.error.main, 0.5));
            setColor(palette.LinearProgress, 'infoBg', (0, _colorManipulator.private_safeDarken)(palette.info.main, 0.5));
            setColor(palette.LinearProgress, 'successBg', (0, _colorManipulator.private_safeDarken)(palette.success.main, 0.5));
            setColor(palette.LinearProgress, 'warningBg', (0, _colorManipulator.private_safeDarken)(palette.warning.main, 0.5));
            setColor(palette.Skeleton, 'bg', `rgba(${setCssVarColor('palette-text-primaryChannel')} / 0.13)`);
            setColor(palette.Slider, 'primaryTrack', (0, _colorManipulator.private_safeDarken)(palette.primary.main, 0.5));
            setColor(palette.Slider, 'secondaryTrack', (0, _colorManipulator.private_safeDarken)(palette.secondary.main, 0.5));
            setColor(palette.Slider, 'errorTrack', (0, _colorManipulator.private_safeDarken)(palette.error.main, 0.5));
            setColor(palette.Slider, 'infoTrack', (0, _colorManipulator.private_safeDarken)(palette.info.main, 0.5));
            setColor(palette.Slider, 'successTrack', (0, _colorManipulator.private_safeDarken)(palette.success.main, 0.5));
            setColor(palette.Slider, 'warningTrack', (0, _colorManipulator.private_safeDarken)(palette.warning.main, 0.5));
            const snackbarContentBackground = (0, _colorManipulator.private_safeEmphasize)(palette.background.default, 0.98);
            setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
            setColor(palette.SnackbarContent, 'color', silent(()=>palette.getContrastText(snackbarContentBackground)));
            setColor(palette.SpeedDialAction, 'fabHoverBg', (0, _colorManipulator.private_safeEmphasize)(palette.background.paper, 0.15));
            setColor(palette.StepConnector, 'border', setCssVarColor('palette-grey-600'));
            setColor(palette.StepContent, 'border', setCssVarColor('palette-grey-600'));
            setColor(palette.Switch, 'defaultColor', setCssVarColor('palette-grey-300'));
            setColor(palette.Switch, 'defaultDisabledColor', setCssVarColor('palette-grey-600'));
            setColor(palette.Switch, 'primaryDisabledColor', (0, _colorManipulator.private_safeDarken)(palette.primary.main, 0.55));
            setColor(palette.Switch, 'secondaryDisabledColor', (0, _colorManipulator.private_safeDarken)(palette.secondary.main, 0.55));
            setColor(palette.Switch, 'errorDisabledColor', (0, _colorManipulator.private_safeDarken)(palette.error.main, 0.55));
            setColor(palette.Switch, 'infoDisabledColor', (0, _colorManipulator.private_safeDarken)(palette.info.main, 0.55));
            setColor(palette.Switch, 'successDisabledColor', (0, _colorManipulator.private_safeDarken)(palette.success.main, 0.55));
            setColor(palette.Switch, 'warningDisabledColor', (0, _colorManipulator.private_safeDarken)(palette.warning.main, 0.55));
            setColor(palette.TableCell, 'border', (0, _colorManipulator.private_safeDarken)((0, _colorManipulator.private_safeAlpha)(palette.divider, 1), 0.68));
            setColor(palette.Tooltip, 'bg', (0, _colorManipulator.private_safeAlpha)(palette.grey[700], 0.92));
        }
        // MUI X - DataGrid needs this token.
        setColorChannel(palette.background, 'default');
        // added for consistency with the `background.default` token
        setColorChannel(palette.background, 'paper');
        setColorChannel(palette.common, 'background');
        setColorChannel(palette.common, 'onBackground');
        setColorChannel(palette, 'divider');
        Object.keys(palette).forEach((color)=>{
            const colors = palette[color];
            // The default palettes (primary, secondary, error, info, success, and warning) errors are handled by the above `createTheme(...)`.
            if (color !== 'tonalOffset' && colors && typeof colors === 'object') {
                // Silent the error for custom palettes.
                if (colors.main) setColor(palette[color], 'mainChannel', (0, _colorManipulator.private_safeColorChannel)(toRgb(colors.main)));
                if (colors.light) setColor(palette[color], 'lightChannel', (0, _colorManipulator.private_safeColorChannel)(toRgb(colors.light)));
                if (colors.dark) setColor(palette[color], 'darkChannel', (0, _colorManipulator.private_safeColorChannel)(toRgb(colors.dark)));
                if (colors.contrastText) setColor(palette[color], 'contrastTextChannel', (0, _colorManipulator.private_safeColorChannel)(toRgb(colors.contrastText)));
                if (color === 'text') {
                    // Text colors: text.primary, text.secondary
                    setColorChannel(palette[color], 'primary');
                    setColorChannel(palette[color], 'secondary');
                }
                if (color === 'action') {
                    // Action colors: action.active, action.selected
                    if (colors.active) setColorChannel(palette[color], 'active');
                    if (colors.selected) setColorChannel(palette[color], 'selected');
                }
            }
        });
    });
    theme = args.reduce((acc, argument)=>(0, _deepmergeDefault.default)(acc, argument), theme);
    const parserConfig = {
        prefix: cssVarPrefix,
        disableCssColorScheme,
        shouldSkipGeneratingVar,
        getSelector: (0, _createGetSelectorJsDefault.default)(theme)
    };
    const { vars, generateThemeVars, generateStyleSheets } = (0, _cssVars.prepareCssVars)(theme, parserConfig);
    theme.vars = vars;
    Object.entries(theme.colorSchemes[theme.defaultColorScheme]).forEach(([key, value])=>{
        theme[key] = value;
    });
    theme.generateThemeVars = generateThemeVars;
    theme.generateStyleSheets = generateStyleSheets;
    theme.generateSpacing = function generateSpacing() {
        return (0, _system.createSpacing)(input.spacing, (0, _spacing.createUnarySpacing)(this));
    };
    theme.getColorSchemeSelector = (0, _cssVars.createGetColorSchemeSelector)(selector);
    theme.spacing = theme.generateSpacing();
    theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar;
    theme.unstable_sxConfig = {
        ...(0, _styleFunctionSx.unstable_defaultSxConfig),
        ...input?.unstable_sxConfig
    };
    theme.unstable_sx = function sx(props) {
        return (0, _styleFunctionSxDefault.default)({
            sx: props,
            theme: this
        });
    };
    theme.toRuntimeSource = (0, _stringifyThemeJs.stringifyTheme); // for Pigment CSS integration
    return theme;
}

},{"@mui/utils/formatMuiErrorMessage":"cXsuk","@mui/utils/deepmerge":"bLPf1","@mui/system":"1WaIj","@mui/system/spacing":"cUfeI","@mui/system/cssVars":"jrqSW","@mui/system/styleFunctionSx":"3qmy1","@mui/system/colorManipulator":"b9Snp","./createThemeNoVars.js":"5B9Rs","./createColorScheme.js":"aPdYE","./shouldSkipGeneratingVar.js":"hV9rJ","./createGetSelector.js":"lh9YW","./stringifyTheme.js":"2sNJu","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jrqSW":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("a51126d5bd2275").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createCssVarsTheme", {
    enumerable: true,
    get: function() {
        return _createCssVarsTheme.default;
    }
});
Object.defineProperty(exports, "createGetColorSchemeSelector", {
    enumerable: true,
    get: function() {
        return _getColorSchemeSelector.createGetColorSchemeSelector;
    }
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _createCssVarsProvider.default;
    }
});
Object.defineProperty(exports, "prepareCssVars", {
    enumerable: true,
    get: function() {
        return _prepareCssVars.default;
    }
});
Object.defineProperty(exports, "prepareTypographyVars", {
    enumerable: true,
    get: function() {
        return _prepareTypographyVars.default;
    }
});
var _createCssVarsProvider = _interopRequireDefault(require("dfae27ca31306a0e"));
var _prepareCssVars = _interopRequireDefault(require("d98545f5c0c0740e"));
var _prepareTypographyVars = _interopRequireDefault(require("c3dc230e2b940bd4"));
var _createCssVarsTheme = _interopRequireDefault(require("2bda82692be67aa8"));
var _getColorSchemeSelector = require("fd4cdf3817603102");

},{"a51126d5bd2275":"1P3rZ","dfae27ca31306a0e":"ed0eT","d98545f5c0c0740e":"dqYkb","c3dc230e2b940bd4":"fw4hW","2bda82692be67aa8":"dbpMK","fd4cdf3817603102":"drAM8"}],"ed0eT":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireDefault = require("7bb1b00c3ce16e70").default;
var _interopRequireWildcard = require("841305f8151d5761").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DISABLE_CSS_TRANSITION = void 0;
exports.default = createCssVarsProvider;
var React = _interopRequireWildcard(require("cf72253cf59a0c4a"));
var _propTypes = _interopRequireDefault(require("85ef376bdcc70ce"));
var _styledEngine = require("27fd9fa473c78e80");
var _privateTheming = require("45eb920496ba4f96");
var _useEnhancedEffect = _interopRequireDefault(require("4af90c5f9c5514e"));
var _ThemeProvider = _interopRequireDefault(require("90a7650b1c1f5bfe"));
var _InitColorSchemeScript = _interopRequireWildcard(require("c9120b7bafb1949e"));
var _useCurrentColorScheme = _interopRequireDefault(require("bdfdcd452b0a518"));
var _jsxRuntime = require("2547781ca18894b7");
const DISABLE_CSS_TRANSITION = exports.DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';
function createCssVarsProvider(options) {
    const { themeId, /**
     * This `theme` object needs to follow a certain structure to
     * be used correctly by the finel `CssVarsProvider`. It should have a
     * `colorSchemes` key with the light and dark (and any other) palette.
     * It should also ideally have a vars object created using `prepareCssVars`.
     */ theme: defaultTheme = {}, modeStorageKey: defaultModeStorageKey = _InitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY, colorSchemeStorageKey: defaultColorSchemeStorageKey = _InitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY, disableTransitionOnChange: designSystemTransitionOnChange = false, defaultColorScheme, resolveTheme } = options;
    const defaultContext = {
        allColorSchemes: [],
        colorScheme: undefined,
        darkColorScheme: undefined,
        lightColorScheme: undefined,
        mode: undefined,
        setColorScheme: ()=>{},
        setMode: ()=>{},
        systemMode: undefined
    };
    const ColorSchemeContext = /*#__PURE__*/ React.createContext(undefined);
    ColorSchemeContext.displayName = 'ColorSchemeContext';
    const useColorScheme = ()=>React.useContext(ColorSchemeContext) || defaultContext;
    const defaultColorSchemes = {};
    const defaultComponents = {};
    function CssVarsProvider(props) {
        const { children, theme: themeProp, modeStorageKey = defaultModeStorageKey, colorSchemeStorageKey = defaultColorSchemeStorageKey, disableTransitionOnChange = designSystemTransitionOnChange, storageManager, storageWindow = typeof window === 'undefined' ? undefined : window, documentNode = typeof document === 'undefined' ? undefined : document, colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement, disableNestedContext = false, disableStyleSheetGeneration = false, defaultMode: initialMode = 'system', forceThemeRerender = false, noSsr } = props;
        const hasMounted = React.useRef(false);
        const upperTheme = (0, _privateTheming.useTheme)();
        const ctx = React.useContext(ColorSchemeContext);
        const nested = !!ctx && !disableNestedContext;
        const initialTheme = React.useMemo(()=>{
            if (themeProp) return themeProp;
            return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;
        }, [
            themeProp
        ]);
        const scopedTheme = initialTheme[themeId];
        const restThemeProp = scopedTheme || initialTheme;
        const { colorSchemes = defaultColorSchemes, components = defaultComponents, cssVarPrefix } = restThemeProp;
        const joinedColorSchemes = Object.keys(colorSchemes).filter((k)=>!!colorSchemes[k]).join(',');
        const allColorSchemes = React.useMemo(()=>joinedColorSchemes.split(','), [
            joinedColorSchemes
        ]);
        const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;
        const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;
        const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;
        // 1. Get the data about the `mode`, `colorScheme`, and setter functions.
        const { mode: stateMode, setMode, systemMode, lightColorScheme, darkColorScheme, colorScheme: stateColorScheme, setColorScheme } = (0, _useCurrentColorScheme.default)({
            supportedColorSchemes: allColorSchemes,
            defaultLightColorScheme,
            defaultDarkColorScheme,
            modeStorageKey,
            colorSchemeStorageKey,
            defaultMode,
            storageManager,
            storageWindow,
            noSsr
        });
        let mode = stateMode;
        let colorScheme = stateColorScheme;
        if (nested) {
            mode = ctx.mode;
            colorScheme = ctx.colorScheme;
        }
        if (forceThemeRerender && !restThemeProp.vars) console.warn([
            'MUI: The `forceThemeRerender` prop should only be used with CSS theme variables.',
            'Note that it will slow down the app when changing between modes, so only do this when you cannot find a better solution.'
        ].join('\n'));
        // `colorScheme` is undefined on the server and hydration phase
        let calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;
        if (restThemeProp.vars && !forceThemeRerender) calculatedColorScheme = restThemeProp.defaultColorScheme;
        const memoTheme = React.useMemo(()=>{
            // 2. get the `vars` object that refers to the CSS custom properties
            const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;
            // 3. Start composing the theme object
            const theme = {
                ...restThemeProp,
                components,
                colorSchemes,
                cssVarPrefix,
                vars: themeVars
            };
            if (typeof theme.generateSpacing === 'function') theme.spacing = theme.generateSpacing();
            // 4. Resolve the color scheme and merge it to the theme
            if (calculatedColorScheme) {
                const scheme = colorSchemes[calculatedColorScheme];
                if (scheme && typeof scheme === 'object') // 4.1 Merge the selected color scheme to the theme
                Object.keys(scheme).forEach((schemeKey)=>{
                    if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') // shallow merge the 1st level structure of the theme.
                    theme[schemeKey] = {
                        ...theme[schemeKey],
                        ...scheme[schemeKey]
                    };
                    else theme[schemeKey] = scheme[schemeKey];
                });
            }
            return resolveTheme ? resolveTheme(theme) : theme;
        }, [
            restThemeProp,
            calculatedColorScheme,
            components,
            colorSchemes,
            cssVarPrefix
        ]);
        // 5. Declaring effects
        // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.
        const colorSchemeSelector = restThemeProp.colorSchemeSelector;
        (0, _useEnhancedEffect.default)(()=>{
            if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {
                const selector = colorSchemeSelector;
                let rule = colorSchemeSelector;
                if (selector === 'class') rule = `.%s`;
                if (selector === 'data') rule = `[data-%s]`;
                if (selector?.startsWith('data-') && !selector.includes('%s')) // 'data-mui-color-scheme' -> '[data-mui-color-scheme="%s"]'
                rule = `[${selector}="%s"]`;
                if (rule.startsWith('.')) {
                    colorSchemeNode.classList.remove(...allColorSchemes.map((scheme)=>rule.substring(1).replace('%s', scheme)));
                    colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));
                } else {
                    const matches = rule.replace('%s', colorScheme).match(/\[([^\]]+)\]/);
                    if (matches) {
                        const [attr, value] = matches[1].split('=');
                        if (!value) // for attributes like `data-theme-dark`, `data-theme-light`
                        // remove all the existing data attributes before setting the new one
                        allColorSchemes.forEach((scheme)=>{
                            colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));
                        });
                        colorSchemeNode.setAttribute(attr, value ? value.replace(/"|'/g, '') : '');
                    } else colorSchemeNode.setAttribute(rule, colorScheme);
                }
            }
        }, [
            colorScheme,
            colorSchemeSelector,
            colorSchemeNode,
            allColorSchemes
        ]);
        // 5.2 Remove the CSS transition when color scheme changes to create instant experience.
        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313
        React.useEffect(()=>{
            let timer;
            if (disableTransitionOnChange && hasMounted.current && documentNode) {
                const css = documentNode.createElement('style');
                css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
                documentNode.head.appendChild(css);
                // Force browser repaint
                (()=>window.getComputedStyle(documentNode.body))();
                timer = setTimeout(()=>{
                    documentNode.head.removeChild(css);
                }, 1);
            }
            return ()=>{
                clearTimeout(timer);
            };
        }, [
            colorScheme,
            disableTransitionOnChange,
            documentNode
        ]);
        React.useEffect(()=>{
            hasMounted.current = true;
            return ()=>{
                hasMounted.current = false;
            };
        }, []);
        const contextValue = React.useMemo(()=>({
                allColorSchemes,
                colorScheme,
                darkColorScheme,
                lightColorScheme,
                mode,
                setColorScheme,
                setMode: (newMode)=>{
                    if (memoTheme.colorSchemeSelector === 'media') console.error([
                        'MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).',
                        'To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.',
                        'To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually'
                    ].join('\n'));
                    setMode(newMode);
                },
                systemMode
            }), [
            allColorSchemes,
            colorScheme,
            darkColorScheme,
            lightColorScheme,
            mode,
            setColorScheme,
            setMode,
            systemMode,
            memoTheme.colorSchemeSelector
        ]);
        let shouldGenerateStyleSheet = true;
        if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) shouldGenerateStyleSheet = false;
        const element = /*#__PURE__*/ (0, _jsxRuntime.jsxs)(React.Fragment, {
            children: [
                /*#__PURE__*/ (0, _jsxRuntime.jsx)(_ThemeProvider.default, {
                    themeId: scopedTheme ? themeId : undefined,
                    theme: memoTheme,
                    children: children
                }),
                shouldGenerateStyleSheet && /*#__PURE__*/ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
                    styles: memoTheme.generateStyleSheets?.() || []
                })
            ]
        });
        if (nested) return element;
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {
            value: contextValue,
            children: element
        });
    }
    CssVarsProvider.propTypes = {
        /**
     * The component tree.
     */ children: _propTypes.default.node,
        /**
     * The node used to attach the color-scheme attribute
     */ colorSchemeNode: _propTypes.default.any,
        /**
     * localStorage key used to store `colorScheme`
     */ colorSchemeStorageKey: _propTypes.default.string,
        /**
     * The default mode when the storage is empty,
     * require the theme to have `colorSchemes` with light and dark.
     */ defaultMode: _propTypes.default.string,
        /**
     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
     */ disableNestedContext: _propTypes.default.bool,
        /**
     * If `true`, the style sheet won't be generated.
     *
     * This is useful for controlling nested CssVarsProvider behavior.
     */ disableStyleSheetGeneration: _propTypes.default.bool,
        /**
     * Disable CSS transitions when switching between modes or color schemes.
     */ disableTransitionOnChange: _propTypes.default.bool,
        /**
     * The document to attach the attribute to.
     */ documentNode: _propTypes.default.any,
        /**
     * If `true`, theme values are recalculated when the mode changes.
     */ forceThemeRerender: _propTypes.default.bool,
        /**
     * The key in the local storage used to store current color scheme.
     */ modeStorageKey: _propTypes.default.string,
        /**
     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.
     * You should use this option in conjuction with `InitColorSchemeScript` component.
     */ noSsr: _propTypes.default.bool,
        /**
     * The storage manager to be used for storing the mode and color scheme
     * @default using `window.localStorage`
     */ storageManager: _propTypes.default.func,
        /**
     * The window that attaches the 'storage' event listener.
     * @default window
     */ storageWindow: _propTypes.default.any,
        /**
     * The calculated theme object that will be passed through context.
     */ theme: _propTypes.default.object
    };
    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;
    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;
    const getInitColorSchemeScript = (params)=>(0, _InitColorSchemeScript.default)({
            colorSchemeStorageKey: defaultColorSchemeStorageKey,
            defaultLightColorScheme,
            defaultDarkColorScheme,
            modeStorageKey: defaultModeStorageKey,
            ...params
        });
    return {
        CssVarsProvider,
        useColorScheme,
        getInitColorSchemeScript
    };
}

},{"7bb1b00c3ce16e70":"1P3rZ","841305f8151d5761":"6TFJp","cf72253cf59a0c4a":"jMk1U","85ef376bdcc70ce":"GNqOQ","27fd9fa473c78e80":"g3Wsb","45eb920496ba4f96":"aNwkL","4af90c5f9c5514e":"egHZg","90a7650b1c1f5bfe":"7MAcf","c9120b7bafb1949e":"6VlWa","bdfdcd452b0a518":"rbHNg","2547781ca18894b7":"05iiF"}],"aNwkL":[function(require,module,exports,__globalThis) {
/**
 * @mui/private-theming v7.1.1
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ThemeProvider", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "useTheme", ()=>(0, _indexJsDefault1.default));
var _indexJs = require("./ThemeProvider/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
parcelHelpers.exportAll(_indexJs, exports);
var _indexJs1 = require("./useTheme/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);

},{"./ThemeProvider/index.js":"aHttu","./useTheme/index.js":"6KaGw","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aHttu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _themeProviderJsDefault.default));
parcelHelpers.export(exports, "unstable_nested", ()=>(0, _nestedJsDefault.default));
var _themeProviderJs = require("./ThemeProvider.js");
var _themeProviderJsDefault = parcelHelpers.interopDefault(_themeProviderJs);
var _nestedJs = require("./nested.js");
var _nestedJsDefault = parcelHelpers.interopDefault(_nestedJs);

},{"./ThemeProvider.js":"8wFsy","./nested.js":"kklEr","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8wFsy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _exactProp = require("@mui/utils/exactProp");
var _exactPropDefault = parcelHelpers.interopDefault(_exactProp);
var _themeContextJs = require("../useTheme/ThemeContext.js");
var _themeContextJsDefault = parcelHelpers.interopDefault(_themeContextJs);
var _indexJs = require("../useTheme/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _nestedJs = require("./nested.js");
var _nestedJsDefault = parcelHelpers.interopDefault(_nestedJs);
// To support composition of theme.
var _jsxRuntime = require("react/jsx-runtime");
function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === 'function') {
        const mergedTheme = localTheme(outerTheme);
        if (!mergedTheme) console.error([
            'MUI: You should return an object from your theme function, i.e.',
            '<ThemeProvider theme={() => ({})} />'
        ].join('\n'));
        return mergedTheme;
    }
    return {
        ...outerTheme,
        ...localTheme
    };
}
/**
 * This component takes a `theme` prop.
 * It makes the `theme` available down the React tree thanks to React context.
 * This component should preferably be used at **the root of your component tree**.
 */ function ThemeProvider(props) {
    const { children, theme: localTheme } = props;
    const outerTheme = (0, _indexJsDefault.default)();
    if (outerTheme === null && typeof localTheme === 'function') console.error([
        'MUI: You are providing a theme function prop to the ThemeProvider component:',
        '<ThemeProvider theme={outerTheme => outerTheme} />',
        '',
        'However, no outer theme is present.',
        "Make sure a theme is already injected higher in the React tree or provide a theme object."
    ].join('\n'));
    const theme = _react.useMemo(()=>{
        const output = outerTheme === null ? {
            ...localTheme
        } : mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) output[0, _nestedJsDefault.default] = outerTheme !== null;
        return output;
    }, [
        localTheme,
        outerTheme
    ]);
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _themeContextJsDefault.default).Provider, {
        value: theme,
        children: children
    });
}
ThemeProvider.propTypes = {
    /**
   * Your component tree.
   */ children: (0, _propTypesDefault.default).node,
    /**
   * A theme object. You can provide a function to extend the outer theme.
   */ theme: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).object,
        (0, _propTypesDefault.default).func
    ]).isRequired
};
ThemeProvider.propTypes = (0, _exactPropDefault.default)(ThemeProvider.propTypes);
exports.default = ThemeProvider;

},{"react":"jMk1U","prop-types":"GNqOQ","@mui/utils/exactProp":"l3gvy","../useTheme/ThemeContext.js":"iMD2K","../useTheme/index.js":"6KaGw","./nested.js":"kklEr","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"l3gvy":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("cff61de3e8b80eda").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _exactProp.default;
    }
});
var _exactProp = _interopRequireDefault(require("a9c5129b5b75c120"));

},{"cff61de3e8b80eda":"1P3rZ","a9c5129b5b75c120":"gv2xR"}],"gv2xR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exactProp;
// This module is based on https://github.com/airbnb/prop-types-exact repository.
// However, in order to reduce the number of dependencies and to remove some extra safe checks
// the module was forked.
const specialProperty = 'exact-prop: \u200b';
function exactProp(propTypes) {
    return {
        ...propTypes,
        [specialProperty]: (props)=>{
            const unsupportedProps = Object.keys(props).filter((prop)=>!propTypes.hasOwnProperty(prop));
            if (unsupportedProps.length > 0) return new Error(`The following props are not supported: ${unsupportedProps.map((prop)=>`\`${prop}\``).join(', ')}. Please remove them.`);
            return null;
        }
    };
}

},{}],"iMD2K":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
'use client';
const ThemeContext = /*#__PURE__*/ _react.createContext(null);
ThemeContext.displayName = 'ThemeContext';
exports.default = ThemeContext;

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6KaGw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _useThemeJsDefault.default));
var _useThemeJs = require("./useTheme.js");
var _useThemeJsDefault = parcelHelpers.interopDefault(_useThemeJs);

},{"./useTheme.js":"cNJ4B","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cNJ4B":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>useTheme);
var _react = require("react");
var _themeContextJs = require("./ThemeContext.js");
var _themeContextJsDefault = parcelHelpers.interopDefault(_themeContextJs);
function useTheme() {
    const theme = _react.useContext((0, _themeContextJsDefault.default));
    // TODO: uncomment once we enable eslint-plugin-react-compiler eslint-disable-next-line react-compiler/react-compiler
    // eslint-disable-next-line react-hooks/rules-of-hooks -- It's not required to run React.useDebugValue in production
    _react.useDebugValue(theme);
    return theme;
}

},{"react":"jMk1U","./ThemeContext.js":"iMD2K","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kklEr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const hasSymbol = typeof Symbol === 'function' && Symbol.for;
exports.default = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7MAcf":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("9642812f9fa3db8d").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _ThemeProvider.default;
    }
});
var _ThemeProvider = _interopRequireDefault(require("7da009a5ef328225"));

},{"9642812f9fa3db8d":"1P3rZ","7da009a5ef328225":"3UBCH"}],"3UBCH":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireDefault = require("2f0cdb539014f0d4").default;
var _interopRequireWildcard = require("945ee145cb6db818").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("f66bdf805eb6a174"));
var _propTypes = _interopRequireDefault(require("a7dc9850114c1c07"));
var _privateTheming = require("d2b933a117fa27b3");
var _exactProp = _interopRequireDefault(require("daa2a36d2d0ccf09"));
var _styledEngine = require("617d81d7a7442614");
var _useThemeWithoutDefault = _interopRequireDefault(require("44c8f2f530ac38e9"));
var _RtlProvider = _interopRequireDefault(require("31aada5253a2fae2"));
var _DefaultPropsProvider = _interopRequireDefault(require("c65b0fe1e1532163"));
var _jsxRuntime = require("d40852f22693d112");
const EMPTY_THEME = {};
function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
    return React.useMemo(()=>{
        const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
        if (typeof localTheme === 'function') {
            const mergedTheme = localTheme(resolvedTheme);
            const result = themeId ? {
                ...upperTheme,
                [themeId]: mergedTheme
            } : mergedTheme;
            // must return a function for the private theme to NOT merge with the upper theme.
            // see the test case "use provided theme from a callback" in ThemeProvider.test.js
            if (isPrivate) return ()=>result;
            return result;
        }
        return themeId ? {
            ...upperTheme,
            [themeId]: localTheme
        } : {
            ...upperTheme,
            ...localTheme
        };
    }, [
        themeId,
        upperTheme,
        localTheme,
        isPrivate
    ]);
}
/**
 * This component makes the `theme` available down the React tree.
 * It should preferably be used at **the root of your component tree**.
 *
 * <ThemeProvider theme={theme}> // existing use case
 * <ThemeProvider theme={{ id: theme }}> // theme scoping
 */ function ThemeProvider(props) {
    const { children, theme: localTheme, themeId } = props;
    const upperTheme = (0, _useThemeWithoutDefault.default)(EMPTY_THEME);
    const upperPrivateTheme = (0, _privateTheming.useTheme)() || EMPTY_THEME;
    if (upperTheme === null && typeof localTheme === 'function' || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === 'function') console.error([
        'MUI: You are providing a theme function prop to the ThemeProvider component:',
        '<ThemeProvider theme={outerTheme => outerTheme} />',
        '',
        'However, no outer theme is present.',
        "Make sure a theme is already injected higher in the React tree or provide a theme object."
    ].join('\n'));
    const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
    const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
    const rtlValue = (themeId ? engineTheme[themeId] : engineTheme).direction === 'rtl';
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_privateTheming.ThemeProvider, {
        theme: privateTheme,
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_styledEngine.ThemeContext.Provider, {
            value: engineTheme,
            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_RtlProvider.default, {
                value: rtlValue,
                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_DefaultPropsProvider.default, {
                    value: themeId ? engineTheme[themeId].components : engineTheme.components,
                    children: children
                })
            })
        })
    });
}
ThemeProvider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * Your component tree.
   */ children: _propTypes.default.node,
    /**
   * A theme object. You can provide a function to extend the outer theme.
   */ theme: _propTypes.default.oneOfType([
        _propTypes.default.func,
        _propTypes.default.object
    ]).isRequired,
    /**
   * The design system's unique id for getting the corresponded theme when there are multiple design systems.
   */ themeId: _propTypes.default.string
};
ThemeProvider.propTypes = (0, _exactProp.default)(ThemeProvider.propTypes);
var _default = exports.default = ThemeProvider;

},{"2f0cdb539014f0d4":"1P3rZ","945ee145cb6db818":"6TFJp","f66bdf805eb6a174":"jMk1U","a7dc9850114c1c07":"GNqOQ","d2b933a117fa27b3":"aNwkL","daa2a36d2d0ccf09":"l3gvy","617d81d7a7442614":"g3Wsb","44c8f2f530ac38e9":"2vDOS","31aada5253a2fae2":"13k4W","c65b0fe1e1532163":"bIXtM","d40852f22693d112":"05iiF"}],"2vDOS":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("22da61490d6d52e6").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _useThemeWithoutDefault.default;
    }
});
var _useThemeWithoutDefault = _interopRequireDefault(require("f31bbf1bc32a60ae"));

},{"22da61490d6d52e6":"1P3rZ","f31bbf1bc32a60ae":"avAdb"}],"avAdb":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireWildcard = require("cb4397c685c1a400").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("d565964b4cacfe6d"));
var _styledEngine = require("c6c07bae4e5cb0af");
function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
}
function useTheme(defaultTheme = null) {
    const contextTheme = React.useContext(_styledEngine.ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
}
var _default = exports.default = useTheme;

},{"cb4397c685c1a400":"6TFJp","d565964b4cacfe6d":"jMk1U","c6c07bae4e5cb0af":"g3Wsb"}],"13k4W":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireDefault = require("75271e7f0a9be8b8").default;
var _interopRequireWildcard = require("8be47b4a0ee19137").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useRtl = exports.default = void 0;
var React = _interopRequireWildcard(require("9c011c2e93eae9d7"));
var _propTypes = _interopRequireDefault(require("1cdad4212e0b63a6"));
var _jsxRuntime = require("35bc5316f55d23ce");
const RtlContext = /*#__PURE__*/ React.createContext();
function RtlProvider({ value, ...props }) {
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(RtlContext.Provider, {
        value: value ?? true,
        ...props
    });
}
RtlProvider.propTypes = {
    children: _propTypes.default.node,
    value: _propTypes.default.bool
};
const useRtl = ()=>{
    const value = React.useContext(RtlContext);
    return value ?? false;
};
exports.useRtl = useRtl;
var _default = exports.default = RtlProvider;

},{"75271e7f0a9be8b8":"1P3rZ","8be47b4a0ee19137":"6TFJp","9c011c2e93eae9d7":"jMk1U","1cdad4212e0b63a6":"GNqOQ","35bc5316f55d23ce":"05iiF"}],"bIXtM":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("3212c96339aec0a5").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _DefaultPropsProvider.default;
    }
});
Object.defineProperty(exports, "useDefaultProps", {
    enumerable: true,
    get: function() {
        return _DefaultPropsProvider.useDefaultProps;
    }
});
var _DefaultPropsProvider = _interopRequireWildcard(require("2efb2ac9cb89e9ff"));

},{"3212c96339aec0a5":"6TFJp","2efb2ac9cb89e9ff":"d8oZp"}],"d8oZp":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireDefault = require("4ce0159cb79f502a").default;
var _interopRequireWildcard = require("337ded59bbe1d92b").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
exports.useDefaultProps = useDefaultProps;
var React = _interopRequireWildcard(require("deb15c239d6dfd29"));
var _propTypes = _interopRequireDefault(require("44902174b186aff9"));
var _resolveProps = _interopRequireDefault(require("79e1b19e0eadc3aa"));
var _jsxRuntime = require("899997d347218abd");
const PropsContext = /*#__PURE__*/ React.createContext(undefined);
function DefaultPropsProvider({ value, children }) {
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(PropsContext.Provider, {
        value: value,
        children: children
    });
}
DefaultPropsProvider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * @ignore
   */ children: _propTypes.default.node,
    /**
   * @ignore
   */ value: _propTypes.default.object
};
function getThemeProps(params) {
    const { theme, name, props } = params;
    if (!theme || !theme.components || !theme.components[name]) return props;
    const config = theme.components[name];
    if (config.defaultProps) // compatible with v5 signature
    return (0, _resolveProps.default)(config.defaultProps, props);
    if (!config.styleOverrides && !config.variants) // v6 signature, no property 'defaultProps'
    return (0, _resolveProps.default)(config, props);
    return props;
}
function useDefaultProps({ props, name }) {
    const ctx = React.useContext(PropsContext);
    return getThemeProps({
        props,
        name,
        theme: {
            components: ctx
        }
    });
}
var _default = exports.default = DefaultPropsProvider;

},{"4ce0159cb79f502a":"1P3rZ","337ded59bbe1d92b":"6TFJp","deb15c239d6dfd29":"jMk1U","44902174b186aff9":"GNqOQ","79e1b19e0eadc3aa":"hO4GV","899997d347218abd":"05iiF"}],"6VlWa":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("ef652579247cd5d5").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DEFAULT_MODE_STORAGE_KEY = exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports.DEFAULT_ATTRIBUTE = void 0;
exports.default = InitColorSchemeScript;
var React = _interopRequireWildcard(require("b07e9c9c3771fb3a"));
var _jsxRuntime = require("e1ecb68d89a38c71");
/**
 * Split this component for RSC import
 */ const DEFAULT_MODE_STORAGE_KEY = exports.DEFAULT_MODE_STORAGE_KEY = 'mode';
const DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'color-scheme';
const DEFAULT_ATTRIBUTE = exports.DEFAULT_ATTRIBUTE = 'data-color-scheme';
function InitColorSchemeScript(options) {
    const { defaultMode = 'system', defaultLightColorScheme = 'light', defaultDarkColorScheme = 'dark', modeStorageKey = DEFAULT_MODE_STORAGE_KEY, colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY, attribute: initialAttribute = DEFAULT_ATTRIBUTE, colorSchemeNode = 'document.documentElement', nonce } = options || {};
    let setter = '';
    let attribute = initialAttribute;
    if (initialAttribute === 'class') attribute = '.%s';
    if (initialAttribute === 'data') attribute = '[data-%s]';
    if (attribute.startsWith('.')) {
        const selector = attribute.substring(1);
        setter += `${colorSchemeNode}.classList.remove('${selector}'.replace('%s', light), '${selector}'.replace('%s', dark));
      ${colorSchemeNode}.classList.add('${selector}'.replace('%s', colorScheme));`;
    }
    const matches = attribute.match(/\[([^\]]+)\]/); // case [data-color-scheme='%s'] or [data-color-scheme]
    if (matches) {
        const [attr, value] = matches[1].split('=');
        if (!value) setter += `${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', light));
      ${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', dark));`;
        setter += `
      ${colorSchemeNode}.setAttribute('${attr}'.replace('%s', colorScheme), ${value ? `${value}.replace('%s', colorScheme)` : '""'});`;
    } else setter += `${colorSchemeNode}.setAttribute('${attribute}', colorScheme);`;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)("script", {
        suppressHydrationWarning: true,
        nonce: typeof window === 'undefined' ? nonce : '',
        dangerouslySetInnerHTML: {
            __html: `(function() {
try {
  let colorScheme = '';
  const mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  const dark = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  const light = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  if (mode === 'system') {
    // handle system mode
    const mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = dark
    } else {
      colorScheme = light
    }
  }
  if (mode === 'light') {
    colorScheme = light;
  }
  if (mode === 'dark') {
    colorScheme = dark;
  }
  if (colorScheme) {
    ${setter}
  }
} catch(e){}})();`
        }
    }, "mui-color-scheme-init");
}

},{"ef652579247cd5d5":"6TFJp","b07e9c9c3771fb3a":"jMk1U","e1ecb68d89a38c71":"05iiF"}],"rbHNg":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireDefault = require("c1c40b040dbdc7d5").default;
var _interopRequireWildcard = require("6fc06eaa0ead1cc3").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = useCurrentColorScheme;
exports.getColorScheme = getColorScheme;
exports.getSystemMode = getSystemMode;
var React = _interopRequireWildcard(require("a1e57bd1e615fdc1"));
var _InitColorSchemeScript = require("54b6e4d95dd85459");
var _localStorageManager = _interopRequireDefault(require("2cdbf5ace57ee651"));
function noop() {}
function getSystemMode(mode) {
    if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {
        const mql = window.matchMedia('(prefers-color-scheme: dark)');
        if (mql.matches) return 'dark';
        return 'light';
    }
    return undefined;
}
function processState(state, callback) {
    if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') return callback('light');
    if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') return callback('dark');
    return undefined;
}
function getColorScheme(state) {
    return processState(state, (mode)=>{
        if (mode === 'light') return state.lightColorScheme;
        if (mode === 'dark') return state.darkColorScheme;
        return undefined;
    });
}
function useCurrentColorScheme(options) {
    const { defaultMode = 'light', defaultLightColorScheme, defaultDarkColorScheme, supportedColorSchemes = [], modeStorageKey = _InitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY, colorSchemeStorageKey = _InitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY, storageWindow = typeof window === 'undefined' ? undefined : window, storageManager = _localStorageManager.default, noSsr = false } = options;
    const joinedColorSchemes = supportedColorSchemes.join(',');
    const isMultiSchemes = supportedColorSchemes.length > 1;
    const modeStorage = React.useMemo(()=>storageManager?.({
            key: modeStorageKey,
            storageWindow
        }), [
        storageManager,
        modeStorageKey,
        storageWindow
    ]);
    const lightStorage = React.useMemo(()=>storageManager?.({
            key: `${colorSchemeStorageKey}-light`,
            storageWindow
        }), [
        storageManager,
        colorSchemeStorageKey,
        storageWindow
    ]);
    const darkStorage = React.useMemo(()=>storageManager?.({
            key: `${colorSchemeStorageKey}-dark`,
            storageWindow
        }), [
        storageManager,
        colorSchemeStorageKey,
        storageWindow
    ]);
    const [state, setState] = React.useState(()=>{
        const initialMode = modeStorage?.get(defaultMode) || defaultMode;
        const lightColorScheme = lightStorage?.get(defaultLightColorScheme) || defaultLightColorScheme;
        const darkColorScheme = darkStorage?.get(defaultDarkColorScheme) || defaultDarkColorScheme;
        return {
            mode: initialMode,
            systemMode: getSystemMode(initialMode),
            lightColorScheme,
            darkColorScheme
        };
    });
    const [isClient, setIsClient] = React.useState(noSsr || !isMultiSchemes);
    React.useEffect(()=>{
        setIsClient(true); // to rerender the component after hydration
    }, []);
    const colorScheme = getColorScheme(state);
    const setMode = React.useCallback((mode)=>{
        setState((currentState)=>{
            if (mode === currentState.mode) // do nothing if mode does not change
            return currentState;
            const newMode = mode ?? defaultMode;
            modeStorage?.set(newMode);
            return {
                ...currentState,
                mode: newMode,
                systemMode: getSystemMode(newMode)
            };
        });
    }, [
        modeStorage,
        defaultMode
    ]);
    const setColorScheme = React.useCallback((value)=>{
        if (!value) setState((currentState)=>{
            lightStorage?.set(defaultLightColorScheme);
            darkStorage?.set(defaultDarkColorScheme);
            return {
                ...currentState,
                lightColorScheme: defaultLightColorScheme,
                darkColorScheme: defaultDarkColorScheme
            };
        });
        else if (typeof value === 'string') {
            if (value && !joinedColorSchemes.includes(value)) console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
            else setState((currentState)=>{
                const newState = {
                    ...currentState
                };
                processState(currentState, (mode)=>{
                    if (mode === 'light') {
                        lightStorage?.set(value);
                        newState.lightColorScheme = value;
                    }
                    if (mode === 'dark') {
                        darkStorage?.set(value);
                        newState.darkColorScheme = value;
                    }
                });
                return newState;
            });
        } else setState((currentState)=>{
            const newState = {
                ...currentState
            };
            const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
            const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
            if (newLightColorScheme) {
                if (!joinedColorSchemes.includes(newLightColorScheme)) console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
                else {
                    newState.lightColorScheme = newLightColorScheme;
                    lightStorage?.set(newLightColorScheme);
                }
            }
            if (newDarkColorScheme) {
                if (!joinedColorSchemes.includes(newDarkColorScheme)) console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
                else {
                    newState.darkColorScheme = newDarkColorScheme;
                    darkStorage?.set(newDarkColorScheme);
                }
            }
            return newState;
        });
    }, [
        joinedColorSchemes,
        lightStorage,
        darkStorage,
        defaultLightColorScheme,
        defaultDarkColorScheme
    ]);
    const handleMediaQuery = React.useCallback((event)=>{
        if (state.mode === 'system') setState((currentState)=>{
            const systemMode = event?.matches ? 'dark' : 'light';
            // Early exit, nothing changed.
            if (currentState.systemMode === systemMode) return currentState;
            return {
                ...currentState,
                systemMode
            };
        });
    }, [
        state.mode
    ]);
    // Ref hack to avoid adding handleMediaQuery as a dep
    const mediaListener = React.useRef(handleMediaQuery);
    mediaListener.current = handleMediaQuery;
    React.useEffect(()=>{
        if (typeof window.matchMedia !== 'function' || !isMultiSchemes) return undefined;
        const handler = (...args)=>mediaListener.current(...args);
        // Always listen to System preference
        const media = window.matchMedia('(prefers-color-scheme: dark)');
        // Intentionally use deprecated listener methods to support iOS & old browsers
        media.addListener(handler);
        handler(media);
        return ()=>{
            media.removeListener(handler);
        };
    }, [
        isMultiSchemes
    ]);
    // Handle when localStorage has changed
    React.useEffect(()=>{
        if (isMultiSchemes) {
            const unsubscribeMode = modeStorage?.subscribe((value)=>{
                if (!value || [
                    'light',
                    'dark',
                    'system'
                ].includes(value)) setMode(value || defaultMode);
            }) || noop;
            const unsubscribeLight = lightStorage?.subscribe((value)=>{
                if (!value || joinedColorSchemes.match(value)) setColorScheme({
                    light: value
                });
            }) || noop;
            const unsubscribeDark = darkStorage?.subscribe((value)=>{
                if (!value || joinedColorSchemes.match(value)) setColorScheme({
                    dark: value
                });
            }) || noop;
            return ()=>{
                unsubscribeMode();
                unsubscribeLight();
                unsubscribeDark();
            };
        }
        return undefined;
    }, [
        setColorScheme,
        setMode,
        joinedColorSchemes,
        defaultMode,
        storageWindow,
        isMultiSchemes,
        modeStorage,
        lightStorage,
        darkStorage
    ]);
    return {
        ...state,
        mode: isClient ? state.mode : undefined,
        systemMode: isClient ? state.systemMode : undefined,
        colorScheme: isClient ? colorScheme : undefined,
        setMode,
        setColorScheme
    };
}

},{"c1c40b040dbdc7d5":"1P3rZ","6fc06eaa0ead1cc3":"6TFJp","a1e57bd1e615fdc1":"jMk1U","54b6e4d95dd85459":"6VlWa","2cdbf5ace57ee651":"gv2rJ"}],"gv2rJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function noop() {}
const localStorageManager = ({ key, storageWindow })=>{
    if (!storageWindow && typeof window !== 'undefined') storageWindow = window;
    return {
        get (defaultValue) {
            if (typeof window === 'undefined') return undefined;
            if (!storageWindow) return defaultValue;
            let value;
            try {
                value = storageWindow.localStorage.getItem(key);
            } catch  {
            // Unsupported
            }
            return value || defaultValue;
        },
        set: (value)=>{
            if (storageWindow) try {
                storageWindow.localStorage.setItem(key, value);
            } catch  {
            // Unsupported
            }
        },
        subscribe: (handler)=>{
            if (!storageWindow) return noop;
            const listener = (event)=>{
                const value = event.newValue;
                if (event.key === key) handler(value);
            };
            storageWindow.addEventListener('storage', listener);
            return ()=>{
                storageWindow.removeEventListener('storage', listener);
            };
        }
    };
};
var _default = exports.default = localStorageManager;

},{}],"dqYkb":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("e5e8499e17180f19").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _deepmerge = _interopRequireDefault(require("f9d07c742884f482"));
var _cssVarsParser = _interopRequireDefault(require("1bab20d6b631648d"));
function prepareCssVars(theme, parserConfig = {}) {
    const { getSelector = defaultGetSelector, disableCssColorScheme, colorSchemeSelector: selector } = parserConfig;
    // @ts-ignore - ignore components do not exist
    const { colorSchemes = {}, components, defaultColorScheme = 'light', ...otherTheme } = theme;
    const { vars: rootVars, css: rootCss, varsWithDefaults: rootVarsWithDefaults } = (0, _cssVarsParser.default)(otherTheme, parserConfig);
    let themeVars = rootVarsWithDefaults;
    const colorSchemesMap = {};
    const { [defaultColorScheme]: defaultScheme, ...otherColorSchemes } = colorSchemes;
    Object.entries(otherColorSchemes || {}).forEach(([key, scheme])=>{
        const { vars, css, varsWithDefaults } = (0, _cssVarsParser.default)(scheme, parserConfig);
        themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);
        colorSchemesMap[key] = {
            css,
            vars
        };
    });
    if (defaultScheme) {
        // default color scheme vars should be merged last to set as default
        const { css, vars, varsWithDefaults } = (0, _cssVarsParser.default)(defaultScheme, parserConfig);
        themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);
        colorSchemesMap[defaultColorScheme] = {
            css,
            vars
        };
    }
    function defaultGetSelector(colorScheme, cssObject) {
        let rule = selector;
        if (selector === 'class') rule = '.%s';
        if (selector === 'data') rule = '[data-%s]';
        if (selector?.startsWith('data-') && !selector.includes('%s')) // 'data-joy-color-scheme' -> '[data-joy-color-scheme="%s"]'
        rule = `[${selector}="%s"]`;
        if (colorScheme) {
            if (rule === 'media') {
                if (theme.defaultColorScheme === colorScheme) return ':root';
                const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;
                return {
                    [`@media (prefers-color-scheme: ${mode})`]: {
                        ':root': cssObject
                    }
                };
            }
            if (rule) {
                if (theme.defaultColorScheme === colorScheme) return `:root, ${rule.replace('%s', String(colorScheme))}`;
                return rule.replace('%s', String(colorScheme));
            }
        }
        return ':root';
    }
    const generateThemeVars = ()=>{
        let vars = {
            ...rootVars
        };
        Object.entries(colorSchemesMap).forEach(([, { vars: schemeVars }])=>{
            vars = (0, _deepmerge.default)(vars, schemeVars);
        });
        return vars;
    };
    const generateStyleSheets = ()=>{
        const stylesheets = [];
        const colorScheme = theme.defaultColorScheme || 'light';
        function insertStyleSheet(key, css) {
            if (Object.keys(css).length) stylesheets.push(typeof key === 'string' ? {
                [key]: {
                    ...css
                }
            } : key);
        }
        insertStyleSheet(getSelector(undefined, {
            ...rootCss
        }), rootCss);
        const { [colorScheme]: defaultSchemeVal, ...other } = colorSchemesMap;
        if (defaultSchemeVal) {
            // default color scheme has to come before other color schemes
            const { css } = defaultSchemeVal;
            const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;
            const finalCss = !disableCssColorScheme && cssColorSheme ? {
                colorScheme: cssColorSheme,
                ...css
            } : {
                ...css
            };
            insertStyleSheet(getSelector(colorScheme, {
                ...finalCss
            }), finalCss);
        }
        Object.entries(other).forEach(([key, { css }])=>{
            const cssColorSheme = colorSchemes[key]?.palette?.mode;
            const finalCss = !disableCssColorScheme && cssColorSheme ? {
                colorScheme: cssColorSheme,
                ...css
            } : {
                ...css
            };
            insertStyleSheet(getSelector(key, {
                ...finalCss
            }), finalCss);
        });
        return stylesheets;
    };
    return {
        vars: themeVars,
        generateThemeVars,
        generateStyleSheets
    };
}
var _default = exports.default = prepareCssVars;

},{"e5e8499e17180f19":"1P3rZ","f9d07c742884f482":"bLPf1","1bab20d6b631648d":"9miFX"}],"9miFX":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.assignNestedKeys = void 0;
exports.default = cssVarsParser;
exports.walkObjectDeep = void 0;
/**
 * This function create an object from keys, value and then assign to target
 *
 * @param {Object} obj : the target object to be assigned
 * @param {string[]} keys
 * @param {string | number} value
 *
 * @example
 * const source = {}
 * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')
 * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }
 *
 * @example
 * const source = { palette: { primary: 'var(--palette-primary)' } }
 * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')
 * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }
 */ const assignNestedKeys = (obj, keys, value, arrayKeys = [])=>{
    let temp = obj;
    keys.forEach((k, index)=>{
        if (index === keys.length - 1) {
            if (Array.isArray(temp)) temp[Number(k)] = value;
            else if (temp && typeof temp === 'object') temp[k] = value;
        } else if (temp && typeof temp === 'object') {
            if (!temp[k]) temp[k] = arrayKeys.includes(k) ? [] : {};
            temp = temp[k];
        }
    });
};
/**
 *
 * @param {Object} obj : source object
 * @param {Function} callback : a function that will be called when
 *                   - the deepest key in source object is reached
 *                   - the value of the deepest key is NOT `undefined` | `null`
 *
 * @example
 * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)
 * // ['palette', 'primary', 'main'] '#000000'
 */ exports.assignNestedKeys = assignNestedKeys;
const walkObjectDeep = (obj, callback, shouldSkipPaths)=>{
    function recurse(object, parentKeys = [], arrayKeys = []) {
        Object.entries(object).forEach(([key, value])=>{
            if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([
                ...parentKeys,
                key
            ])) {
                if (value !== undefined && value !== null) {
                    if (typeof value === 'object' && Object.keys(value).length > 0) recurse(value, [
                        ...parentKeys,
                        key
                    ], Array.isArray(value) ? [
                        ...arrayKeys,
                        key
                    ] : arrayKeys);
                    else callback([
                        ...parentKeys,
                        key
                    ], value, arrayKeys);
                }
            }
        });
    }
    recurse(obj);
};
exports.walkObjectDeep = walkObjectDeep;
const getCssValue = (keys, value)=>{
    if (typeof value === 'number') {
        if ([
            'lineHeight',
            'fontWeight',
            'opacity',
            'zIndex'
        ].some((prop)=>keys.includes(prop))) // CSS property that are unitless
        return value;
        const lastKey = keys[keys.length - 1];
        if (lastKey.toLowerCase().includes('opacity')) // opacity values are unitless
        return value;
        return `${value}px`;
    }
    return value;
};
/**
 * a function that parse theme and return { css, vars }
 *
 * @param {Object} theme
 * @param {{
 *  prefix?: string,
 *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean
 * }} options.
 *  `prefix`: The prefix of the generated CSS variables. This function does not change the value.
 *
 * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme).
 *
 * @example
 * const { css, vars } = parser({
 *   fontSize: 12,
 *   lineHeight: 1.2,
 *   palette: { primary: { 500: 'var(--color)' } }
 * }, { prefix: 'foo' })
 *
 * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--color)' }
 * console.log(vars) // { fontSize: 'var(--foo-fontSize)', lineHeight: 'var(--foo-lineHeight)', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }
 */ function cssVarsParser(theme, options) {
    const { prefix, shouldSkipGeneratingVar } = options || {};
    const css = {};
    const vars = {};
    const varsWithDefaults = {};
    walkObjectDeep(theme, (keys, value, arrayKeys)=>{
        if (typeof value === 'string' || typeof value === 'number') {
            if (!shouldSkipGeneratingVar || !shouldSkipGeneratingVar(keys, value)) {
                // only create css & var if `shouldSkipGeneratingVar` return false
                const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;
                const resolvedValue = getCssValue(keys, value);
                Object.assign(css, {
                    [cssVar]: resolvedValue
                });
                assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
                assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${resolvedValue})`, arrayKeys);
            }
        }
    }, (keys)=>keys[0] === 'vars' // skip 'vars/*' paths
    );
    return {
        css,
        vars,
        varsWithDefaults
    };
}

},{}],"fw4hW":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = prepareTypographyVars;
function prepareTypographyVars(typography) {
    const vars = {};
    const entries = Object.entries(typography);
    entries.forEach((entry)=>{
        const [key, value] = entry;
        if (typeof value === 'object') vars[key] = `${value.fontStyle ? `${value.fontStyle} ` : ''}${value.fontVariant ? `${value.fontVariant} ` : ''}${value.fontWeight ? `${value.fontWeight} ` : ''}${value.fontStretch ? `${value.fontStretch} ` : ''}${value.fontSize || ''}${value.lineHeight ? `/${value.lineHeight} ` : ''}${value.fontFamily || ''}`;
    });
    return vars;
}

},{}],"dbpMK":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("191401da11436a57").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _prepareCssVars = _interopRequireDefault(require("1d6d5d48f41948fe"));
var _getColorSchemeSelector = require("57053e77e0adcb4d");
var _InitColorSchemeScript = require("bd22249bfb50e2b0");
function createCssVarsTheme({ colorSchemeSelector = `[${_InitColorSchemeScript.DEFAULT_ATTRIBUTE}="%s"]`, ...theme }) {
    const output = theme;
    const result = (0, _prepareCssVars.default)(output, {
        ...theme,
        prefix: theme.cssVarPrefix,
        colorSchemeSelector
    });
    output.vars = result.vars;
    output.generateThemeVars = result.generateThemeVars;
    output.generateStyleSheets = result.generateStyleSheets;
    output.colorSchemeSelector = colorSchemeSelector;
    output.getColorSchemeSelector = (0, _getColorSchemeSelector.createGetColorSchemeSelector)(colorSchemeSelector);
    return output;
}
var _default = exports.default = createCssVarsTheme;

},{"191401da11436a57":"1P3rZ","1d6d5d48f41948fe":"dqYkb","57053e77e0adcb4d":"drAM8","bd22249bfb50e2b0":"6VlWa"}],"drAM8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createGetColorSchemeSelector = createGetColorSchemeSelector;
/* eslint-disable import/prefer-default-export */ function createGetColorSchemeSelector(selector) {
    return function getColorSchemeSelector(colorScheme) {
        if (selector === 'media') {
            if (colorScheme !== 'light' && colorScheme !== 'dark') console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${colorScheme}'.`);
            return `@media (prefers-color-scheme: ${colorScheme})`;
        }
        if (selector) {
            if (selector.startsWith('data-') && !selector.includes('%s')) return `[${selector}="${colorScheme}"] &`;
            if (selector === 'class') return `.${colorScheme} &`;
            if (selector === 'data') return `[data-${colorScheme}] &`;
            return `${selector.replace('%s', colorScheme)} &`;
        }
        return '&';
    };
}

},{}],"5B9Rs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatMuiErrorMessage = require("@mui/utils/formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
var _deepmerge = require("@mui/utils/deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _styleFunctionSx = require("@mui/system/styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _createTheme = require("@mui/system/createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _generateUtilityClass = require("@mui/utils/generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _createMixinsJs = require("./createMixins.js");
var _createMixinsJsDefault = parcelHelpers.interopDefault(_createMixinsJs);
var _createPaletteJs = require("./createPalette.js");
var _createPaletteJsDefault = parcelHelpers.interopDefault(_createPaletteJs);
var _createTypographyJs = require("./createTypography.js");
var _createTypographyJsDefault = parcelHelpers.interopDefault(_createTypographyJs);
var _shadowsJs = require("./shadows.js");
var _shadowsJsDefault = parcelHelpers.interopDefault(_shadowsJs);
var _createTransitionsJs = require("./createTransitions.js");
var _createTransitionsJsDefault = parcelHelpers.interopDefault(_createTransitionsJs);
var _zIndexJs = require("./zIndex.js");
var _zIndexJsDefault = parcelHelpers.interopDefault(_zIndexJs);
var _stringifyThemeJs = require("./stringifyTheme.js");
function createThemeNoVars(options = {}, ...args) {
    const { breakpoints: breakpointsInput, mixins: mixinsInput = {}, spacing: spacingInput, palette: paletteInput = {}, transitions: transitionsInput = {}, typography: typographyInput = {}, shape: shapeInput, ...other } = options;
    if (options.vars && // The error should throw only for the root theme creation because user is not allowed to use a custom node `vars`.
    // `generateThemeVars` is the closest identifier for checking that the `options` is a result of `createTheme` with CSS variables so that user can create new theme for nested ThemeProvider.
    options.generateThemeVars === undefined) throw new Error("MUI: `vars` is a private field used for CSS variables support.\nPlease use another name or follow the [docs](https://mui.com/material-ui/customization/css-theme-variables/usage/) to enable the feature.");
    const palette = (0, _createPaletteJsDefault.default)(paletteInput);
    const systemTheme = (0, _createThemeDefault.default)(options);
    let muiTheme = (0, _deepmergeDefault.default)(systemTheme, {
        mixins: (0, _createMixinsJsDefault.default)(systemTheme.breakpoints, mixinsInput),
        palette,
        // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
        shadows: (0, _shadowsJsDefault.default).slice(),
        typography: (0, _createTypographyJsDefault.default)(palette, typographyInput),
        transitions: (0, _createTransitionsJsDefault.default)(transitionsInput),
        zIndex: {
            ...(0, _zIndexJsDefault.default)
        }
    });
    muiTheme = (0, _deepmergeDefault.default)(muiTheme, other);
    muiTheme = args.reduce((acc, argument)=>(0, _deepmergeDefault.default)(acc, argument), muiTheme);
    {
        // TODO v6: Refactor to use globalStateClassesMapping from @mui/utils once `readOnly` state class is used in Rating component.
        const stateClasses = [
            'active',
            'checked',
            'completed',
            'disabled',
            'error',
            'expanded',
            'focused',
            'focusVisible',
            'required',
            'selected'
        ];
        const traverse = (node, component)=>{
            let key;
            // eslint-disable-next-line guard-for-in
            for(key in node){
                const child = node[key];
                if (stateClasses.includes(key) && Object.keys(child).length > 0) {
                    {
                        const stateClass = (0, _generateUtilityClassDefault.default)('', key);
                        console.error([
                            `MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`,
                            'You can not override it like this: ',
                            JSON.stringify(node, null, 2),
                            '',
                            `Instead, you need to use the '&.${stateClass}' syntax:`,
                            JSON.stringify({
                                root: {
                                    [`&.${stateClass}`]: child
                                }
                            }, null, 2),
                            '',
                            'https://mui.com/r/state-classes-guide'
                        ].join('\n'));
                    }
                    // Remove the style to prevent global conflicts.
                    node[key] = {};
                }
            }
        };
        Object.keys(muiTheme.components).forEach((component)=>{
            const styleOverrides = muiTheme.components[component].styleOverrides;
            if (styleOverrides && component.startsWith('Mui')) traverse(styleOverrides, component);
        });
    }
    muiTheme.unstable_sxConfig = {
        ...(0, _styleFunctionSx.unstable_defaultSxConfig),
        ...other?.unstable_sxConfig
    };
    muiTheme.unstable_sx = function sx(props) {
        return (0, _styleFunctionSxDefault.default)({
            sx: props,
            theme: this
        });
    };
    muiTheme.toRuntimeSource = (0, _stringifyThemeJs.stringifyTheme); // for Pigment CSS integration
    return muiTheme;
}
exports.default = createThemeNoVars;

},{"@mui/utils/formatMuiErrorMessage":"cXsuk","@mui/utils/deepmerge":"bLPf1","@mui/system/styleFunctionSx":"3qmy1","@mui/system/createTheme":"kryy7","@mui/utils/generateUtilityClass":"iAc9p","./createMixins.js":"1qGph","./createPalette.js":"4wkrW","./createTypography.js":"j1Yql","./shadows.js":"cAFPa","./createTransitions.js":"5CFQT","./zIndex.js":"aGXYe","./stringifyTheme.js":"2sNJu","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"kryy7":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("dd1c30bf430b5bba").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _createTheme.default;
    }
});
Object.defineProperty(exports, "private_createBreakpoints", {
    enumerable: true,
    get: function() {
        return _createBreakpoints.default;
    }
});
Object.defineProperty(exports, "unstable_applyStyles", {
    enumerable: true,
    get: function() {
        return _applyStyles.default;
    }
});
var _createTheme = _interopRequireDefault(require("bdc18df69795eaba"));
var _createBreakpoints = _interopRequireDefault(require("48b86d2ba11b61d7"));
var _applyStyles = _interopRequireDefault(require("a63ca49c1a3790b7"));

},{"dd1c30bf430b5bba":"1P3rZ","bdc18df69795eaba":"ee3Pj","48b86d2ba11b61d7":"k5Ify","a63ca49c1a3790b7":"gMzgD"}],"ee3Pj":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("a7a69b6314ef6820").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _deepmerge = _interopRequireDefault(require("f08de1e574d96be4"));
var _createBreakpoints = _interopRequireDefault(require("fef76d655aaa132e"));
var _cssContainerQueries = _interopRequireDefault(require("83f3137514b70a38"));
var _shape = _interopRequireDefault(require("e487320954df9b05"));
var _createSpacing = _interopRequireDefault(require("4a83e44bc56a5742"));
var _styleFunctionSx = _interopRequireDefault(require("5ae03db25d336f5a"));
var _defaultSxConfig = _interopRequireDefault(require("e9031ccc4da151b1"));
var _applyStyles = _interopRequireDefault(require("555272fc77b24fc5"));
function createTheme(options = {}, ...args) {
    const { breakpoints: breakpointsInput = {}, palette: paletteInput = {}, spacing: spacingInput, shape: shapeInput = {}, ...other } = options;
    const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
    const spacing = (0, _createSpacing.default)(spacingInput);
    let muiTheme = (0, _deepmerge.default)({
        breakpoints,
        direction: 'ltr',
        components: {},
        // Inject component definitions.
        palette: {
            mode: 'light',
            ...paletteInput
        },
        spacing,
        shape: {
            ..._shape.default,
            ...shapeInput
        }
    }, other);
    muiTheme = (0, _cssContainerQueries.default)(muiTheme);
    muiTheme.applyStyles = _applyStyles.default;
    muiTheme = args.reduce((acc, argument)=>(0, _deepmerge.default)(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = {
        ..._defaultSxConfig.default,
        ...other?.unstable_sxConfig
    };
    muiTheme.unstable_sx = function sx(props) {
        return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
        });
    };
    return muiTheme;
}
var _default = exports.default = createTheme;

},{"a7a69b6314ef6820":"1P3rZ","f08de1e574d96be4":"bLPf1","fef76d655aaa132e":"k5Ify","83f3137514b70a38":"6Ko3S","e487320954df9b05":"foDcD","4a83e44bc56a5742":"xzviA","5ae03db25d336f5a":"b0FDg","e9031ccc4da151b1":"4f7E8","555272fc77b24fc5":"gMzgD"}],"k5Ify":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.breakpointKeys = void 0;
exports.default = createBreakpoints;
// Sorted ASC by size. That's important.
// It can't be configured as it's used statically for propTypes.
const breakpointKeys = exports.breakpointKeys = [
    'xs',
    'sm',
    'md',
    'lg',
    'xl'
];
const sortBreakpointsValues = (values)=>{
    const breakpointsAsArray = Object.keys(values).map((key)=>({
            key,
            val: values[key]
        })) || [];
    // Sort in ascending order
    breakpointsAsArray.sort((breakpoint1, breakpoint2)=>breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj)=>{
        return {
            ...acc,
            [obj.key]: obj.val
        };
    }, {});
};
// Keep in mind that @media is inclusive by the CSS specification.
function createBreakpoints(breakpoints) {
    const { // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536 // large screen
    }, unit = 'px', step = 5, ...other } = breakpoints;
    const sortedValues = sortBreakpointsValues(values);
    const keys = Object.keys(sortedValues);
    function up(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start, end) {
        const endIndex = keys.indexOf(end);
        return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
    }
    function only(key) {
        if (keys.indexOf(key) + 1 < keys.length) return between(key, keys[keys.indexOf(key) + 1]);
        return up(key);
    }
    function not(key) {
        // handle first and last key separately, for better readability
        const keyIndex = keys.indexOf(key);
        if (keyIndex === 0) return up(keys[1]);
        if (keyIndex === keys.length - 1) return down(keys[keyIndex]);
        return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
    }
    return {
        keys,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit,
        ...other
    };
}

},{}],"foDcD":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
const shape = {
    borderRadius: 4
};
var _default = exports.default = shape;

},{}],"xzviA":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = createSpacing;
var _spacing = require("2efeaeaa34925f80");
// The different signatures imply different meaning for their arguments that can't be expressed structurally.
// We express the difference with variable names.
function createSpacing(spacingInput = 8, // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
// Smaller components, such as icons, can align to a 4dp grid.
// https://m2.material.io/design/layout/understanding-layout.html
transform = (0, _spacing.createUnarySpacing)({
    spacing: spacingInput
})) {
    // Already transformed.
    if (spacingInput.mui) return spacingInput;
    const spacing = (...argsInput)=>{
        if (!(argsInput.length <= 4)) console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        const args = argsInput.length === 0 ? [
            1
        ] : argsInput;
        return args.map((argument)=>{
            const output = transform(argument);
            return typeof output === 'number' ? `${output}px` : output;
        }).join(' ');
    };
    spacing.mui = true;
    return spacing;
}

},{"2efeaeaa34925f80":"cUfeI"}],"gMzgD":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = applyStyles;
/**
 * A universal utility to style components with multiple color modes. Always use it from the theme object.
 * It works with:
 *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)
 *  - [CSS theme variables](https://mui.com/material-ui/customization/css-theme-variables/overview/)
 *  - Zero-runtime engine
 *
 * Tips: Use an array over object spread and place `theme.applyStyles()` last.
 *
 * With the styled function:
 * ✅ [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]
 * 🚫 { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}
 *
 * With the sx prop:
 * ✅ [{ background: '#e5e5e5' }, theme => theme.applyStyles('dark', { background: '#1c1c1c' })]
 * 🚫 { background: '#e5e5e5', ...theme => theme.applyStyles('dark', { background: '#1c1c1c' })}
 *
 * @example
 * 1. using with `styled`:
 * ```jsx
 *   const Component = styled('div')(({ theme }) => [
 *     { background: '#e5e5e5' },
 *     theme.applyStyles('dark', {
 *       background: '#1c1c1c',
 *       color: '#fff',
 *     }),
 *   ]);
 * ```
 *
 * @example
 * 2. using with `sx` prop:
 * ```jsx
 *   <Box sx={[
 *     { background: '#e5e5e5' },
 *     theme => theme.applyStyles('dark', {
 *        background: '#1c1c1c',
 *        color: '#fff',
 *      }),
 *     ]}
 *   />
 * ```
 *
 * @example
 * 3. theming a component:
 * ```jsx
 *   extendTheme({
 *     components: {
 *       MuiButton: {
 *         styleOverrides: {
 *           root: ({ theme }) => [
 *             { background: '#e5e5e5' },
 *             theme.applyStyles('dark', {
 *               background: '#1c1c1c',
 *               color: '#fff',
 *             }),
 *           ],
 *         },
 *       }
 *     }
 *   })
 *```
 */ function applyStyles(key, styles) {
    // @ts-expect-error this is 'any' type
    const theme = this;
    if (theme.vars) {
        if (!theme.colorSchemes?.[key] || typeof theme.getColorSchemeSelector !== 'function') return {};
        // If CssVarsProvider is used as a provider, returns '*:where({selector}) &'
        let selector = theme.getColorSchemeSelector(key);
        if (selector === '&') return styles;
        if (selector.includes('data-') || selector.includes('.')) // '*' is required as a workaround for Emotion issue (https://github.com/emotion-js/emotion/issues/2836)
        selector = `*:where(${selector.replace(/\s*&$/, '')}) &`;
        return {
            [selector]: styles
        };
    }
    if (theme.palette.mode === key) return styles;
    return {};
}

},{}],"iAc9p":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("982aadf77fb2f660").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _generateUtilityClass.default;
    }
});
var _generateUtilityClass = _interopRequireWildcard(require("f12031ccb7ca5241"));
Object.keys(_generateUtilityClass).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _generateUtilityClass[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _generateUtilityClass[key];
        }
    });
});

},{"982aadf77fb2f660":"6TFJp","f12031ccb7ca5241":"fuc4A"}],"fuc4A":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("e208e65ce194841a").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = generateUtilityClass;
exports.globalStateClasses = void 0;
exports.isGlobalState = isGlobalState;
var _ClassNameGenerator = _interopRequireDefault(require("99373aa8fc6e45eb"));
const globalStateClasses = exports.globalStateClasses = {
    active: 'active',
    checked: 'checked',
    completed: 'completed',
    disabled: 'disabled',
    error: 'error',
    expanded: 'expanded',
    focused: 'focused',
    focusVisible: 'focusVisible',
    open: 'open',
    readOnly: 'readOnly',
    required: 'required',
    selected: 'selected'
};
function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
    const globalStateClass = globalStateClasses[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
}
function isGlobalState(slot) {
    return globalStateClasses[slot] !== undefined;
}

},{"e208e65ce194841a":"1P3rZ","99373aa8fc6e45eb":"16RUE"}],"1qGph":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createMixins);
function createMixins(breakpoints, mixins) {
    return {
        toolbar: {
            minHeight: 56,
            [breakpoints.up('xs')]: {
                '@media (orientation: landscape)': {
                    minHeight: 48
                }
            },
            [breakpoints.up('sm')]: {
                minHeight: 64
            }
        },
        ...mixins
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"j1Yql":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createTypography);
var _deepmerge = require("@mui/utils/deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
function round(value) {
    return Math.round(value * 1e5) / 1e5;
}
const caseAllCaps = {
    textTransform: 'uppercase'
};
const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
function createTypography(palette, typography) {
    const { fontFamily = defaultFontFamily, // The default font size of the Material Specification.
    fontSize = 14, // px
    fontWeightLight = 300, fontWeightRegular = 400, fontWeightMedium = 500, fontWeightBold = 700, // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize = 16, // Apply the CSS properties to all the variants.
    allVariants, pxToRem: pxToRem2, ...other } = typeof typography === 'function' ? typography(palette) : typography;
    if (typeof fontSize !== 'number') console.error('MUI: `fontSize` is required to be a number.');
    if (typeof htmlFontSize !== 'number') console.error('MUI: `htmlFontSize` is required to be a number.');
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size)=>`${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing)=>({
            fontFamily,
            fontWeight,
            fontSize: pxToRem(size),
            // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
            lineHeight,
            // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
            // across font-families can cause issues with the kerning.
            ...fontFamily === defaultFontFamily ? {
                letterSpacing: `${round(letterSpacing / size)}em`
            } : {},
            ...casing,
            ...allVariants
        });
    const variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
        // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
        inherit: {
            fontFamily: 'inherit',
            fontWeight: 'inherit',
            fontSize: 'inherit',
            lineHeight: 'inherit',
            letterSpacing: 'inherit'
        }
    };
    return (0, _deepmergeDefault.default)({
        htmlFontSize,
        pxToRem,
        fontFamily,
        fontSize,
        fontWeightLight,
        fontWeightRegular,
        fontWeightMedium,
        fontWeightBold,
        ...variants
    }, other, {
        clone: false // No need to clone deep
    });
}

},{"@mui/utils/deepmerge":"bLPf1","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cAFPa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const shadowKeyUmbraOpacity = 0.2;
const shadowKeyPenumbraOpacity = 0.14;
const shadowAmbientShadowOpacity = 0.12;
function createShadow(...px) {
    return [
        `${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`,
        `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`,
        `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`
    ].join(',');
}
// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
const shadows = [
    'none',
    createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0),
    createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0),
    createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0),
    createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0),
    createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0),
    createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0),
    createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1),
    createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2),
    createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2),
    createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3),
    createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3),
    createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4),
    createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4),
    createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4),
    createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5),
    createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5),
    createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5),
    createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6),
    createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6),
    createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7),
    createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7),
    createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7),
    createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8),
    createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)
];
exports.default = shadows;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5CFQT":[function(require,module,exports,__globalThis) {
// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
// to learn the context in which each easing should be used.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easing", ()=>easing);
parcelHelpers.export(exports, "duration", ()=>duration);
parcelHelpers.export(exports, "default", ()=>createTransitions);
const easing = {
    // This is the most common easing curve.
    easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
};
const duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
};
function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height) {
    if (!height) return 0;
    const constant = height / 36;
    // https://www.desmos.com/calculator/vbrp3ggqet
    return Math.min(Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10), 3000);
}
function createTransitions(inputTransitions) {
    const mergedEasing = {
        ...easing,
        ...inputTransitions.easing
    };
    const mergedDuration = {
        ...duration,
        ...inputTransitions.duration
    };
    const create = (props = [
        'all'
    ], options = {})=>{
        const { duration: durationOption = mergedDuration.standard, easing: easingOption = mergedEasing.easeInOut, delay = 0, ...other } = options;
        {
            const isString = (value)=>typeof value === 'string';
            const isNumber = (value)=>!Number.isNaN(parseFloat(value));
            if (!isString(props) && !Array.isArray(props)) console.error('MUI: Argument "props" must be a string or Array.');
            if (!isNumber(durationOption) && !isString(durationOption)) console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
            if (!isString(easingOption)) console.error('MUI: Argument "easing" must be a string.');
            if (!isNumber(delay) && !isString(delay)) console.error('MUI: Argument "delay" must be a number or a string.');
            if (typeof options !== 'object') console.error([
                'MUI: Secong argument of transition.create must be an object.',
                "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"
            ].join('\n'));
            if (Object.keys(other).length !== 0) console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
        }
        return (Array.isArray(props) ? props : [
            props
        ]).map((animatedProp)=>`${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
    };
    return {
        getAutoHeightDuration,
        create,
        ...inputTransitions,
        easing: mergedEasing,
        duration: mergedDuration
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aGXYe":[function(require,module,exports,__globalThis) {
// We need to centralize the zIndex definitions as they work
// like global values in the browser.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const zIndex = {
    mobileStepper: 1000,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
};
exports.default = zIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"2sNJu":[function(require,module,exports,__globalThis) {
/* eslint-disable import/prefer-default-export */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * `baseTheme` usually comes from `createTheme()` or `extendTheme()`.
 *
 * This function is intended to be used with zero-runtime CSS-in-JS like Pigment CSS
 * For example, in a Next.js project:
 *
 * ```js
 * // next.config.js
 * const { extendTheme } = require('@mui/material/styles');
 *
 * const theme = extendTheme();
 * // `.toRuntimeSource` is Pigment CSS specific to create a theme that is available at runtime.
 * theme.toRuntimeSource = stringifyTheme;
 *
 * module.exports = withPigment({
 *  theme,
 * });
 * ```
 */ parcelHelpers.export(exports, "stringifyTheme", ()=>stringifyTheme);
var _deepmerge = require("@mui/utils/deepmerge");
function isSerializable(val) {
    return (0, _deepmerge.isPlainObject)(val) || typeof val === 'undefined' || typeof val === 'string' || typeof val === 'boolean' || typeof val === 'number' || Array.isArray(val);
}
function stringifyTheme(baseTheme = {}) {
    const serializableTheme = {
        ...baseTheme
    };
    function serializeTheme(object) {
        const array = Object.entries(object);
        // eslint-disable-next-line no-plusplus
        for(let index = 0; index < array.length; index++){
            const [key, value] = array[index];
            if (!isSerializable(value) || key.startsWith('unstable_')) delete object[key];
            else if ((0, _deepmerge.isPlainObject)(value)) {
                object[key] = {
                    ...value
                };
                serializeTheme(object[key]);
            }
        }
    }
    serializeTheme(serializableTheme);
    return `import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';

const theme = ${JSON.stringify(serializableTheme, null, 2)};

theme.breakpoints = createBreakpoints(theme.breakpoints || {});
theme.transitions = createTransitions(theme.transitions || {});

export default theme;`;
}

},{"@mui/utils/deepmerge":"bLPf1","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"aPdYE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOpacity", ()=>getOpacity);
parcelHelpers.export(exports, "getOverlays", ()=>getOverlays);
parcelHelpers.export(exports, "default", ()=>createColorScheme);
var _createPaletteJs = require("./createPalette.js");
var _createPaletteJsDefault = parcelHelpers.interopDefault(_createPaletteJs);
var _getOverlayAlphaJs = require("./getOverlayAlpha.js");
var _getOverlayAlphaJsDefault = parcelHelpers.interopDefault(_getOverlayAlphaJs);
const defaultDarkOverlays = [
    ...Array(25)
].map((_, index)=>{
    if (index === 0) return 'none';
    const overlay = (0, _getOverlayAlphaJsDefault.default)(index);
    return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
});
function getOpacity(mode) {
    return {
        inputPlaceholder: mode === 'dark' ? 0.5 : 0.42,
        inputUnderline: mode === 'dark' ? 0.7 : 0.42,
        switchTrackDisabled: mode === 'dark' ? 0.2 : 0.12,
        switchTrack: mode === 'dark' ? 0.3 : 0.38
    };
}
function getOverlays(mode) {
    return mode === 'dark' ? defaultDarkOverlays : [];
}
function createColorScheme(options) {
    const { palette: paletteInput = {
        mode: 'light'
    }, // need to cast to avoid module augmentation test
    opacity, overlays, ...rest } = options;
    const palette = (0, _createPaletteJsDefault.default)(paletteInput);
    return {
        palette,
        opacity: {
            ...getOpacity(palette.mode),
            ...opacity
        },
        overlays: overlays || getOverlays(palette.mode),
        ...rest
    };
}

},{"./createPalette.js":"4wkrW","./getOverlayAlpha.js":"9rq2H","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"9rq2H":[function(require,module,exports,__globalThis) {
// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOverlayAlpha);
function getOverlayAlpha(elevation) {
    let alphaValue;
    if (elevation < 1) alphaValue = 5.11916 * elevation ** 2;
    else alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    return Math.round(alphaValue * 10) / 1000;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hV9rJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>shouldSkipGeneratingVar);
function shouldSkipGeneratingVar(keys) {
    return !!keys[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig
    keys[0] === 'palette' && !!keys[1]?.match(/(mode|contrastThreshold|tonalOffset)/);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"lh9YW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _excludeVariablesFromRootJs = require("./excludeVariablesFromRoot.js");
var _excludeVariablesFromRootJsDefault = parcelHelpers.interopDefault(_excludeVariablesFromRootJs);
exports.default = (theme)=>(colorScheme, css)=>{
        const root = theme.rootSelector || ':root';
        const selector = theme.colorSchemeSelector;
        let rule = selector;
        if (selector === 'class') rule = '.%s';
        if (selector === 'data') rule = '[data-%s]';
        if (selector?.startsWith('data-') && !selector.includes('%s')) // 'data-mui-color-scheme' -> '[data-mui-color-scheme="%s"]'
        rule = `[${selector}="%s"]`;
        if (theme.defaultColorScheme === colorScheme) {
            if (colorScheme === 'dark') {
                const excludedVariables = {};
                (0, _excludeVariablesFromRootJsDefault.default)(theme.cssVarPrefix).forEach((cssVar)=>{
                    excludedVariables[cssVar] = css[cssVar];
                    delete css[cssVar];
                });
                if (rule === 'media') return {
                    [root]: css,
                    [`@media (prefers-color-scheme: dark)`]: {
                        [root]: excludedVariables
                    }
                };
                if (rule) return {
                    [rule.replace('%s', colorScheme)]: excludedVariables,
                    [`${root}, ${rule.replace('%s', colorScheme)}`]: css
                };
                return {
                    [root]: {
                        ...css,
                        ...excludedVariables
                    }
                };
            }
            if (rule && rule !== 'media') return `${root}, ${rule.replace('%s', String(colorScheme))}`;
        } else if (colorScheme) {
            if (rule === 'media') return {
                [`@media (prefers-color-scheme: ${String(colorScheme)})`]: {
                    [root]: css
                }
            };
            if (rule) return rule.replace('%s', String(colorScheme));
        }
        return root;
    };

},{"./excludeVariablesFromRoot.js":"L2AIs","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"L2AIs":[function(require,module,exports,__globalThis) {
/**
 * @internal These variables should not appear in the :root stylesheet when the `defaultColorScheme="dark"`
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const excludeVariablesFromRoot = (cssVarPrefix)=>[
        ...[
            ...Array(25)
        ].map((_, index)=>`--${cssVarPrefix ? `${cssVarPrefix}-` : ''}overlays-${index}`),
        `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}palette-AppBar-darkBg`,
        `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}palette-AppBar-darkColor`
    ];
exports.default = excludeVariablesFromRoot;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hyojE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = '$$material';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gPJcT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slotShouldForwardProp", ()=>(0, _slotShouldForwardPropJsDefault.default));
parcelHelpers.export(exports, "rootShouldForwardProp", ()=>(0, _rootShouldForwardPropJsDefault.default));
var _createStyled = require("@mui/system/createStyled");
var _createStyledDefault = parcelHelpers.interopDefault(_createStyled);
var _defaultThemeJs = require("./defaultTheme.js");
var _defaultThemeJsDefault = parcelHelpers.interopDefault(_defaultThemeJs);
var _identifierJs = require("./identifier.js");
var _identifierJsDefault = parcelHelpers.interopDefault(_identifierJs);
var _rootShouldForwardPropJs = require("./rootShouldForwardProp.js");
var _rootShouldForwardPropJsDefault = parcelHelpers.interopDefault(_rootShouldForwardPropJs);
var _slotShouldForwardPropJs = require("./slotShouldForwardProp.js");
var _slotShouldForwardPropJsDefault = parcelHelpers.interopDefault(_slotShouldForwardPropJs);
'use client';
const styled = (0, _createStyledDefault.default)({
    themeId: (0, _identifierJsDefault.default),
    defaultTheme: (0, _defaultThemeJsDefault.default),
    rootShouldForwardProp: (0, _rootShouldForwardPropJsDefault.default)
});
exports.default = styled;

},{"@mui/system/createStyled":"8Psnj","./defaultTheme.js":"azlot","./identifier.js":"hyojE","./rootShouldForwardProp.js":"e3utG","./slotShouldForwardProp.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"8Psnj":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("d3fcf02e78575e2e").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _createStyled.default;
    }
});
var _createStyled = _interopRequireWildcard(require("5f89072a663e921"));
Object.keys(_createStyled).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _createStyled[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _createStyled[key];
        }
    });
});

},{"d3fcf02e78575e2e":"6TFJp","5f89072a663e921":"fcmem"}],"fcmem":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("6133cdf82f560f08").default;
var _interopRequireWildcard = require("b44a5c6928314bca").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = createStyled;
exports.shouldForwardProp = shouldForwardProp;
exports.systemDefaultTheme = void 0;
var _styledEngine = _interopRequireWildcard(require("766c6067aca00c60"));
var _deepmerge = require("769865f2cfbbcf39");
var _capitalize = _interopRequireDefault(require("172c5cc1504f511f"));
var _getDisplayName = _interopRequireDefault(require("8c6347b34f380bc1"));
var _createTheme = _interopRequireDefault(require("332771a3a6457326"));
var _styleFunctionSx = _interopRequireDefault(require("6d6fee53ff3c0e51"));
var _preprocessStyles = _interopRequireDefault(require("ac41deb8895ce74c"));
/* eslint-disable no-underscore-dangle */ /* eslint-disable no-labels */ /* eslint-disable no-lone-blocks */ const systemDefaultTheme = exports.systemDefaultTheme = (0, _createTheme.default)();
// Update /system/styled/#api in case if this changes
function shouldForwardProp(prop) {
    return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
function defaultOverridesResolver(slot) {
    if (!slot) return null;
    return (_props, styles)=>styles[slot];
}
function attachTheme(props, themeId, defaultTheme) {
    props.theme = isObjectEmpty(props.theme) ? defaultTheme : props.theme[themeId] || props.theme;
}
function processStyle(props, style) {
    /*
   * Style types:
   *  - null/undefined
   *  - string
   *  - CSS style object: { [cssKey]: [cssValue], variants }
   *  - Processed style object: { style, variants, isProcessed: true }
   *  - Array of any of the above
   */ const resolvedStyle = typeof style === 'function' ? style(props) : style;
    if (Array.isArray(resolvedStyle)) return resolvedStyle.flatMap((subStyle)=>processStyle(props, subStyle));
    if (Array.isArray(resolvedStyle?.variants)) {
        let rootStyle;
        if (resolvedStyle.isProcessed) rootStyle = resolvedStyle.style;
        else {
            const { variants, ...otherStyles } = resolvedStyle;
            rootStyle = otherStyles;
        }
        return processStyleVariants(props, resolvedStyle.variants, [
            rootStyle
        ]);
    }
    if (resolvedStyle?.isProcessed) return resolvedStyle.style;
    return resolvedStyle;
}
function processStyleVariants(props, variants, results = []) {
    let mergedState; // We might not need it, initialized lazily
    variantLoop: for(let i = 0; i < variants.length; i += 1){
        const variant = variants[i];
        if (typeof variant.props === 'function') {
            mergedState ?? (mergedState = {
                ...props,
                ...props.ownerState,
                ownerState: props.ownerState
            });
            if (!variant.props(mergedState)) continue;
        } else for(const key in variant.props){
            if (props[key] !== variant.props[key] && props.ownerState?.[key] !== variant.props[key]) continue variantLoop;
        }
        if (typeof variant.style === 'function') {
            mergedState ?? (mergedState = {
                ...props,
                ...props.ownerState,
                ownerState: props.ownerState
            });
            results.push(variant.style(mergedState));
        } else results.push(variant.style);
    }
    return results;
}
function createStyled(input = {}) {
    const { themeId, defaultTheme = systemDefaultTheme, rootShouldForwardProp = shouldForwardProp, slotShouldForwardProp = shouldForwardProp } = input;
    function styleAttachTheme(props) {
        attachTheme(props, themeId, defaultTheme);
    }
    const styled = (tag, inputOptions = {})=>{
        // If `tag` is already a styled component, filter out the `sx` style function
        // to prevent unnecessary styles generated by the composite components.
        (0, _styledEngine.internal_mutateStyles)(tag, (styles)=>styles.filter((style)=>style !== _styleFunctionSx.default));
        const { name: componentName, slot: componentSlot, skipVariantsResolver: inputSkipVariantsResolver, skipSx: inputSkipSx, // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot)), ...options } = inputOptions;
        // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
        const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
        const skipSx = inputSkipSx || false;
        let shouldForwardPropOption = shouldForwardProp;
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        if (componentSlot === 'Root' || componentSlot === 'root') shouldForwardPropOption = rootShouldForwardProp;
        else if (componentSlot) // any other slot specified
        shouldForwardPropOption = slotShouldForwardProp;
        else if (isStringTag(tag)) // for string (html) tag, preserve the behavior in emotion & styled-components.
        shouldForwardPropOption = undefined;
        const defaultStyledResolver = (0, _styledEngine.default)(tag, {
            shouldForwardProp: shouldForwardPropOption,
            label: generateStyledLabel(componentName, componentSlot),
            ...options
        });
        const transformStyle = (style)=>{
            // - On the server Emotion doesn't use React.forwardRef for creating components, so the created
            //   component stays as a function. This condition makes sure that we do not interpolate functions
            //   which are basically components used as a selectors.
            // - `style` could be a styled component from a babel plugin for component selectors, This condition
            //   makes sure that we do not interpolate them.
            if (style.__emotion_real === style) return style;
            if (typeof style === 'function') return function styleFunctionProcessor(props) {
                return processStyle(props, style);
            };
            if ((0, _deepmerge.isPlainObject)(style)) {
                const serialized = (0, _preprocessStyles.default)(style);
                if (!serialized.variants) return serialized.style;
                return function styleObjectProcessor(props) {
                    return processStyle(props, serialized);
                };
            }
            return style;
        };
        const muiStyledResolver = (...expressionsInput)=>{
            const expressionsHead = [];
            const expressionsBody = expressionsInput.map(transformStyle);
            const expressionsTail = [];
            // Preprocess `props` to set the scoped theme value.
            // This must run before any other expression.
            expressionsHead.push(styleAttachTheme);
            if (componentName && overridesResolver) expressionsTail.push(function styleThemeOverrides(props) {
                const theme = props.theme;
                const styleOverrides = theme.components?.[componentName]?.styleOverrides;
                if (!styleOverrides) return null;
                const resolvedStyleOverrides = {};
                // TODO: v7 remove iteration and use `resolveStyleArg(styleOverrides[slot])` directly
                // eslint-disable-next-line guard-for-in
                for(const slotKey in styleOverrides)resolvedStyleOverrides[slotKey] = processStyle(props, styleOverrides[slotKey]);
                return overridesResolver(props, resolvedStyleOverrides);
            });
            if (componentName && !skipVariantsResolver) expressionsTail.push(function styleThemeVariants(props) {
                const theme = props.theme;
                const themeVariants = theme?.components?.[componentName]?.variants;
                if (!themeVariants) return null;
                return processStyleVariants(props, themeVariants);
            });
            if (!skipSx) expressionsTail.push(_styleFunctionSx.default);
            // This function can be called as a tagged template, so the first argument would contain
            // CSS `string[]` values.
            if (Array.isArray(expressionsBody[0])) {
                const inputStrings = expressionsBody.shift();
                // We need to add placeholders in the tagged template for the custom functions we have
                // possibly added (attachTheme, overrides, variants, and sx).
                const placeholdersHead = new Array(expressionsHead.length).fill('');
                const placeholdersTail = new Array(expressionsTail.length).fill('');
                let outputStrings;
                outputStrings = [
                    ...placeholdersHead,
                    ...inputStrings,
                    ...placeholdersTail
                ];
                outputStrings.raw = [
                    ...placeholdersHead,
                    ...inputStrings.raw,
                    ...placeholdersTail
                ];
                // The only case where we put something before `attachTheme`
                expressionsHead.unshift(outputStrings);
            }
            const expressions = [
                ...expressionsHead,
                ...expressionsBody,
                ...expressionsTail
            ];
            const Component = defaultStyledResolver(...expressions);
            if (tag.muiName) Component.muiName = tag.muiName;
            Component.displayName = generateDisplayName(componentName, componentSlot, tag);
            return Component;
        };
        if (defaultStyledResolver.withConfig) muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
        return muiStyledResolver;
    };
    return styled;
}
function generateDisplayName(componentName, componentSlot, tag) {
    if (componentName) return `${componentName}${(0, _capitalize.default)(componentSlot || '')}`;
    return `Styled(${(0, _getDisplayName.default)(tag)})`;
}
function generateStyledLabel(componentName, componentSlot) {
    let label;
    if (componentName) // TODO v6: remove `lowercaseFirstLetter()` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
    return label;
}
function isObjectEmpty(object) {
    // eslint-disable-next-line
    for(const _ in object)return false;
    return true;
}
// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
function isStringTag(tag) {
    return typeof tag === 'string' && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96;
}
function lowercaseFirstLetter(string) {
    if (!string) return string;
    return string.charAt(0).toLowerCase() + string.slice(1);
}

},{"6133cdf82f560f08":"1P3rZ","b44a5c6928314bca":"6TFJp","766c6067aca00c60":"g3Wsb","769865f2cfbbcf39":"bLPf1","172c5cc1504f511f":"igOKi","8c6347b34f380bc1":"jMnwf","332771a3a6457326":"kryy7","6d6fee53ff3c0e51":"3qmy1","ac41deb8895ce74c":"4FtSE"}],"jMnwf":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("42855b97e1633561").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _getDisplayName.default;
    }
});
var _getDisplayName = _interopRequireDefault(require("c6a5af84938e8b8d"));

},{"42855b97e1633561":"1P3rZ","c6a5af84938e8b8d":"8OhlI"}],"8OhlI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = getDisplayName;
var _reactIs = require("cc24738cf5c901a6");
function getFunctionComponentName(Component, fallback = '') {
    return Component.displayName || Component.name || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
}
/**
 * cherry-pick from
 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
 * originally forked from recompose/getDisplayName
 */ function getDisplayName(Component) {
    if (Component == null) return undefined;
    if (typeof Component === 'string') return Component;
    if (typeof Component === 'function') return getFunctionComponentName(Component, 'Component');
    // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
    if (typeof Component === 'object') switch(Component.$$typeof){
        case _reactIs.ForwardRef:
            return getWrappedName(Component, Component.render, 'ForwardRef');
        case _reactIs.Memo:
            return getWrappedName(Component, Component.type, 'memo');
        default:
            return undefined;
    }
    return undefined;
}

},{"cc24738cf5c901a6":"59S9B"}],"4FtSE":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = preprocessStyles;
var _styledEngine = require("83fa6b8ae50c7fe5");
function preprocessStyles(input) {
    const { variants, ...style } = input;
    const result = {
        variants,
        style: (0, _styledEngine.internal_serializeStyles)(style),
        isProcessed: true
    };
    // Not supported on styled-components
    if (result.style === style) return result;
    if (variants) variants.forEach((variant)=>{
        if (typeof variant.style !== 'function') variant.style = (0, _styledEngine.internal_serializeStyles)(variant.style);
    });
    return result;
}

},{"83fa6b8ae50c7fe5":"g3Wsb"}],"8c3wU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _defaultPropsProviderJsDefault.default));
parcelHelpers.export(exports, "useDefaultProps", ()=>(0, _defaultPropsProviderJs.useDefaultProps));
var _defaultPropsProviderJs = require("./DefaultPropsProvider.js");
var _defaultPropsProviderJsDefault = parcelHelpers.interopDefault(_defaultPropsProviderJs);

},{"./DefaultPropsProvider.js":"1VRML","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"1VRML":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useDefaultProps", ()=>useDefaultProps);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _defaultPropsProvider = require("@mui/system/DefaultPropsProvider");
var _defaultPropsProviderDefault = parcelHelpers.interopDefault(_defaultPropsProvider);
var _jsxRuntime = require("react/jsx-runtime");
'use client';
function DefaultPropsProvider(props) {
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _defaultPropsProviderDefault.default), {
        ...props
    });
}
DefaultPropsProvider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * @ignore
   */ children: (0, _propTypesDefault.default).node,
    /**
   * @ignore
   */ value: (0, _propTypesDefault.default).object.isRequired
};
exports.default = DefaultPropsProvider;
function useDefaultProps(params) {
    return (0, _defaultPropsProvider.useDefaultProps)(params);
}

},{"react":"jMk1U","prop-types":"GNqOQ","@mui/system/DefaultPropsProvider":"bIXtM","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cI39M":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _buttonBaseJsDefault.default));
parcelHelpers.export(exports, "buttonBaseClasses", ()=>(0, _buttonBaseClassesJsDefault.default));
parcelHelpers.export(exports, "touchRippleClasses", ()=>(0, _touchRippleClassesJsDefault.default));
var _buttonBaseJs = require("./ButtonBase.js");
var _buttonBaseJsDefault = parcelHelpers.interopDefault(_buttonBaseJs);
var _buttonBaseClassesJs = require("./buttonBaseClasses.js");
var _buttonBaseClassesJsDefault = parcelHelpers.interopDefault(_buttonBaseClassesJs);
parcelHelpers.exportAll(_buttonBaseClassesJs, exports);
var _touchRippleClassesJs = require("./touchRippleClasses.js");
var _touchRippleClassesJsDefault = parcelHelpers.interopDefault(_touchRippleClassesJs);
parcelHelpers.exportAll(_touchRippleClassesJs, exports);

},{"./ButtonBase.js":"6qWj4","./buttonBaseClasses.js":false,"./touchRippleClasses.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6qWj4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ButtonBaseRoot", ()=>ButtonBaseRoot);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _refType = require("@mui/utils/refType");
var _refTypeDefault = parcelHelpers.interopDefault(_refType);
var _elementTypeAcceptingRef = require("@mui/utils/elementTypeAcceptingRef");
var _elementTypeAcceptingRefDefault = parcelHelpers.interopDefault(_elementTypeAcceptingRef);
var _composeClasses = require("@mui/utils/composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _isFocusVisible = require("@mui/utils/isFocusVisible");
var _isFocusVisibleDefault = parcelHelpers.interopDefault(_isFocusVisible);
var _indexJs = require("../zero-styled/index.js");
var _indexJs1 = require("../DefaultPropsProvider/index.js");
var _useForkRefJs = require("../utils/useForkRef.js");
var _useForkRefJsDefault = parcelHelpers.interopDefault(_useForkRefJs);
var _useEventCallbackJs = require("../utils/useEventCallback.js");
var _useEventCallbackJsDefault = parcelHelpers.interopDefault(_useEventCallbackJs);
var _indexJs2 = require("../useLazyRipple/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs2);
var _touchRippleJs = require("./TouchRipple.js");
var _touchRippleJsDefault = parcelHelpers.interopDefault(_touchRippleJs);
var _buttonBaseClassesJs = require("./buttonBaseClasses.js");
var _buttonBaseClassesJsDefault = parcelHelpers.interopDefault(_buttonBaseClassesJs);
var _jsxRuntime = require("react/jsx-runtime");
'use client';
const useUtilityClasses = (ownerState)=>{
    const { disabled, focusVisible, focusVisibleClassName, classes } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            focusVisible && 'focusVisible'
        ]
    };
    const composedClasses = (0, _composeClassesDefault.default)(slots, (0, _buttonBaseClassesJs.getButtonBaseUtilityClass), classes);
    if (focusVisible && focusVisibleClassName) composedClasses.root += ` ${focusVisibleClassName}`;
    return composedClasses;
};
const ButtonBaseRoot = (0, _indexJs.styled)('button', {
    name: 'MuiButtonBase',
    slot: 'Root'
})({
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    boxSizing: 'border-box',
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent',
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    MozAppearance: 'none',
    // Reset
    WebkitAppearance: 'none',
    // Reset
    textDecoration: 'none',
    // So we take precedent over the style of a native <a /> element.
    color: 'inherit',
    '&::-moz-focus-inner': {
        borderStyle: 'none' // Remove Firefox dotted outline.
    },
    [`&.${(0, _buttonBaseClassesJsDefault.default).disabled}`]: {
        pointerEvents: 'none',
        // Disable link interactions
        cursor: 'default'
    },
    '@media print': {
        colorAdjust: 'exact'
    }
});
/**
 * `ButtonBase` contains as few styles as possible.
 * It aims to be a simple building block for creating a button.
 * It contains a load of style reset and some focus/ripple logic.
 */ const ButtonBase = /*#__PURE__*/ _react.forwardRef(function ButtonBase(inProps, ref) {
    const props = (0, _indexJs1.useDefaultProps)({
        props: inProps,
        name: 'MuiButtonBase'
    });
    const { action, centerRipple = false, children, className, component = 'button', disabled = false, disableRipple = false, disableTouchRipple = false, focusRipple = false, focusVisibleClassName, LinkComponent = 'a', onBlur, onClick, onContextMenu, onDragLeave, onFocus, onFocusVisible, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, tabIndex = 0, TouchRippleProps, touchRippleRef, type, ...other } = props;
    const buttonRef = _react.useRef(null);
    const ripple = (0, _indexJsDefault.default)();
    const handleRippleRef = (0, _useForkRefJsDefault.default)(ripple.ref, touchRippleRef);
    const [focusVisible, setFocusVisible] = _react.useState(false);
    if (disabled && focusVisible) setFocusVisible(false);
    _react.useImperativeHandle(action, ()=>({
            focusVisible: ()=>{
                setFocusVisible(true);
                buttonRef.current.focus();
            }
        }), []);
    const enableTouchRipple = ripple.shouldMount && !disableRipple && !disabled;
    _react.useEffect(()=>{
        if (focusVisible && focusRipple && !disableRipple) ripple.pulsate();
    }, [
        disableRipple,
        focusRipple,
        focusVisible,
        ripple
    ]);
    const handleMouseDown = useRippleHandler(ripple, 'start', onMouseDown, disableTouchRipple);
    const handleContextMenu = useRippleHandler(ripple, 'stop', onContextMenu, disableTouchRipple);
    const handleDragLeave = useRippleHandler(ripple, 'stop', onDragLeave, disableTouchRipple);
    const handleMouseUp = useRippleHandler(ripple, 'stop', onMouseUp, disableTouchRipple);
    const handleMouseLeave = useRippleHandler(ripple, 'stop', (event)=>{
        if (focusVisible) event.preventDefault();
        if (onMouseLeave) onMouseLeave(event);
    }, disableTouchRipple);
    const handleTouchStart = useRippleHandler(ripple, 'start', onTouchStart, disableTouchRipple);
    const handleTouchEnd = useRippleHandler(ripple, 'stop', onTouchEnd, disableTouchRipple);
    const handleTouchMove = useRippleHandler(ripple, 'stop', onTouchMove, disableTouchRipple);
    const handleBlur = useRippleHandler(ripple, 'stop', (event)=>{
        if (!(0, _isFocusVisibleDefault.default)(event.target)) setFocusVisible(false);
        if (onBlur) onBlur(event);
    }, false);
    const handleFocus = (0, _useEventCallbackJsDefault.default)((event)=>{
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) buttonRef.current = event.currentTarget;
        if ((0, _isFocusVisibleDefault.default)(event.target)) {
            setFocusVisible(true);
            if (onFocusVisible) onFocusVisible(event);
        }
        if (onFocus) onFocus(event);
    });
    const isNonNativeButton = ()=>{
        const button = buttonRef.current;
        return component && component !== 'button' && !(button.tagName === 'A' && button.href);
    };
    const handleKeyDown = (0, _useEventCallbackJsDefault.default)((event)=>{
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !event.repeat && focusVisible && event.key === ' ') ripple.stop(event, ()=>{
            ripple.start(event);
        });
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') event.preventDefault();
        if (onKeyDown) onKeyDown(event);
        // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
            event.preventDefault();
            if (onClick) onClick(event);
        }
    });
    const handleKeyUp = (0, _useEventCallbackJsDefault.default)((event)=>{
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/p/sandbox/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === ' ' && focusVisible && !event.defaultPrevented) ripple.stop(event, ()=>{
            ripple.pulsate(event);
        });
        if (onKeyUp) onKeyUp(event);
        // Keyboard accessibility for non interactive elements
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) onClick(event);
    });
    let ComponentProp = component;
    if (ComponentProp === 'button' && (other.href || other.to)) ComponentProp = LinkComponent;
    const buttonProps = {};
    if (ComponentProp === 'button') {
        buttonProps.type = type === undefined ? 'button' : type;
        buttonProps.disabled = disabled;
    } else {
        if (!other.href && !other.to) buttonProps.role = 'button';
        if (disabled) buttonProps['aria-disabled'] = disabled;
    }
    const handleRef = (0, _useForkRefJsDefault.default)(ref, buttonRef);
    const ownerState = {
        ...props,
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
    };
    const classes = useUtilityClasses(ownerState);
    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(ButtonBaseRoot, {
        as: ComponentProp,
        className: (0, _clsxDefault.default)(classes.root, className),
        ownerState: ownerState,
        onBlur: handleBlur,
        onClick: onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type: type,
        ...buttonProps,
        ...other,
        children: [
            children,
            enableTouchRipple ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _touchRippleJsDefault.default), {
                ref: handleRippleRef,
                center: centerRipple,
                ...TouchRippleProps
            }) : null
        ]
    });
});
function useRippleHandler(ripple, rippleAction, eventCallback, skipRippleAction = false) {
    return (0, _useEventCallbackJsDefault.default)((event)=>{
        if (eventCallback) eventCallback(event);
        if (!skipRippleAction) ripple[rippleAction](event);
        return true;
    });
}
ButtonBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */ action: (0, _refTypeDefault.default),
    /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */ centerRipple: (0, _propTypesDefault.default).bool,
    /**
   * The content of the component.
   */ children: (0, _propTypesDefault.default).node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: (0, _propTypesDefault.default).object,
    /**
   * @ignore
   */ className: (0, _propTypesDefault.default).string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: (0, _elementTypeAcceptingRefDefault.default),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: (0, _propTypesDefault.default).bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: (0, _propTypesDefault.default).bool,
    /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */ disableTouchRipple: (0, _propTypesDefault.default).bool,
    /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */ focusRipple: (0, _propTypesDefault.default).bool,
    /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */ focusVisibleClassName: (0, _propTypesDefault.default).string,
    /**
   * @ignore
   */ href: (0, _propTypesDefault.default /* @typescript-to-proptypes-ignore */ ).any,
    /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */ LinkComponent: (0, _propTypesDefault.default).elementType,
    /**
   * @ignore
   */ onBlur: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onClick: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onContextMenu: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onDragLeave: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onFocus: (0, _propTypesDefault.default).func,
    /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */ onFocusVisible: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onKeyDown: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onKeyUp: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onMouseDown: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onMouseLeave: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onMouseUp: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onTouchEnd: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onTouchMove: (0, _propTypesDefault.default).func,
    /**
   * @ignore
   */ onTouchStart: (0, _propTypesDefault.default).func,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).arrayOf((0, _propTypesDefault.default).oneOfType([
            (0, _propTypesDefault.default).func,
            (0, _propTypesDefault.default).object,
            (0, _propTypesDefault.default).bool
        ])),
        (0, _propTypesDefault.default).func,
        (0, _propTypesDefault.default).object
    ]),
    /**
   * @default 0
   */ tabIndex: (0, _propTypesDefault.default).number,
    /**
   * Props applied to the `TouchRipple` element.
   */ TouchRippleProps: (0, _propTypesDefault.default).object,
    /**
   * A ref that points to the `TouchRipple` element.
   */ touchRippleRef: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).func,
        (0, _propTypesDefault.default).shape({
            current: (0, _propTypesDefault.default).shape({
                pulsate: (0, _propTypesDefault.default).func.isRequired,
                start: (0, _propTypesDefault.default).func.isRequired,
                stop: (0, _propTypesDefault.default).func.isRequired
            })
        })
    ]),
    /**
   * @ignore
   */ type: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).oneOf([
            'button',
            'reset',
            'submit'
        ]),
        (0, _propTypesDefault.default).string
    ])
};
exports.default = ButtonBase;

},{"react":"jMk1U","prop-types":"GNqOQ","clsx":"dOSJC","@mui/utils/refType":"91ftP","@mui/utils/elementTypeAcceptingRef":"dd9Rb","@mui/utils/composeClasses":"gluJr","@mui/utils/isFocusVisible":"1p50T","../zero-styled/index.js":"kVFw5","../DefaultPropsProvider/index.js":"8c3wU","../utils/useForkRef.js":"74KXf","../utils/useEventCallback.js":"jzmCg","../useLazyRipple/index.js":"jiTST","./TouchRipple.js":"a3iZD","./buttonBaseClasses.js":"ioXpG","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"91ftP":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("cb008783cc8dc54").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _refType.default;
    }
});
var _refType = _interopRequireDefault(require("2afcc5cf90f97a36"));

},{"cb008783cc8dc54":"1P3rZ","2afcc5cf90f97a36":"lMoIK"}],"lMoIK":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("a3e3dc00f37a8649").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("eb7a3c1f43d71682"));
const refType = _propTypes.default.oneOfType([
    _propTypes.default.func,
    _propTypes.default.object
]);
var _default = exports.default = refType;

},{"a3e3dc00f37a8649":"1P3rZ","eb7a3c1f43d71682":"GNqOQ"}],"dd9Rb":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("3a45f789416feab6").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _elementTypeAcceptingRef.default;
    }
});
var _elementTypeAcceptingRef = _interopRequireDefault(require("709d7c0410e451bb"));

},{"3a45f789416feab6":"1P3rZ","709d7c0410e451bb":"dDolx"}],"dDolx":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("1ec95f6be3e7d93e").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("a7d7ea52e9e01dd6"));
var _chainPropTypes = _interopRequireDefault(require("b8a0e4e92e2516e"));
function isClassComponent(elementType) {
    // elementType.prototype?.isReactComponent
    const { prototype = {} } = elementType;
    return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === 'undefined') return null;
    let warningHint;
    /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */ if (typeof propValue === 'function' && !isClassComponent(propValue)) warningHint = 'Did you accidentally provide a plain function component instead?';
    if (warningHint !== undefined) return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
    return null;
}
var _default = exports.default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef);

},{"1ec95f6be3e7d93e":"1P3rZ","a7d7ea52e9e01dd6":"GNqOQ","b8a0e4e92e2516e":"kOKf5"}],"kOKf5":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("bb36807493304a1c").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _chainPropTypes.default;
    }
});
var _chainPropTypes = _interopRequireDefault(require("a1c6b87a39fc11ab"));

},{"bb36807493304a1c":"1P3rZ","a1c6b87a39fc11ab":"3Jms5"}],"3Jms5":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = chainPropTypes;
function chainPropTypes(propType1, propType2) {
    return function validate(...args) {
        return propType1(...args) || propType2(...args);
    };
}

},{}],"1p50T":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("f84b814f2c6c33db").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _isFocusVisible.default;
    }
});
var _isFocusVisible = _interopRequireDefault(require("16c35462159014ff"));

},{"f84b814f2c6c33db":"1P3rZ","16c35462159014ff":"baaUs"}],"baaUs":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = isFocusVisible;
/**
 * Returns a boolean indicating if the event's target has :focus-visible
 */ function isFocusVisible(element) {
    try {
        return element.matches(':focus-visible');
    } catch (error) {
        // Do not warn on jsdom tests, otherwise all tests that rely on focus have to be skipped
        // Tests that rely on `:focus-visible` will still have to be skipped in jsdom
        if (!/jsdom/.test(window.navigator.userAgent)) console.warn([
            'MUI: The `:focus-visible` pseudo class is not supported in this browser.',
            'Some components rely on this feature to work properly.'
        ].join('\n'));
    }
    return false;
}

},{}],"jiTST":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _useLazyRippleJsDefault.default));
var _useLazyRippleJs = require("./useLazyRipple.js");
var _useLazyRippleJsDefault = parcelHelpers.interopDefault(_useLazyRippleJs);
'use client';

},{"./useLazyRipple.js":"6eApv","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"6eApv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Lazy initialization container for the Ripple instance. This improves
 * performance by delaying mounting the ripple until it's needed.
 */ parcelHelpers.export(exports, "LazyRipple", ()=>LazyRipple);
parcelHelpers.export(exports, "default", ()=>useLazyRipple);
var _react = require("react");
var _useLazyRef = require("@mui/utils/useLazyRef");
var _useLazyRefDefault = parcelHelpers.interopDefault(_useLazyRef);
'use client';
class LazyRipple {
    /** React ref to the ripple instance */ /** If the ripple component should be mounted */ /** Promise that resolves when the ripple component is mounted */ /** If the ripple component has been mounted */ /** React state hook setter */ static create() {
        return new LazyRipple();
    }
    static use() {
        /* eslint-disable */ const ripple = (0, _useLazyRefDefault.default)(LazyRipple.create).current;
        const [shouldMount, setShouldMount] = _react.useState(false);
        ripple.shouldMount = shouldMount;
        ripple.setShouldMount = setShouldMount;
        _react.useEffect(ripple.mountEffect, [
            shouldMount
        ]);
        /* eslint-enable */ return ripple;
    }
    constructor(){
        this.ref = {
            current: null
        };
        this.mounted = null;
        this.didMount = false;
        this.shouldMount = false;
        this.setShouldMount = null;
    }
    mount() {
        if (!this.mounted) {
            this.mounted = createControlledPromise();
            this.shouldMount = true;
            this.setShouldMount(this.shouldMount);
        }
        return this.mounted;
    }
    mountEffect = ()=>{
        if (this.shouldMount && !this.didMount) {
            if (this.ref.current !== null) {
                this.didMount = true;
                this.mounted.resolve();
            }
        }
    };
    /* Ripple API */ start(...args) {
        this.mount().then(()=>this.ref.current?.start(...args));
    }
    stop(...args) {
        this.mount().then(()=>this.ref.current?.stop(...args));
    }
    pulsate(...args) {
        this.mount().then(()=>this.ref.current?.pulsate(...args));
    }
}
function useLazyRipple() {
    return LazyRipple.use();
}
function createControlledPromise() {
    let resolve;
    let reject;
    const p = new Promise((resolveFn, rejectFn)=>{
        resolve = resolveFn;
        reject = rejectFn;
    });
    p.resolve = resolve;
    p.reject = reject;
    return p;
}

},{"react":"jMk1U","@mui/utils/useLazyRef":"7lBOu","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7lBOu":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("836bdefd4b9f7b13").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _useLazyRef.default;
    }
});
var _useLazyRef = _interopRequireDefault(require("9658beffa027bb73"));

},{"836bdefd4b9f7b13":"1P3rZ","9658beffa027bb73":"h7HI0"}],"h7HI0":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireWildcard = require("24405efd4ebf80a9").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = useLazyRef;
var React = _interopRequireWildcard(require("d4852ee2f430cca8"));
const UNINITIALIZED = {};
/**
 * A React.useRef() that is initialized lazily with a function. Note that it accepts an optional
 * initialization argument, so the initialization function doesn't need to be an inline closure.
 *
 * @usage
 *   const ref = useLazyRef(sortColumns, columns)
 */ function useLazyRef(init, initArg) {
    const ref = React.useRef(UNINITIALIZED);
    if (ref.current === UNINITIALIZED) ref.current = init(initArg);
    return ref;
}

},{"24405efd4ebf80a9":"6TFJp","d4852ee2f430cca8":"jMk1U"}],"a3iZD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DELAY_RIPPLE", ()=>DELAY_RIPPLE);
parcelHelpers.export(exports, "TouchRippleRoot", ()=>TouchRippleRoot);
parcelHelpers.export(exports, "TouchRippleRipple", ()=>TouchRippleRipple);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactTransitionGroup = require("react-transition-group");
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _useTimeout = require("@mui/utils/useTimeout");
var _useTimeoutDefault = parcelHelpers.interopDefault(_useTimeout);
var _indexJs = require("../zero-styled/index.js");
var _indexJs1 = require("../DefaultPropsProvider/index.js");
var _rippleJs = require("./Ripple.js");
var _rippleJsDefault = parcelHelpers.interopDefault(_rippleJs);
var _touchRippleClassesJs = require("./touchRippleClasses.js");
var _touchRippleClassesJsDefault = parcelHelpers.interopDefault(_touchRippleClassesJs);
var _jsxRuntime = require("react/jsx-runtime");
'use client';
const DURATION = 550;
const DELAY_RIPPLE = 80;
const enterKeyframe = (0, _indexJs.keyframes)`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`;
const exitKeyframe = (0, _indexJs.keyframes)`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
const pulsateKeyframe = (0, _indexJs.keyframes)`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`;
const TouchRippleRoot = (0, _indexJs.styled)('span', {
    name: 'MuiTouchRipple',
    slot: 'Root'
})({
    overflow: 'hidden',
    pointerEvents: 'none',
    position: 'absolute',
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: 'inherit'
});
const TouchRippleRipple = (0, _indexJs.styled)((0, _rippleJsDefault.default), {
    name: 'MuiTouchRipple',
    slot: 'Ripple'
})`
  opacity: 0;
  position: absolute;

  &.${(0, _touchRippleClassesJsDefault.default).rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${enterKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({ theme })=>theme.transitions.easing.easeInOut};
  }

  &.${(0, _touchRippleClassesJsDefault.default).ripplePulsate} {
    animation-duration: ${({ theme })=>theme.transitions.duration.shorter}ms;
  }

  & .${(0, _touchRippleClassesJsDefault.default).child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${(0, _touchRippleClassesJsDefault.default).childLeaving} {
    opacity: 0;
    animation-name: ${exitKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({ theme })=>theme.transitions.easing.easeInOut};
  }

  & .${(0, _touchRippleClassesJsDefault.default).childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${pulsateKeyframe};
    animation-duration: 2500ms;
    animation-timing-function: ${({ theme })=>theme.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`;
/**
 * @ignore - internal component.
 *
 * TODO v5: Make private
 */ const TouchRipple = /*#__PURE__*/ _react.forwardRef(function TouchRipple(inProps, ref) {
    const props = (0, _indexJs1.useDefaultProps)({
        props: inProps,
        name: 'MuiTouchRipple'
    });
    const { center: centerProp = false, classes = {}, className, ...other } = props;
    const [ripples, setRipples] = _react.useState([]);
    const nextKey = _react.useRef(0);
    const rippleCallback = _react.useRef(null);
    _react.useEffect(()=>{
        if (rippleCallback.current) {
            rippleCallback.current();
            rippleCallback.current = null;
        }
    }, [
        ripples
    ]);
    // Used to filter out mouse emulated events on mobile.
    const ignoringMouseDown = _react.useRef(false);
    // We use a timer in order to only show the ripples for touch "click" like events.
    // We don't want to display the ripple for touch scroll events.
    const startTimer = (0, _useTimeoutDefault.default)();
    // This is the hook called once the previous timeout is ready.
    const startTimerCommit = _react.useRef(null);
    const container = _react.useRef(null);
    const startCommit = _react.useCallback((params)=>{
        const { pulsate, rippleX, rippleY, rippleSize, cb } = params;
        setRipples((oldRipples)=>[
                ...oldRipples,
                /*#__PURE__*/ (0, _jsxRuntime.jsx)(TouchRippleRipple, {
                    classes: {
                        ripple: (0, _clsxDefault.default)(classes.ripple, (0, _touchRippleClassesJsDefault.default).ripple),
                        rippleVisible: (0, _clsxDefault.default)(classes.rippleVisible, (0, _touchRippleClassesJsDefault.default).rippleVisible),
                        ripplePulsate: (0, _clsxDefault.default)(classes.ripplePulsate, (0, _touchRippleClassesJsDefault.default).ripplePulsate),
                        child: (0, _clsxDefault.default)(classes.child, (0, _touchRippleClassesJsDefault.default).child),
                        childLeaving: (0, _clsxDefault.default)(classes.childLeaving, (0, _touchRippleClassesJsDefault.default).childLeaving),
                        childPulsate: (0, _clsxDefault.default)(classes.childPulsate, (0, _touchRippleClassesJsDefault.default).childPulsate)
                    },
                    timeout: DURATION,
                    pulsate: pulsate,
                    rippleX: rippleX,
                    rippleY: rippleY,
                    rippleSize: rippleSize
                }, nextKey.current)
            ]);
        nextKey.current += 1;
        rippleCallback.current = cb;
    }, [
        classes
    ]);
    const start = _react.useCallback((event = {}, options = {}, cb = ()=>{})=>{
        const { pulsate = false, center = centerProp || options.pulsate, fakeElement = false // For test purposes
         } = options;
        if (event?.type === 'mousedown' && ignoringMouseDown.current) {
            ignoringMouseDown.current = false;
            return;
        }
        if (event?.type === 'touchstart') ignoringMouseDown.current = true;
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
            width: 0,
            height: 0,
            left: 0,
            top: 0
        };
        // Get the size of the ripple
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
            rippleX = Math.round(rect.width / 2);
            rippleY = Math.round(rect.height / 2);
        } else {
            const { clientX, clientY } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
            rippleX = Math.round(clientX - rect.left);
            rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
            rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
            // For some reason the animation is broken on Mobile Chrome if the size is even.
            if (rippleSize % 2 === 0) rippleSize += 1;
        } else {
            const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
            const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
            rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        }
        // Touche devices
        if (event?.touches) // check that this isn't another touchstart due to multitouch
        // otherwise we will only clear a single timer when unmounting while two
        // are running
        {
            if (startTimerCommit.current === null) {
                // Prepare the ripple effect.
                startTimerCommit.current = ()=>{
                    startCommit({
                        pulsate,
                        rippleX,
                        rippleY,
                        rippleSize,
                        cb
                    });
                };
                // Delay the execution of the ripple effect.
                // We have to make a tradeoff with this delay value.
                startTimer.start(DELAY_RIPPLE, ()=>{
                    if (startTimerCommit.current) {
                        startTimerCommit.current();
                        startTimerCommit.current = null;
                    }
                });
            }
        } else startCommit({
            pulsate,
            rippleX,
            rippleY,
            rippleSize,
            cb
        });
    }, [
        centerProp,
        startCommit,
        startTimer
    ]);
    const pulsate = _react.useCallback(()=>{
        start({}, {
            pulsate: true
        });
    }, [
        start
    ]);
    const stop = _react.useCallback((event, cb)=>{
        startTimer.clear();
        // The touch interaction occurs too quickly.
        // We still want to show ripple effect.
        if (event?.type === 'touchend' && startTimerCommit.current) {
            startTimerCommit.current();
            startTimerCommit.current = null;
            startTimer.start(0, ()=>{
                stop(event, cb);
            });
            return;
        }
        startTimerCommit.current = null;
        setRipples((oldRipples)=>{
            if (oldRipples.length > 0) return oldRipples.slice(1);
            return oldRipples;
        });
        rippleCallback.current = cb;
    }, [
        startTimer
    ]);
    _react.useImperativeHandle(ref, ()=>({
            pulsate,
            start,
            stop
        }), [
        pulsate,
        start,
        stop
    ]);
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(TouchRippleRoot, {
        className: (0, _clsxDefault.default)((0, _touchRippleClassesJsDefault.default).root, classes.root, className),
        ref: container,
        ...other,
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _reactTransitionGroup.TransitionGroup), {
            component: null,
            exit: true,
            children: ripples
        })
    });
});
TouchRipple.propTypes = {
    /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */ center: (0, _propTypesDefault.default).bool,
    /**
   * Override or extend the styles applied to the component.
   */ classes: (0, _propTypesDefault.default).object,
    /**
   * @ignore
   */ className: (0, _propTypesDefault.default).string
};
exports.default = TouchRipple;

},{"react":"jMk1U","prop-types":"GNqOQ","react-transition-group":"caYxp","clsx":"dOSJC","@mui/utils/useTimeout":"hTOz2","../zero-styled/index.js":"kVFw5","../DefaultPropsProvider/index.js":"8c3wU","./Ripple.js":"5QjXX","./touchRippleClasses.js":"ew3tF","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"caYxp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSSTransition", ()=>(0, _csstransitionDefault.default));
parcelHelpers.export(exports, "ReplaceTransition", ()=>(0, _replaceTransitionDefault.default));
parcelHelpers.export(exports, "SwitchTransition", ()=>(0, _switchTransitionDefault.default));
parcelHelpers.export(exports, "TransitionGroup", ()=>(0, _transitionGroupDefault.default));
parcelHelpers.export(exports, "Transition", ()=>(0, _transitionDefault.default));
parcelHelpers.export(exports, "config", ()=>(0, _configDefault.default));
var _csstransition = require("./CSSTransition");
var _csstransitionDefault = parcelHelpers.interopDefault(_csstransition);
var _replaceTransition = require("./ReplaceTransition");
var _replaceTransitionDefault = parcelHelpers.interopDefault(_replaceTransition);
var _switchTransition = require("./SwitchTransition");
var _switchTransitionDefault = parcelHelpers.interopDefault(_switchTransition);
var _transitionGroup = require("./TransitionGroup");
var _transitionGroupDefault = parcelHelpers.interopDefault(_transitionGroup);
var _transition = require("./Transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
var _config = require("./config");
var _configDefault = parcelHelpers.interopDefault(_config);

},{"./CSSTransition":false,"./ReplaceTransition":false,"./SwitchTransition":false,"./TransitionGroup":"63Owe","./Transition":false,"./config":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"63Owe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _assertThisInitialized = require("@babel/runtime/helpers/esm/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _transitionGroupContext = require("./TransitionGroupContext");
var _transitionGroupContextDefault = parcelHelpers.interopDefault(_transitionGroupContext);
var _childMapping = require("./utils/ChildMapping");
var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
        return obj[k];
    });
};
var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
        return child;
    }
};
/**
 * The `<TransitionGroup>` component manages a set of transition components
 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
 * components, `<TransitionGroup>` is a state machine for managing the mounting
 * and unmounting of components over time.
 *
 * Consider the example below. As items are removed or added to the TodoList the
 * `in` prop is toggled automatically by the `<TransitionGroup>`.
 *
 * Note that `<TransitionGroup>`  does not define any animation behavior!
 * Exactly _how_ a list item animates is up to the individual transition
 * component. This means you can mix and match animations across different list
 * items.
 */ var TransitionGroup = /*#__PURE__*/ function(_React$Component) {
    (0, _inheritsLooseDefault.default)(TransitionGroup, _React$Component);
    function TransitionGroup(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind((0, _assertThisInitializedDefault.default)(_this)); // Initial children should all be entering, dependent on appear
        _this.state = {
            contextValue: {
                isMounting: true
            },
            handleExited: handleExited,
            firstRender: true
        };
        return _this;
    }
    var _proto = TransitionGroup.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
            contextValue: {
                isMounting: false
            }
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
    };
    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
            children: firstRender ? (0, _childMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _childMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
            firstRender: false
        };
    } // node is `undefined` when user provided `nodeRef` prop
    ;
    _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = (0, _childMapping.getChildMapping)(this.props.children);
        if (child.key in currentChildMapping) return;
        if (child.props.onExited) child.props.onExited(node);
        if (this.mounted) this.setState(function(state) {
            var children = (0, _extendsDefault.default)({}, state.children);
            delete children[child.key];
            return {
                children: children
            };
        });
    };
    _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = (0, _objectWithoutPropertiesLooseDefault.default)(_this$props, [
            "component",
            "childFactory"
        ]);
        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) return /*#__PURE__*/ (0, _reactDefault.default).createElement((0, _transitionGroupContextDefault.default).Provider, {
            value: contextValue
        }, children);
        return /*#__PURE__*/ (0, _reactDefault.default).createElement((0, _transitionGroupContextDefault.default).Provider, {
            value: contextValue
        }, /*#__PURE__*/ (0, _reactDefault.default).createElement(Component, props, children));
    };
    return TransitionGroup;
}((0, _reactDefault.default).Component);
TransitionGroup.propTypes = {
    /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */ component: (0, _propTypesDefault.default).any,
    /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */ children: (0, _propTypesDefault.default).node,
    /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ appear: (0, _propTypesDefault.default).bool,
    /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ enter: (0, _propTypesDefault.default).bool,
    /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ exit: (0, _propTypesDefault.default).bool,
    /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */ childFactory: (0, _propTypesDefault.default).func
};
TransitionGroup.defaultProps = defaultProps;
exports.default = TransitionGroup;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"fls88","@babel/runtime/helpers/esm/extends":"20my9","@babel/runtime/helpers/esm/assertThisInitialized":"ihUmZ","@babel/runtime/helpers/esm/inheritsLoose":"jDIko","prop-types":"GNqOQ","react":"jMk1U","./TransitionGroupContext":"02D2e","./utils/ChildMapping":"eppFe","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fls88":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_objectWithoutPropertiesLoose);
function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for(var n in r)if (({}).hasOwnProperty.call(r, n)) {
        if (-1 !== e.indexOf(n)) continue;
        t[n] = r[n];
    }
    return t;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ihUmZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_assertThisInitialized);
function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jDIko":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_inheritsLoose);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, (0, _setPrototypeOfJsDefault.default)(t, o);
}

},{"./setPrototypeOf.js":"5Brd2","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"5Brd2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_setPrototypeOf);
function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
        return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"02D2e":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
exports.default = (0, _reactDefault.default).createContext(null);

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"eppFe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */ parcelHelpers.export(exports, "getChildMapping", ()=>getChildMapping);
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */ parcelHelpers.export(exports, "mergeChildMappings", ()=>mergeChildMappings);
parcelHelpers.export(exports, "getInitialChildMapping", ()=>getInitialChildMapping);
parcelHelpers.export(exports, "getNextChildMapping", ()=>getNextChildMapping);
var _react = require("react");
function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
        return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children) (0, _react.Children).map(children, function(c) {
        return c;
    }).forEach(function(child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
    });
    return result;
}
function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for(var prevKey in prev){
        if (prevKey in next) {
            if (pendingKeys.length) {
                nextKeysPending[prevKey] = pendingKeys;
                pendingKeys = [];
            }
        } else pendingKeys.push(prevKey);
    }
    var i;
    var childMapping = {};
    for(var nextKey in next){
        if (nextKeysPending[nextKey]) for(i = 0; i < nextKeysPending[nextKey].length; i++){
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
        childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`
    for(i = 0; i < pendingKeys.length; i++)childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    return childMapping;
}
function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
        return (0, _react.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            appear: getProp(child, 'appear', props),
            enter: getProp(child, 'enter', props),
            exit: getProp(child, 'exit', props)
        });
    });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
        var child = children[key];
        if (!(0, _react.isValidElement)(child)) return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)
        if (hasNext && (!hasPrev || isLeaving)) // console.log('entering', key)
        children[key] = (0, _react.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
        });
        else if (!hasNext && hasPrev && !isLeaving) // item is old (exiting)
        // console.log('leaving', key)
        children[key] = (0, _react.cloneElement)(child, {
            in: false
        });
        else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = (0, _react.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
        });
    });
    return children;
}

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"hTOz2":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireWildcard = require("d338144ae0c91875").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Timeout", {
    enumerable: true,
    get: function() {
        return _useTimeout.Timeout;
    }
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _useTimeout.default;
    }
});
var _useTimeout = _interopRequireWildcard(require("9025fa08960330bf"));

},{"d338144ae0c91875":"6TFJp","9025fa08960330bf":"jo84z"}],"jo84z":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireDefault = require("bf81aa3f5ab8196d").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Timeout = void 0;
exports.default = useTimeout;
var _useLazyRef = _interopRequireDefault(require("bc754d7114476e87"));
var _useOnMount = _interopRequireDefault(require("cc5798607a2da1ee"));
class Timeout {
    static create() {
        return new Timeout();
    }
    currentId = null;
    /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */ start(delay, fn) {
        this.clear();
        this.currentId = setTimeout(()=>{
            this.currentId = null;
            fn();
        }, delay);
    }
    clear = ()=>{
        if (this.currentId !== null) {
            clearTimeout(this.currentId);
            this.currentId = null;
        }
    };
    disposeEffect = ()=>{
        return this.clear;
    };
}
exports.Timeout = Timeout;
function useTimeout() {
    const timeout = (0, _useLazyRef.default)(Timeout.create).current;
    (0, _useOnMount.default)(timeout.disposeEffect);
    return timeout;
}

},{"bf81aa3f5ab8196d":"1P3rZ","bc754d7114476e87":"h7HI0","cc5798607a2da1ee":"8xQDf"}],"8xQDf":[function(require,module,exports,__globalThis) {
"use strict";
'use client';
var _interopRequireWildcard = require("63c5d5dade1a4650").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = useOnMount;
var React = _interopRequireWildcard(require("61e6fb67d9541ebc"));
const EMPTY = [];
/**
 * A React.useEffect equivalent that runs once, when the component is mounted.
 */ function useOnMount(fn) {
    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- no need to put `fn` in the dependency array
    /* eslint-disable react-hooks/exhaustive-deps */ React.useEffect(fn, EMPTY);
/* eslint-enable react-hooks/exhaustive-deps */ }

},{"63c5d5dade1a4650":"6TFJp","61e6fb67d9541ebc":"jMk1U"}],"5QjXX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
'use client';
function Ripple(props) {
    const { className, classes, pulsate = false, rippleX, rippleY, rippleSize, in: inProp, onExited, timeout } = props;
    const [leaving, setLeaving] = _react.useState(false);
    const rippleClassName = (0, _clsxDefault.default)(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
    };
    const childClassName = (0, _clsxDefault.default)(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) setLeaving(true);
    _react.useEffect(()=>{
        if (!inProp && onExited != null) {
            // react-transition-group#onExited
            const timeoutId = setTimeout(onExited, timeout);
            return ()=>{
                clearTimeout(timeoutId);
            };
        }
        return undefined;
    }, [
        onExited,
        inProp,
        timeout
    ]);
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)("span", {
        className: rippleClassName,
        style: rippleStyles,
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)("span", {
            className: childClassName
        })
    });
}
Ripple.propTypes = {
    /**
   * Override or extend the styles applied to the component.
   */ classes: (0, _propTypesDefault.default).object.isRequired,
    className: (0, _propTypesDefault.default).string,
    /**
   * @ignore - injected from TransitionGroup
   */ in: (0, _propTypesDefault.default).bool,
    /**
   * @ignore - injected from TransitionGroup
   */ onExited: (0, _propTypesDefault.default).func,
    /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */ pulsate: (0, _propTypesDefault.default).bool,
    /**
   * Diameter of the ripple.
   */ rippleSize: (0, _propTypesDefault.default).number,
    /**
   * Horizontal position of the ripple center.
   */ rippleX: (0, _propTypesDefault.default).number,
    /**
   * Vertical position of the ripple center.
   */ rippleY: (0, _propTypesDefault.default).number,
    /**
   * exit delay
   */ timeout: (0, _propTypesDefault.default).number.isRequired
};
exports.default = Ripple;

},{"react":"jMk1U","prop-types":"GNqOQ","clsx":"dOSJC","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ew3tF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTouchRippleUtilityClass", ()=>getTouchRippleUtilityClass);
var _generateUtilityClasses = require("@mui/utils/generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("@mui/utils/generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getTouchRippleUtilityClass(slot) {
    return (0, _generateUtilityClassDefault.default)('MuiTouchRipple', slot);
}
const touchRippleClasses = (0, _generateUtilityClassesDefault.default)('MuiTouchRipple', [
    'root',
    'ripple',
    'rippleVisible',
    'ripplePulsate',
    'child',
    'childLeaving',
    'childPulsate'
]);
exports.default = touchRippleClasses;

},{"@mui/utils/generateUtilityClasses":"3J0Rs","@mui/utils/generateUtilityClass":"iAc9p","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"3J0Rs":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("5b5466efb44e16fa").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _generateUtilityClasses.default;
    }
});
var _generateUtilityClasses = _interopRequireDefault(require("2fda49e444604093"));

},{"5b5466efb44e16fa":"1P3rZ","2fda49e444604093":"jlzri"}],"jlzri":[function(require,module,exports,__globalThis) {
"use strict";
var _interopRequireDefault = require("ace5c1a216171e4d").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = generateUtilityClasses;
var _generateUtilityClass = _interopRequireDefault(require("1c98b4da23a2701a"));
function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
    const result = {};
    slots.forEach((slot)=>{
        result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
    });
    return result;
}

},{"ace5c1a216171e4d":"1P3rZ","1c98b4da23a2701a":"iAc9p"}],"ioXpG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonBaseUtilityClass", ()=>getButtonBaseUtilityClass);
var _generateUtilityClasses = require("@mui/utils/generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("@mui/utils/generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getButtonBaseUtilityClass(slot) {
    return (0, _generateUtilityClassDefault.default)('MuiButtonBase', slot);
}
const buttonBaseClasses = (0, _generateUtilityClassesDefault.default)('MuiButtonBase', [
    'root',
    'disabled',
    'focusVisible'
]);
exports.default = buttonBaseClasses;

},{"@mui/utils/generateUtilityClasses":"3J0Rs","@mui/utils/generateUtilityClass":"iAc9p","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"dU5Lz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _circularProgressJsDefault.default));
parcelHelpers.export(exports, "circularProgressClasses", ()=>(0, _circularProgressClassesJsDefault.default));
var _circularProgressJs = require("./CircularProgress.js");
var _circularProgressJsDefault = parcelHelpers.interopDefault(_circularProgressJs);
var _circularProgressClassesJs = require("./circularProgressClasses.js");
var _circularProgressClassesJsDefault = parcelHelpers.interopDefault(_circularProgressClassesJs);
parcelHelpers.exportAll(_circularProgressClassesJs, exports);

},{"./CircularProgress.js":"fZgBb","./circularProgressClasses.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"fZgBb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _chainPropTypes = require("@mui/utils/chainPropTypes");
var _chainPropTypesDefault = parcelHelpers.interopDefault(_chainPropTypes);
var _composeClasses = require("@mui/utils/composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _indexJs = require("../zero-styled/index.js");
var _memoThemeJs = require("../utils/memoTheme.js");
var _memoThemeJsDefault = parcelHelpers.interopDefault(_memoThemeJs);
var _indexJs1 = require("../DefaultPropsProvider/index.js");
var _capitalizeJs = require("../utils/capitalize.js");
var _capitalizeJsDefault = parcelHelpers.interopDefault(_capitalizeJs);
var _createSimplePaletteValueFilterJs = require("../utils/createSimplePaletteValueFilter.js");
var _createSimplePaletteValueFilterJsDefault = parcelHelpers.interopDefault(_createSimplePaletteValueFilterJs);
var _circularProgressClassesJs = require("./circularProgressClasses.js");
var _jsxRuntime = require("react/jsx-runtime");
'use client';
const SIZE = 44;
const circularRotateKeyframe = (0, _indexJs.keyframes)`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`;
const circularDashKeyframe = (0, _indexJs.keyframes)`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`;
// This implementation is for supporting both Styled-components v4+ and Pigment CSS.
// A global animation has to be created here for Styled-components v4+ (https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#12).
// which can be done by checking typeof indeterminate1Keyframe !== 'string' (at runtime, Pigment CSS transform keyframes`` to a string).
const rotateAnimation = typeof circularRotateKeyframe !== 'string' ? (0, _indexJs.css)`
        animation: ${circularRotateKeyframe} 1.4s linear infinite;
      ` : null;
const dashAnimation = typeof circularDashKeyframe !== 'string' ? (0, _indexJs.css)`
        animation: ${circularDashKeyframe} 1.4s ease-in-out infinite;
      ` : null;
const useUtilityClasses = (ownerState)=>{
    const { classes, variant, color, disableShrink } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            `color${(0, _capitalizeJsDefault.default)(color)}`
        ],
        svg: [
            'svg'
        ],
        circle: [
            'circle',
            `circle${(0, _capitalizeJsDefault.default)(variant)}`,
            disableShrink && 'circleDisableShrink'
        ]
    };
    return (0, _composeClassesDefault.default)(slots, (0, _circularProgressClassesJs.getCircularProgressUtilityClass), classes);
};
const CircularProgressRoot = (0, _indexJs.styled)('span', {
    name: 'MuiCircularProgress',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState } = props;
        return [
            styles.root,
            styles[ownerState.variant],
            styles[`color${(0, _capitalizeJsDefault.default)(ownerState.color)}`]
        ];
    }
})((0, _memoThemeJsDefault.default)(({ theme })=>({
        display: 'inline-block',
        variants: [
            {
                props: {
                    variant: 'determinate'
                },
                style: {
                    transition: theme.transitions.create('transform')
                }
            },
            {
                props: {
                    variant: 'indeterminate'
                },
                style: rotateAnimation || {
                    animation: `${circularRotateKeyframe} 1.4s linear infinite`
                }
            },
            ...Object.entries(theme.palette).filter((0, _createSimplePaletteValueFilterJsDefault.default)()).map(([color])=>({
                    props: {
                        color
                    },
                    style: {
                        color: (theme.vars || theme).palette[color].main
                    }
                }))
        ]
    })));
const CircularProgressSVG = (0, _indexJs.styled)('svg', {
    name: 'MuiCircularProgress',
    slot: 'Svg'
})({
    display: 'block' // Keeps the progress centered
});
const CircularProgressCircle = (0, _indexJs.styled)('circle', {
    name: 'MuiCircularProgress',
    slot: 'Circle',
    overridesResolver: (props, styles)=>{
        const { ownerState } = props;
        return [
            styles.circle,
            styles[`circle${(0, _capitalizeJsDefault.default)(ownerState.variant)}`],
            ownerState.disableShrink && styles.circleDisableShrink
        ];
    }
})((0, _memoThemeJsDefault.default)(({ theme })=>({
        stroke: 'currentColor',
        variants: [
            {
                props: {
                    variant: 'determinate'
                },
                style: {
                    transition: theme.transitions.create('stroke-dashoffset')
                }
            },
            {
                props: {
                    variant: 'indeterminate'
                },
                style: {
                    // Some default value that looks fine waiting for the animation to kicks in.
                    strokeDasharray: '80px, 200px',
                    strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.
                }
            },
            {
                props: ({ ownerState })=>ownerState.variant === 'indeterminate' && !ownerState.disableShrink,
                style: dashAnimation || {
                    // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
                    animation: `${circularDashKeyframe} 1.4s ease-in-out infinite`
                }
            }
        ]
    })));
/**
 * ## ARIA
 *
 * If the progress bar is describing the loading progress of a particular region of a page,
 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
 * attribute to `true` on that region until it has finished loading.
 */ const CircularProgress = /*#__PURE__*/ _react.forwardRef(function CircularProgress(inProps, ref) {
    const props = (0, _indexJs1.useDefaultProps)({
        props: inProps,
        name: 'MuiCircularProgress'
    });
    const { className, color = 'primary', disableShrink = false, size = 40, style, thickness = 3.6, value = 0, variant = 'indeterminate', ...other } = props;
    const ownerState = {
        ...props,
        color,
        disableShrink,
        size,
        thickness,
        value,
        variant
    };
    const classes = useUtilityClasses(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === 'determinate') {
        const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
        circleStyle.strokeDasharray = circumference.toFixed(3);
        rootProps['aria-valuenow'] = Math.round(value);
        circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
        rootStyle.transform = 'rotate(-90deg)';
    }
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(CircularProgressRoot, {
        className: (0, _clsxDefault.default)(classes.root, className),
        style: {
            width: size,
            height: size,
            ...rootStyle,
            ...style
        },
        ownerState: ownerState,
        ref: ref,
        role: "progressbar",
        ...rootProps,
        ...other,
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(CircularProgressSVG, {
            className: classes.svg,
            ownerState: ownerState,
            viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(CircularProgressCircle, {
                className: classes.circle,
                style: circleStyle,
                ownerState: ownerState,
                cx: SIZE,
                cy: SIZE,
                r: (SIZE - thickness) / 2,
                fill: "none",
                strokeWidth: thickness
            })
        })
    });
});
CircularProgress.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * Override or extend the styles applied to the component.
   */ classes: (0, _propTypesDefault.default).object,
    /**
   * @ignore
   */ className: (0, _propTypesDefault.default).string,
    /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */ color: (0, _propTypesDefault.default /* @typescript-to-proptypes-ignore */ ).oneOfType([
        (0, _propTypesDefault.default).oneOf([
            'inherit',
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        (0, _propTypesDefault.default).string
    ]),
    /**
   * If `true`, the shrink animation is disabled.
   * This only works if variant is `indeterminate`.
   * @default false
   */ disableShrink: (0, _chainPropTypesDefault.default)((0, _propTypesDefault.default).bool, (props)=>{
        if (props.disableShrink && props.variant && props.variant !== 'indeterminate') return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
        return null;
    }),
    /**
   * The size of the component.
   * If using a number, the pixel unit is assumed.
   * If using a string, you need to provide the CSS unit, for example '3rem'.
   * @default 40
   */ size: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).number,
        (0, _propTypesDefault.default).string
    ]),
    /**
   * @ignore
   */ style: (0, _propTypesDefault.default).object,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: (0, _propTypesDefault.default).oneOfType([
        (0, _propTypesDefault.default).arrayOf((0, _propTypesDefault.default).oneOfType([
            (0, _propTypesDefault.default).func,
            (0, _propTypesDefault.default).object,
            (0, _propTypesDefault.default).bool
        ])),
        (0, _propTypesDefault.default).func,
        (0, _propTypesDefault.default).object
    ]),
    /**
   * The thickness of the circle.
   * @default 3.6
   */ thickness: (0, _propTypesDefault.default).number,
    /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   * @default 0
   */ value: (0, _propTypesDefault.default).number,
    /**
   * The variant to use.
   * Use indeterminate when there is no progress value.
   * @default 'indeterminate'
   */ variant: (0, _propTypesDefault.default).oneOf([
        'determinate',
        'indeterminate'
    ])
};
exports.default = CircularProgress;

},{"react":"jMk1U","prop-types":"GNqOQ","clsx":"dOSJC","@mui/utils/chainPropTypes":"kOKf5","@mui/utils/composeClasses":"gluJr","../zero-styled/index.js":"kVFw5","../utils/memoTheme.js":"eiXb0","../DefaultPropsProvider/index.js":"8c3wU","../utils/capitalize.js":"iSGWv","../utils/createSimplePaletteValueFilter.js":"gtIh8","./circularProgressClasses.js":"ljRkp","react/jsx-runtime":"05iiF","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"gtIh8":[function(require,module,exports,__globalThis) {
/**
 * Type guard to check if the object has a "main" property of type string.
 *
 * @param obj - the object to check
 * @returns boolean
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createSimplePaletteValueFilter);
function hasCorrectMainProperty(obj) {
    return typeof obj.main === 'string';
}
/**
 * Checks if the object conforms to the SimplePaletteColorOptions type.
 * The minimum requirement is that the object has a "main" property of type string, this is always checked.
 * Optionally, you can pass additional properties to check.
 *
 * @param obj - The object to check
 * @param additionalPropertiesToCheck - Array containing "light", "dark", and/or "contrastText"
 * @returns boolean
 */ function checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {
    if (!hasCorrectMainProperty(obj)) return false;
    for (const value of additionalPropertiesToCheck){
        if (!obj.hasOwnProperty(value) || typeof obj[value] !== 'string') return false;
    }
    return true;
}
function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {
    return ([, value])=>value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ljRkp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCircularProgressUtilityClass", ()=>getCircularProgressUtilityClass);
var _generateUtilityClasses = require("@mui/utils/generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("@mui/utils/generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getCircularProgressUtilityClass(slot) {
    return (0, _generateUtilityClassDefault.default)('MuiCircularProgress', slot);
}
const circularProgressClasses = (0, _generateUtilityClassesDefault.default)('MuiCircularProgress', [
    'root',
    'determinate',
    'indeterminate',
    'colorPrimary',
    'colorSecondary',
    'svg',
    'circle',
    'circleDeterminate',
    'circleIndeterminate',
    'circleDisableShrink'
]);
exports.default = circularProgressClasses;

},{"@mui/utils/generateUtilityClasses":"3J0Rs","@mui/utils/generateUtilityClass":"iAc9p","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"cfK4C":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonUtilityClass", ()=>getButtonUtilityClass);
var _generateUtilityClasses = require("@mui/utils/generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("@mui/utils/generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getButtonUtilityClass(slot) {
    return (0, _generateUtilityClassDefault.default)('MuiButton', slot);
}
const buttonClasses = (0, _generateUtilityClassesDefault.default)('MuiButton', [
    'root',
    'text',
    'textInherit',
    'textPrimary',
    'textSecondary',
    'textSuccess',
    'textError',
    'textInfo',
    'textWarning',
    'outlined',
    'outlinedInherit',
    'outlinedPrimary',
    'outlinedSecondary',
    'outlinedSuccess',
    'outlinedError',
    'outlinedInfo',
    'outlinedWarning',
    'contained',
    'containedInherit',
    'containedPrimary',
    'containedSecondary',
    'containedSuccess',
    'containedError',
    'containedInfo',
    'containedWarning',
    'disableElevation',
    'focusVisible',
    'disabled',
    'colorInherit',
    'colorPrimary',
    'colorSecondary',
    'colorSuccess',
    'colorError',
    'colorInfo',
    'colorWarning',
    'textSizeSmall',
    'textSizeMedium',
    'textSizeLarge',
    'outlinedSizeSmall',
    'outlinedSizeMedium',
    'outlinedSizeLarge',
    'containedSizeSmall',
    'containedSizeMedium',
    'containedSizeLarge',
    'sizeMedium',
    'sizeSmall',
    'sizeLarge',
    'fullWidth',
    'startIcon',
    'endIcon',
    'icon',
    'iconSizeSmall',
    'iconSizeMedium',
    'iconSizeLarge',
    'loading',
    'loadingWrapper',
    'loadingIconPlaceholder',
    'loadingIndicator',
    'loadingPositionCenter',
    'loadingPositionStart',
    'loadingPositionEnd'
]);
exports.default = buttonClasses;

},{"@mui/utils/generateUtilityClasses":"3J0Rs","@mui/utils/generateUtilityClass":"iAc9p","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"jXJRq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
'use client';
/**
 * @ignore - internal component.
 */ const ButtonGroupContext = /*#__PURE__*/ _react.createContext({});
ButtonGroupContext.displayName = 'ButtonGroupContext';
exports.default = ButtonGroupContext;

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"7wjM7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
'use client';
/**
 * @ignore - internal component.
 */ const ButtonGroupButtonContext = /*#__PURE__*/ _react.createContext(undefined);
ButtonGroupButtonContext.displayName = 'ButtonGroupButtonContext';
exports.default = ButtonGroupButtonContext;

},{"react":"jMk1U","@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}],"ahkwl":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse('[{"title":"Modernes Appartement in zentraler Lage","price_cold":450,"price_warm":530,"qm":24,"price_per_qm":18.75,"rooms":"1","street":"H 1 12+13,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"Wundersch\xf6ne und hochwertige 3-Zimmer-Penthouse Wohnung in Mannheim","price_cold":1785,"price_warm":2190,"qm":115.69,"price_per_qm":15.43,"rooms":"3","street":"Leonie-Ossowski-Promenade 15,","city":"K\xe4fertal, 68309 Mannheim","latitude":49.5031062,"longlitude":8.5189432},{"title":"25m\xb2 - Vollm\xf6bliertes Apartment in Unin\xe4he","price_cold":580,"price_warm":750,"qm":25,"price_per_qm":23.2,"rooms":"1","street":"Seckenheimerstra\xdfe 68a,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4789407,"longlitude":8.4816894},{"title":"32m\xb2 - Vollm\xf6bliertes Apartment in Unin\xe4he","price_cold":720,"price_warm":890,"qm":32,"price_per_qm":22.5,"rooms":"1","street":"Seckenheimer Stra\xdfe 68a,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4789407,"longlitude":8.4816894},{"title":"42m\xb2 - Vollm\xf6bliertes Apartment mit eigener Terrasse","price_cold":900,"price_warm":1070,"qm":42,"price_per_qm":21.43,"rooms":"1","street":"Seckenheimer Stra\xdfe 68a,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4789407,"longlitude":8.4816894},{"title":"2 Monat mietfrei! Zimmer f\xfcr Studenten und Azubis - Vollm\xf6bliert mit Internetflat zum 01.08.2025","price_cold":445,"price_warm":550,"qm":20.96,"price_per_qm":21.23,"rooms":"1","street":"Birkenauer Str. 49,","city":"K\xe4fertal, 68309 Mannheim","latitude":49.5149808,"longlitude":8.5286457},{"title":"Privat - Gepflegte Wohnung mit zwei Zimmern und EBK in Mannheim","price_cold":580,"price_warm":850,"qm":58,"price_per_qm":10,"rooms":"2","street":"B\xfcrgermeister-strasse 86,","city":"Neckarstadt-West, 68169 Mannheim","latitude":49.5038247,"longlitude":8.467907},{"title":"Urbaner Lifestyle & Naturidyll in bester Harmonie \u2013 Exklusive Penthouse-Maisonette im gr\xfcnen Quadrat","price_cold":2150,"price_warm":2650,"qm":133,"price_per_qm":16.17,"rooms":"4","street":"","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"3-Zimmer-Wohnung mit Balkon und Neckarblick an der Neckarpromenade","price_cold":1067,"price_warm":1427,"qm":83,"price_per_qm":12.86,"rooms":"3","street":"Neckarpromenade 25,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.4945814,"longlitude":8.4776041},{"title":"1-Zimmer, K\xfcche- Apartment in den Quadraten N\xe4he Wasserturm","price_cold":680,"price_warm":780,"qm":33,"price_per_qm":20.61,"rooms":"1","street":"T6, 33,","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":49.4885031,"longlitude":8.4745453},{"title":"3,5ZKBB in zentraler Lage. N\xe4he Hbf.","price_cold":1100,"price_warm":1380,"qm":94,"price_per_qm":11.7,"rooms":"3,5","street":"Kaiserring 34,","city":"Schwetzingerstadt/Oststadt, 68161 Mannheim","latitude":49.4822873,"longlitude":8.4730219},{"title":"Erstbezug nach Sanierung 1 Zimmer- Altbauwohnung mit Balkon zu vermieten ! www.immo-kraemer.de","price_cold":510,"price_warm":660,"qm":42,"price_per_qm":12.14,"rooms":"1","street":"","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":"","longlitude":""},{"title":"Gro\xdfe Wohnung mit dem ganz bestimmten Charm in der Neckarstadt-West!","price_cold":1420,"price_warm":0,"qm":120,"price_per_qm":11.83,"rooms":"5","street":"","city":"Neckarstadt-West, 68169 Mannheim","latitude":"","longlitude":""},{"title":"Feudenheim: ca. 174 m\xb2 Wohnfl\xe4che auf einer Ebene!","price_cold":1950,"price_warm":2250,"qm":174,"price_per_qm":11.21,"rooms":"4,5","street":"","city":"Feudenheim, 68259 Mannheim","latitude":"","longlitude":""},{"title":"Sch\xf6ne 1ZKB ab sofort zu vermieten!","price_cold":360,"price_warm":540,"qm":26,"price_per_qm":13.85,"rooms":"1","street":"Laurentiusstr. 19-21,","city":"Neckarstadt-West, 68167 Mannheim","latitude":49.4983679,"longlitude":8.4711834},{"title":"Moderne 3-Zimmer-Wohnung in Mannheim","price_cold":1150,"price_warm":1350,"qm":78,"price_per_qm":14.74,"rooms":"3","street":"Beilstra\xdfe 23,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":49.4948799,"longlitude":8.4596438},{"title":"Erdgeschosswohnung in Neckarstadt-Ost! 2 ZKB mit EBK!","price_cold":750,"price_warm":950,"qm":74.73,"price_per_qm":10.04,"rooms":"2","street":"K\xe4fertaler Stra\xdfe 41,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.4952817,"longlitude":8.4793304},{"title":"Lichtdurchflutete Single-Dachgeschosswohnung mit Dachloggia","price_cold":700,"price_warm":890,"qm":68,"price_per_qm":10.29,"rooms":"2","street":"","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":"","longlitude":""},{"title":"Modernisierte 3-Zimmer-Wohnung mit Balkon und EBK in Mannheim","price_cold":1050,"price_warm":1230,"qm":115,"price_per_qm":9.13,"rooms":"3","street":"Relaisstra\xdfe 211,","city":"Rheinau, 68219 Mannheim","latitude":49.4245777,"longlitude":8.5351014},{"title":"Helle 3-Zimmer-Wohnung mit 2 Balkonen, Einbauk\xfcche \u2013 75\u202Fm\xb2 in Mannheim-Neckarau","price_cold":915,"price_warm":1075,"qm":75,"price_per_qm":12.2,"rooms":"3","street":"","city":"Neckarau, 68199 Mannheim","latitude":"","longlitude":""},{"title":"Sch\xf6ne, helle, 4-Zimmer Wohnung mit K\xfcchenzeile und Balkon in Mannheim, K\xe4fertal","price_cold":850,"price_warm":1100,"qm":98,"price_per_qm":8.67,"rooms":"4","street":"","city":"K\xe4fertal, 68309 Mannheim","latitude":"","longlitude":""},{"title":"WG-Zimmer im Jungbusch","price_cold":422,"price_warm":506,"qm":21,"price_per_qm":20.1,"rooms":"1","street":"Luisenring 23,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":49.4929115,"longlitude":8.4595938},{"title":"Sch\xf6ne helle WG-Zimmer in Neckarstadt-West zu vermieten","price_cold":500,"price_warm":625,"qm":62,"price_per_qm":8.06,"rooms":"3","street":"Erlenstra\xdfe 25,","city":"Neckarstadt-West, 68169 Mannheim","latitude":49.5044584,"longlitude":8.4682107},{"title":"Wundersch\xf6ne Garten-Wohnung mit gehobener Ausstattung, Einbauk\xfcche & Stellplatz in MA-Niederfeld","price_cold":1350,"price_warm":1500,"qm":90,"price_per_qm":15,"rooms":"2","street":"Wolframstra\xdfe 9,","city":"Neckarau, 68199 Mannheim","latitude":49.4543766,"longlitude":8.4788269},{"title":"1-Zimmer-Wohnung in Mannheim","price_cold":500,"price_warm":590,"qm":24,"price_per_qm":20.83,"rooms":"1","street":"S 3 8,","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":"","longlitude":""},{"title":"** TOP - Wohnung ** 3 ZKB-Wohnung Mhm-Quadrate (K3) ** ... mit Blick ins Gr\xfcne :) !!!","price_cold":1230,"price_warm":1470,"qm":92,"price_per_qm":13.37,"rooms":"3","street":"K 3 16,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"4-Zimmer-Wohnung mit Balkon in Mannheim-Feudenheim \u2013 Frei ab 01.09.2025","price_cold":850,"price_warm":1200,"qm":98,"price_per_qm":8.67,"rooms":"4","street":"","city":"Feudenheim, 68259 Mannheim","latitude":"","longlitude":""},{"title":"2-Zimmer-Penthouse-Wohnung mit luxuri\xf6ser Innenausstattung mit EBK in Mannheim","price_cold":1600,"price_warm":1800,"qm":60,"price_per_qm":26.67,"rooms":"2","street":"U3 16,","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":49.4922029,"longlitude":8.4726859},{"title":"Modernisierte 2-Raum-Wohnung mit Terrasse in Mannheim-Seckenheim","price_cold":620,"price_warm":770,"qm":55,"price_per_qm":11.27,"rooms":"2","street":"","city":"Seckenheim, 68239 Mannheim","latitude":"","longlitude":""},{"title":"Helles, ruhiges 1 Zimmer Apartment","price_cold":360,"price_warm":530,"qm":26,"price_per_qm":13.85,"rooms":"1","street":"Werderstra\xdfe 27,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4831394,"longlitude":8.4799158},{"title":"Modernes, helles & gepflegtes 1 ZKB Appartement mit Pantryk\xfcche in Mannheim - Schwetzingerstadt","price_cold":390,"price_warm":540,"qm":29,"price_per_qm":13.45,"rooms":"1","street":"","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":"","longlitude":""},{"title":"Ideales Domizil f\xfcr ein ruhesuchendes Paar \u2013 Gepflegte und moderne Wohneinheit in Waldrandlage","price_cold":1150,"price_warm":1650,"qm":92,"price_per_qm":12.5,"rooms":"3,5","street":"","city":"Waldhof, 68305 Mannheim","latitude":"","longlitude":""},{"title":"*** Neu trifft Altbauflair *** 2-Zimmer-Schmuckst\xfcck im Herzen der Stadt","price_cold":1205,"price_warm":1490,"qm":90,"price_per_qm":13.39,"rooms":"2","street":"","city":"Schwetzingerstadt/Oststadt, 68161 Mannheim","latitude":"","longlitude":""},{"title":"Gro\xdfz\xfcgige 5-Zi-Wohnung in erstklassiger Wohnlage zwischen Luisenpark und Neckar","price_cold":2000,"price_warm":2480,"qm":156,"price_per_qm":12.82,"rooms":"5","street":"","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":"","longlitude":""},{"title":"Moderne 3-Zimmer-Wohnung mit Aufzug in Toplage von Mannheim-Lindenhof!","price_cold":1000,"price_warm":1300,"qm":74,"price_per_qm":13.51,"rooms":"3","street":"","city":"Lindenhof, 68163 Mannheim","latitude":"","longlitude":""},{"title":"*Umzugsbonus* 3-Zimmer-Wohnung mit Einbauk\xfcche","price_cold":1377.55,"price_warm":1722.55,"qm":88.4,"price_per_qm":15.58,"rooms":"3","street":"George-Sullivan-Ring 46,","city":"K\xe4fertal, 68309 Mannheim","latitude":49.5236978,"longlitude":8.5358809},{"title":"7 Monate Zwischenmiete: Helle 2-Zimmer-Wohnung in zentraler Lage","price_cold":940,"price_warm":1100,"qm":65,"price_per_qm":14.46,"rooms":"2","street":"","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":"","longlitude":""},{"title":"Renovierte Altbauwohnung in Neckarstadt/Ost zu vermieten","price_cold":1380,"price_warm":1680,"qm":90,"price_per_qm":15.33,"rooms":"3,5","street":"","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":"","longlitude":""},{"title":"Bgm-Fuchs-Stra\xdfe 86, 68169 Mannheim","price_cold":580,"price_warm":850,"qm":58,"price_per_qm":10,"rooms":"2","street":"Bgm-Fuchs-Stra\xdfe 86,","city":"Neckarstadt-West, 68169 Mannheim","latitude":49.5038247,"longlitude":8.467907},{"title":"Gem\xfctliche 2-Zimmer-Wohnung mit Balkon und Einbauk\xfcche in Mannheim-Wallstadt","price_cold":750,"price_warm":930,"qm":65,"price_per_qm":11.54,"rooms":"2","street":"","city":"Wallstadt, 68259 Mannheim","latitude":"","longlitude":""},{"title":"Sch\xf6ne 3-Zimmer-Wohnung mit gehobener Innenausstattung mit Balkon in Mannheim","price_cold":850,"price_warm":990,"qm":80,"price_per_qm":10.62,"rooms":"3","street":"Relaisstr. 211 211,","city":"Rheinau, 68219 Mannheim","latitude":49.4383761,"longlitude":8.5235927},{"title":"3 Zimmer-Wohnung mit Balkon","price_cold":1150,"price_warm":1400,"qm":90,"price_per_qm":12.78,"rooms":"3","street":"Fred-Joachim-Schoeps-STr. 13,","city":"Friedrichsfeld, 68229 Mannheim","latitude":49.4430093,"longlitude":8.5806532},{"title":"Stilvolle, neuwertige 2-Zimmer-Wohnung in der Quadrate Mannheim","price_cold":900,"price_warm":1100,"qm":50,"price_per_qm":18,"rooms":"2","street":"T 6 33,","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":"","longlitude":""},{"title":"Helle und gut gelegene 2-Zimmer-Wohnung mit Balkon, Einbauk\xfcche und Klimaanlage in Wohlgelegen","price_cold":820,"price_warm":1020,"qm":60,"price_per_qm":13.67,"rooms":"2","street":"Nebeniusstra\xdfe 12,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.4980259,"longlitude":8.4911446},{"title":"Eine der sch\xf6nsten Altbauwohnungen Mannheims\u2013 255 m\xb2 Wohngenuss mit Stil, Substanz & Seltenheitswert","price_cold":3300,"price_warm":3785,"qm":255,"price_per_qm":12.94,"rooms":"6","street":"","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"Erstbezug! Moderne Wohnung mit Wintergarten, Gartennutzung und Arbeitszimmer","price_cold":1350,"price_warm":0,"qm":100,"price_per_qm":13.5,"rooms":"2,5","street":"","city":"K\xe4fertal, 68305 Mannheim","latitude":"","longlitude":""},{"title":"Gro\xdfz\xfcgige Wohnung mit 2 Balkonen, Fahrstuhl und EBK","price_cold":860,"price_warm":0,"qm":78,"price_per_qm":11.03,"rooms":"2","street":"","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"Frisch Renoviert! Sch\xf6ne 2-Zimmer-Wohnung wartet auf neuen Mieter!","price_cold":653,"price_warm":904,"qm":58.29,"price_per_qm":11.2,"rooms":"2","street":"Geraer Ring 2,","city":"Vogelstang, 68309 Mannheim","latitude":49.510271,"longlitude":8.5373441},{"title":"Tauschwohnung: Tausch zentrale Wohnung mit Ausblick gegen Wohnung Berlin","price_cold":870,"price_warm":0,"qm":78,"price_per_qm":11.15,"rooms":"3","street":"Neckarpromenade 15,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.4949612,"longlitude":8.476335},{"title":"*Gem\xfctliche Wohnung \xfcber den D\xe4chern der Stadt, MA-Oststadt*","price_cold":540,"price_warm":690,"qm":40,"price_per_qm":13.5,"rooms":"1","street":"Collinistrasse 18,","city":"Schwetzingerstadt/Oststadt, 68161 Mannheim","latitude":49.4901269,"longlitude":8.4773249},{"title":"Helle und ruhige 2-Zimmer-Wohnung mit Balkon","price_cold":620,"price_warm":800,"qm":62,"price_per_qm":10,"rooms":"2","street":"Hardenburgstr. 1,","city":"Rheinau, 68219 Mannheim","latitude":49.4461141,"longlitude":8.5203315},{"title":"Carl-Benz-Stra\xdfe 128, 68167 Mannheim","price_cold":670,"price_warm":870,"qm":31,"price_per_qm":21.61,"rooms":"1","street":"Carl-Benz-Stra\xdfe 128,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.4981675,"longlitude":8.4879242},{"title":"Frisch sanierte und m\xf6blierte 1-Zimmer-Wohnung mit Einbauk\xfcche in Mannheim","price_cold":430,"price_warm":600,"qm":20,"price_per_qm":21.5,"rooms":"1","street":"L2 5-10,","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":49.4845123,"longlitude":8.4652793},{"title":"Zentrale gelegene 2,5-Zimmer-Wohnung (EG) in Mannheim zu vermieten","price_cold":950,"price_warm":1050,"qm":60,"price_per_qm":15.83,"rooms":"2,5","street":"","city":"Neckarstadt-West, 68169 Mannheim","latitude":"","longlitude":""},{"title":"Sehr gepflegte 2,5-Zimmerwohnung mit Dachloggia & TG-Stellplatz!","price_cold":880,"price_warm":1200,"qm":64,"price_per_qm":13.75,"rooms":"2,5","street":"","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":"","longlitude":""},{"title":"M\xf6bliertes 1-Zimmer-Studio in den Mannheimer Quadraten!","price_cold":490,"price_warm":620,"qm":19.28,"price_per_qm":25.41,"rooms":"1","street":"","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"m\xf6bliertes Zimmer","price_cold":580,"price_warm":580,"qm":60,"price_per_qm":9.67,"rooms":"1","floor":"5","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Gem\xfctliche und helle Neubau 1 Zimmer-Wohnung mit Balkon","price_cold":790,"price_warm":930,"qm":40,"price_per_qm":19.75,"rooms":"1","floor":"2","street":"Thomas-Jeffferson-Str.38,","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Mannheimer Quadrate - WG Zimmer f\xfcr Juli 2025 !NUR JULI!","price_cold":450,"price_warm":0,"qm":13,"price_per_qm":34.62,"rooms":"2","floor":"","street":"U5 18,","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":49.4906427,"longlitude":8.4743229},{"title":"Mannheim Rheinau 2,5 Zimmer W.","price_cold":800,"price_warm":1030,"qm":65,"price_per_qm":12.31,"rooms":"2,5","floor":"5","street":"karlsruherstr 19,","city":"68219 Baden-W\xfcrttemberg - Mannheim","latitude":49.4333127,"longlitude":8.5241393},{"title":"Komplett m\xf6bliertes WG Zimmer zu vermieten (nur M\xe4nner)","price_cold":575,"price_warm":575,"qm":18,"price_per_qm":31.94,"rooms":"1","floor":"2","street":"","city":"68219 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Ganz oben angekommen: Exklusive Penthouse-Wohnung","price_cold":1710,"price_warm":2180,"qm":120.39,"price_per_qm":14.2,"rooms":"3","floor":"4","street":"George-Sullivan-Ring 30,","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":49.524407,"longlitude":8.5357385},{"title":"Ein Zimmer f\xfcr einen Monat in einer Zweizimmerwohnung","price_cold":500,"price_warm":500,"qm":18,"price_per_qm":27.78,"rooms":"1","floor":"1","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"3 ZKB N\xe4he Universit\xe4t / WG tauglich","price_cold":1320,"price_warm":1320,"qm":106,"price_per_qm":12.45,"rooms":"3","floor":"2","street":"","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"VIEL PLATZ - SCH\xd6NER GRUNDRISS - EINBAUK\xdcCHE - WBS ERFORDERLICH","price_cold":780,"price_warm":0,"qm":87,"price_per_qm":8.97,"rooms":"3","floor":"0","street":"Franklin-D.-Roosevelt-Stra\xdfe 27,","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":49.5217631,"longlitude":8.5264803},{"title":"Neuwertige, vollm\xf6blierte 3-Zimmer-Wohnung mit Terrasse & TG-Stellplatz \u2013 ab 10/2025 verf\xfcgbar","price_cold":1670,"price_warm":1927,"qm":109,"price_per_qm":15.32,"rooms":"3","floor":"0","street":"T4 7,","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":49.4899427,"longlitude":8.472641},{"title":"Voll m\xf6bilierte Wohnung in den Quadraten","price_cold":850,"price_warm":850,"qm":52,"price_per_qm":16.35,"rooms":"1","floor":"0","street":"S6,","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":49.4832445,"longlitude":8.4645749},{"title":"4-Zimmer-Wohnung mit Balkon in Mannheim-Feudenheim - ab 1.9.","price_cold":850,"price_warm":0,"qm":98,"price_per_qm":8.67,"rooms":"4","floor":"","street":"","city":"68259 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Sch\xf6ne m\xf6blierte 2-Zimmerwohnung","price_cold":1190,"price_warm":1340,"qm":58,"price_per_qm":20.52,"rooms":"2","floor":"0","street":"","city":"68199 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Sch\xf6ner Wohnen","price_cold":581,"price_warm":700,"qm":58.39,"price_per_qm":9.95,"rooms":"2,5","floor":"4","street":"Pfalzplatz 11 A,","city":"68163 Baden-W\xfcrttemberg - Mannheim","latitude":49.4661955,"longlitude":8.4729501},{"title":"4 Zimmer Wohnung in Altrip Ludwigsplatz unrenoviert","price_cold":0,"price_warm":1250,"qm":105,"price_per_qm":0,"rooms":"4","floor":"1","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Charmantes 1-Zimmer-Apartment im Herzen Mannheims (Jungbusch)","price_cold":390,"price_warm":390,"qm":17,"price_per_qm":22.94,"rooms":"1","floor":"4","street":"","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"2zkb wohnung zu vermieten 480\u20AC","price_cold":630,"price_warm":630,"qm":48,"price_per_qm":13.12,"rooms":"1","floor":"","street":"","city":"68219 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"1 Zimmerappartment ab sofort zu vermieten","price_cold":450,"price_warm":0,"qm":20,"price_per_qm":22.5,"rooms":"1","floor":"3","street":"","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Wohnung Mannheim Feudenhenheim zwischenmiete","price_cold":590,"price_warm":590,"qm":40,"price_per_qm":14.75,"rooms":"1","floor":"","street":"","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Sanierte 3-Zimmer Wohnung","price_cold":1000,"price_warm":1250,"qm":71.55,"price_per_qm":13.98,"rooms":"3","floor":"2","street":"R\xf6merstra\xdfe 87,","city":"68259 Baden-W\xfcrttemberg - Mannheim","latitude":49.4996335,"longlitude":8.5440985},{"title":"3 Zimmer Wohnung in Mannheim/ Neckarau","price_cold":1203,"price_warm":1203,"qm":66,"price_per_qm":18.23,"rooms":"3","floor":"1","street":"","city":"68199 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"1-Zimmer Wohnung Neckarstadt West zu vermieten","price_cold":410,"price_warm":410,"qm":17,"price_per_qm":24.12,"rooms":"1","floor":"0","street":"","city":"68259 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Nachmieter f\xfcr DG-Wohnung in MA-Feudenheim gesucht","price_cold":450,"price_warm":450,"qm":50,"price_per_qm":9,"rooms":"2,5","floor":"1","street":"","city":"68259 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"M\xf6blierte 1 Zimmerwohnung in Mannheim zu vermieten","price_cold":600,"price_warm":670,"qm":22,"price_per_qm":27.27,"rooms":"1","floor":"4","street":"","city":"68165 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"ICH SUCHE EINE WG PARTNERIN MIT MIR WOHNEN","price_cold":370,"price_warm":370,"qm":70,"price_per_qm":5.29,"rooms":"2","floor":"2","street":"","city":"68167 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Zentrale 1,5-Zimmer Wohnung Innenstadt/Jungbusch 01.07 - 15.08.25","price_cold":740,"price_warm":740,"qm":50,"price_per_qm":14.8,"rooms":"1,5","floor":"2","street":"","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"ICH SUCHE EINE WG PARTNERIN","price_cold":360,"price_warm":360,"qm":70,"price_per_qm":5.14,"rooms":"2","floor":"2","street":"","city":"68305 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Studenten Wohnung Mannheim Jungbusch / 1-Zimmer-Wohnung Akademies","price_cold":440,"price_warm":490,"qm":21,"price_per_qm":20.95,"rooms":"1","floor":"1","street":"","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Gem\xfctliche 2-Zimmer-Wohnung mit Balkon und schicker EBK (Beispielbilder - Erdgeschoss Wohnung)","price_cold":1227,"price_warm":1415,"qm":78.1,"price_per_qm":15.71,"rooms":"2","floor":"0","street":"Heinrich-Wittkamp-Str. 19,","city":"68167 Baden-W\xfcrttemberg - Mannheim","latitude":49.502039,"longlitude":8.4936349},{"title":"**ERSTBEZUG** Toll geschnittene 1-Zimmer-Wohnung mit TERRASSE und EBK im Neubauquartier \'Field 4\'","price_cold":808,"price_warm":918,"qm":43.9,"price_per_qm":18.41,"rooms":"1","floor":"0","street":"Heinrich-Wittkamp-Stra\xdfe 9,","city":"68167 Baden-W\xfcrttemberg - Mannheim","latitude":49.5019327,"longlitude":8.4931599},{"title":"Wohnung in Franklin zu vermieten","price_cold":1055,"price_warm":1055,"qm":55,"price_per_qm":19.18,"rooms":"2","floor":"3","street":"Thomas-Jefferson,","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":49.5176432,"longlitude":8.524556},{"title":"Zimmer mit 2 Betten, Balkon & K\xfcche \u2013 zentral am Wasserturm","price_cold":850,"price_warm":850,"qm":30,"price_per_qm":28.33,"rooms":"1","floor":"1","street":"","city":"68165 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Anmietung nur mit Wohnberechtigungsschein der in Baden-W\xfcrttemberg ausgestellt ist m\xf6glich!","price_cold":481,"price_warm":723,"qm":69.63,"price_per_qm":6.91,"rooms":"3","floor":"","street":"Max-Winterhalter-Ring 30,","city":"68307 Baden-W\xfcrttemberg - Mannheim","latitude":49.5499692,"longlitude":8.4776617},{"title":"1 Zimmer Wohnung","price_cold":600,"price_warm":600,"qm":42,"price_per_qm":14.29,"rooms":"1","floor":"5","street":"","city":"68163 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Moderne 3,5-Zimmer-Wohnung in zentraler Lage","price_cold":1200,"price_warm":1500,"qm":130,"price_per_qm":9.23,"rooms":"3,5","floor":"4","street":"","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"TOP Lage, neu m\xf6bliertes und renoviertes Appartement","price_cold":470,"price_warm":570,"qm":22,"price_per_qm":21.36,"rooms":"1","floor":"","street":"","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Gro\xdfz\xfcgige 1-2 ZKB in ruhiger Innenhoflage, U 6-Quadrat","price_cold":750,"price_warm":930,"qm":65,"price_per_qm":11.54,"rooms":"2","floor":"","street":"","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Nachmieter gesucht zum 01.08.2025 Neckarstadt-Ost","price_cold":730,"price_warm":730,"qm":45,"price_per_qm":16.22,"rooms":"1,5","floor":"","street":"","city":"68167 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Helles M\xe4dels komplett saniertes WG Zimmer 20m2","price_cold":750,"price_warm":750,"qm":20,"price_per_qm":37.5,"rooms":"3","floor":"2","street":"","city":"68219 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Modernisierte und WG taugliche 3-Zimmer-Dachgeschosswohnung in MA","price_cold":900,"price_warm":1300,"qm":114,"price_per_qm":7.89,"rooms":"3","floor":"4","street":"Hauptstra\xdfe 59,","city":"68259 Baden-W\xfcrttemberg - Mannheim","latitude":49.4866997,"longlitude":8.5300409},{"title":"Gro\xdfz\xfcgige 2-Zimmer-Wohnung mit EBK und BALKON im Neubauquartier FIELD 4","price_cold":1201,"price_warm":1386,"qm":74.1,"price_per_qm":16.21,"rooms":"2","floor":"0","street":"Heinrich-Wittkamp-Stra\xdfe 13,","city":"68167 Baden-W\xfcrttemberg - Mannheim","latitude":49.502039,"longlitude":8.4936349},{"title":"Hell 2-Zimmer-Wohnung mit Balkon im Herzen von Mannheim","price_cold":850,"price_warm":1070,"qm":60,"price_per_qm":14.17,"rooms":"2","floor":"3","street":"","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"1 Zimmer Wohnung Mannheim Quadrate","price_cold":565,"price_warm":565,"qm":40,"price_per_qm":14.12,"rooms":"1","floor":"3","street":"","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Sanierte Wohnung mit zwei Zimmern und Einbauk\xfcche in Mannheim","price_cold":915,"price_warm":1065,"qm":65,"price_per_qm":14.08,"rooms":"2,5","floor":"2","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"3 ZKB 84m2 mit 2 Balkons in Mannheim K\xe4fertal","price_cold":1200,"price_warm":1200,"qm":84,"price_per_qm":14.29,"rooms":"3","floor":"2","street":"","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Charmante 2-Zimmer-Wohnung in Mannheim-Oststadt","price_cold":1100,"price_warm":1300,"qm":67,"price_per_qm":16.42,"rooms":"2","floor":"4","street":"","city":"68165 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Vier W\xe4nde f\xfcr eigene Tr\xe4ume, Wohnen in Mannheim-Franklin","price_cold":821,"price_warm":0,"qm":57.88,"price_per_qm":14.18,"rooms":"2","floor":"0","street":"Thomas-Jefferson-Str. 57a,","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":49.5209353,"longlitude":8.5304581},{"title":"Studentenwohnhung in Mannheim, ideal f\xfcr duale Studenten!","price_cold":500,"price_warm":500,"qm":24,"price_per_qm":20.83,"rooms":"1","floor":"","street":"","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Apartment in Franklin, for rent for 6 months","price_cold":1055,"price_warm":1055,"qm":56,"price_per_qm":18.84,"rooms":"2","floor":"3","street":"","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Tolle Wohnung in Mannheim Neckarstadt-West!","price_cold":950,"price_warm":0,"qm":90,"price_per_qm":10.56,"rooms":"3","floor":"","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Wohnung zu vermieten in Mannheim!","price_cold":600,"price_warm":0,"qm":50,"price_per_qm":12,"rooms":"2","floor":"","street":"","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"3,5 ZKB Balkon Wohnung in Neckarstadt Ost zu vermieten","price_cold":1680,"price_warm":1680,"qm":9,"price_per_qm":186.67,"rooms":"3,5","floor":"4","street":"","city":"68167 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"m\xf6bliertes Zimmer","price_cold":580,"price_warm":580,"qm":60,"price_per_qm":9.67,"rooms":"1","floor":"5","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Mietwohnung","price_cold":600,"price_warm":800,"qm":50,"price_per_qm":12,"rooms":"2","floor":"2","street":"","city":"68307 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Einliegerwohnung in MA","price_cold":650,"price_warm":650,"qm":37,"price_per_qm":17.57,"rooms":"1","floor":"","street":"","city":"68305 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"3,5 Zimmerwohnung Mannheim feudenheim","price_cold":850,"price_warm":850,"qm":70,"price_per_qm":12.14,"rooms":"3,5","floor":"","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Sch\xf6ne 1-Zi-Wohnung in Mannheim, N\xe4he Hochschule","price_cold":395,"price_warm":0,"qm":25,"price_per_qm":15.8,"rooms":"1","floor":"2","street":"Neckarauer Stra\xdfe 23,","city":"68199 Baden-W\xfcrttemberg - Mannheim","latitude":49.4555378,"longlitude":8.493902},{"title":"Top Chance! Beste Lage! Frisch renovierte 3-Zi-Wohnung! Aufzug!","price_cold":1200,"price_warm":1400,"qm":85,"price_per_qm":14.12,"rooms":"3","floor":"3","street":"","city":"68163 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"3 Zimmer Wohnung in Mannheim Sch\xf6nau zu vermieten","price_cold":1000,"price_warm":1280,"qm":86,"price_per_qm":11.63,"rooms":"3","floor":"2","street":"","city":"68307 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Wohnung 3,5 ZKB Mannheim","price_cold":800,"price_warm":980,"qm":86,"price_per_qm":9.3,"rooms":"3,5","floor":"4","street":"","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"1 Zimmer Wohnung in Mannheim zu Vermieten (5.00)","price_cold":365,"price_warm":490,"qm":33,"price_per_qm":11.06,"rooms":"1","floor":"0","street":"Humboldstra\xdfe 3-9,","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Sehr sch\xf6ne 2 Zi - Wohnung in den Quadraten","price_cold":810,"price_warm":0,"qm":60,"price_per_qm":13.5,"rooms":"2","floor":"","street":"Q7 12b,","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":49.4860339,"longlitude":8.4746386},{"title":"2-ZKB-EG-Wohnung in den E-Quadraten zu vermieten","price_cold":1040,"price_warm":0,"qm":67,"price_per_qm":15.52,"rooms":"2","floor":"0","street":"","city":"68159 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Frisch renovierte 2er-WG in der Neckarstadt / Neubezug","price_cold":850,"price_warm":1080,"qm":59,"price_per_qm":14.41,"rooms":"2","floor":"","street":"Diesterwegstra\xdfe,","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":49.4988027,"longlitude":8.4654064},{"title":"4 ZKB Erdgrschoss Wohnung","price_cold":1400,"price_warm":1650,"qm":85,"price_per_qm":16.47,"rooms":"4","floor":"0","street":"","city":"68305 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"***EXKLUSIVE PENTHOUSE WOHNUNG: 2-Zimmer mit Einbauk\xfcche und modernem Bad in Mannheim***","price_cold":1325,"price_warm":1534,"qm":83.8,"price_per_qm":15.81,"rooms":"2","floor":"5","street":"Heinrich-Wittkamp-Stra\xdfe 9,","city":"68167 Baden-W\xfcrttemberg - Mannheim","latitude":49.5019327,"longlitude":8.4931599},{"title":"Familiengl\xfcck auf 132 Quadratmetern: 4-Zimmer-Penthousewohnung","price_cold":1945,"price_warm":2465,"qm":132.75,"price_per_qm":14.65,"rooms":"4","floor":"4","street":"George-Sullivan-Ring 40,","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":49.523946,"longlitude":8.5355178},{"title":"*Umzugsbonus* Wohnen im Sullivan Parkside: Perfekt f\xfcr Familien!","price_cold":1420,"price_warm":1785,"qm":93.53,"price_per_qm":15.18,"rooms":"3","floor":"2","street":"George-Sullivan-Ring 42,","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":49.524114,"longlitude":8.535953},{"title":"Top Zentral Schwetzingerstadt Mannheim","price_cold":990,"price_warm":1350,"qm":60,"price_per_qm":16.5,"rooms":"2","floor":"3","street":"","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Loft-Wohnung mit 3 Balkonen im Herzen Mannheims \u2013 2-Zi, 2 B\xe4der","price_cold":1400,"price_warm":1400,"qm":110,"price_per_qm":12.73,"rooms":"2","floor":"2","street":"","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"*Umzugsbonus* Gro\xdfz\xfcgige 2-Zimmer-Wohnung mit Dachterrassen","price_cold":1175,"price_warm":1495,"qm":80.87,"price_per_qm":14.53,"rooms":"2","floor":"3","street":"George-Sullivan-Ring 46,","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":49.5236978,"longlitude":8.5358809},{"title":"Wundersch\xf6ne 4 ZKB Wohnung Nachmieter gesucht","price_cold":860,"price_warm":1150,"qm":96,"price_per_qm":8.96,"rooms":"4","floor":"3","street":"","city":"68309 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"5 ZKB, Balkon im historischen Kulturdenkmal, WG-geeignet","price_cold":1700,"price_warm":1990,"qm":135,"price_per_qm":12.59,"rooms":"5","floor":"4","street":"","city":"68161 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Schicke Wohnung in der Neckarstadt-West!","price_cold":1300,"price_warm":0,"qm":110,"price_per_qm":11.82,"rooms":"4","floor":"","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Gro\xdfe Wohnung mit dem ganz bestimmten Charm in der Neckarstadt-West!","price_cold":1420,"price_warm":0,"qm":120,"price_per_qm":11.83,"rooms":"5","floor":"","street":"","city":"68169 Baden-W\xfcrttemberg - Mannheim","latitude":"","longlitude":""},{"title":"Sanierte Wohnung in 1A-Lage n\xe4he HBF und Uni","price_cold":720,"price_warm":920,"qm":48,"price_per_qm":15,"rooms":"1,5","floor":"3","street":"Augartenstra\xdfe 9,","city":"68165 Baden-W\xfcrttemberg - Mannheim","latitude":49.4800206,"longlitude":8.4791215},{"title":"M\xf6bliertes Appartement, 20 qm mit Balkon, in Toplage in Kaiserslautern zu vermieten.","price_cold":350,"price_warm":480,"qm":20,"price_per_qm":17.5,"rooms":"1","floor":"0","street":"Wackenm\xfchlstra\xdfe 16,","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":49.4396452,"longlitude":7.7629146},{"title":"Tolle 1-ZKB in der Stadtmitte!!","price_cold":350,"price_warm":0,"qm":24,"price_per_qm":14.58,"rooms":"1","floor":"3","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Sehr helle 4 Zimmer Wohnung im Herzen von Kaiserslautern","price_cold":850,"price_warm":0,"qm":86,"price_per_qm":9.88,"rooms":"4","floor":"0","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Wohnung f\xfcr 2,5 Monate in Kaiserslautern","price_cold":1000,"price_warm":1000,"qm":67,"price_per_qm":14.93,"rooms":"2","floor":"4","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"\u203C\uFE0FWohnung KL Zentrum (Nachmieter ab sofort)\u203C\uFE0F","price_cold":850,"price_warm":850,"qm":65,"price_per_qm":13.08,"rooms":"2","floor":"2","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Demn\xe4chst frei! 3-Zimmer-Wohnung in Kaiserslautern","price_cold":627,"price_warm":0,"qm":61.53,"price_per_qm":10.19,"rooms":"3","floor":"1","street":"Stiftswaldstra\xdfe 37,","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":49.4428727,"longlitude":7.7986784},{"title":"3 Zimmer Wohnung KL-Siegelbach","price_cold":610,"price_warm":900,"qm":70,"price_per_qm":8.71,"rooms":"2","floor":"0","street":"","city":"67661 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"1-Zimmer Appartement","price_cold":400,"price_warm":470,"qm":32,"price_per_qm":12.5,"rooms":"1","floor":"","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"IK | Kaiserslautern: Moderne 4 Zimmerwohnung in einer besonders sch\xf6nen Lage!","price_cold":2500,"price_warm":0,"qm":166,"price_per_qm":15.06,"rooms":"4","floor":"1","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Sonnige Wohnung mit herrlicher Aussicht ab sofort zu vermieten","price_cold":800,"price_warm":0,"qm":66,"price_per_qm":12.12,"rooms":"3","floor":"17","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Einzelzimmer","price_cold":325,"price_warm":500,"qm":19,"price_per_qm":17.11,"rooms":"1","floor":"14","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"sch\xf6ne 2 Zimmer Wohnung","price_cold":550,"price_warm":650,"qm":50,"price_per_qm":11,"rooms":"2","floor":"2","street":"","city":"67659 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"3 Zimmer /K\xfcche /Bad in Bruchm\xfchlbach","price_cold":1300,"price_warm":0,"qm":98,"price_per_qm":13.27,"rooms":"3","floor":"0","street":"","city":"67659 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Sch\xf6ne 1-Zi.- Whg. ab 1.7. zu verm. M\xf6biliert u. kpl. ausgest. mit K\xfcchenz., Waschmasch. u. Innenhof","price_cold":460,"price_warm":0,"qm":27.37,"price_per_qm":16.81,"rooms":"1","floor":"1","street":"Birnstra\xdfe 24,","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":49.4412008,"longlitude":7.779953},{"title":"Sch\xf6ne helle 3 Zimmer Wohnung in bester Lage","price_cold":890,"price_warm":0,"qm":91,"price_per_qm":9.78,"rooms":"3","floor":"0","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"1 Zimmer Wohnung in Kaiserslautern","price_cold":480,"price_warm":0,"qm":40,"price_per_qm":12,"rooms":"1","floor":"1","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Immediately Available: Quiet and Central 80sqm City-Apartment","price_cold":0,"price_warm":1900,"qm":80,"price_per_qm":0,"rooms":"2","floor":"","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"3-Zimmer-Wohnung in Kaiserslautern","price_cold":629,"price_warm":0,"qm":61.53,"price_per_qm":10.22,"rooms":"3","floor":"2","street":"Stiftswaldstra\xdfe 39,","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":49.4428541,"longlitude":7.7988885},{"title":"Wohnung direkt an der Uni Kaiserslautern - Beschreibung lesen!","price_cold":355,"price_warm":0,"qm":21,"price_per_qm":16.9,"rooms":"1","floor":"","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Stilvolle 4-Zimmer-Wohnung mit Dachterrasse im Herzen Kaiserslauterns","price_cold":1490,"price_warm":0,"qm":130,"price_per_qm":11.46,"rooms":"4","floor":"","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Wohnung zur Zweischenmiete, 15. Juni bis ca. Dez.","price_cold":650,"price_warm":650,"qm":46,"price_per_qm":14.13,"rooms":"2","floor":"3","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"KL City 3 ZKB Wohnung mit Balkon (Fu\xdfg\xe4ngerzone KL)","price_cold":560,"price_warm":810,"qm":79,"price_per_qm":7.09,"rooms":"3","floor":"2","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Attraktive 3 Zimmerwohnung","price_cold":600,"price_warm":0,"qm":60,"price_per_qm":10,"rooms":"3","floor":"","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Sanierte Wohnung N\xe4he Klinikum und FH","price_cold":510,"price_warm":0,"qm":45,"price_per_qm":11.33,"rooms":"1,5","floor":"4","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Nachmieter gesucht f\xfcr gem\xfctliche 1-Zimmerwohnung N\xe4he Stadtpark","price_cold":360,"price_warm":460,"qm":18,"price_per_qm":20,"rooms":"1","floor":"1","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"1-Zimmer Wohnung","price_cold":360,"price_warm":0,"qm":25,"price_per_qm":14.4,"rooms":"1","floor":"3","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Frisch renovierte 2-Zimmer-Wohnung","price_cold":680,"price_warm":680,"qm":50,"price_per_qm":13.6,"rooms":"2","floor":"4","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"KL Fu\xdfg\xe4ngerzone 2 ZKB Neu renoviert 94 qm","price_cold":890,"price_warm":990,"qm":94,"price_per_qm":9.47,"rooms":"2","floor":"1","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"freies WG Zimmer direkt am Stadtpark - mit 3 Mitbewohnern","price_cold":375,"price_warm":0,"qm":20,"price_per_qm":18.75,"rooms":"1","floor":"","street":"Pirmasenser Str.,","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":49.439291,"longlitude":7.7639446},{"title":"3Zimmer 65m2 K\xfcche, Bad,1.Og. 650\u20AC kalt plus Nk in Kaiserslautern","price_cold":650,"price_warm":830,"qm":65,"price_per_qm":10,"rooms":"3","floor":"1","street":"Merianstr.19,","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":49.4534546,"longlitude":7.7630246},{"title":"Wohnen, wo die Stadt pulsiert - renoviertes Apartment in Bestlage","price_cold":637,"price_warm":0,"qm":53,"price_per_qm":12.02,"rooms":"1","floor":"1","street":"Eisenbahnstra\xdfe 14-16,","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":49.4365576,"longlitude":7.7725761},{"title":"City-Wohntraum:Helle 2-Zimmer-Wohnung nach Sanierung zu vermieten","price_cold":864,"price_warm":0,"qm":72,"price_per_qm":12,"rooms":"2","floor":"1","street":"Eisenbahnstra\xdfe 14-16,","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":49.4365576,"longlitude":7.7725761},{"title":"Sch\xf6ne 2-Zimmer-Wohnung mit Balkon (Nordbahnstr. Kaiserslautern)","price_cold":540,"price_warm":0,"qm":63,"price_per_qm":8.57,"rooms":"2,5","floor":"2","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Wohnung 153 qm 1400.- plus 545 Nebenkosten","price_cold":1400,"price_warm":0,"qm":153,"price_per_qm":9.15,"rooms":"4","floor":"4","street":"St.- Marienplatz 19,","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":49.4419961,"longlitude":7.7609996},{"title":"2 Zimmer Wohnung - Stilvoll eingerichtet - voll m\xf6bliert - All-Inclusive!","price_cold":950,"price_warm":1100,"qm":45,"price_per_qm":21.11,"rooms":"2","floor":"2","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"M\xf6bilierte 1-Zimmer Wohnung n\xe4he Volkspark","price_cold":550,"price_warm":600,"qm":29,"price_per_qm":18.97,"rooms":"1","floor":"4","street":"","city":"67659 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Sch\xf6ne 1-ZKB Wohnung in guter Lage - mit Stellplatz","price_cold":430,"price_warm":550,"qm":32,"price_per_qm":13.44,"rooms":"1","floor":"1","street":"Alex-M\xfcller-Stra\xdfe 97,","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":49.4548147,"longlitude":7.7725333},{"title":"Vollm\xf6blierte 1 Zimmer Wohnung, zentral","price_cold":435,"price_warm":435,"qm":18,"price_per_qm":24.17,"rooms":"1","floor":"2","street":"","city":"67659 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"2 ZKB in einem Hochhaus im Zentrum von KL","price_cold":650,"price_warm":0,"qm":50.5,"price_per_qm":12.87,"rooms":"2","floor":"16","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Spacious Fully Furnished Apartment in Kaiserslautern","price_cold":0,"price_warm":0,"qm":99,"price_per_qm":0,"rooms":"3","floor":"0","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Zwischenmiete in Uni-N\xe4he \u2013 1-Zimmer-Wohnung in Kaiserslautern","price_cold":500,"price_warm":0,"qm":22,"price_per_qm":22.73,"rooms":"1","floor":"1","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Apartment zu vermieten","price_cold":400,"price_warm":483,"qm":33.71,"price_per_qm":11.87,"rooms":"1","floor":"","street":"Zollamtstra\xdfe 7,","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":49.435399,"longlitude":7.7702195},{"title":"2ZKB Kaiserslautern Zentrum / Altstadt","price_cold":730,"price_warm":0,"qm":62,"price_per_qm":11.77,"rooms":"2","floor":"1","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"2 Zimmerwohnung zu vermieten","price_cold":600,"price_warm":0,"qm":60,"price_per_qm":10,"rooms":"2","floor":"2","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Wohnung sucht neue Mieter","price_cold":0,"price_warm":0,"qm":95,"price_per_qm":0,"rooms":"2","floor":"0","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Apadment ins ramstein Einsiedlerhof","price_cold":500,"price_warm":500,"qm":28,"price_per_qm":17.86,"rooms":"1","floor":"2","street":"Weilerbacher Strasse 91,","city":"67661 Rheinland-Pfalz - Kaiserslautern","latitude":49.4381523,"longlitude":7.6529655},{"title":"Charmante DG-Wohnung im Herzen von Kaiserslautern","price_cold":720,"price_warm":0,"qm":72,"price_per_qm":10,"rooms":"3,5","floor":"","street":"Benzinoring,","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":49.4492,"longlitude":7.7724309},{"title":"1 Zimnmer in Kaiserslautern","price_cold":350,"price_warm":600,"qm":30,"price_per_qm":11.67,"rooms":"1","floor":"0","street":"Kurt Schumacher Str. 66,","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":49.4229826,"longlitude":7.7392562},{"title":"Apartment Kaiserslautern L\xe4mmchesberg N\xe4he Uni","price_cold":0,"price_warm":0,"qm":24,"price_per_qm":0,"rooms":"1","floor":"1","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Nachmieter gesucht: 3-Zimmer-Wohnung N\xe4he Westpfalz-Klinikum","price_cold":730,"price_warm":730,"qm":70,"price_per_qm":10.43,"rooms":"3","floor":"1","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"4 Zimmer Wohnung Kaiserslautern Unigebiet mit K\xfcche 1200 Kaltmite","price_cold":1200,"price_warm":1585,"qm":92,"price_per_qm":13.04,"rooms":"4","floor":"1","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"2,5 Zimmerwohnung in Hohenecken Wallbox vorhanden","price_cold":950,"price_warm":950,"qm":73,"price_per_qm":13.01,"rooms":"2,5","floor":"1","street":"","city":"67661 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Wohnung Kaiserslautern, Pariserstra\xdfe 161, 67655 KL","price_cold":950,"price_warm":950,"qm":75,"price_per_qm":12.67,"rooms":"3","floor":"2","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Moderne Wohnung 2ZKB Balkon inkl K\xfcche+Stellplatz, an der UNI","price_cold":890,"price_warm":0,"qm":66,"price_per_qm":13.48,"rooms":"2","floor":"0","street":"Theodor-Heuss-Stra\xdfe 1,","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":49.4259443,"longlitude":7.7487201},{"title":"Einraumwohnung KL-Uni Gebiet direkt am Davenportplatz","price_cold":375,"price_warm":525,"qm":24,"price_per_qm":15.62,"rooms":"1","floor":"0","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"2 Zimmerwohnung mit GARTEN in ruhiger Lage, Kaiserslautern","price_cold":950,"price_warm":950,"qm":70,"price_per_qm":13.57,"rooms":"2","floor":"1","street":"","city":"67659 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"117.09 Sch\xf6ne 1 ZKB Wohnung Slevogstr. 3 in 67659 Kaiserslautern","price_cold":450,"price_warm":650,"qm":37.04,"price_per_qm":12.15,"rooms":"1","floor":"2","street":"Slevogtstr. 3,","city":"67659 Rheinland-Pfalz - Kaiserslautern","latitude":49.4445303,"longlitude":7.7443292},{"title":"KL-Erfenbach-sch\xf6ne 4 Zimmer-K\xfcche-Bad-Wohnung+Hof+KFZ-Stellplatz","price_cold":630,"price_warm":0,"qm":88,"price_per_qm":7.16,"rooms":"4","floor":"0","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Monteurapartment Tage/Wochenweise in Kaiserslautern","price_cold":0,"price_warm":0,"qm":25,"price_per_qm":0,"rooms":"1","floor":"","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"3 Zimmer / K\xfcche / Bad / WC in Kaiserslautern / Dansenberg","price_cold":650,"price_warm":850,"qm":75,"price_per_qm":8.67,"rooms":"3","floor":"2","street":"Im Langacker 3,","city":"67661 Rheinland-Pfalz - Kaiserslautern","latitude":49.4065109,"longlitude":7.7335543},{"title":"2-Zimmerwohnung mit Garten in Kaiserslautern-Espensteig","price_cold":700,"price_warm":950,"qm":70,"price_per_qm":10,"rooms":"2","floor":"1","street":"Espensteigstra\xdfe 12,","city":"67661 Rheinland-Pfalz - Kaiserslautern","latitude":49.399321,"longlitude":7.7124942},{"title":"3 ZKB Kaiserslautern N\xe4he Klinikum - Voll eingerichtet -Befristet","price_cold":885,"price_warm":0,"qm":64,"price_per_qm":13.83,"rooms":"3","floor":"","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Sch\xf6ne 2-Zimmer-Wohnung ab 15.07.2025","price_cold":630,"price_warm":790,"qm":62,"price_per_qm":10.16,"rooms":"2","floor":"3","street":"","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Dieses frisch renovierte Apartment wartet auf Sie...","price_cold":400,"price_warm":500,"qm":20,"price_per_qm":20,"rooms":"1","floor":"1","street":"Mannheimerstra\xdfe 128,","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":49.4449924,"longlitude":7.7883071},{"title":"Sehr sch\xf6nes 1-Zimmer Appartement am Stadtrand von Kaiserslautern!","price_cold":550,"price_warm":730,"qm":33,"price_per_qm":16.67,"rooms":"1,5","floor":"4","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"1 Zimmer Wohnung zur Untermiete","price_cold":350,"price_warm":350,"qm":30,"price_per_qm":11.67,"rooms":"1","floor":"5","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"+++ GEPFLEGT UND M\xd6BLIERT +++ 1-Zi.-Apartment in KL nahe Altstadt","price_cold":419,"price_warm":499,"qm":22,"price_per_qm":19.05,"rooms":"1","floor":"3","street":"Haspelstr. 10,","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":49.4487981,"longlitude":7.7760458},{"title":"Tolle, moderne 2 Zimmer Wohnung mit Einbauk\xfcche","price_cold":595,"price_warm":795,"qm":73.6,"price_per_qm":8.08,"rooms":"2","floor":"3","street":"Ulmenstra\xdfe 9,","city":"67661 Rheinland-Pfalz - Kaiserslautern","latitude":49.418598,"longlitude":7.6957409},{"title":"1-Zimmer-Wohnung in direkter Unin\xe4he!!!","price_cold":390,"price_warm":480,"qm":24.02,"price_per_qm":16.24,"rooms":"1","floor":"","street":"Kurt-Schumacher-Stra\xdfe 34,","city":"67663 Rheinland-Pfalz - Kaiserslautern","latitude":49.4255708,"longlitude":7.7437998},{"title":"stillvolle 2 ZKB \\"Villa Spatz\\"","price_cold":510,"price_warm":620,"qm":52,"price_per_qm":9.81,"rooms":"2","floor":"1","street":"","city":"67657 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Helle 3 ZKB Wohnung im Herzen von Kaiserslautern","price_cold":630,"price_warm":0,"qm":75.11,"price_per_qm":8.39,"rooms":"3","floor":"1","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Helle 1-Zimmer-Wohnung N\xe4he Klinikum / Innenstadt","price_cold":420,"price_warm":0,"qm":27,"price_per_qm":15.56,"rooms":"1","floor":"2","street":"","city":"67655 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"M\xf6blierte 3-Zi-Wohnung mit Balkon im Stadtzentrum Kaiserslautern","price_cold":1100,"price_warm":0,"qm":67,"price_per_qm":16.42,"rooms":"3","floor":"1","street":"","city":"67659 Rheinland-Pfalz - Kaiserslautern","latitude":"","longlitude":""},{"title":"Modernes Appartement in zentraler Lage","price_cold":450,"price_warm":530,"qm":24,"price_per_qm":18.75,"rooms":"1","floor":"1","street":"H 1 12+13,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"Wundersch\xf6ne und hochwertige 3-Zimmer-Penthouse Wohnung in Mannheim","price_cold":1785,"price_warm":2190,"qm":115.69,"price_per_qm":15.43,"rooms":"3","floor":"5","street":"Leonie-Ossowski-Promenade 15,","city":"K\xe4fertal, 68309 Mannheim","latitude":49.5031062,"longlitude":8.5189432},{"title":"32m\xb2 - Vollm\xf6bliertes Apartment in Unin\xe4he","price_cold":720,"price_warm":890,"qm":32,"price_per_qm":22.5,"rooms":"1","floor":"2","street":"Seckenheimer Stra\xdfe 68a,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4789407,"longlitude":8.4816894},{"title":"42m\xb2 - Vollm\xf6bliertes Apartment mit eigener Terrasse","price_cold":900,"price_warm":1070,"qm":42,"price_per_qm":21.43,"rooms":"1","floor":"1","street":"Seckenheimer Stra\xdfe 68a,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4789407,"longlitude":8.4816894},{"title":"2 Monat mietfrei! Zimmer f\xfcr Studenten und Azubis - Vollm\xf6bliert mit Internetflat zum 01.08.2025","price_cold":445,"price_warm":550,"qm":20.96,"price_per_qm":21.23,"rooms":"1","floor":"2","street":"Birkenauer Str. 49,","city":"K\xe4fertal, 68309 Mannheim","latitude":49.5149808,"longlitude":8.5286457},{"title":"Modernisierte 2-Zimmer-Wohnung mit Balkon in Mannheim","price_cold":850,"price_warm":1095,"qm":56.25,"price_per_qm":15.11,"rooms":"2","floor":"2","street":"Herzogenriedstra\xdfe 5,","city":"Neckarstadt-Ost/Wohlgelegen, 68169 Mannheim","latitude":49.5086518,"longlitude":8.4713089},{"title":"Nachmieter gesucht f\xfcr helle 2 Zimmer Wohnung in Neckarstadt Ost","price_cold":650,"price_warm":760,"qm":55,"price_per_qm":11.82,"rooms":"2","floor":"4","street":"Lange R\xf6tterstra\xdfe 61,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.4972311,"longlitude":8.4845634},{"title":"Komfortable 2-Zimmer WG, mit separater kleiner Einbauk\xfcche","price_cold":785,"price_warm":984,"qm":42.48,"price_per_qm":18.48,"rooms":"2","floor":"2","street":"Leonie-Ossowski-Promenade 15,","city":"K\xe4fertal, 68309 Mannheim","latitude":49.5031062,"longlitude":8.5189432},{"title":"Sch\xf6ne und gepflegte 2-Zimmer-Wohnung mit gehobener Innenausstattung mit Einbauk\xfcche in Mannheim","price_cold":595,"price_warm":595,"qm":67,"price_per_qm":8.88,"rooms":"2","floor":"2","street":"Hagenauerstr. 21,","city":"Friedrichsfeld, 68229 Mannheim","latitude":49.4415729,"longlitude":8.58144},{"title":"Einzelapartment - Mannheimer Oststadt - UNTERMIETE","price_cold":540,"price_warm":660,"qm":26,"price_per_qm":20.77,"rooms":"1,5","floor":"1","street":"Mollstra\xdfe 6,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4805475,"longlitude":8.4799733},{"title":"Geschmackvolle 1-Zimmer-Wohnung mit Balkon und Einbauk\xfcche in Mannheim","price_cold":350,"price_warm":495,"qm":23.08,"price_per_qm":15.16,"rooms":"1","floor":"4","street":"Carl-Metz-Stra\xdfe 2,","city":"Lindenhof, 68163 Mannheim","latitude":49.4766909,"longlitude":8.4686792},{"title":"Attraktive 3-Zimmer-Wohnung in Mannheim","price_cold":720,"price_warm":910,"qm":60,"price_per_qm":12,"rooms":"3","floor":"2","street":"Rastatter Stra\xdfe 31,","city":"Seckenheim, 68239 Mannheim","latitude":49.4670429,"longlitude":8.556267},{"title":"Modernisierte 1-Zimmer-Wohnung mit Balkon und Einbauk\xfcche in Lortzringstr, Mannheim","price_cold":450,"price_warm":620,"qm":21,"price_per_qm":21.43,"rooms":"1","floor":"","street":"Lortzringstr 21,","city":"Neckarstadt-West, 68169 Mannheim","latitude":"","longlitude":""},{"title":"Charmantes 1-Zimmer-Apartment im Herzen Mannheims!!","price_cold":290,"price_warm":390,"qm":17,"price_per_qm":17.06,"rooms":"1","floor":"4","street":"Akademiestra\xdfe 6,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":49.4920548,"longlitude":8.4576437},{"title":"695 \u20AC - 53.5 m\xb2 - 2.5 Zi. - 4.OG","price_cold":695,"price_warm":835,"qm":53.5,"price_per_qm":12.99,"rooms":"2,5","floor":"4","street":"","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"Freundliche 1-Zimmer-Wohnung in Mannheim Innenstadt (m\xf6bliert)","price_cold":550,"price_warm":700,"qm":22,"price_per_qm":25,"rooms":"1","floor":"","street":"B 7 17,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"Charmante 2,5-Dachgeschosswohnung in Mannheim Oststadt","price_cold":690,"price_warm":930,"qm":69,"price_per_qm":10,"rooms":"2,5","floor":"5","street":"Heinrich-Lanz-Stra\xdfe X,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4790816,"longlitude":8.4730167},{"title":"Familiengl\xfcck auf 132 Quadratmetern: 4-Zimmer-Penthousewohnung","price_cold":1945,"price_warm":2465,"qm":132.75,"price_per_qm":14.65,"rooms":"4","floor":"4","street":"George-Sullivan-Ring 40,","city":"K\xe4fertal, 68309 Mannheim","latitude":49.523946,"longlitude":8.5355178},{"title":"Anschauen und Verlieben! Sonnige 3,5-Zimmer-Maisonette-Wohnung mit offenem Kamin in Neckarstadt-Ost","price_cold":1230,"price_warm":1580,"qm":104,"price_per_qm":11.83,"rooms":"3,5","floor":"5","street":"K\xe4fertaler Stra\xdfe 38,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.494692,"longlitude":8.4816331},{"title":"Freundliche 2-Zimmer-Wohnung in Mannheim n\xe4he Herschelbad","price_cold":875,"price_warm":1055,"qm":64,"price_per_qm":13.67,"rooms":"2","floor":"3","street":"","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":"","longlitude":""},{"title":"Privat - Gepflegte Wohnung mit zwei Zimmern und EBK in Mannheim","price_cold":580,"price_warm":850,"qm":58,"price_per_qm":10,"rooms":"2","floor":"3","street":"B\xfcrgermeister-strasse 86,","city":"Neckarstadt-West, 68169 Mannheim","latitude":49.5038247,"longlitude":8.467907},{"title":"Urbaner Lifestyle & Naturidyll in bester Harmonie \u2013 Exklusive Penthouse-Maisonette im gr\xfcnen Quadrat","price_cold":2150,"price_warm":2650,"qm":133,"price_per_qm":16.17,"rooms":"4","floor":"4","street":"","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"3-Zimmer-Wohnung mit Balkon und Neckarblick an der Neckarpromenade","price_cold":1067,"price_warm":1427,"qm":83,"price_per_qm":12.86,"rooms":"3","floor":"12","street":"Neckarpromenade 25,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.4945814,"longlitude":8.4776041},{"title":"1-Zimmer, K\xfcche- Apartment in den Quadraten N\xe4he Wasserturm","price_cold":680,"price_warm":780,"qm":33,"price_per_qm":20.61,"rooms":"1","floor":"2","street":"T6, 33,","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":49.4885031,"longlitude":8.4745453},{"title":"3,5ZKBB in zentraler Lage. N\xe4he Hbf.","price_cold":1100,"price_warm":1380,"qm":94,"price_per_qm":11.7,"rooms":"3,5","floor":"3","street":"Kaiserring 34,","city":"Schwetzingerstadt/Oststadt, 68161 Mannheim","latitude":49.4822873,"longlitude":8.4730219},{"title":"Erstbezug nach Sanierung 1 Zimmer- Altbauwohnung mit Balkon zu vermieten ! www.immo-kraemer.de","price_cold":510,"price_warm":660,"qm":42,"price_per_qm":12.14,"rooms":"1","floor":"1","street":"","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":"","longlitude":""},{"title":"Gro\xdfe Wohnung mit dem ganz bestimmten Charm in der Neckarstadt-West!","price_cold":1420,"price_warm":0,"qm":120,"price_per_qm":11.83,"rooms":"5","floor":"","street":"","city":"Neckarstadt-West, 68169 Mannheim","latitude":"","longlitude":""},{"title":"Feudenheim: ca. 174 m\xb2 Wohnfl\xe4che auf einer Ebene!","price_cold":1950,"price_warm":2250,"qm":174,"price_per_qm":11.21,"rooms":"4,5","floor":"0","street":"","city":"Feudenheim, 68259 Mannheim","latitude":"","longlitude":""},{"title":"Sch\xf6ne 1ZKB ab sofort zu vermieten!","price_cold":360,"price_warm":540,"qm":26,"price_per_qm":13.85,"rooms":"1","floor":"4","street":"Laurentiusstr. 19-21,","city":"Neckarstadt-West, 68167 Mannheim","latitude":49.4983679,"longlitude":8.4711834},{"title":"Moderne 3-Zimmer-Wohnung in Mannheim","price_cold":1150,"price_warm":1350,"qm":78,"price_per_qm":14.74,"rooms":"3","floor":"1","street":"Beilstra\xdfe 23,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":49.4948799,"longlitude":8.4596438},{"title":"Lichtdurchflutete Single-Dachgeschosswohnung mit Dachloggia","price_cold":700,"price_warm":890,"qm":68,"price_per_qm":10.29,"rooms":"2","floor":"5","street":"","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":"","longlitude":""},{"title":"Modernisierte 3-Zimmer-Wohnung mit Balkon und EBK in Mannheim","price_cold":1050,"price_warm":1230,"qm":115,"price_per_qm":9.13,"rooms":"3","floor":"3","street":"Relaisstra\xdfe 211,","city":"Rheinau, 68219 Mannheim","latitude":49.4245777,"longlitude":8.5351014},{"title":"Helle 3-Zimmer-Wohnung mit 2 Balkonen, Einbauk\xfcche \u2013 75\u202Fm\xb2 in Mannheim-Neckarau","price_cold":915,"price_warm":1075,"qm":75,"price_per_qm":12.2,"rooms":"3","floor":"2","street":"","city":"Neckarau, 68199 Mannheim","latitude":"","longlitude":""},{"title":"Sch\xf6ne, helle, 4-Zimmer Wohnung mit K\xfcchenzeile und Balkon in Mannheim, K\xe4fertal","price_cold":850,"price_warm":1100,"qm":98,"price_per_qm":8.67,"rooms":"4","floor":"2","street":"","city":"K\xe4fertal, 68309 Mannheim","latitude":"","longlitude":""},{"title":"WG-Zimmer im Jungbusch","price_cold":422,"price_warm":506,"qm":21,"price_per_qm":20.1,"rooms":"1","floor":"3","street":"Luisenring 23,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":49.4929115,"longlitude":8.4595938},{"title":"Sch\xf6ne helle WG-Zimmer in Neckarstadt-West zu vermieten","price_cold":500,"price_warm":625,"qm":62,"price_per_qm":8.06,"rooms":"3","floor":"2","street":"Erlenstra\xdfe 25,","city":"Neckarstadt-West, 68169 Mannheim","latitude":49.5044584,"longlitude":8.4682107},{"title":"Wundersch\xf6ne Garten-Wohnung mit gehobener Ausstattung, Einbauk\xfcche & Stellplatz in MA-Niederfeld","price_cold":1350,"price_warm":1500,"qm":90,"price_per_qm":15,"rooms":"2","floor":"1","street":"Wolframstra\xdfe 9,","city":"Neckarau, 68199 Mannheim","latitude":49.4543766,"longlitude":8.4788269},{"title":"1-Zimmer-Wohnung in Mannheim","price_cold":500,"price_warm":590,"qm":24,"price_per_qm":20.83,"rooms":"1","floor":"3","street":"S 3 8,","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":"","longlitude":""},{"title":"** TOP - Wohnung ** 3 ZKB-Wohnung Mhm-Quadrate (K3) ** ... mit Blick ins Gr\xfcne :) !!!","price_cold":1230,"price_warm":1470,"qm":92,"price_per_qm":13.37,"rooms":"3","floor":"4","street":"K 3 16,","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"4-Zimmer-Wohnung mit Balkon in Mannheim-Feudenheim \u2013 Frei ab 01.09.2025","price_cold":850,"price_warm":1200,"qm":98,"price_per_qm":8.67,"rooms":"4","floor":"","street":"","city":"Feudenheim, 68259 Mannheim","latitude":"","longlitude":""},{"title":"2-Zimmer-Penthouse-Wohnung mit luxuri\xf6ser Innenausstattung mit EBK in Mannheim","price_cold":1600,"price_warm":1800,"qm":60,"price_per_qm":26.67,"rooms":"2","floor":"5","street":"U3 16,","city":"Innenstadt/Jungbusch, 68161 Mannheim","latitude":49.4922029,"longlitude":8.4726859},{"title":"Modernisierte 2-Raum-Wohnung mit Terrasse in Mannheim-Seckenheim","price_cold":650,"price_warm":800,"qm":55,"price_per_qm":11.82,"rooms":"2","floor":"","street":"","city":"Seckenheim, 68239 Mannheim","latitude":"","longlitude":""},{"title":"Helles, ruhiges 1 Zimmer Apartment","price_cold":360,"price_warm":530,"qm":26,"price_per_qm":13.85,"rooms":"1","floor":"","street":"Werderstra\xdfe 27,","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":49.4831394,"longlitude":8.4799158},{"title":"Modernes, helles & gepflegtes 1 ZKB Appartement mit Pantryk\xfcche in Mannheim - Schwetzingerstadt","price_cold":390,"price_warm":540,"qm":29,"price_per_qm":13.45,"rooms":"1","floor":"5","street":"","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":"","longlitude":""},{"title":"Ideales Domizil f\xfcr ein ruhesuchendes Paar \u2013 Gepflegte und moderne Wohneinheit in Waldrandlage","price_cold":1150,"price_warm":1650,"qm":92,"price_per_qm":12.5,"rooms":"3,5","floor":"","street":"","city":"Waldhof, 68305 Mannheim","latitude":"","longlitude":""},{"title":"*** Neu trifft Altbauflair *** 2-Zimmer-Schmuckst\xfcck im Herzen der Stadt","price_cold":1205,"price_warm":1490,"qm":90,"price_per_qm":13.39,"rooms":"2","floor":"2","street":"","city":"Schwetzingerstadt/Oststadt, 68161 Mannheim","latitude":"","longlitude":""},{"title":"Gro\xdfz\xfcgige 5-Zi-Wohnung in erstklassiger Wohnlage zwischen Luisenpark und Neckar","price_cold":2000,"price_warm":2480,"qm":156,"price_per_qm":12.82,"rooms":"5","floor":"3","street":"","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":"","longlitude":""},{"title":"Moderne 3-Zimmer-Wohnung mit Aufzug in Toplage von Mannheim-Lindenhof!","price_cold":1000,"price_warm":1300,"qm":74,"price_per_qm":13.51,"rooms":"3","floor":"","street":"","city":"Lindenhof, 68163 Mannheim","latitude":"","longlitude":""},{"title":"*Umzugsbonus* 3-Zimmer-Wohnung mit Einbauk\xfcche","price_cold":1377.55,"price_warm":1722.55,"qm":88.4,"price_per_qm":15.58,"rooms":"3","floor":"2","street":"George-Sullivan-Ring 46,","city":"K\xe4fertal, 68309 Mannheim","latitude":49.5236978,"longlitude":8.5358809},{"title":"7 Monate Zwischenmiete: Helle 2-Zimmer-Wohnung in zentraler Lage","price_cold":940,"price_warm":1100,"qm":65,"price_per_qm":14.46,"rooms":"2","floor":"3","street":"","city":"Schwetzingerstadt/Oststadt, 68165 Mannheim","latitude":"","longlitude":""},{"title":"3 Zimmer-Wohnung mit Balkon","price_cold":1150,"price_warm":1400,"qm":90,"price_per_qm":12.78,"rooms":"3","floor":"","street":"Fred-Joachim-Schoeps-STr. 13,","city":"Friedrichsfeld, 68229 Mannheim","latitude":49.4430093,"longlitude":8.5806532},{"title":"Eine der sch\xf6nsten Altbauwohnungen Mannheims\u2013 255 m\xb2 Wohngenuss mit Stil, Substanz & Seltenheitswert","price_cold":3300,"price_warm":3785,"qm":255,"price_per_qm":12.94,"rooms":"6","floor":"1","street":"","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"Erstbezug! Moderne Wohnung mit Wintergarten, Gartennutzung und Arbeitszimmer","price_cold":1350,"price_warm":0,"qm":100,"price_per_qm":13.5,"rooms":"2,5","floor":"","street":"","city":"K\xe4fertal, 68305 Mannheim","latitude":"","longlitude":""},{"title":"Gro\xdfz\xfcgige Wohnung mit 2 Balkonen, Fahrstuhl und EBK","price_cold":860,"price_warm":0,"qm":78,"price_per_qm":11.03,"rooms":"2","floor":"6","street":"","city":"Innenstadt/Jungbusch, 68159 Mannheim","latitude":"","longlitude":""},{"title":"Frisch Renoviert! Sch\xf6ne 2-Zimmer-Wohnung wartet auf neuen Mieter!","price_cold":653,"price_warm":904,"qm":58.29,"price_per_qm":11.2,"rooms":"2","floor":"4","street":"Geraer Ring 2,","city":"Vogelstang, 68309 Mannheim","latitude":49.510271,"longlitude":8.5373441},{"title":"Tauschwohnung: Tausch zentrale Wohnung mit Ausblick gegen Wohnung Berlin","price_cold":870,"price_warm":0,"qm":78,"price_per_qm":11.15,"rooms":"3","floor":"10","street":"Neckarpromenade 15,","city":"Neckarstadt-Ost/Wohlgelegen, 68167 Mannheim","latitude":49.4949612,"longlitude":8.476335},{"title":"Stilvolle, modernisierte 1,5-Raum-Wohnung mit Balkon und EBK in Kaiserslautern","price_cold":403,"price_warm":521,"qm":30,"price_per_qm":13.43,"rooms":"1,5","floor":"1","street":"Slevogtstra\xdfe 16,","city":"Kaiserslautern-West, 67659 Kaiserslautern","latitude":49.4447823,"longlitude":7.7434868},{"title":"Exklusive 3-Zimmer-Wohnung mit Balkon und EBK in Kaiserslautern in einem 2-Parteien-Hauses","price_cold":1100,"price_warm":1260,"qm":80,"price_per_qm":13.75,"rooms":"3","floor":"1","street":"Finstersichel 8,","city":"Erzh\xfctten Wiesenthalerhof, 67659 Kaiserslautern","latitude":49.4702116,"longlitude":7.7334404},{"title":"Freundliche 3-Zimmer-Wohnung mit gehobener Innenausstattung mit Balkon und EBK in Kaiserslautern","price_cold":790,"price_warm":955,"qm":83,"price_per_qm":9.52,"rooms":"3","floor":"1","street":"Malzstra\xdfe 8,","city":"Betzen, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"3-Zimmer-Wohnung mit Balkon auf dem Betzenberg","price_cold":550,"price_warm":760,"qm":72,"price_per_qm":7.64,"rooms":"3","floor":"1","street":"","city":"Betzen, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"3-Zimmer-Wohnung mit Balkon","price_cold":660,"price_warm":850,"qm":84,"price_per_qm":7.86,"rooms":"3","floor":"3","street":"Wiesenstr. 34,","city":"Innenstadt Ost, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"Sanierte 4-Raum-Wohnung in Kaiserslautern","price_cold":920,"price_warm":1240,"qm":117,"price_per_qm":7.86,"rooms":"4","floor":"4","street":"Schillerplatz 7,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"3 Zimmer, K\xfcche,Bad .G-WC , 7. OG, mit toller Aussicht auf Kaiserslautern","price_cold":850,"price_warm":1200,"qm":96,"price_per_qm":8.85,"rooms":"3","floor":"7","street":"Mainzerstr. 2,","city":"Innenstadt Ost, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"3 ZKDB mit gro\xdfem Balkon in ruhier Lage in Kaiserslautern","price_cold":950,"price_warm":1070,"qm":82,"price_per_qm":11.59,"rooms":"3","floor":"1","street":"Dessauerstrasse 2,","city":"B\xe4nnjerr\xfcck Karl-Pfaff-Siedlung, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"Attraktive 2,5-Zimmer-Wohnung in Kaiserslautern","price_cold":410,"price_warm":500,"qm":63,"price_per_qm":6.51,"rooms":"2,5","floor":"2","street":"Mannheimer Strasse 000,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"[neu] 1 Zimmer in 3er WG - 80qm Wohnung","price_cold":175,"price_warm":295,"qm":17,"price_per_qm":10.29,"rooms":"1","floor":"2","street":"","city":"Innenstadt Nord Kaiserberg, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"Ansprechende und sanierte 3-Zimmer-EG-Wohnung in Kaiserslautern","price_cold":777,"price_warm":917,"qm":88,"price_per_qm":8.83,"rooms":"3","floor":"1","street":"Hummelstra\xdfe 5,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"3,5 ZKB - 1. OG Design-Wohnung mit sch\xf6ner Architektur in einmaliger Lage | Ab 01.05.2025 verf\xfcgbar","price_cold":1900,"price_warm":2185,"qm":94,"price_per_qm":20.21,"rooms":"3,5","floor":"1","street":"Fliegerstr. 35,","city":"Innenstadt Nord Kaiserberg, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"Moderne Wohnung 3ZKB mit Einbauk\xfcche in herrlicher Lage in Hohenecken","price_cold":860,"price_warm":955,"qm":78,"price_per_qm":11.03,"rooms":"3","floor":"1","street":"","city":"Hohenecken, 67661 Kaiserslautern","latitude":"","longlitude":""},{"title":"Attraktive 2-Zimmer-Wohnung mit gehobener Innenausstattung mit Balkon und EBK in Kaiserslautern","price_cold":440,"price_warm":640,"qm":56,"price_per_qm":7.86,"rooms":"2","floor":"3","street":"","city":"L\xe4mmchesberg-Universit\xe4tswohnstadt, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"Tolle Stadtwohnung mit Balkon und Stellplatz in frisch saniertem Altbau","price_cold":1500,"price_warm":1820,"qm":98,"price_per_qm":15.31,"rooms":"2","floor":"2","street":"Moltkestra\xdfe 62,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Ger\xe4umige 2 Zimmer-Wohnung in der Uniwohnstadt","price_cold":665,"price_warm":905,"qm":54.9,"price_per_qm":12.11,"rooms":"2","floor":"4","street":"Konrad-Adenauer-Stra\xdfe 59,","city":"L\xe4mmchesberg-Universit\xe4tswohnstadt, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"Charmante 3-Zimmer-Wohnung mit Balkon!","price_cold":1050,"price_warm":1250,"qm":90,"price_per_qm":11.67,"rooms":"3","floor":"","street":"","city":"Innenstadt West/Kotten, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"2-Zimmer-Wohnung in KL-N\xe4he Uni und Fraunhofer Institut (Wohnberechtigungsschein erforderlich)","price_cold":394.33,"price_warm":623.33,"qm":57.99,"price_per_qm":6.8,"rooms":"2","floor":"3","street":"Konrad-Adenauer-Stra\xdfe 13,","city":"L\xe4mmchesberg-Universit\xe4tswohnstadt, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL-N\xe4he City - Ideal zur Nutzung als WG: Citynahe 4-Zimmerwohnung","price_cold":850,"price_warm":970,"qm":122.63,"price_per_qm":6.93,"rooms":"4","floor":"1","street":"","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL-Ost - gro\xdfz\xfcgige 3 -Zimmerwohnung mit sep. Eingang und Terrasse","price_cold":770,"price_warm":1020,"qm":115,"price_per_qm":6.7,"rooms":"3","floor":"0","street":"","city":"Gr\xfcbent\xe4lchen/Volkspark, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL-Stadtpark - Gro\xdfz\xfcgige 2-Zimmer-Penthousewohnung mit Dachterrasse in Top-Lage","price_cold":1450,"price_warm":1730,"qm":139.57,"price_per_qm":10.39,"rooms":"2","floor":"","street":"","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL-West - attraktive Wohnung mit 3 Zimmer, K\xfcche, Bad, 2 Balkone","price_cold":790,"price_warm":1000,"qm":75.23,"price_per_qm":10.5,"rooms":"3","floor":"1","street":"","city":"Kaiserslautern-West, 67659 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL Zentrumsnah, 5 ZKB nur an Studenten WG zu vermieten","price_cold":1175,"price_warm":1525,"qm":150,"price_per_qm":7.83,"rooms":"5","floor":"1","street":"","city":"Innenstadt Nord Kaiserberg, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"* EBK gegen Abstand * modernes Bad * Wohnk\xfcche + Schlafzimmer KL WEST * ARBEITERVIERTEL *","price_cold":378,"price_warm":565,"qm":42,"price_per_qm":9,"rooms":"1","floor":"2","street":"D\xfcrerstra\xdfe 12,","city":"Kaiserslautern-West, 67659 Kaiserslautern","latitude":49.4430517,"longlitude":7.7387562},{"title":"Helles Apartment mit sch\xf6ner Aussicht im UNI-Wohngebiet","price_cold":330,"price_warm":450,"qm":25,"price_per_qm":13.2,"rooms":"1","floor":"3","street":"","city":"L\xe4mmchesberg-Universit\xe4tswohnstadt, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"NEWER 4-ROOM-APARTMENT IN BEST CITY LOCATION! EXKLUSIVE, NEUWERTIGE 4ZKB WOHNUNG!","price_cold":1500,"price_warm":1790,"qm":129,"price_per_qm":11.63,"rooms":"4","floor":"2","street":"Marktstr. 12-14,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Erstbezug nach Sanierung - Gem\xfctliche Maisonette Wohnung in zentraler Lage","price_cold":975,"price_warm":0,"qm":99.84,"price_per_qm":9.77,"rooms":"4","floor":"","street":"","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"* EBK gegen Abstand 900 EUR VB * Bad mit Wanne * sch\xf6ner Balkon * HELL * ab 01.07. * BETZENBERG *","price_cold":420,"price_warm":630,"qm":50,"price_per_qm":8.4,"rooms":"2","floor":"16","street":"Kantstra\xdfe 66,","city":"Betzen, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"Sch\xf6ne 1-Zi.- Whg. ab 1.7. zu verm. M\xf6biliert u. kpl. ausgest. mit K\xfcchenz., Waschmasch. u. Innenhof","price_cold":460,"price_warm":0,"qm":27.37,"price_per_qm":16.81,"rooms":"1","floor":"1","street":"Birnstra\xdfe 24,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Moderne 4-Zimmer-Wohnung in zentraler Innenstadtlage!","price_cold":1400,"price_warm":1400,"qm":144,"price_per_qm":9.72,"rooms":"4","floor":"1","street":"Richard-Wagner-Stra\xdfe 27,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Renovierte 3-Zimmer-Wohnung im Stadtzentrum von Kaiserslautern!","price_cold":612,"price_warm":712,"qm":68,"price_per_qm":9,"rooms":"3","floor":"3","street":"Fackelstra\xdfe 16,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Modernisierte 3-Zimmer-Wohnung in Innenstadtlage!","price_cold":985,"price_warm":1085,"qm":98,"price_per_qm":10.05,"rooms":"3","floor":"1","street":"Fackelstra\xdfe 16,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL - Kaiserberg, 5 ZKB, EBK, Tageslichtbad, Terrasse \'\'ERSTBEZUG NACH SANIERUNG\'\'","price_cold":980,"price_warm":1230,"qm":95,"price_per_qm":10.32,"rooms":"5","floor":"2","street":"","city":"Innenstadt Nord Kaiserberg, 67659 Kaiserslautern","latitude":"","longlitude":""},{"title":"Stilvolle, modernisierte 2-Raum-Wohnung mit EBK in Kaiserslautern","price_cold":499,"price_warm":638,"qm":49,"price_per_qm":10.18,"rooms":"2","floor":"","street":"","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"* DIELENBODEN - LIEBHABER aufgepasst! * AB SOFORT * n\xe4he Bahnhof/Westpfalzklnik/Stadtpark *","price_cold":602,"price_warm":0,"qm":70,"price_per_qm":8.6,"rooms":"2","floor":"1","street":"Sturmstra\xdfe 3,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Wundersch\xf6ne 3-Zimmer-Wohnung mit Balkon","price_cold":730,"price_warm":880,"qm":83,"price_per_qm":8.8,"rooms":"3","floor":"2","street":"","city":"Innenstadt Nord Kaiserberg, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"F\xfcr die KLEINE FAMILIE * 5. Etage * BETZENBERG * Bad mit Fenster, Balkon * RENOVIERT * frisch RENOVI","price_cold":561,"price_warm":855,"qm":68,"price_per_qm":8.25,"rooms":"3","floor":"5","street":"Kantstra\xdfe 70,","city":"Betzen, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"Helle 1 Zimmerwohnung mit Balkon","price_cold":390,"price_warm":490,"qm":37.55,"price_per_qm":10.39,"rooms":"1","floor":"4","street":"Barbarossastr. 3,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Gro\xdfe & Helle 2Z-Wohnung mit Balkon, 67655 KL \u2013 Bezugsfertig","price_cold":850,"price_warm":1240,"qm":80,"price_per_qm":10.62,"rooms":"2","floor":"2","street":"Humboldtstra\xdfe 3,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Exklusive Wohnung in zentraler Lage - energetische Sanierung in 2024","price_cold":1000,"price_warm":1150,"qm":75,"price_per_qm":13.33,"rooms":"2","floor":"3","street":"Tannenstra\xdfe 9,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Exklusive Penthouse - Wohnung mit gehobener Innenausstattung mit EBK in Kaiserslautern","price_cold":2340,"price_warm":2742,"qm":160,"price_per_qm":14.62,"rooms":"4","floor":"","street":"Zollamtstra\xdfe 9,","city":"L\xe4mmchesberg-Universit\xe4tswohnstadt, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"Sch\xf6ne 1-Zimmer-Wohnung in direkter N\xe4he der Universit\xe4t Kaiserslautern!","price_cold":230,"price_warm":330,"qm":20,"price_per_qm":11.5,"rooms":"1","floor":"1","street":"","city":"L\xe4mmchesberg-Universit\xe4tswohnstadt, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"Exklusive Wohnung in bester Lage von KL","price_cold":1850,"price_warm":2350,"qm":150,"price_per_qm":12.33,"rooms":"4","floor":"0","street":"Leiningerstra\xdfe 5,","city":"Innenstadt Nord Kaiserberg, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL Fu\xdfg\xe4ngerzone neu renoviert 2 ZKB Einbauk\xfcche","price_cold":890,"price_warm":990,"qm":94,"price_per_qm":9.47,"rooms":"2","floor":"1","street":"Fackelstra\xdfe 2,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Gro\xdfz\xfcgige Wohnung in zentraler Lage","price_cold":1100,"price_warm":1300,"qm":119,"price_per_qm":9.24,"rooms":"4","floor":"0","street":"Wilhelmstra\xdfe 6a,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Sch\xf6nes Appartment nahe Fachhochschule","price_cold":350,"price_warm":440,"qm":20,"price_per_qm":17.5,"rooms":"1","floor":"3","street":"Forellenstra\xdfe 27,","city":"Innenstadt West/Kotten, 67659 Kaiserslautern","latitude":"","longlitude":""},{"title":"Large rental apartment, with balcony in the city center Kaiserslautern (housing approved)","price_cold":1250,"price_warm":1600,"qm":126,"price_per_qm":9.92,"rooms":"4","floor":"1","street":"Riesenstra\xdfe 12,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"3-Zimmer-Wohnung in Kaiserslautern","price_cold":619,"price_warm":0,"qm":69.53,"price_per_qm":8.9,"rooms":"3","floor":"1","street":"Alte Br\xfccke 4,","city":"Kaiserslautern-West, 67659 Kaiserslautern","latitude":"","longlitude":""},{"title":"City-Wohnung","price_cold":640,"price_warm":840,"qm":80,"price_per_qm":8,"rooms":"3","floor":"1","street":"Blumenstra\xdfe 2,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Freundliche und gepflegte 1-Zimmer-DG-Wohnung in Kaiserslautern","price_cold":290,"price_warm":390,"qm":32,"price_per_qm":9.06,"rooms":"1","floor":"5","street":"Wiesenstra\xdfe 34,","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Gepflegte Dachgeschosswohnung f\xfcr Studenten, i. d. N\xe4he des Stadtparks!","price_cold":400,"price_warm":550,"qm":25,"price_per_qm":16,"rooms":"2","floor":"","street":"","city":"Innenstadt West/Kotten, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Wohnen und Arbeiten, gro\xdfz\xfcgige sechs Zimmer Wohnung in Kaiserslautern, Innenstadt","price_cold":1150,"price_warm":1750,"qm":175,"price_per_qm":6.57,"rooms":"6","floor":"1","street":"Glockenstra\xdfe 83,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Helle 3 ZKB mit Balkon + Keller ab 01.07.2025","price_cold":995,"price_warm":1150,"qm":82,"price_per_qm":12.13,"rooms":"3","floor":"1","street":"Pariser Str. 272,","city":"Kaiserslautern-West, 67663 Kaiserslautern","latitude":49.4394196,"longlitude":7.7327542},{"title":"Beautiful bright apartment very close to the city center 112qm\xb2","price_cold":1170,"price_warm":1420,"qm":112,"price_per_qm":10.45,"rooms":"3","floor":"2","street":"","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Stilvolle, sanierte 4-Zimmer Altbau-Wohnung mit Balkon, Einbauk\xfcche N\xe4he Stadtpark, frisch renoviert","price_cold":1697,"price_warm":1999,"qm":118,"price_per_qm":14.38,"rooms":"4","floor":"1","street":"Friedrich-Karl-Stra\xdfe 1,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"Exquisite Wohnung in der City","price_cold":1445,"price_warm":1575,"qm":95,"price_per_qm":15.21,"rooms":"3","floor":"3","street":"","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL - N\xe4he Kolping-Platz, 4 ZKB, EBK, Balkon","price_cold":950,"price_warm":0,"qm":89,"price_per_qm":10.67,"rooms":"4","floor":"1","street":"","city":"Innenstadt Ost, 67655 Kaiserslautern","latitude":"","longlitude":""},{"title":"KL - N\xe4he Volkspark, 3 ZKB, Stellplatz","price_cold":750,"price_warm":0,"qm":71,"price_per_qm":10.56,"rooms":"3","floor":"3","street":"","city":"Gr\xfcbent\xe4lchen/Volkspark, 67657 Kaiserslautern","latitude":"","longlitude":""},{"title":"Freundliche, helle 2-Zimmer Wohnung in d. Uni- Wohnstadt","price_cold":650,"price_warm":850,"qm":65,"price_per_qm":10,"rooms":"2","floor":"1","street":"Kurt-Schumacher-Stra\xdfe 68,","city":"L\xe4mmchesberg-Universit\xe4tswohnstadt, 67663 Kaiserslautern","latitude":"","longlitude":""},{"title":"Barrierefreie Seniorenwohnung","price_cold":1495.23,"price_warm":1650.23,"qm":130.02,"price_per_qm":11.5,"rooms":"3","floor":"4","street":"Pirmasenserstra\xdfe 80,","city":"Innenstadt S\xfcdwest, 67655 Kaiserslautern","latitude":"","longlitude":""}]');

},{}],"hkinW":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse('{"type":"FeatureCollection","generator":"overpass-turbo","copyright":"The data included in this document is from www.openstreetmap.org. The data is made available under ODbL.","timestamp":"2025-06-01T14:53:26Z","features":[{"type":"Feature","properties":{"@id":"relation/2814640","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Gartenstadt","name:prefix":"Stadtteil","ref":"082","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5098768,49.529336],[8.5097872,49.5295898],[8.5097818,49.5297425],[8.50981,49.5298529],[8.5106126,49.5311619],[8.5118706,49.5311568],[8.5220868,49.5310736],[8.5224641,49.5335537],[8.5254026,49.5487066],[8.5169091,49.555302],[8.5065786,49.555006],[8.482194,49.5543419],[8.4823819,49.5347518],[8.482415,49.5313252],[8.4855365,49.5301735],[8.4880151,49.5291682],[8.4887933,49.5288397],[8.4889469,49.5287609],[8.4892896,49.5285852],[8.4903942,49.5281646],[8.4992208,49.524811],[8.4994324,49.5247274],[8.5000112,49.5244795],[8.5017903,49.5236539],[8.5086315,49.5289503],[8.5091552,49.5292279],[8.5098768,49.529336]]]},"id":"relation/2814640"},{"type":"Feature","properties":{"@id":"relation/2814643","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Waldhof","name:prefix":"Stadtteil","ref":"081","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4698585,49.5249609],[8.4713235,49.5252849],[8.4764918,49.5270556],[8.4786441,49.5248043],[8.4790633,49.5249668],[8.481187,49.5241707],[8.4810787,49.5239995],[8.4815549,49.523822],[8.482788,49.5234793],[8.4828002,49.5223174],[8.482863,49.5216935],[8.4829666,49.5212462],[8.4830914,49.5208823],[8.4833925,49.5202424],[8.4837787,49.5196487],[8.484291,49.5190392],[8.4847504,49.5186026],[8.4853256,49.5181364],[8.485341,49.5181239],[8.4935628,49.5114591],[8.5006207,49.5143863],[8.5009449,49.5147722],[8.5000839,49.5148253],[8.4984552,49.5149154],[8.4961076,49.5149842],[8.4964171,49.5157735],[8.4968564,49.5170676],[8.4969701,49.5173337],[8.497131,49.5176279],[8.4973354,49.5179651],[8.4989039,49.5203617],[8.4996563,49.5215126],[8.4999969,49.5219697],[8.5006473,49.5226792],[8.5015313,49.5234518],[8.5017903,49.5236539],[8.5000112,49.5244795],[8.4994324,49.5247274],[8.4992208,49.524811],[8.4903942,49.5281646],[8.4892896,49.5285852],[8.4889469,49.5287609],[8.4887933,49.5288397],[8.4880151,49.5291682],[8.4855365,49.5301735],[8.482415,49.5313252],[8.4806148,49.5320884],[8.4797486,49.532457],[8.47813,49.5332339],[8.4751582,49.5346554],[8.4680545,49.5316077],[8.4648101,49.5302156],[8.4672992,49.5283406],[8.4689032,49.5265408],[8.4698585,49.5249609]]]},"id":"relation/2814643"},{"type":"Feature","properties":{"@id":"relation/2814657","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Luzenberg","name:prefix":"Stadtteil","ref":"083","type":"boundary","wikidata":"Q1878371"},"geometry":{"type":"Polygon","coordinates":[[[8.4725707,49.5134682],[8.4728172,49.5130957],[8.4729499,49.5128978],[8.4730185,49.5127329],[8.4730125,49.5125631],[8.4726755,49.5112555],[8.4737575,49.5112869],[8.475581,49.5113989],[8.4778485,49.5120673],[8.4798709,49.5125133],[8.4819769,49.5119631],[8.4827719,49.5131711],[8.4924587,49.5106313],[8.4931497,49.5104204],[8.4940872,49.5100805],[8.4947489,49.5098089],[8.4953039,49.509539],[8.4971089,49.5085927],[8.4935628,49.5114591],[8.485341,49.5181239],[8.4853256,49.5181364],[8.4847504,49.5186026],[8.484291,49.5190392],[8.4837787,49.5196487],[8.4833925,49.5202424],[8.4830914,49.5208823],[8.4829666,49.5212462],[8.482863,49.5216935],[8.4828002,49.5223174],[8.482788,49.5234793],[8.4815549,49.523822],[8.4810787,49.5239995],[8.481187,49.5241707],[8.4790633,49.5249668],[8.4786441,49.5248043],[8.4764918,49.5270556],[8.4713235,49.5252849],[8.4698585,49.5249609],[8.4703891,49.5232857],[8.471208,49.5189133],[8.473461,49.5158444],[8.4752664,49.5153739],[8.4725707,49.5134682]]]},"id":"relation/2814657"},{"type":"Feature","properties":{"@id":"relation/3286555","admin_level":"10","boundary":"administrative","name":"Hochst\xe4tt","ref":"102","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5422289,49.4489676],[8.5599954,49.4426788],[8.5602072,49.4429113],[8.5602714,49.4430302],[8.5603465,49.4432448],[8.5603483,49.4434294],[8.5603197,49.4436258],[8.5602473,49.4437775],[8.5595777,49.4449259],[8.5598794,49.4509912],[8.5599357,49.4512351],[8.5600599,49.4514037],[8.561534,49.4530661],[8.5395861,49.4611816],[8.5350732,49.4626459],[8.5325555,49.4634006],[8.523762,49.465971],[8.5194884,49.4672248],[8.5184602,49.4675531],[8.5169156,49.4657652],[8.5141055,49.4623134],[8.5129197,49.4608187],[8.5125536,49.4602843],[8.5122141,49.4597493],[8.5287638,49.4537332],[8.5368982,49.4508543],[8.5422289,49.4489676]]]},"id":"relation/3286555"},{"type":"Feature","properties":{"@id":"relation/3286556","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Neuhermsheim","name:prefix":"Stadtteil","ref":"092","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4892667,49.4697068],[8.4909759,49.4689674],[8.4925213,49.4682418],[8.4937485,49.4675891],[8.4981197,49.4654377],[8.5008804,49.4639051],[8.506601,49.4616147],[8.5094428,49.4605646],[8.5122141,49.4597493],[8.5125536,49.4602843],[8.5129197,49.4608187],[8.5141055,49.4623134],[8.5169156,49.4657652],[8.5184602,49.4675531],[8.5174087,49.4678966],[8.51667,49.4681443],[8.515724,49.4684744],[8.51506,49.4687118],[8.5140259,49.4690987],[8.5017008,49.4739102],[8.5000116,49.471625],[8.4994776,49.4711273],[8.498932,49.4707172],[8.4981742,49.470268],[8.4973963,49.4699038],[8.4966212,49.4696249],[8.4958111,49.4694018],[8.4949421,49.4692292],[8.4940944,49.4691272],[8.4931798,49.4690924],[8.4922356,49.4691464],[8.4914363,49.4692588],[8.4905378,49.4694724],[8.4896082,49.469753],[8.4892667,49.4697068]]]},"id":"relation/3286556"},{"type":"Feature","properties":{"@id":"relation/3286557","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Neuostheim","name:prefix":"Stadtteil","ref":"091","type":"boundary","wikidata":"Q112893051","wikipedia":"de:Neuostheim"},"geometry":{"type":"Polygon","coordinates":[[[8.508472,49.4834985],[8.5076328,49.4823267],[8.5054482,49.4792237],[8.503289,49.476173],[8.5025863,49.4751744],[8.5017008,49.4739102],[8.5140259,49.4690987],[8.51506,49.4687118],[8.515724,49.4684744],[8.51667,49.4681443],[8.5174087,49.4678966],[8.5184602,49.4675531],[8.5194884,49.4672248],[8.523762,49.465971],[8.5325555,49.4634006],[8.5350732,49.4626459],[8.5395861,49.4611816],[8.5394669,49.4622178],[8.539457,49.4638951],[8.5396811,49.4654156],[8.5400713,49.4668911],[8.5422437,49.4729978],[8.5436716,49.477255],[8.543364,49.4772264],[8.5420677,49.4770827],[8.536564,49.4763102],[8.5349857,49.4762107],[8.533054,49.4763486],[8.5308726,49.4766959],[8.5290122,49.4772266],[8.508472,49.4834985]]]},"id":"relation/3286557"},{"type":"Feature","properties":{"@id":"relation/3286558","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Oststadt","name:prefix":"Stadtteil","ref":"041","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.508472,49.4834985],[8.4823001,49.4912247],[8.4719717,49.494004],[8.4711204,49.4930896],[8.4718332,49.4928271],[8.472742,49.4924624],[8.4731866,49.4922634],[8.4736493,49.4920125],[8.4741079,49.4917094],[8.4745894,49.4913453],[8.4749676,49.4909785],[8.4752961,49.4905386],[8.4755979,49.4900568],[8.475786,49.4896682],[8.4759493,49.4891944],[8.4760539,49.4887928],[8.4760941,49.4878188],[8.4759868,49.4868866],[8.4757662,49.4860973],[8.4755952,49.4857348],[8.4754477,49.4854717],[8.4752318,49.4851433],[8.4747514,49.4845605],[8.4744755,49.4842424],[8.4735943,49.483453],[8.4722774,49.4820804],[8.4736064,49.481557],[8.4737483,49.4815536],[8.4739088,49.4815786],[8.4739856,49.481581],[8.4741091,49.4815732],[8.4750362,49.4813853],[8.4750464,49.4813832],[8.4759632,49.481203],[8.4763622,49.4811227],[8.4773644,49.4809209],[8.4775928,49.480856],[8.4781452,49.4806946],[8.4792315,49.4803634],[8.479474,49.4802852],[8.4799728,49.4801128],[8.4808167,49.4797959],[8.4808882,49.4797648],[8.4809587,49.4797232],[8.4810222,49.4796789],[8.4818045,49.4790442],[8.4834467,49.4777001],[8.4837595,49.4774536],[8.4840996,49.4772127],[8.4846423,49.4769154],[8.4852514,49.4766679],[8.4856784,49.4765412],[8.4859254,49.476485],[8.4862127,49.4764264],[8.486715,49.4763607],[8.4869492,49.4763396],[8.4871196,49.4763251],[8.4873638,49.476318],[8.4877928,49.4763232],[8.4881023,49.4763386],[8.4883961,49.4763731],[8.4888974,49.4764626],[8.4905824,49.4767573],[8.4907443,49.4768124],[8.4908685,49.4768843],[8.4909574,49.4769681],[8.4917032,49.477779],[8.4927445,49.477376],[8.4928224,49.4773459],[8.5017008,49.4739102],[8.5025863,49.4751744],[8.503289,49.476173],[8.5054482,49.4792237],[8.5076328,49.4823267],[8.508472,49.4834985]]]},"id":"relation/3286558"},{"type":"Feature","properties":{"@id":"relation/3286559","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Schwetzingerstadt","name:prefix":"Stadtteil","ref":"042","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4843253,49.4715447],[8.4892667,49.4697068],[8.4896082,49.469753],[8.4905378,49.4694724],[8.4914363,49.4692588],[8.4922356,49.4691464],[8.4931798,49.4690924],[8.4940944,49.4691272],[8.4949421,49.4692292],[8.4958111,49.4694018],[8.4966212,49.4696249],[8.4973963,49.4699038],[8.4981742,49.470268],[8.498932,49.4707172],[8.4994776,49.4711273],[8.5000116,49.471625],[8.5017008,49.4739102],[8.4928224,49.4773459],[8.4927445,49.477376],[8.4917032,49.477779],[8.4909574,49.4769681],[8.4908685,49.4768843],[8.4907443,49.4768124],[8.4905824,49.4767573],[8.4888974,49.4764626],[8.4883961,49.4763731],[8.4881023,49.4763386],[8.4877928,49.4763232],[8.4873638,49.476318],[8.4871196,49.4763251],[8.4869492,49.4763396],[8.486715,49.4763607],[8.4862127,49.4764264],[8.4859254,49.476485],[8.4856784,49.4765412],[8.4852514,49.4766679],[8.4846423,49.4769154],[8.4840996,49.4772127],[8.4837595,49.4774536],[8.4834467,49.4777001],[8.4818045,49.4790442],[8.4810222,49.4796789],[8.4809587,49.4797232],[8.4808882,49.4797648],[8.4808167,49.4797959],[8.4799728,49.4801128],[8.479474,49.4802852],[8.4792315,49.4803634],[8.4781452,49.4806946],[8.4775928,49.480856],[8.4773644,49.4809209],[8.4763622,49.4811227],[8.4759632,49.481203],[8.4750464,49.4813832],[8.4750362,49.4813853],[8.4741091,49.4815732],[8.4739856,49.481581],[8.4739088,49.4815786],[8.4737483,49.4815536],[8.4736064,49.481557],[8.4722774,49.4820804],[8.4712234,49.4809757],[8.4704628,49.4802467],[8.4703314,49.4801674],[8.4702145,49.4801361],[8.4701886,49.4801292],[8.4700272,49.4801383],[8.4692124,49.4803269],[8.4688691,49.480375],[8.4678293,49.4794708],[8.4843253,49.4715447]]]},"id":"relation/3286559"},{"type":"Feature","properties":{"@id":"relation/3286560","admin_level":"10","boundary":"administrative","name":"Seckenheim","ref":"101","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5849747,49.4604836],[8.5844863,49.4602145],[8.5841898,49.4600627],[8.5839349,49.4599452],[8.5836063,49.4598367],[8.582949,49.4596423],[8.5825399,49.4595289],[8.5820852,49.4594153],[8.5816268,49.4593268],[8.5811403,49.4592496],[8.5807654,49.4592254],[8.5801936,49.4592139],[8.5798495,49.4592263],[8.5792322,49.459264],[8.5785339,49.4593427],[8.5778988,49.4594306],[8.5772741,49.4595415],[8.5768914,49.4596412],[8.5762278,49.4598137],[8.5752661,49.4600753],[8.575048,49.4601428],[8.5745139,49.4603245],[8.5741168,49.4604951],[8.5735135,49.4608896],[8.5707092,49.4623038],[8.5698133,49.4628755],[8.5691056,49.463327],[8.5691099,49.4633364],[8.5691839,49.4634976],[8.5692338,49.4636059],[8.5693184,49.4638327],[8.5689732,49.4639381],[8.5687401,49.4640556],[8.5685845,49.4641507],[8.568337,49.4642955],[8.5680928,49.4644541],[8.5678725,49.4646494],[8.5676737,49.4648311],[8.567453,49.4650585],[8.5673682,49.4651461],[8.5672396,49.4652788],[8.5670323,49.465552],[8.5668642,49.4657956],[8.5667176,49.4659914],[8.5662735,49.4666562],[8.5658699,49.4672598],[8.5658221,49.4673347],[8.565332,49.4680222],[8.5648732,49.4687235],[8.5643656,49.4694132],[8.563893,49.4701053],[8.5633539,49.4707788],[8.5628188,49.4714248],[8.5626225,49.4716659],[8.5622409,49.4721139],[8.5617606,49.4725888],[8.5610426,49.4732681],[8.5607898,49.4735363],[8.5602797,49.4741],[8.5596577,49.4746165],[8.5588911,49.4751732],[8.5583098,49.4755576],[8.5579157,49.4758473],[8.5574738,49.4760728],[8.5571626,49.4762283],[8.5568416,49.4763495],[8.5564116,49.4764837],[8.556045,49.4766023],[8.5557457,49.4766826],[8.5553444,49.4767804],[8.5548484,49.4768822],[8.5541206,49.4770098],[8.5536425,49.4770821],[8.5528692,49.4772026],[8.5517481,49.4773619],[8.5504449,49.4775108],[8.5499707,49.4775693],[8.5495109,49.477596],[8.548841,49.4776166],[8.5482063,49.4776193],[8.5476841,49.477609],[8.5471938,49.4775829],[8.5464896,49.4775531],[8.5460588,49.4775274],[8.5457192,49.4774955],[8.5452573,49.4774445],[8.5448448,49.4773777],[8.5436716,49.477255],[8.5422437,49.4729978],[8.5400713,49.4668911],[8.5396811,49.4654156],[8.539457,49.4638951],[8.5394669,49.4622178],[8.5395861,49.4611816],[8.561534,49.4530661],[8.5754479,49.4478817],[8.5836865,49.4569906],[8.5856623,49.4562785],[8.5867941,49.4558835],[8.5868486,49.4559423],[8.5868977,49.456005],[8.587919,49.4572048],[8.5895877,49.4590813],[8.5899902,49.4595376],[8.5898144,49.4595735],[8.5896703,49.459598],[8.5895403,49.459625],[8.5893856,49.4596608],[8.5891396,49.4597216],[8.5889603,49.4597573],[8.588567,49.4598204],[8.5854989,49.4602844],[8.5849747,49.4604836]]]},"id":"relation/3286560"},{"type":"Feature","properties":{"@id":"relation/5190243","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Vogelstang","name:prefix":"Stadtteil","ref":"130","type":"boundary","wikipedia":"de:Vogelstang"},"geometry":{"type":"Polygon","coordinates":[[[8.5606039,49.509212],[8.5600778,49.5206594],[8.5587443,49.5209751],[8.5561604,49.5215908],[8.5557293,49.5218287],[8.5536835,49.5210987],[8.5441241,49.517636],[8.5303479,49.5126488],[8.5294152,49.5122854],[8.5288112,49.5120424],[8.5281313,49.5117322],[8.5271049,49.5112226],[8.5269338,49.5111342],[8.5240179,49.5096279],[8.5262271,49.5090838],[8.526544,49.5089887],[8.5268115,49.508861],[8.5270398,49.5086944],[8.5280611,49.5076275],[8.5282879,49.5074442],[8.5285698,49.5073064],[8.5292773,49.5070824],[8.5306724,49.5066711],[8.5315543,49.5063367],[8.5320348,49.5053744],[8.5329427,49.5031931],[8.5335128,49.5020018],[8.5339852,49.5011621],[8.5345737,49.5002912],[8.5351182,49.4995682],[8.5360418,49.4985194],[8.5362358,49.4986017],[8.5364486,49.4987635],[8.5365552,49.4989276],[8.5365841,49.4990916],[8.5365507,49.4992553],[8.5364111,49.4994672],[8.5364709,49.4996171],[8.5365814,49.4995978],[8.5378498,49.5026045],[8.5381956,49.5025031],[8.5390445,49.5022541],[8.5398181,49.5029749],[8.5399848,49.5030765],[8.5486041,49.5065389],[8.5490428,49.5066512],[8.549265,49.5067781],[8.5496318,49.5070319],[8.5497175,49.507061],[8.5505402,49.5071944],[8.5522261,49.5078537],[8.5544221,49.5089229],[8.5606039,49.509212]]]},"id":"relation/5190243"},{"type":"Feature","properties":{"@id":"relation/5190326","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Wallstadt","name:prefix":"Stadtteil","ref":"140","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5600778,49.5206594],[8.5606039,49.509212],[8.5544221,49.5089229],[8.5522261,49.5078537],[8.5505402,49.5071944],[8.5497175,49.507061],[8.5496318,49.5070319],[8.549265,49.5067781],[8.5490428,49.5066512],[8.5486041,49.5065389],[8.5399848,49.5030765],[8.5398181,49.5029749],[8.5390445,49.5022541],[8.5381956,49.5025031],[8.5378498,49.5026045],[8.5365814,49.4995978],[8.5364709,49.4996171],[8.5364111,49.4994672],[8.5365507,49.4992553],[8.5365841,49.4990916],[8.5365552,49.4989276],[8.5364486,49.4987635],[8.5362358,49.4986017],[8.5360418,49.4985194],[8.536775,49.4977646],[8.5379019,49.4967041],[8.5385574,49.4961524],[8.5399823,49.4951368],[8.5415035,49.4942083],[8.5426037,49.4936424],[8.5435709,49.493208],[8.5446374,49.4928039],[8.5456748,49.4924682],[8.5473965,49.4920482],[8.5490849,49.4917945],[8.5527113,49.4909758],[8.5529334,49.4909229],[8.5541584,49.4913402],[8.5545887,49.4914413],[8.555103,49.4915328],[8.5555369,49.491601],[8.5559778,49.4916738],[8.5563556,49.4917326],[8.5567476,49.4917892],[8.55722,49.4918577],[8.5577345,49.4919376],[8.558221,49.4919946],[8.5585257,49.492028],[8.5589388,49.4920664],[8.559317,49.4920978],[8.5597513,49.4921295],[8.5600455,49.492149],[8.5602733,49.4921569],[8.5606029,49.4921515],[8.5611608,49.4921147],[8.56238,49.4920308],[8.5629272,49.4921751],[8.5632706,49.4922655],[8.5636753,49.4923702],[8.5646611,49.4927551],[8.5650475,49.4929181],[8.5662605,49.4927839],[8.5663225,49.4928438],[8.566454,49.4929499],[8.5665471,49.4930284],[8.5667031,49.4931393],[8.5668347,49.4932271],[8.5669667,49.493299],[8.5671128,49.4933687],[8.5672765,49.4934339],[8.5674334,49.4934831],[8.5675556,49.4935184],[8.5680484,49.4936229],[8.5687614,49.4937679],[8.5710519,49.4941906],[8.5739962,49.494715],[8.5719703,49.4971409],[8.5723989,49.4973376],[8.5730887,49.497657],[8.5733223,49.4977611],[8.5737682,49.497974],[8.5742876,49.4982009],[8.5749918,49.4984975],[8.5761046,49.4989314],[8.5775451,49.4994951],[8.5782064,49.4997397],[8.5788189,49.4999482],[8.579588,49.5001575],[8.5801162,49.5002953],[8.5810878,49.5005485],[8.5818514,49.5007418],[8.5821701,49.5008319],[8.5829685,49.5010562],[8.5836407,49.5012639],[8.5846801,49.5016374],[8.5870329,49.5024677],[8.5858139,49.5038933],[8.5846659,49.5052759],[8.5821837,49.5082373],[8.5822,49.5082824],[8.5832769,49.5086383],[8.5837581,49.5087902],[8.5836385,49.5088338],[8.582919,49.5092731],[8.58136,49.51],[8.5813983,49.510042],[8.5815095,49.5101575],[8.5813758,49.5102137],[8.5827421,49.5116646],[8.583141,49.5119071],[8.5842409,49.5123796],[8.5846847,49.512449],[8.5851656,49.5124581],[8.5854369,49.5125565],[8.5825967,49.5138853],[8.5825493,49.5139333],[8.582667,49.51495],[8.582992,49.517622],[8.5832135,49.5193085],[8.5831589,49.5193707],[8.5812845,49.5197969],[8.581299,49.519817],[8.5791466,49.5202677],[8.5756618,49.5209972],[8.5756024,49.5208392],[8.5730352,49.5215902],[8.572489,49.5205271],[8.5711684,49.5210971],[8.5704789,49.5206038],[8.5695912,49.5200687],[8.5685338,49.5197038],[8.5669764,49.5191804],[8.5634981,49.5198494],[8.5600778,49.5206594]]]},"id":"relation/5190326"},{"type":"Feature","properties":{"@id":"relation/5191189","admin_level":"10","boundary":"administrative","designation":"Stadtteil","name":"K\xe4fertal-Mitte","name:prefix":"Stadtteil","ref":"121","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5091453,49.5193069],[8.5073791,49.5179489],[8.507023,49.5176695],[8.5067156,49.5174295],[8.5062921,49.5171807],[8.5050971,49.5165767],[8.5035017,49.5159666],[8.5031186,49.5158243],[8.5022617,49.5156503],[8.5019634,49.5155529],[8.5017249,49.5154469],[8.5013076,49.5151586],[8.5009449,49.5147722],[8.5006207,49.5143863],[8.4935628,49.5114591],[8.4971089,49.5085927],[8.4998139,49.5063969],[8.5005897,49.505768],[8.5014076,49.5049948],[8.5015328,49.5048478],[8.5021741,49.5051244],[8.5048149,49.5065703],[8.5058715,49.5069159],[8.5065031,49.5070837],[8.507118,49.5071861],[8.5103934,49.5075989],[8.5111146,49.5076513],[8.5125295,49.5076537],[8.5186489,49.5075313],[8.5189592,49.507539],[8.5192731,49.5075627],[8.5196145,49.5076087],[8.5199588,49.5076851],[8.5202993,49.5077804],[8.5206822,49.5079285],[8.521121,49.5081367],[8.5240179,49.5096279],[8.5269338,49.5111342],[8.5252953,49.5126903],[8.5250129,49.5129501],[8.5245249,49.5133756],[8.5241761,49.5136517],[8.523741,49.5139655],[8.5233322,49.5142426],[8.5229868,49.5144578],[8.5225781,49.5146925],[8.5213713,49.5153292],[8.5207719,49.5156097],[8.5196171,49.5160428],[8.5189264,49.51627],[8.5182885,49.5164441],[8.5122824,49.5181486],[8.5110509,49.5185161],[8.509867,49.5189728],[8.5091453,49.5193069]]]},"id":"relation/5191189"},{"type":"Feature","properties":{"@id":"relation/5191313","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Feudenheim","name:prefix":"Stadtteil","ref":"150","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5529334,49.4909229],[8.5527113,49.4909758],[8.5490849,49.4917945],[8.5473965,49.4920482],[8.5456748,49.4924682],[8.5446374,49.4928039],[8.5435709,49.493208],[8.5426037,49.4936424],[8.5415035,49.4942083],[8.5399823,49.4951368],[8.5385574,49.4961524],[8.5379019,49.4967041],[8.536775,49.4977646],[8.5360418,49.4985194],[8.5353434,49.4982897],[8.5256407,49.5000471],[8.5255239,49.5000649],[8.5252463,49.5001097],[8.5252288,49.5001127],[8.5248164,49.5001785],[8.5247705,49.5001859],[8.5243078,49.5002601],[8.5240126,49.5003082],[8.5222293,49.5005942],[8.5221378,49.5006089],[8.5221089,49.5006135],[8.5220848,49.5006174],[8.5220274,49.5006266],[8.52197,49.5006358],[8.5217329,49.5006722],[8.5207275,49.5008351],[8.5197197,49.5009967],[8.5193851,49.5010504],[8.5192486,49.5010716],[8.5185615,49.5011825],[8.5177529,49.5013122],[8.5112928,49.498012],[8.509481,49.4978715],[8.5087274,49.4978181],[8.5085746,49.4978874],[8.5085213,49.4979129],[8.5079636,49.4976637],[8.5076198,49.4975559],[8.5062879,49.4971347],[8.5070028,49.4958226],[8.5077384,49.4945368],[8.508528,49.4931968],[8.5099891,49.4906999],[8.5102981,49.4901414],[8.51053,49.4895988],[8.510627,49.489297],[8.5106866,49.4890546],[8.5107406,49.4887513],[8.5107767,49.4884341],[8.5107834,49.4880194],[8.5107405,49.4875472],[8.5106157,49.4869757],[8.5104092,49.4864338],[8.5102952,49.4862056],[8.5100565,49.4857778],[8.5096226,49.4851328],[8.508472,49.4834985],[8.5290122,49.4772266],[8.5308726,49.4766959],[8.533054,49.4763486],[8.5349857,49.4762107],[8.536564,49.4763102],[8.5420677,49.4770827],[8.543364,49.4772264],[8.5436716,49.477255],[8.544209,49.4785718],[8.5444227,49.4786209],[8.5445701,49.4791099],[8.5447445,49.4795812],[8.5449839,49.4802615],[8.5451956,49.4807235],[8.545378,49.4810968],[8.5455106,49.4813526],[8.5459446,49.4821445],[8.5461642,49.482474],[8.54739,49.4842613],[8.5499766,49.4873905],[8.5504441,49.4879508],[8.5508137,49.4882843],[8.551415,49.4890495],[8.5524175,49.4902975],[8.5529334,49.4909229]]]},"id":"relation/5191313"},{"type":"Feature","properties":{"@id":"relation/5191362","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Sch\xf6nau","name:prefix":"Stadtteil","ref":"070","type":"boundary","wikipedia":"de:Sch\xf6nau (Mannheim)"},"geometry":{"type":"Polygon","coordinates":[[[8.4823819,49.5347518],[8.482194,49.5543419],[8.4609091,49.5537533],[8.4608378,49.5520198],[8.4610532,49.551334],[8.46078,49.5512929],[8.4609061,49.5505977],[8.4607749,49.5459768],[8.4613762,49.544199],[8.4609313,49.5441707],[8.4608375,49.542796],[8.4649863,49.5402345],[8.4660825,49.5396339],[8.4673433,49.539009],[8.4699023,49.5378965],[8.4708596,49.5374795],[8.4712638,49.537289],[8.4719302,49.5368615],[8.4734655,49.5356072],[8.4739311,49.535307],[8.4744245,49.5350141],[8.4751582,49.5346554],[8.47813,49.5332339],[8.4797486,49.532457],[8.4806148,49.5320884],[8.482415,49.5313252],[8.4823819,49.5347518]]]},"id":"relation/5191362"},{"type":"Feature","properties":{"@id":"relation/5191832","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Friedrichsfeld","name:prefix":"Stadtteil","ref":"110","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5735169,49.4217463],[8.5732444,49.4232662],[8.5731788,49.4236],[8.5742426,49.4240214],[8.5752902,49.4244224],[8.5753853,49.4243564],[8.5772884,49.4250846],[8.5777913,49.4252735],[8.5798332,49.4261986],[8.5813792,49.4264503],[8.5820231,49.4264727],[8.5829195,49.4265061],[8.5845202,49.4280668],[8.5834708,49.4284486],[8.5829092,49.4286599],[8.5841336,49.4298249],[8.5841193,49.4298819],[8.5841155,49.4299367],[8.5842551,49.4300626],[8.5854518,49.4311086],[8.5854763,49.431261],[8.5871658,49.4328326],[8.5876228,49.433253],[8.5875458,49.4335221],[8.5872283,49.4345974],[8.5870988,49.4345812],[8.5865568,49.4364779],[8.5867074,49.436508],[8.5866325,49.4367799],[8.5863508,49.4377785],[8.5861714,49.4379245],[8.585997,49.4384661],[8.5858121,49.4390236],[8.5859767,49.4390468],[8.5854749,49.4406029],[8.5853452,49.4406142],[8.5852492,49.4409181],[8.5851029,49.4414062],[8.5850924,49.4414414],[8.5831865,49.4415201],[8.5831841,49.4422793],[8.5831831,49.4425719],[8.5831818,49.4430041],[8.5816811,49.442996],[8.5815932,49.4429966],[8.5815214,49.4435501],[8.5814996,49.4436918],[8.5814948,49.4443941],[8.5812923,49.4443866],[8.5812384,49.4443841],[8.5808514,49.4443692],[8.5809547,49.4444777],[8.5811224,49.4446538],[8.5798218,49.4451302],[8.579684,49.4449748],[8.5785559,49.445392],[8.5780007,49.4453496],[8.5777644,49.445334],[8.5784013,49.4460407],[8.5785957,49.4462494],[8.5788466,49.446543],[8.5789276,49.4466377],[8.5802646,49.4482021],[8.5803153,49.4482613],[8.5805673,49.4486667],[8.581669,49.4499415],[8.5826361,49.4510605],[8.582942,49.4514145],[8.5836216,49.4521998],[8.5836779,49.4522612],[8.5837891,49.452388],[8.5857623,49.4546668],[8.5862389,49.4552325],[8.586692,49.4557683],[8.5867152,49.4557938],[8.5867941,49.4558835],[8.5856623,49.4562785],[8.5836865,49.4569906],[8.5754479,49.4478817],[8.561534,49.4530661],[8.5600599,49.4514037],[8.5599357,49.4512351],[8.5598794,49.4509912],[8.5595777,49.4449259],[8.5602473,49.4437775],[8.5603197,49.4436258],[8.5603483,49.4434294],[8.5603465,49.4432448],[8.5602714,49.4430302],[8.5602072,49.4429113],[8.5599954,49.4426788],[8.5596115,49.4422077],[8.5594228,49.4418621],[8.5591356,49.434856],[8.5588547,49.4335405],[8.5586635,49.4334013],[8.5583285,49.433343],[8.5580939,49.4332399],[8.5576082,49.4319196],[8.5574362,49.4317174],[8.5572056,49.4315383],[8.5563747,49.4294929],[8.5519512,49.4261413],[8.5513248,49.4256667],[8.550933,49.42516],[8.5484762,49.4226543],[8.547936,49.4213443],[8.5469834,49.4194265],[8.5473447,49.4183823],[8.5476047,49.4173944],[8.548407,49.4174228],[8.5492208,49.4174618],[8.5500462,49.4175013],[8.5535664,49.4176009],[8.5547326,49.4176455],[8.5570725,49.4177437],[8.5582109,49.4177792],[8.5593726,49.4178081],[8.5605995,49.4178386],[8.5617519,49.4178739],[8.5629218,49.4179231],[8.5640917,49.4179561],[8.565223,49.4179892],[8.5663682,49.4179857],[8.5658469,49.4168985],[8.5669589,49.4166865],[8.5684636,49.4165157],[8.5690245,49.4164518],[8.5697261,49.4163799],[8.5706776,49.4161848],[8.5716402,49.4159861],[8.5725536,49.4158727],[8.5734303,49.4157628],[8.5732881,49.416518],[8.5732227,49.4169019],[8.5732061,49.4172173],[8.5732105,49.4175624],[8.5732329,49.4180263],[8.5732441,49.4182388],[8.5732621,49.4184604],[8.5732802,49.4186341],[8.5732535,49.4191025],[8.5734868,49.4198518],[8.5735754,49.4202082],[8.5736183,49.4204779],[8.5736296,49.4207657],[8.5736023,49.4210286],[8.5735169,49.4217463]]]},"id":"relation/5191832"},{"type":"Feature","properties":{"@id":"relation/5191881","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Sandhofen","name:prefix":"Stadtteil","ref":"061","type":"boundary","wikipedia":"de:Sandhofen"},"geometry":{"type":"Polygon","coordinates":[[[8.4609091,49.5537533],[8.45406,49.553565],[8.4360047,49.5530636],[8.4346332,49.5529945],[8.4334874,49.5528979],[8.4322294,49.5527534],[8.4310587,49.5525842],[8.4298881,49.5523843],[8.428585,49.5521121],[8.427345,49.5518075],[8.4258955,49.5513998],[8.4174823,49.5487239],[8.4175189,49.548678],[8.4175559,49.5486317],[8.4179625,49.548123],[8.4187153,49.5472299],[8.4194547,49.5464691],[8.4202024,49.5457011],[8.4209588,49.5449575],[8.421631,49.5441887],[8.4222294,49.5434085],[8.4227135,49.5426718],[8.423145,49.5419077],[8.4232098,49.5417659],[8.4235062,49.541131],[8.4235605,49.5410247],[8.4351848,49.5364128],[8.4411426,49.5349938],[8.4555181,49.5332573],[8.4589825,49.5325484],[8.4625777,49.5313598],[8.4648101,49.5302156],[8.4680545,49.5316077],[8.4751582,49.5346554],[8.4744245,49.5350141],[8.4739311,49.535307],[8.4734655,49.5356072],[8.4719302,49.5368615],[8.4712638,49.537289],[8.4708596,49.5374795],[8.4699023,49.5378965],[8.4673433,49.539009],[8.4660825,49.5396339],[8.4649863,49.5402345],[8.4608375,49.542796],[8.4609313,49.5441707],[8.4613762,49.544199],[8.4607749,49.5459768],[8.4609061,49.5505977],[8.46078,49.5512929],[8.4610532,49.551334],[8.4608378,49.5520198],[8.4609091,49.5537533]]]},"id":"relation/5191881"},{"type":"Feature","properties":{"@id":"relation/5192070","admin_level":"10","boundary":"administrative","description":"Stadtteil","loc_name":"Quadrate","name":"Innenstadt","name:prefix":"Stadtteil","ref":"011","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4562352,49.4889453],[8.4561099,49.4881757],[8.4560853,49.4880477],[8.4560513,49.4878712],[8.4560029,49.4876198],[8.4559616,49.4874056],[8.4557879,49.4865035],[8.4557745,49.4862154],[8.4558117,49.4858948],[8.4559153,49.485601],[8.4563116,49.4847456],[8.4569639,49.4838249],[8.4570265,49.4837139],[8.4570694,49.4835507],[8.4571124,49.4830088],[8.4571941,49.4827963],[8.4574937,49.4824889],[8.4583537,49.481735],[8.4591853,49.4819791],[8.4601457,49.4820517],[8.4608368,49.4820283],[8.4616661,49.4819453],[8.4627839,49.481762],[8.4636326,49.4815897],[8.4643364,49.4813345],[8.4678293,49.4794708],[8.4688691,49.480375],[8.4692124,49.4803269],[8.4700272,49.4801383],[8.4701886,49.4801292],[8.4702145,49.4801361],[8.4703314,49.4801674],[8.4704628,49.4802467],[8.4712234,49.4809757],[8.4722774,49.4820804],[8.4735943,49.483453],[8.4744755,49.4842424],[8.4747514,49.4845605],[8.4752318,49.4851433],[8.4754477,49.4854717],[8.4755952,49.4857348],[8.4757662,49.4860973],[8.4759868,49.4868866],[8.4760941,49.4878188],[8.4760539,49.4887928],[8.4759493,49.4891944],[8.475786,49.4896682],[8.4755979,49.4900568],[8.4752961,49.4905386],[8.4749676,49.4909785],[8.4745894,49.4913453],[8.4741079,49.4917094],[8.4736493,49.4920125],[8.4731866,49.4922634],[8.472742,49.4924624],[8.4718332,49.4928271],[8.4711204,49.4930896],[8.4708157,49.4932181],[8.4702645,49.4934843],[8.4700824,49.4935513],[8.4698795,49.4935994],[8.4687115,49.4937931],[8.4683049,49.4938553],[8.4679473,49.49389],[8.4674818,49.4939156],[8.4670096,49.4939339],[8.4662075,49.4939549],[8.4644019,49.4939742],[8.4638278,49.4939557],[8.4633598,49.4939216],[8.462668,49.4938312],[8.4618585,49.4936789],[8.461326,49.4935213],[8.4607565,49.4933072],[8.4602563,49.4930675],[8.4595954,49.4926122],[8.4593007,49.4923743],[8.4589733,49.4920813],[8.4587398,49.4918236],[8.4579562,49.490852],[8.457302,49.490319],[8.4569545,49.4900016],[8.4564932,49.4893883],[8.4562352,49.4889453]]]},"id":"relation/5192070"},{"type":"Feature","properties":{"@id":"relation/5192187","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Neckarstadt-Ost","name:prefix":"Stadtteil","ref":"030","type":"boundary","wikidata":"Q1973728"},"geometry":{"type":"Polygon","coordinates":[[[8.4819769,49.5119631],[8.4798709,49.5125133],[8.4778485,49.5120673],[8.475581,49.5113989],[8.4737575,49.5112869],[8.4726755,49.5112555],[8.4730125,49.5125631],[8.4730185,49.5127329],[8.4729499,49.5128978],[8.4728172,49.5130957],[8.4725707,49.5134682],[8.4719112,49.5129981],[8.4718162,49.5127068],[8.4715653,49.5117197],[8.4699791,49.5061864],[8.4699541,49.5060385],[8.4699398,49.5057201],[8.4700406,49.5042417],[8.4703618,49.5029042],[8.4705807,49.5023042],[8.4707439,49.5019621],[8.4713491,49.5003354],[8.4713562,49.5002507],[8.4713821,49.499944],[8.4716717,49.4991924],[8.472257,49.4975215],[8.4725032,49.4971292],[8.4742033,49.4965711],[8.4734865,49.4956561],[8.4719717,49.494004],[8.4823001,49.4912247],[8.508472,49.4834985],[8.5096226,49.4851328],[8.5100565,49.4857778],[8.5102952,49.4862056],[8.5104092,49.4864338],[8.5106157,49.4869757],[8.5107405,49.4875472],[8.5107834,49.4880194],[8.5107767,49.4884341],[8.5107406,49.4887513],[8.5106866,49.4890546],[8.510627,49.489297],[8.51053,49.4895988],[8.5102981,49.4901414],[8.5099891,49.4906999],[8.508528,49.4931968],[8.5077384,49.4945368],[8.5070028,49.4958226],[8.5062879,49.4971347],[8.5028589,49.5031021],[8.502333,49.5038879],[8.5017442,49.5045995],[8.5015328,49.5048478],[8.5014076,49.5049948],[8.5005897,49.505768],[8.4998139,49.5063969],[8.4971089,49.5085927],[8.4953039,49.509539],[8.4947489,49.5098089],[8.4940872,49.5100805],[8.4931497,49.5104204],[8.4924587,49.5106313],[8.4827719,49.5131711],[8.4819769,49.5119631]]]},"id":"relation/5192187"},{"type":"Feature","properties":{"@id":"relation/5192416","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Neckarstadt-West","name:prefix":"Stadtteil","ref":"020","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4692368,49.4950103],[8.4719717,49.494004],[8.4734865,49.4956561],[8.4742033,49.4965711],[8.4725032,49.4971292],[8.472257,49.4975215],[8.4716717,49.4991924],[8.4713821,49.499944],[8.4713562,49.5002507],[8.4713491,49.5003354],[8.4707439,49.5019621],[8.4705807,49.5023042],[8.4703618,49.5029042],[8.4700406,49.5042417],[8.4699398,49.5057201],[8.4699541,49.5060385],[8.4699791,49.5061864],[8.4715653,49.5117197],[8.4718162,49.5127068],[8.4719112,49.5129981],[8.4725707,49.5134682],[8.4752664,49.5153739],[8.473461,49.5158444],[8.471208,49.5189133],[8.4703891,49.5232857],[8.4698585,49.5249609],[8.4689032,49.5265408],[8.4672992,49.5283406],[8.4648101,49.5302156],[8.4625777,49.5313598],[8.4589825,49.5325484],[8.4555181,49.5332573],[8.4411426,49.5349938],[8.4351848,49.5364128],[8.4235605,49.5410247],[8.4238514,49.540304],[8.4241775,49.5395366],[8.4245561,49.5386456],[8.4249593,49.5377305],[8.4253115,49.5368418],[8.4256936,49.535976],[8.4260651,49.5350998],[8.4264279,49.5342499],[8.4267925,49.5333783],[8.4271675,49.5325148],[8.427532,49.5316478],[8.4278981,49.5307899],[8.4282731,49.5299183],[8.4286359,49.5290627],[8.4290021,49.5281889],[8.4293594,49.5273226],[8.4297377,49.526457],[8.4300968,49.5255856],[8.4304609,49.5247245],[8.4308319,49.5238726],[8.4312069,49.5229898],[8.43158,49.5221162],[8.4319441,49.521254],[8.4323116,49.5203975],[8.4326865,49.5195146],[8.4330488,49.5186513],[8.4334377,49.5177743],[8.4337965,49.5169062],[8.434153,49.5160737],[8.4345063,49.5152228],[8.4348868,49.5143184],[8.4352613,49.5134527],[8.4356166,49.5125892],[8.4358085,49.5121416],[8.4358311,49.5120455],[8.4358472,49.5119242],[8.435846,49.5116779],[8.4373516,49.5121174],[8.441185,49.5089004],[8.4469802,49.5049143],[8.4525216,49.5017814],[8.4559897,49.500081],[8.4601137,49.4984479],[8.462728,49.4974126],[8.4692368,49.4950103]]]},"id":"relation/5192416"},{"type":"Feature","properties":{"@id":"relation/5192512","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Lindenhof","name:prefix":"Stadtteil","ref":"050","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4583537,49.481735],[8.4581402,49.4816653],[8.4563779,49.4809192],[8.4565027,49.4808019],[8.4565409,49.4807661],[8.4569464,49.4803868],[8.4570115,49.4803235],[8.4572607,49.4800812],[8.4577127,49.479648],[8.4579193,49.479445],[8.4586221,49.4787449],[8.4589545,49.4783742],[8.459315,49.4779796],[8.4597181,49.4774994],[8.4599992,49.4771639],[8.4602696,49.4767968],[8.4603886,49.4766355],[8.4606063,49.4763332],[8.4609747,49.4758116],[8.4610322,49.4757232],[8.4611961,49.4754714],[8.4617485,49.4746725],[8.4622888,49.4738713],[8.4628001,49.4730554],[8.463256,49.4722587],[8.4634603,49.4718358],[8.4636277,49.4714392],[8.4637704,49.4710791],[8.463894,49.4706789],[8.4639437,49.4702982],[8.4639707,49.469898],[8.4639588,49.4696282],[8.46394,49.4693835],[8.4639035,49.4691353],[8.4638147,49.4687648],[8.4636944,49.46836],[8.4635582,49.4679997],[8.4633745,49.4676108],[8.4631926,49.4672871],[8.4629336,49.4668982],[8.4626535,49.4665527],[8.4623243,49.4661991],[8.4620195,49.4659176],[8.4615833,49.4655618],[8.4611697,49.4652597],[8.460686,49.4649506],[8.4653826,49.4648449],[8.4654127,49.4632195],[8.4635337,49.4601983],[8.4630847,49.4594764],[8.4654433,49.4588048],[8.4670055,49.4583994],[8.4684678,49.460584],[8.4697927,49.4626423],[8.4700861,49.4631398],[8.4693161,49.4632789],[8.4693724,49.463386],[8.4694054,49.4635005],[8.4694385,49.4636775],[8.4694772,49.4641254],[8.4694912,49.4644147],[8.4695049,49.4648191],[8.4748741,49.4647663],[8.4753513,49.4649194],[8.4775121,49.4655948],[8.478397,49.4659218],[8.479256,49.4663064],[8.482957,49.4682661],[8.4839917,49.4686594],[8.4838983,49.4689567],[8.4838831,49.4692768],[8.4843253,49.4715447],[8.4678293,49.4794708],[8.4643364,49.4813345],[8.4636326,49.4815897],[8.4627839,49.481762],[8.4616661,49.4819453],[8.4608368,49.4820283],[8.4601457,49.4820517],[8.4591853,49.4819791],[8.4583537,49.481735]]]},"id":"relation/5192512"},{"type":"Feature","properties":{"@id":"relation/5193091","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Rheinau","name:prefix":"Stadtteil","ref":"170","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5016238,49.4416516],[8.5019766,49.4414946],[8.5020574,49.4414599],[8.5024094,49.4413087],[8.5025456,49.4412442],[8.5032275,49.4408609],[8.5035528,49.4406563],[8.5041824,49.4402564],[8.5043231,49.4401531],[8.5047785,49.4398303],[8.5048437,49.4397787],[8.5052559,49.4394517],[8.5056529,49.4390744],[8.5061466,49.4385735],[8.506463,49.4381921],[8.5067412,49.4378531],[8.5069701,49.4374586],[8.5072511,49.4370508],[8.5074328,49.4367153],[8.507669,49.4362671],[8.5077942,49.435947],[8.5078731,49.435758],[8.5079853,49.435479],[8.5080805,49.435168],[8.5081753,49.4347929],[8.5082335,49.4343992],[8.5082884,49.4339953],[8.5083135,49.4335945],[8.5083069,49.4332003],[8.5082924,49.4327615],[8.5082336,49.4323497],[8.5081541,49.4319162],[8.5080424,49.4315188],[8.5079171,49.4311088],[8.5077854,49.430749],[8.5076041,49.4303306],[8.5074182,49.4299647],[8.5071806,49.4295595],[8.506661,49.4287716],[8.5061194,49.4279436],[8.5055833,49.4271121],[8.5050276,49.4262942],[8.5044637,49.4254455],[8.5039395,49.4246324],[8.5027376,49.4228366],[8.5021564,49.4218217],[8.5018102,49.4212627],[8.5013473,49.420366],[8.5010447,49.4198345],[8.5006271,49.4190743],[8.5000265,49.4178999],[8.4997311,49.4172624],[8.4993962,49.4165445],[8.4991682,49.4160251],[8.4989575,49.4155035],[8.4987909,49.4151526],[8.498579,49.4145921],[8.4984385,49.4142562],[8.4982235,49.4136637],[8.4981126,49.413353],[8.4978753,49.4127169],[8.4977494,49.4123135],[8.4976018,49.4118357],[8.4974998,49.4115148],[8.4974104,49.4111872],[8.4988239,49.4112958],[8.5030137,49.4116163],[8.5031793,49.4108233],[8.5033892,49.4109631],[8.5037776,49.4112253],[8.5044515,49.4115806],[8.5047833,49.4117343],[8.5050801,49.4118559],[8.5054297,49.4119731],[8.5057616,49.4120856],[8.5064083,49.4122856],[8.5077368,49.4126263],[8.5081669,49.412707],[8.5084851,49.4127738],[8.5087473,49.412836],[8.5094404,49.4129668],[8.509797,49.4130499],[8.5101328,49.413142],[8.5104824,49.4132388],[8.5108845,49.4133563],[8.5119227,49.4137106],[8.5130262,49.4142706],[8.5137,49.4146492],[8.514461,49.4150965],[8.5148069,49.4152663],[8.5153482,49.4155349],[8.515778,49.415721],[8.5160225,49.4158152],[8.5166665,49.4158874],[8.5172373,49.4159071],[8.5177731,49.4159266],[8.5189177,49.416016],[8.5194987,49.4160744],[8.5200367,49.4163224],[8.5209591,49.4167472],[8.5216659,49.4170866],[8.5217833,49.417167],[8.5219754,49.4172886],[8.5221776,49.4174536],[8.5223482,49.4176573],[8.5224835,49.4178838],[8.5225415,49.4181901],[8.5225547,49.4182341],[8.5248747,49.4176994],[8.525136,49.4174451],[8.5251467,49.4163326],[8.5251858,49.4150253],[8.5250665,49.4150205],[8.5249176,49.4139822],[8.5248841,49.4138603],[8.5241029,49.4112695],[8.5264056,49.4117869],[8.5276637,49.4120658],[8.5291143,49.4103401],[8.5299699,49.4106062],[8.5301261,49.4106404],[8.5338063,49.4124003],[8.5343774,49.4123679],[8.5375393,49.4121201],[8.5386103,49.412036],[8.5396386,49.4119553],[8.5406577,49.4118582],[8.5414692,49.4117481],[8.5431192,49.4115108],[8.5432117,49.4114996],[8.5436432,49.4120832],[8.5430664,49.4128448],[8.5423661,49.4137583],[8.5405959,49.4160491],[8.5407633,49.4161145],[8.5424809,49.4164789],[8.5436729,49.4167366],[8.5442038,49.4162909],[8.5443627,49.4159936],[8.5448687,49.4150462],[8.5451636,49.4150275],[8.5454362,49.4149033],[8.5455776,49.414972],[8.54596,49.4151697],[8.5460433,49.4152054],[8.5462869,49.4149856],[8.5463429,49.4151432],[8.5464443,49.4156254],[8.5464933,49.4160184],[8.5464863,49.4162424],[8.5464548,49.4164731],[8.5464058,49.416697],[8.5463392,49.4170901],[8.5463005,49.4173483],[8.5476047,49.4173944],[8.5473447,49.4183823],[8.5469834,49.4194265],[8.547936,49.4213443],[8.5484762,49.4226543],[8.550933,49.42516],[8.5513248,49.4256667],[8.5519512,49.4261413],[8.5563747,49.4294929],[8.5572056,49.4315383],[8.5574362,49.4317174],[8.5576082,49.4319196],[8.5580939,49.4332399],[8.5583285,49.433343],[8.5586635,49.4334013],[8.5588547,49.4335405],[8.5591356,49.434856],[8.5594228,49.4418621],[8.5596115,49.4422077],[8.5599954,49.4426788],[8.5422289,49.4489676],[8.5368982,49.4508543],[8.5287638,49.4537332],[8.5122141,49.4597493],[8.5119594,49.459309],[8.5115601,49.4585216],[8.5112094,49.4576761],[8.5109582,49.45689],[8.5108834,49.4564368],[8.510848,49.4561414],[8.5108339,49.4556885],[8.5108527,49.4553581],[8.5108889,49.4550342],[8.5109499,49.4547256],[8.5110673,49.4542671],[8.5112966,49.4536337],[8.5119399,49.4519558],[8.5044743,49.4451724],[8.5050708,49.4437493],[8.5052018,49.443214],[8.5053491,49.442982],[8.5036686,49.4420695],[8.5025348,49.4424684],[8.5016238,49.4416516]]]},"id":"relation/5193091"},{"type":"Feature","properties":{"@id":"relation/5193806","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Neckarau","name:prefix":"Stadtteil","ref":"161","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5122141,49.4597493],[8.5094428,49.4605646],[8.506601,49.4616147],[8.5008804,49.4639051],[8.4981197,49.4654377],[8.4969894,49.4646026],[8.4968724,49.4645591],[8.4932044,49.4616235],[8.4926798,49.4612036],[8.4907323,49.4607783],[8.4903145,49.4607895],[8.4806519,49.4577554],[8.4817066,49.4563241],[8.4821202,49.4559649],[8.4827729,49.4550922],[8.4828916,49.455014],[8.4834521,49.4548384],[8.483483,49.4546963],[8.4833046,49.4543489],[8.4832402,49.4542554],[8.4831677,49.4542127],[8.4778441,49.4524966],[8.4751604,49.451641],[8.4712176,49.4503839],[8.4704922,49.4500333],[8.4666423,49.4501103],[8.4663539,49.4500972],[8.4660119,49.450058],[8.4649233,49.44985],[8.4630138,49.4495299],[8.4623693,49.4494631],[8.4620179,49.4494675],[8.4610564,49.4495372],[8.4602611,49.4495738],[8.4583884,49.449574],[8.4580485,49.4495212],[8.4570654,49.4491683],[8.4548703,49.4438743],[8.4550723,49.4438463],[8.4553989,49.4438009],[8.4559952,49.4437258],[8.4567619,49.4436346],[8.4574109,49.4435599],[8.4582811,49.4434762],[8.4588855,49.4434355],[8.4595693,49.4433758],[8.4602248,49.4433297],[8.4609907,49.4432888],[8.4616038,49.4432562],[8.4624047,49.4432303],[8.462649,49.4432224],[8.4629948,49.4432112],[8.4637692,49.4431933],[8.4644663,49.4431851],[8.4652141,49.4431818],[8.4658967,49.4431918],[8.4666919,49.4432037],[8.4673568,49.4432262],[8.4682024,49.4432601],[8.4687761,49.443282],[8.4694548,49.4433183],[8.4701652,49.4433628],[8.4709089,49.4434006],[8.4715419,49.4434469],[8.4721919,49.4434855],[8.4725117,49.4435045],[8.4728958,49.4435274],[8.4735746,49.4435694],[8.4740622,49.4435942],[8.4742569,49.443608],[8.4746498,49.4436276],[8.4749497,49.4436489],[8.4756398,49.4436937],[8.4769977,49.4437673],[8.4783608,49.4438522],[8.4797185,49.4439178],[8.4806042,49.4439475],[8.481055,49.4439606],[8.4824035,49.4439827],[8.483005,49.4439854],[8.4837519,49.4439887],[8.4850861,49.443972],[8.4864182,49.4439347],[8.4868113,49.4439204],[8.4877643,49.4438858],[8.4890996,49.443813],[8.490433,49.4437196],[8.4917715,49.4436205],[8.4930941,49.4434974],[8.4944058,49.4433572],[8.4956912,49.4431999],[8.4964037,49.4430975],[8.4969148,49.4430108],[8.4975605,49.4428892],[8.4981221,49.4427715],[8.4988041,49.4426018],[8.4992518,49.4424879],[8.4998757,49.442299],[8.5003668,49.4421358],[8.5010148,49.4418987],[8.5014774,49.4417173],[8.5016238,49.4416516],[8.5025348,49.4424684],[8.5036686,49.4420695],[8.5053491,49.442982],[8.5052018,49.443214],[8.5050708,49.4437493],[8.5044743,49.4451724],[8.5119399,49.4519558],[8.5112966,49.4536337],[8.5110673,49.4542671],[8.5109499,49.4547256],[8.5108889,49.4550342],[8.5108527,49.4553581],[8.5108339,49.4556885],[8.510848,49.4561414],[8.5108834,49.4564368],[8.5109582,49.45689],[8.5112094,49.4576761],[8.5115601,49.4585216],[8.5119594,49.459309],[8.5122141,49.4597493]]]},"id":"relation/5193806"},{"type":"Feature","properties":{"@id":"relation/5193955","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Niederfeld","name:prefix":"Stadtteil","ref":"162","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4512524,49.4622088],[8.4506675,49.4620615],[8.4506283,49.4620516],[8.450209,49.4619541],[8.4498216,49.4618452],[8.4495743,49.4617684],[8.449208,49.4616675],[8.448817,49.4615345],[8.4484226,49.4613935],[8.44827,49.4613443],[8.4478003,49.4611621],[8.4471936,49.4609196],[8.4468864,49.4607706],[8.4462008,49.4604047],[8.4458676,49.4602132],[8.4448055,49.4594761],[8.444402,49.459147],[8.443954,49.4587377],[8.4438652,49.4586621],[8.4438635,49.4586606],[8.4435269,49.4583192],[8.4430821,49.4577863],[8.4428002,49.4574259],[8.4425847,49.4570874],[8.442438,49.4568659],[8.4422633,49.4564955],[8.4420368,49.4560518],[8.4419668,49.4558879],[8.4418551,49.4555327],[8.4417691,49.455306],[8.4417042,49.4550683],[8.4416591,49.4549094],[8.4416132,49.4546328],[8.4415848,49.4543503],[8.4415618,49.4540896],[8.4415465,49.4539294],[8.4415407,49.453838],[8.4415508,49.4535554],[8.4415644,49.4532636],[8.4415785,49.4530337],[8.4416037,49.4528803],[8.4416353,49.4526549],[8.441693,49.4523973],[8.4417683,49.4521523],[8.4418765,49.4518442],[8.44203,49.4514925],[8.4422286,49.4510812],[8.4423792,49.4508119],[8.4425716,49.4504978],[8.4428178,49.4501173],[8.4429983,49.4498627],[8.443233,49.4495771],[8.4434607,49.4493064],[8.4437284,49.449007],[8.4441341,49.4486098],[8.4445398,49.4482139],[8.4449356,49.4478946],[8.4450355,49.4478165],[8.4455213,49.4474362],[8.4456452,49.4473489],[8.4459159,49.447181],[8.4462405,49.446982],[8.4466455,49.4467381],[8.4469513,49.4465793],[8.4473577,49.4463779],[8.4479188,49.4460842],[8.4490984,49.4455212],[8.4496867,49.4452826],[8.4503808,49.4450082],[8.4511043,49.4447692],[8.4517181,49.4445765],[8.4524743,49.444371],[8.4531333,49.4442117],[8.4538642,49.4440563],[8.4545809,49.4439145],[8.4548703,49.4438743],[8.4570654,49.4491683],[8.4580485,49.4495212],[8.4583884,49.449574],[8.4602611,49.4495738],[8.4610564,49.4495372],[8.4620179,49.4494675],[8.4623693,49.4494631],[8.4630138,49.4495299],[8.4649233,49.44985],[8.4660119,49.450058],[8.4663539,49.4500972],[8.4666423,49.4501103],[8.4704922,49.4500333],[8.4712176,49.4503839],[8.4751604,49.451641],[8.4778441,49.4524966],[8.4831677,49.4542127],[8.4832402,49.4542554],[8.4833046,49.4543489],[8.483483,49.4546963],[8.4834521,49.4548384],[8.4828916,49.455014],[8.4827729,49.4550922],[8.4821202,49.4559649],[8.4817066,49.4563241],[8.4806519,49.4577554],[8.4760514,49.4639267],[8.4753513,49.4649194],[8.4748741,49.4647663],[8.4695049,49.4648191],[8.4694912,49.4644147],[8.4694772,49.4641254],[8.4694385,49.4636775],[8.4694054,49.4635005],[8.4693724,49.463386],[8.4693161,49.4632789],[8.4700861,49.4631398],[8.4697927,49.4626423],[8.4684678,49.460584],[8.4670055,49.4583994],[8.4654433,49.4588048],[8.4630847,49.4594764],[8.4635337,49.4601983],[8.4654127,49.4632195],[8.4653826,49.4648449],[8.460686,49.4649506],[8.4601971,49.4646747],[8.4601264,49.46464],[8.4597203,49.46444],[8.459196,49.4642292],[8.4586612,49.4640345],[8.4581721,49.4638694],[8.4575759,49.4636941],[8.4569903,49.4635325],[8.4563186,49.4633708],[8.4550367,49.4630646],[8.4537583,49.4627777],[8.4524747,49.4624784],[8.4512524,49.4622088]]]},"id":"relation/5193955"},{"type":"Feature","properties":{"@id":"relation/5194235","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Almenhof","name:prefix":"Stadtteil","ref":"163","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4981197,49.4654377],[8.4937485,49.4675891],[8.4925213,49.4682418],[8.4909759,49.4689674],[8.4892667,49.4697068],[8.4843253,49.4715447],[8.4838831,49.4692768],[8.4838983,49.4689567],[8.4839917,49.4686594],[8.482957,49.4682661],[8.479256,49.4663064],[8.478397,49.4659218],[8.4775121,49.4655948],[8.4753513,49.4649194],[8.4760514,49.4639267],[8.4806519,49.4577554],[8.4903145,49.4607895],[8.4907323,49.4607783],[8.4926798,49.4612036],[8.4932044,49.4616235],[8.4968724,49.4645591],[8.4969894,49.4646026],[8.4981197,49.4654377]]]},"id":"relation/5194235"},{"type":"Feature","properties":{"@id":"relation/10958460","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Franklin","name:prefix":"Stadtteil","ref":"124","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5118706,49.5311568],[8.5150133,49.5219924],[8.513572,49.5217742],[8.5133865,49.5215125],[8.5126028,49.5214041],[8.51286,49.5206701],[8.5110509,49.5185161],[8.5122824,49.5181486],[8.5182885,49.5164441],[8.5189264,49.51627],[8.5196171,49.5160428],[8.5207719,49.5156097],[8.5213713,49.5153292],[8.5225781,49.5146925],[8.5229868,49.5144578],[8.5233322,49.5142426],[8.523741,49.5139655],[8.5241761,49.5136517],[8.5245249,49.5133756],[8.5250129,49.5129501],[8.5252953,49.5126903],[8.5269338,49.5111342],[8.5271049,49.5112226],[8.5281313,49.5117322],[8.5288112,49.5120424],[8.5294152,49.5122854],[8.5303479,49.5126488],[8.5441241,49.517636],[8.5536835,49.5210987],[8.5557293,49.5218287],[8.5511609,49.5243503],[8.5479206,49.5255627],[8.5422176,49.5281369],[8.5391727,49.5307037],[8.5381512,49.5315702],[8.5371256,49.532434],[8.5360954,49.5332936],[8.5340496,49.535023],[8.5324031,49.5364046],[8.5318631,49.5374268],[8.5313249,49.5384607],[8.5276065,49.5457102],[8.526479,49.5478761],[8.5254026,49.5487066],[8.5224641,49.5335537],[8.5220868,49.5310736],[8.5118706,49.5311568]]]},"id":"relation/10958460"},{"type":"Feature","properties":{"@id":"relation/10958618","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Speckweggebiet","name:prefix":"Stadtteil","ref":"122","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5091453,49.5193069],[8.5073447,49.520384],[8.5055603,49.5216311],[8.5047553,49.5222386],[8.5043125,49.5224911],[8.5041282,49.5225762],[8.5017903,49.5236539],[8.5015313,49.5234518],[8.5006473,49.5226792],[8.4999969,49.5219697],[8.4996563,49.5215126],[8.4989039,49.5203617],[8.4973354,49.5179651],[8.497131,49.5176279],[8.4969701,49.5173337],[8.4968564,49.5170676],[8.4964171,49.5157735],[8.4961076,49.5149842],[8.4984552,49.5149154],[8.5000839,49.5148253],[8.5009449,49.5147722],[8.5013076,49.5151586],[8.5017249,49.5154469],[8.5019634,49.5155529],[8.5022617,49.5156503],[8.5031186,49.5158243],[8.5035017,49.5159666],[8.5050971,49.5165767],[8.5062921,49.5171807],[8.5067156,49.5174295],[8.507023,49.5176695],[8.5073791,49.5179489],[8.5091453,49.5193069]]]},"id":"relation/10958618"},{"type":"Feature","properties":{"@id":"relation/10958626","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Sonnenschein","name:prefix":"Stadtteil","ref":"123","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5118706,49.5311568],[8.5106126,49.5311619],[8.50981,49.5298529],[8.5097818,49.5297425],[8.5097872,49.5295898],[8.5098768,49.529336],[8.5091552,49.5292279],[8.5086315,49.5289503],[8.5017903,49.5236539],[8.5041282,49.5225762],[8.5043125,49.5224911],[8.5047553,49.5222386],[8.5055603,49.5216311],[8.5073447,49.520384],[8.5091453,49.5193069],[8.509867,49.5189728],[8.5110509,49.5185161],[8.51286,49.5206701],[8.5126028,49.5214041],[8.5133865,49.5215125],[8.513572,49.5217742],[8.5150133,49.5219924],[8.5118706,49.5311568]]]},"id":"relation/10958626"},{"type":"Feature","properties":{"@id":"relation/10958634","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"K\xe4fertal-S\xfcd","name:prefix":"Stadtteil","ref":"125","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.5062879,49.4971347],[8.5076198,49.4975559],[8.5079636,49.4976637],[8.5085213,49.4979129],[8.5085746,49.4978874],[8.5087274,49.4978181],[8.509481,49.4978715],[8.5112928,49.498012],[8.5177529,49.5013122],[8.5185615,49.5011825],[8.5192486,49.5010716],[8.5193851,49.5010504],[8.5197197,49.5009967],[8.5207275,49.5008351],[8.5217329,49.5006722],[8.52197,49.5006358],[8.5220274,49.5006266],[8.5220848,49.5006174],[8.5221089,49.5006135],[8.5221378,49.5006089],[8.5222293,49.5005942],[8.5240126,49.5003082],[8.5243078,49.5002601],[8.5247705,49.5001859],[8.5248164,49.5001785],[8.5252288,49.5001127],[8.5252463,49.5001097],[8.5255239,49.5000649],[8.5256407,49.5000471],[8.5353434,49.4982897],[8.5360418,49.4985194],[8.5351182,49.4995682],[8.5345737,49.5002912],[8.5339852,49.5011621],[8.5335128,49.5020018],[8.5329427,49.5031931],[8.5320348,49.5053744],[8.5315543,49.5063367],[8.5306724,49.5066711],[8.5292773,49.5070824],[8.5285698,49.5073064],[8.5282879,49.5074442],[8.5280611,49.5076275],[8.5270398,49.5086944],[8.5268115,49.508861],[8.526544,49.5089887],[8.5262271,49.5090838],[8.5240179,49.5096279],[8.521121,49.5081367],[8.5206822,49.5079285],[8.5202993,49.5077804],[8.5199588,49.5076851],[8.5196145,49.5076087],[8.5192731,49.5075627],[8.5189592,49.507539],[8.5186489,49.5075313],[8.5125295,49.5076537],[8.5111146,49.5076513],[8.5103934,49.5075989],[8.507118,49.5071861],[8.5065031,49.5070837],[8.5058715,49.5069159],[8.5048149,49.5065703],[8.5021741,49.5051244],[8.5015328,49.5048478],[8.5017442,49.5045995],[8.502333,49.5038879],[8.5028589,49.5031021],[8.5062879,49.4971347]]]},"id":"relation/10958634"},{"type":"Feature","properties":{"@id":"relation/10958746","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Sandhofen-Nord","name:prefix":"Stadtteil","ref":"062","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4219727,49.5726825],[8.4216637,49.5722333],[8.4210416,49.571415],[8.4203419,49.5706272],[8.4195541,49.5698608],[8.4187896,49.5690578],[8.4180735,49.5682084],[8.417437,49.5674042],[8.4168536,49.5665589],[8.4163302,49.5657194],[8.4158261,49.5648924],[8.4153747,49.564038],[8.4149201,49.563001],[8.4146785,49.5620763],[8.4144764,49.5611834],[8.4143348,49.560229],[8.4142246,49.5592642],[8.4141602,49.5582954],[8.4141682,49.5573386],[8.414259,49.5563775],[8.4143987,49.5554046],[8.4146077,49.5544459],[8.4148994,49.5534979],[8.4152278,49.552608],[8.4156666,49.551693],[8.416144,49.5507776],[8.4166699,49.5499019],[8.4170811,49.549273],[8.4172503,49.5490142],[8.4174127,49.5488108],[8.4174455,49.5487697],[8.4174823,49.5487239],[8.4258955,49.5513998],[8.427345,49.5518075],[8.428585,49.5521121],[8.4298881,49.5523843],[8.4310587,49.5525842],[8.4322294,49.5527534],[8.4334874,49.5528979],[8.4346332,49.5529945],[8.4360047,49.5530636],[8.45406,49.553565],[8.4609091,49.5537533],[8.482194,49.5543419],[8.5065786,49.555006],[8.5169091,49.555302],[8.516657,49.5554978],[8.5155569,49.5563289],[8.5145014,49.557135],[8.511424,49.5594567],[8.5113265,49.5595241],[8.5102655,49.5603186],[8.5092211,49.5611148],[8.5088503,49.561387],[8.5081541,49.5619286],[8.5070996,49.5627337],[8.5060599,49.5635066],[8.5050265,49.5643024],[8.5047142,49.5645363],[8.5035972,49.56535],[8.5024541,49.5661925],[8.5013239,49.5670104],[8.5002126,49.5678304],[8.4997881,49.5681344],[8.4988725,49.5690582],[8.4979815,49.5699766],[8.496188,49.5717997],[8.4951533,49.5728673],[8.495111,49.5729495],[8.4950278,49.5731118],[8.4933782,49.573247],[8.4819989,49.5744491],[8.481998,49.5744717],[8.4818962,49.5744823],[8.4817629,49.5744961],[8.4817074,49.5777377],[8.4745707,49.5806783],[8.4745194,49.5807335],[8.4743619,49.5819789],[8.4761253,49.5844003],[8.4730585,49.5850611],[8.4729789,49.5850657],[8.4712566,49.5859777],[8.4686874,49.5873096],[8.4659524,49.5885319],[8.4645374,49.5895065],[8.4636411,49.5896099],[8.462525,49.5896062],[8.4611573,49.589655],[8.4591113,49.5898172],[8.4575426,49.5899314],[8.4548921,49.5900931],[8.4531639,49.5902083],[8.4499315,49.5904143],[8.4486692,49.590429],[8.4474207,49.5904701],[8.4461659,49.5903751],[8.4453469,49.5902424],[8.4448249,49.5901872],[8.4444288,49.5901139],[8.4439425,49.5900485],[8.4432162,49.5898789],[8.4421543,49.5896924],[8.4403307,49.5894201],[8.4404743,49.5891414],[8.4405539,49.5885558],[8.4405086,49.5877145],[8.4404147,49.5871898],[8.4401742,49.5864794],[8.4398056,49.5856463],[8.4395794,49.5852174],[8.439257,49.5848332],[8.4388352,49.5843868],[8.4383101,49.5838821],[8.4297178,49.5846988],[8.4253586,49.5843423],[8.4253769,49.5843258],[8.424832,49.5842815],[8.4248898,49.5842612],[8.4224969,49.5837268],[8.4230335,49.5826647],[8.4232764,49.5818618],[8.4234849,49.5811022],[8.4236553,49.5803002],[8.4237645,49.5794717],[8.4238,49.5786303],[8.4237685,49.5778059],[8.4236666,49.5769905],[8.4235032,49.5761667],[8.4232695,49.5753451],[8.4229967,49.574585],[8.4226429,49.5738213],[8.4221841,49.5730182],[8.4219727,49.5726825]]]},"id":"relation/10958746"},{"type":"Feature","properties":{"@id":"relation/10958894","admin_level":"10","boundary":"administrative","description":"Stadtteil","name":"Jungbusch","name:prefix":"Stadtteil","ref":"012","type":"boundary"},"geometry":{"type":"Polygon","coordinates":[[[8.4451778,49.4897594],[8.4457279,49.489267],[8.4459833,49.4890372],[8.4462204,49.4888579],[8.4467322,49.4884711],[8.4469499,49.4883142],[8.4478942,49.4876375],[8.4488483,49.4869565],[8.4496057,49.4864159],[8.4497864,49.486287],[8.4506892,49.4856447],[8.4515534,49.4850057],[8.4524689,49.4842812],[8.4532558,49.4836328],[8.4540641,49.4829479],[8.4548776,49.4822562],[8.4554791,49.4817147],[8.4557019,49.4815142],[8.4560856,49.481179],[8.4561628,49.4811115],[8.4562137,49.4810662],[8.4562646,49.4810208],[8.4563295,49.4809631],[8.4563779,49.4809192],[8.4581402,49.4816653],[8.4583537,49.481735],[8.4574937,49.4824889],[8.4571941,49.4827963],[8.4571124,49.4830088],[8.4570694,49.4835507],[8.4570265,49.4837139],[8.4569639,49.4838249],[8.4563116,49.4847456],[8.4559153,49.485601],[8.4558117,49.4858948],[8.4557745,49.4862154],[8.4557879,49.4865035],[8.4559616,49.4874056],[8.4560029,49.4876198],[8.4560513,49.4878712],[8.4560853,49.4880477],[8.4561099,49.4881757],[8.4562352,49.4889453],[8.4564932,49.4893883],[8.4569545,49.4900016],[8.457302,49.490319],[8.4579562,49.490852],[8.4587398,49.4918236],[8.4589733,49.4920813],[8.4593007,49.4923743],[8.4595954,49.4926122],[8.4602563,49.4930675],[8.4607565,49.4933072],[8.461326,49.4935213],[8.4618585,49.4936789],[8.462668,49.4938312],[8.4633598,49.4939216],[8.4638278,49.4939557],[8.4644019,49.4939742],[8.4662075,49.4939549],[8.4670096,49.4939339],[8.4674818,49.4939156],[8.4679473,49.49389],[8.4683049,49.4938553],[8.4687115,49.4937931],[8.4698795,49.4935994],[8.4700824,49.4935513],[8.4702645,49.4934843],[8.4708157,49.4932181],[8.4711204,49.4930896],[8.4719717,49.494004],[8.4692368,49.4950103],[8.462728,49.4974126],[8.4601137,49.4984479],[8.4559897,49.500081],[8.4525216,49.5017814],[8.4469802,49.5049143],[8.441185,49.5089004],[8.4373516,49.5121174],[8.435846,49.5116779],[8.4358445,49.5112346],[8.435853,49.5111442],[8.4358666,49.5110641],[8.4358838,49.5109852],[8.4359353,49.5108424],[8.4360486,49.5105798],[8.4364397,49.5096661],[8.4364946,49.5094913],[8.4370558,49.5081768],[8.4373978,49.5073758],[8.4377461,49.5065276],[8.4381151,49.5056575],[8.4383035,49.5051939],[8.4384995,49.5047621],[8.4387651,49.504108],[8.4388728,49.5038451],[8.4392435,49.502975],[8.4395934,49.5021235],[8.4399569,49.5012512],[8.4403215,49.5004315],[8.4404792,49.5000286],[8.4406385,49.4996144],[8.4407628,49.4992039],[8.4408582,49.4989083],[8.4409009,49.498776],[8.4411011,49.4979187],[8.441322,49.4970246],[8.441412,49.4965731],[8.4415128,49.4961249],[8.4416551,49.495649],[8.4417881,49.4952361],[8.4419067,49.4949034],[8.4420325,49.4945741],[8.4421501,49.4942814],[8.442406,49.4936822],[8.442516,49.4934679],[8.4425876,49.4933285],[8.4428764,49.4927873],[8.4431119,49.4924091],[8.4435552,49.4916723],[8.4436748,49.4914929],[8.4443028,49.4906511],[8.4445818,49.4903592],[8.444786,49.4901456],[8.4451002,49.4898188],[8.4451778,49.4897594]]]},"id":"relation/10958894"}]}');

},{}],"l2xjn":[function(require,module,exports,__globalThis) {
"use strict";
var Refresh = require("853c734933de07d6");
function debounce(func, delay) {
    {
        let timeout = undefined;
        let lastTime = 0;
        return function(args) {
            // Call immediately if last call was more than the delay ago.
            // Otherwise, set a timeout. This means the first call is fast
            // (for the common case of a single update), and subsequent updates
            // are batched.
            let now = Date.now();
            if (now - lastTime > delay) {
                lastTime = now;
                func.call(null, args);
            } else {
                clearTimeout(timeout);
                timeout = setTimeout(function() {
                    timeout = undefined;
                    lastTime = Date.now();
                    func.call(null, args);
                }, delay);
            }
        };
    }
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30);
module.exports.init = function() {
    if (!globalThis.$RefreshReg$) {
        Refresh.injectIntoGlobalHook(globalThis);
        globalThis.$RefreshReg$ = function() {};
        globalThis.$RefreshSig$ = function() {
            return function(type) {
                return type;
            };
        };
        if (typeof window !== 'undefined') {
            let ErrorOverlay = require("d3a118807afb813e");
            ErrorOverlay.setEditorHandler(function(errorLocation) {
                let file = `${errorLocation.fileName}:${errorLocation.lineNumber || 1}:${errorLocation.colNumber || 1}`;
                fetch(module.bundle.devServer + `/__parcel_launch_editor?file=${encodeURIComponent(file)}`);
            });
            ErrorOverlay.startReportingRuntimeErrors({
                onError: function() {}
            });
            window.addEventListener('parcelhmraccept', ()=>{
                ErrorOverlay.dismissRuntimeErrors();
            });
        }
    }
};
// Everything below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module1) {
    globalThis.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module1.id + ' ' + id);
    };
    globalThis.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module1) {
    if (typeof window === 'undefined') return;
    if (isReactRefreshBoundary(module1.exports)) {
        registerExportsForReactRefresh(module1);
        if (module1.hot) {
            module1.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module1.exports;
            });
            module1.hot.accept(function(getParents) {
                var prevExports = module1.hot.data.prevExports;
                var nextExports = module1.exports;
                // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports);
                // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
}
// When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module1) {
    var exports = module1.exports, id = module1.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        var typeID = id + ' %exports% ' + key;
        Refresh.register(exportValue, typeID);
    }
}

},{"853c734933de07d6":"5J1Xh","d3a118807afb813e":"eAFDk"}],"5J1Xh":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("8b37c8373757a381");

},{"8b37c8373757a381":"6cn4R"}],"6cn4R":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    function computeFullKey(signature) {
        if (null !== signature.fullKey) return signature.fullKey;
        var fullKey = signature.ownKey;
        try {
            var hooks = signature.getCustomHooks();
        } catch (err) {
            return signature.forceReset = !0, signature.fullKey = fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if ("function" !== typeof hook) return signature.forceReset = !0, signature.fullKey = fullKey;
            hook = allSignaturesByType.get(hook);
            if (void 0 !== hook) {
                var nestedHookKey = computeFullKey(hook);
                hook.forceReset && (signature.forceReset = !0);
                fullKey += "\n---\n" + nestedHookKey;
            }
        }
        return signature.fullKey = fullKey;
    }
    function resolveFamily(type) {
        return updatedFamiliesByType.get(type);
    }
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function getProperty(object, property) {
        try {
            return object[property];
        } catch (err) {}
    }
    function register(type, id) {
        if (!(null === type || "function" !== typeof type && "object" !== typeof type || allFamiliesByType.has(type))) {
            var family = allFamiliesByID.get(id);
            void 0 === family ? (family = {
                current: type
            }, allFamiliesByID.set(id, family)) : pendingUpdates.push([
                family,
                type
            ]);
            allFamiliesByType.set(type, family);
            if ("object" === typeof type && null !== type) switch(getProperty(type, "$$typeof")){
                case REACT_FORWARD_REF_TYPE:
                    register(type.render, id + "$render");
                    break;
                case REACT_MEMO_TYPE:
                    register(type.type, id + "$type");
            }
        }
    }
    function setSignature(type, key) {
        var forceReset = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !1, getCustomHooks = 3 < arguments.length ? arguments[3] : void 0;
        allSignaturesByType.has(type) || allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
        if ("object" === typeof type && null !== type) switch(getProperty(type, "$$typeof")){
            case REACT_FORWARD_REF_TYPE:
                setSignature(type.render, key, forceReset, getCustomHooks);
                break;
            case REACT_MEMO_TYPE:
                setSignature(type.type, key, forceReset, getCustomHooks);
        }
    }
    function collectCustomHooksForSignature(type) {
        type = allSignaturesByType.get(type);
        void 0 !== type && computeFullKey(type);
    }
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_MEMO_TYPE = Symbol.for("react.memo"), PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, allFamiliesByID = new Map(), allFamiliesByType = new PossiblyWeakMap(), allSignaturesByType = new PossiblyWeakMap(), updatedFamiliesByType = new PossiblyWeakMap(), pendingUpdates = [], helpersByRendererID = new Map(), helpersByRoot = new Map(), mountedRoots = new Set(), failedRoots = new Set(), rootElements = "function" === typeof WeakMap ? new WeakMap() : null, isPerformingRefresh = !1;
    exports._getMountedRootCount = function() {
        return mountedRoots.size;
    };
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = function() {
        var savedType, hasCustomHooks, didCollectHooks = !1;
        return function(type, key, forceReset, getCustomHooks) {
            if ("string" === typeof key) return savedType || (savedType = type, hasCustomHooks = "function" === typeof getCustomHooks), null == type || "function" !== typeof type && "object" !== typeof type || setSignature(type, key, forceReset, getCustomHooks), type;
            !didCollectHooks && hasCustomHooks && (didCollectHooks = !0, collectCustomHooksForSignature(savedType));
        };
    };
    exports.getFamilyByID = function(id) {
        return allFamiliesByID.get(id);
    };
    exports.getFamilyByType = function(type) {
        return allFamiliesByType.get(type);
    };
    exports.hasUnrecoverableErrors = function() {
        return !1;
    };
    exports.injectIntoGlobalHook = function(globalObject) {
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (void 0 === hook) {
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: !0,
                inject: function() {
                    return nextID++;
                },
                onScheduleFiberRoot: function() {},
                onCommitFiberRoot: function() {},
                onCommitFiberUnmount: function() {}
            };
        }
        if (hook.isDisabled) console.warn("Something has shimmed the React DevTools global hook (__REACT_DEVTOOLS_GLOBAL_HOOK__). Fast Refresh is not compatible with this shim and will be disabled.");
        else {
            var oldInject = hook.inject;
            hook.inject = function(injected) {
                var id = oldInject.apply(this, arguments);
                "function" === typeof injected.scheduleRefresh && "function" === typeof injected.setRefreshHandler && helpersByRendererID.set(id, injected);
                return id;
            };
            hook.renderers.forEach(function(injected, id) {
                "function" === typeof injected.scheduleRefresh && "function" === typeof injected.setRefreshHandler && helpersByRendererID.set(id, injected);
            });
            var oldOnCommitFiberRoot = hook.onCommitFiberRoot, oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {};
            hook.onScheduleFiberRoot = function(id, root, children) {
                isPerformingRefresh || (failedRoots.delete(root), null !== rootElements && rootElements.set(root, children));
                return oldOnScheduleFiberRoot.apply(this, arguments);
            };
            hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
                var helpers = helpersByRendererID.get(id);
                if (void 0 !== helpers) {
                    helpersByRoot.set(root, helpers);
                    helpers = root.current;
                    var alternate = helpers.alternate;
                    null !== alternate ? (alternate = null != alternate.memoizedState && null != alternate.memoizedState.element && mountedRoots.has(root), helpers = null != helpers.memoizedState && null != helpers.memoizedState.element, !alternate && helpers ? (mountedRoots.add(root), failedRoots.delete(root)) : alternate && helpers || (alternate && !helpers ? (mountedRoots.delete(root), didError ? failedRoots.add(root) : helpersByRoot.delete(root)) : alternate || helpers || didError && failedRoots.add(root))) : mountedRoots.add(root);
                }
                return oldOnCommitFiberRoot.apply(this, arguments);
            };
        }
    };
    exports.isLikelyComponentType = function(type) {
        switch(typeof type){
            case "function":
                if (null != type.prototype) {
                    if (type.prototype.isReactComponent) return !0;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (1 < ownNames.length || "constructor" !== ownNames[0] || type.prototype.__proto__ !== Object.prototype) return !1;
                }
                type = type.name || type.displayName;
                return "string" === typeof type && /^[A-Z]/.test(type);
            case "object":
                if (null != type) switch(getProperty(type, "$$typeof")){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        return !0;
                }
                return !1;
            default:
                return !1;
        }
    };
    exports.performReactRefresh = function() {
        if (0 === pendingUpdates.length || isPerformingRefresh) return null;
        isPerformingRefresh = !0;
        try {
            var staleFamilies = new Set(), updatedFamilies = new Set(), updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0];
                _ref = _ref[1];
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(_ref, family);
                family.current = _ref;
                prevType.prototype && prevType.prototype.isReactComponent || _ref.prototype && _ref.prototype.isReactComponent ? _ref = !1 : (prevType = allSignaturesByType.get(prevType), _ref = allSignaturesByType.get(_ref), _ref = void 0 === prevType && void 0 === _ref || void 0 !== prevType && void 0 !== _ref && computeFullKey(prevType) === computeFullKey(_ref) && !_ref.forceReset ? !0 : !1);
                _ref ? updatedFamilies.add(family) : staleFamilies.add(family);
            });
            var update = {
                updatedFamilies: updatedFamilies,
                staleFamilies: staleFamilies
            };
            helpersByRendererID.forEach(function(helpers) {
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = !1, firstError = null, failedRootsSnapshot = cloneSet(failedRoots), mountedRootsSnapshot = cloneSet(mountedRoots), helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (void 0 === helpers) throw Error("Could not find helpers for a root. This is a bug in React Refresh.");
                failedRoots.has(root);
                if (null !== rootElements && rootElements.has(root)) {
                    var element = rootElements.get(root);
                    try {
                        helpers.scheduleRoot(root, element);
                    } catch (err) {
                        didError || (didError = !0, firstError = err);
                    }
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (void 0 === helpers) throw Error("Could not find helpers for a root. This is a bug in React Refresh.");
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    didError || (didError = !0, firstError = err);
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = !1;
        }
    };
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"eAFDk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setEditorHandler", ()=>$da9882e673ac146b$export$25a22ac46f1bd016);
parcelHelpers.export(exports, "reportRuntimeError", ()=>$da9882e673ac146b$export$74e9101ce4078c0);
parcelHelpers.export(exports, "startReportingRuntimeErrors", ()=>$da9882e673ac146b$export$cda2c88a41631c16);
parcelHelpers.export(exports, "dismissRuntimeErrors", ()=>$da9882e673ac146b$export$1cfa6d161ca81bd9);
parcelHelpers.export(exports, "stopReportingRuntimeErrors", ()=>$da9882e673ac146b$export$25ba7d9a816639e7);
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /* eslint-env browser */ /* eslint-disable react/react-in-jsx-scope, no-console */ var $b6c7f0288a15c619$var$n, $b6c7f0288a15c619$export$41c562ebe57d11e2, $b6c7f0288a15c619$var$u, $b6c7f0288a15c619$export$a8257692ac88316c, $b6c7f0288a15c619$var$i, $b6c7f0288a15c619$var$r, $b6c7f0288a15c619$var$o, $b6c7f0288a15c619$var$e, $b6c7f0288a15c619$var$f, $b6c7f0288a15c619$var$c, $b6c7f0288a15c619$var$s, $b6c7f0288a15c619$var$a, $b6c7f0288a15c619$var$h, $b6c7f0288a15c619$var$p = {}, $b6c7f0288a15c619$var$y = [], $b6c7f0288a15c619$var$v = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i, $b6c7f0288a15c619$var$w = Array.isArray;
function $b6c7f0288a15c619$var$d(n, l) {
    for(var u in l)n[u] = l[u];
    return n;
}
function $b6c7f0288a15c619$var$g(n) {
    n && n.parentNode && n.parentNode.removeChild(n);
}
function $b6c7f0288a15c619$export$c8a8987d4410bf2d(l, u, t) {
    var i, r, o, e = {};
    for(o in u)"key" == o ? i = u[o] : "ref" == o ? r = u[o] : e[o] = u[o];
    if (arguments.length > 2 && (e.children = arguments.length > 3 ? $b6c7f0288a15c619$var$n.call(arguments, 2) : t), "function" == typeof l && null != l.defaultProps) for(o in l.defaultProps)null == e[o] && (e[o] = l.defaultProps[o]);
    return $b6c7f0288a15c619$var$m(l, e, i, r, null);
}
function $b6c7f0288a15c619$var$m(n, t, i, r, o) {
    var e = {
        type: n,
        props: t,
        key: i,
        ref: r,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __c: null,
        constructor: void 0,
        __v: null == o ? ++$b6c7f0288a15c619$var$u : o,
        __i: -1,
        __u: 0
    };
    return null == o && null != $b6c7f0288a15c619$export$41c562ebe57d11e2.vnode && $b6c7f0288a15c619$export$41c562ebe57d11e2.vnode(e), e;
}
function $b6c7f0288a15c619$export$7d1e3a5e95ceca43() {
    return {
        current: null
    };
}
function $b6c7f0288a15c619$export$ffb0004e005737fa(n) {
    return n.children;
}
function $b6c7f0288a15c619$export$16fa2f45be04daa8(n, l) {
    this.props = n, this.context = l;
}
function $b6c7f0288a15c619$var$S(n, l) {
    if (null == l) return n.__ ? $b6c7f0288a15c619$var$S(n.__, n.__i + 1) : null;
    for(var u; l < n.__k.length; l++)if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
    return "function" == typeof n.type ? $b6c7f0288a15c619$var$S(n) : null;
}
function $b6c7f0288a15c619$var$C(n) {
    var l, u;
    if (null != (n = n.__) && null != n.__c) {
        for(n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++)if (null != (u = n.__k[l]) && null != u.__e) {
            n.__e = n.__c.base = u.__e;
            break;
        }
        return $b6c7f0288a15c619$var$C(n);
    }
}
function $b6c7f0288a15c619$var$M(n) {
    (!n.__d && (n.__d = !0) && $b6c7f0288a15c619$var$i.push(n) && !$b6c7f0288a15c619$var$$.__r++ || $b6c7f0288a15c619$var$r != $b6c7f0288a15c619$export$41c562ebe57d11e2.debounceRendering) && (($b6c7f0288a15c619$var$r = $b6c7f0288a15c619$export$41c562ebe57d11e2.debounceRendering) || $b6c7f0288a15c619$var$o)($b6c7f0288a15c619$var$$);
}
function $b6c7f0288a15c619$var$$() {
    for(var n, u, t, r, o, f, c, s = 1; $b6c7f0288a15c619$var$i.length;)$b6c7f0288a15c619$var$i.length > s && $b6c7f0288a15c619$var$i.sort($b6c7f0288a15c619$var$e), n = $b6c7f0288a15c619$var$i.shift(), s = $b6c7f0288a15c619$var$i.length, n.__d && (t = void 0, o = (r = (u = n).__v).__e, f = [], c = [], u.__P && ((t = $b6c7f0288a15c619$var$d({}, r)).__v = r.__v + 1, $b6c7f0288a15c619$export$41c562ebe57d11e2.vnode && $b6c7f0288a15c619$export$41c562ebe57d11e2.vnode(t), $b6c7f0288a15c619$var$O(u.__P, t, r, u.__n, u.__P.namespaceURI, 32 & r.__u ? [
        o
    ] : null, f, null == o ? $b6c7f0288a15c619$var$S(r) : o, !!(32 & r.__u), c), t.__v = r.__v, t.__.__k[t.__i] = t, $b6c7f0288a15c619$var$z(f, t, c), t.__e != o && $b6c7f0288a15c619$var$C(t)));
    $b6c7f0288a15c619$var$$.__r = 0;
}
function $b6c7f0288a15c619$var$I(n, l, u, t, i, r, o, e, f, c, s) {
    var a, h, v, w, d, g, _ = t && t.__k || $b6c7f0288a15c619$var$y, m = l.length;
    for(f = $b6c7f0288a15c619$var$P(u, l, _, f, m), a = 0; a < m; a++)null != (v = u.__k[a]) && (h = -1 == v.__i ? $b6c7f0288a15c619$var$p : _[v.__i] || $b6c7f0288a15c619$var$p, v.__i = a, g = $b6c7f0288a15c619$var$O(n, v, h, i, r, o, e, f, c, s), w = v.__e, v.ref && h.ref != v.ref && (h.ref && $b6c7f0288a15c619$var$q(h.ref, null, v), s.push(v.ref, v.__c || w, v)), null == d && null != w && (d = w), 4 & v.__u || h.__k === v.__k ? f = $b6c7f0288a15c619$var$A(v, f, n) : "function" == typeof v.type && void 0 !== g ? f = g : w && (f = w.nextSibling), v.__u &= -7);
    return u.__e = d, f;
}
function $b6c7f0288a15c619$var$P(n, l, u, t, i) {
    var r, o, e, f, c, s = u.length, a = s, h = 0;
    for(n.__k = new Array(i), r = 0; r < i; r++)null != (o = l[r]) && "boolean" != typeof o && "function" != typeof o ? (f = r + h, (o = n.__k[r] = "string" == typeof o || "number" == typeof o || "bigint" == typeof o || o.constructor == String ? $b6c7f0288a15c619$var$m(null, o, null, null, null) : $b6c7f0288a15c619$var$w(o) ? $b6c7f0288a15c619$var$m($b6c7f0288a15c619$export$ffb0004e005737fa, {
        children: o
    }, null, null, null) : null == o.constructor && o.__b > 0 ? $b6c7f0288a15c619$var$m(o.type, o.props, o.key, o.ref ? o.ref : null, o.__v) : o).__ = n, o.__b = n.__b + 1, e = null, -1 != (c = o.__i = $b6c7f0288a15c619$var$L(o, u, f, a)) && (a--, (e = u[c]) && (e.__u |= 2)), null == e || null == e.__v ? (-1 == c && (i > s ? h-- : i < s && h++), "function" != typeof o.type && (o.__u |= 4)) : c != f && (c == f - 1 ? h-- : c == f + 1 ? h++ : (c > f ? h-- : h++, o.__u |= 4))) : n.__k[r] = null;
    if (a) for(r = 0; r < s; r++)null != (e = u[r]) && 0 == (2 & e.__u) && (e.__e == t && (t = $b6c7f0288a15c619$var$S(e)), $b6c7f0288a15c619$var$B(e, e));
    return t;
}
function $b6c7f0288a15c619$var$A(n, l, u) {
    var t, i;
    if ("function" == typeof n.type) {
        for(t = n.__k, i = 0; t && i < t.length; i++)t[i] && (t[i].__ = n, l = $b6c7f0288a15c619$var$A(t[i], l, u));
        return l;
    }
    n.__e != l && (l && n.type && !u.contains(l) && (l = $b6c7f0288a15c619$var$S(n)), u.insertBefore(n.__e, l || null), l = n.__e);
    do l = l && l.nextSibling;
    while (null != l && 8 == l.nodeType);
    return l;
}
function $b6c7f0288a15c619$export$47e4c5b300681277(n, l) {
    return l = l || [], null == n || "boolean" == typeof n || ($b6c7f0288a15c619$var$w(n) ? n.some(function(n) {
        $b6c7f0288a15c619$export$47e4c5b300681277(n, l);
    }) : l.push(n)), l;
}
function $b6c7f0288a15c619$var$L(n, l, u, t) {
    var i, r, o = n.key, e = n.type, f = l[u];
    if (null === f && null == n.key || f && o == f.key && e == f.type && 0 == (2 & f.__u)) return u;
    if (t > (null != f && 0 == (2 & f.__u) ? 1 : 0)) for(i = u - 1, r = u + 1; i >= 0 || r < l.length;){
        if (i >= 0) {
            if ((f = l[i]) && 0 == (2 & f.__u) && o == f.key && e == f.type) return i;
            i--;
        }
        if (r < l.length) {
            if ((f = l[r]) && 0 == (2 & f.__u) && o == f.key && e == f.type) return r;
            r++;
        }
    }
    return -1;
}
function $b6c7f0288a15c619$var$T(n, l, u) {
    "-" == l[0] ? n.setProperty(l, null == u ? "" : u) : n[l] = null == u ? "" : "number" != typeof u || $b6c7f0288a15c619$var$v.test(l) ? u : u + "px";
}
function $b6c7f0288a15c619$var$j(n, l, u, t, i) {
    var r;
    n: if ("style" == l) {
        if ("string" == typeof u) n.style.cssText = u;
        else {
            if ("string" == typeof t && (n.style.cssText = t = ""), t) for(l in t)u && l in u || $b6c7f0288a15c619$var$T(n.style, l, "");
            if (u) for(l in u)t && u[l] == t[l] || $b6c7f0288a15c619$var$T(n.style, l, u[l]);
        }
    } else if ("o" == l[0] && "n" == l[1]) r = l != (l = l.replace($b6c7f0288a15c619$var$f, "$1")), l = l.toLowerCase() in n || "onFocusOut" == l || "onFocusIn" == l ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + r] = u, u ? t ? u.u = t.u : (u.u = $b6c7f0288a15c619$var$c, n.addEventListener(l, r ? $b6c7f0288a15c619$var$a : $b6c7f0288a15c619$var$s, r)) : n.removeEventListener(l, r ? $b6c7f0288a15c619$var$a : $b6c7f0288a15c619$var$s, r);
    else {
        if ("http://www.w3.org/2000/svg" == i) l = l.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" != l && "height" != l && "href" != l && "list" != l && "form" != l && "tabIndex" != l && "download" != l && "rowSpan" != l && "colSpan" != l && "role" != l && "popover" != l && l in n) try {
            n[l] = null == u ? "" : u;
            break n;
        } catch (n) {}
        "function" == typeof u || (null == u || !1 === u && "-" != l[4] ? n.removeAttribute(l) : n.setAttribute(l, "popover" == l && 1 == u ? "" : u));
    }
}
function $b6c7f0288a15c619$var$F(n) {
    return function(u) {
        if (this.l) {
            var t = this.l[u.type + n];
            if (null == u.t) u.t = $b6c7f0288a15c619$var$c++;
            else if (u.t < t.u) return;
            return t($b6c7f0288a15c619$export$41c562ebe57d11e2.event ? $b6c7f0288a15c619$export$41c562ebe57d11e2.event(u) : u);
        }
    };
}
function $b6c7f0288a15c619$var$O(n, u, t, i, r, o, e, f, c, s) {
    var a, h, p, y, v, _, m, b, S, C, M, $, P, A, H, L, T, j = u.type;
    if (null != u.constructor) return null;
    128 & t.__u && (c = !!(32 & t.__u), o = [
        f = u.__e = t.__e
    ]), (a = $b6c7f0288a15c619$export$41c562ebe57d11e2.__b) && a(u);
    n: if ("function" == typeof j) try {
        if (b = u.props, S = "prototype" in j && j.prototype.render, C = (a = j.contextType) && i[a.__c], M = a ? C ? C.props.value : a.__ : i, t.__c ? m = (h = u.__c = t.__c).__ = h.__E : (S ? u.__c = h = new j(b, M) : (u.__c = h = new $b6c7f0288a15c619$export$16fa2f45be04daa8(b, M), h.constructor = j, h.render = $b6c7f0288a15c619$var$D), C && C.sub(h), h.props = b, h.state || (h.state = {}), h.context = M, h.__n = i, p = h.__d = !0, h.__h = [], h._sb = []), S && null == h.__s && (h.__s = h.state), S && null != j.getDerivedStateFromProps && (h.__s == h.state && (h.__s = $b6c7f0288a15c619$var$d({}, h.__s)), $b6c7f0288a15c619$var$d(h.__s, j.getDerivedStateFromProps(b, h.__s))), y = h.props, v = h.state, h.__v = u, p) S && null == j.getDerivedStateFromProps && null != h.componentWillMount && h.componentWillMount(), S && null != h.componentDidMount && h.__h.push(h.componentDidMount);
        else {
            if (S && null == j.getDerivedStateFromProps && b !== y && null != h.componentWillReceiveProps && h.componentWillReceiveProps(b, M), !h.__e && null != h.shouldComponentUpdate && !1 === h.shouldComponentUpdate(b, h.__s, M) || u.__v == t.__v) {
                for(u.__v != t.__v && (h.props = b, h.state = h.__s, h.__d = !1), u.__e = t.__e, u.__k = t.__k, u.__k.some(function(n) {
                    n && (n.__ = u);
                }), $ = 0; $ < h._sb.length; $++)h.__h.push(h._sb[$]);
                h._sb = [], h.__h.length && e.push(h);
                break n;
            }
            null != h.componentWillUpdate && h.componentWillUpdate(b, h.__s, M), S && null != h.componentDidUpdate && h.__h.push(function() {
                h.componentDidUpdate(y, v, _);
            });
        }
        if (h.context = M, h.props = b, h.__P = n, h.__e = !1, P = $b6c7f0288a15c619$export$41c562ebe57d11e2.__r, A = 0, S) {
            for(h.state = h.__s, h.__d = !1, P && P(u), a = h.render(h.props, h.state, h.context), H = 0; H < h._sb.length; H++)h.__h.push(h._sb[H]);
            h._sb = [];
        } else do h.__d = !1, P && P(u), a = h.render(h.props, h.state, h.context), h.state = h.__s;
        while (h.__d && ++A < 25);
        h.state = h.__s, null != h.getChildContext && (i = $b6c7f0288a15c619$var$d($b6c7f0288a15c619$var$d({}, i), h.getChildContext())), S && !p && null != h.getSnapshotBeforeUpdate && (_ = h.getSnapshotBeforeUpdate(y, v)), L = a, null != a && a.type === $b6c7f0288a15c619$export$ffb0004e005737fa && null == a.key && (L = $b6c7f0288a15c619$var$N(a.props.children)), f = $b6c7f0288a15c619$var$I(n, $b6c7f0288a15c619$var$w(L) ? L : [
            L
        ], u, t, i, r, o, e, f, c, s), h.base = u.__e, u.__u &= -161, h.__h.length && e.push(h), m && (h.__E = h.__ = null);
    } catch (n) {
        if (u.__v = null, c || null != o) {
            if (n.then) {
                for(u.__u |= c ? 160 : 128; f && 8 == f.nodeType && f.nextSibling;)f = f.nextSibling;
                o[o.indexOf(f)] = null, u.__e = f;
            } else for(T = o.length; T--;)$b6c7f0288a15c619$var$g(o[T]);
        } else u.__e = t.__e, u.__k = t.__k;
        $b6c7f0288a15c619$export$41c562ebe57d11e2.__e(n, u, t);
    }
    else null == o && u.__v == t.__v ? (u.__k = t.__k, u.__e = t.__e) : f = u.__e = $b6c7f0288a15c619$var$V(t.__e, u, t, i, r, o, e, c, s);
    return (a = $b6c7f0288a15c619$export$41c562ebe57d11e2.diffed) && a(u), 128 & u.__u ? void 0 : f;
}
function $b6c7f0288a15c619$var$z(n, u, t) {
    for(var i = 0; i < t.length; i++)$b6c7f0288a15c619$var$q(t[i], t[++i], t[++i]);
    $b6c7f0288a15c619$export$41c562ebe57d11e2.__c && $b6c7f0288a15c619$export$41c562ebe57d11e2.__c(u, n), n.some(function(u) {
        try {
            n = u.__h, u.__h = [], n.some(function(n) {
                n.call(u);
            });
        } catch (n) {
            $b6c7f0288a15c619$export$41c562ebe57d11e2.__e(n, u.__v);
        }
    });
}
function $b6c7f0288a15c619$var$N(n) {
    return "object" != typeof n || null == n || n.__b && n.__b > 0 ? n : $b6c7f0288a15c619$var$w(n) ? n.map($b6c7f0288a15c619$var$N) : $b6c7f0288a15c619$var$d({}, n);
}
function $b6c7f0288a15c619$var$V(u, t, i, r, o, e, f, c, s) {
    var a, h, y, v, d, _, m, b = i.props, k = t.props, x = t.type;
    if ("svg" == x ? o = "http://www.w3.org/2000/svg" : "math" == x ? o = "http://www.w3.org/1998/Math/MathML" : o || (o = "http://www.w3.org/1999/xhtml"), null != e) {
        for(a = 0; a < e.length; a++)if ((d = e[a]) && "setAttribute" in d == !!x && (x ? d.localName == x : 3 == d.nodeType)) {
            u = d, e[a] = null;
            break;
        }
    }
    if (null == u) {
        if (null == x) return document.createTextNode(k);
        u = document.createElementNS(o, x, k.is && k), c && ($b6c7f0288a15c619$export$41c562ebe57d11e2.__m && $b6c7f0288a15c619$export$41c562ebe57d11e2.__m(t, e), c = !1), e = null;
    }
    if (null == x) b === k || c && u.data == k || (u.data = k);
    else {
        if (e = e && $b6c7f0288a15c619$var$n.call(u.childNodes), b = i.props || $b6c7f0288a15c619$var$p, !c && null != e) for(b = {}, a = 0; a < u.attributes.length; a++)b[(d = u.attributes[a]).name] = d.value;
        for(a in b)if (d = b[a], "children" == a) ;
        else if ("dangerouslySetInnerHTML" == a) y = d;
        else if (!(a in k)) {
            if ("value" == a && "defaultValue" in k || "checked" == a && "defaultChecked" in k) continue;
            $b6c7f0288a15c619$var$j(u, a, null, d, o);
        }
        for(a in k)d = k[a], "children" == a ? v = d : "dangerouslySetInnerHTML" == a ? h = d : "value" == a ? _ = d : "checked" == a ? m = d : c && "function" != typeof d || b[a] === d || $b6c7f0288a15c619$var$j(u, a, d, b[a], o);
        if (h) c || y && (h.__html == y.__html || h.__html == u.innerHTML) || (u.innerHTML = h.__html), t.__k = [];
        else if (y && (u.innerHTML = ""), $b6c7f0288a15c619$var$I("template" == t.type ? u.content : u, $b6c7f0288a15c619$var$w(v) ? v : [
            v
        ], t, i, r, "foreignObject" == x ? "http://www.w3.org/1999/xhtml" : o, e, f, e ? e[0] : i.__k && $b6c7f0288a15c619$var$S(i, 0), c, s), null != e) for(a = e.length; a--;)$b6c7f0288a15c619$var$g(e[a]);
        c || (a = "value", "progress" == x && null == _ ? u.removeAttribute("value") : null != _ && (_ !== u[a] || "progress" == x && !_ || "option" == x && _ != b[a]) && $b6c7f0288a15c619$var$j(u, a, _, b[a], o), a = "checked", null != m && m != u[a] && $b6c7f0288a15c619$var$j(u, a, m, b[a], o));
    }
    return u;
}
function $b6c7f0288a15c619$var$q(n, u, t) {
    try {
        if ("function" == typeof n) {
            var i = "function" == typeof n.__u;
            i && n.__u(), i && null == u || (n.__u = n(u));
        } else n.current = u;
    } catch (n) {
        $b6c7f0288a15c619$export$41c562ebe57d11e2.__e(n, t);
    }
}
function $b6c7f0288a15c619$var$B(n, u, t) {
    var i, r;
    if ($b6c7f0288a15c619$export$41c562ebe57d11e2.unmount && $b6c7f0288a15c619$export$41c562ebe57d11e2.unmount(n), (i = n.ref) && (i.current && i.current != n.__e || $b6c7f0288a15c619$var$q(i, null, u)), null != (i = n.__c)) {
        if (i.componentWillUnmount) try {
            i.componentWillUnmount();
        } catch (n) {
            $b6c7f0288a15c619$export$41c562ebe57d11e2.__e(n, u);
        }
        i.base = i.__P = null;
    }
    if (i = n.__k) for(r = 0; r < i.length; r++)i[r] && $b6c7f0288a15c619$var$B(i[r], u, t || "function" != typeof n.type);
    t || $b6c7f0288a15c619$var$g(n.__e), n.__c = n.__ = n.__e = void 0;
}
function $b6c7f0288a15c619$var$D(n, l, u) {
    return this.constructor(n, u);
}
function $b6c7f0288a15c619$export$b3890eb0ae9dca99(u, t, i) {
    var r, o, e, f;
    t == document && (t = document.documentElement), $b6c7f0288a15c619$export$41c562ebe57d11e2.__ && $b6c7f0288a15c619$export$41c562ebe57d11e2.__(u, t), o = (r = "function" == typeof i) ? null : i && i.__k || t.__k, e = [], f = [], $b6c7f0288a15c619$var$O(t, u = (!r && i || t).__k = $b6c7f0288a15c619$export$c8a8987d4410bf2d($b6c7f0288a15c619$export$ffb0004e005737fa, null, [
        u
    ]), o || $b6c7f0288a15c619$var$p, $b6c7f0288a15c619$var$p, t.namespaceURI, !r && i ? [
        i
    ] : o ? null : t.firstChild ? $b6c7f0288a15c619$var$n.call(t.childNodes) : null, e, !r && i ? i : o ? o.__e : t.firstChild, r, f), $b6c7f0288a15c619$var$z(e, u, f);
}
function $b6c7f0288a15c619$export$fa8d919ba61d84db(n, l) {
    $b6c7f0288a15c619$export$b3890eb0ae9dca99(n, l, $b6c7f0288a15c619$export$fa8d919ba61d84db);
}
function $b6c7f0288a15c619$export$e530037191fcd5d7(l, u, t) {
    var i, r, o, e, f = $b6c7f0288a15c619$var$d({}, l.props);
    for(o in l.type && l.type.defaultProps && (e = l.type.defaultProps), u)"key" == o ? i = u[o] : "ref" == o ? r = u[o] : f[o] = null == u[o] && null != e ? e[o] : u[o];
    return arguments.length > 2 && (f.children = arguments.length > 3 ? $b6c7f0288a15c619$var$n.call(arguments, 2) : t), $b6c7f0288a15c619$var$m(l.type, f, i || l.key, r || l.ref, null);
}
function $b6c7f0288a15c619$export$fd42f52fd3ae1109(n) {
    function l(n) {
        var u, t;
        return this.getChildContext || (u = new Set, (t = {})[l.__c] = this, this.getChildContext = function() {
            return t;
        }, this.componentWillUnmount = function() {
            u = null;
        }, this.shouldComponentUpdate = function(n) {
            this.props.value != n.value && u.forEach(function(n) {
                n.__e = !0, $b6c7f0288a15c619$var$M(n);
            });
        }, this.sub = function(n) {
            u.add(n);
            var l = n.componentWillUnmount;
            n.componentWillUnmount = function() {
                u && u.delete(n), l && l.call(n);
            };
        }), n.children;
    }
    return l.__c = "__cC" + $b6c7f0288a15c619$var$h++, l.__ = n, l.Provider = l.__l = (l.Consumer = function(n, l) {
        return n.children(l);
    }).contextType = l, l;
}
$b6c7f0288a15c619$var$n = $b6c7f0288a15c619$var$y.slice, $b6c7f0288a15c619$export$41c562ebe57d11e2 = {
    __e: function(n, l, u, t) {
        for(var i, r, o; l = l.__;)if ((i = l.__c) && !i.__) try {
            if ((r = i.constructor) && null != r.getDerivedStateFromError && (i.setState(r.getDerivedStateFromError(n)), o = i.__d), null != i.componentDidCatch && (i.componentDidCatch(n, t || {}), o = i.__d), o) return i.__E = i;
        } catch (l) {
            n = l;
        }
        throw n;
    }
}, $b6c7f0288a15c619$var$u = 0, $b6c7f0288a15c619$export$a8257692ac88316c = function(n) {
    return null != n && null == n.constructor;
}, $b6c7f0288a15c619$export$16fa2f45be04daa8.prototype.setState = function(n, l) {
    var u;
    u = null != this.__s && this.__s != this.state ? this.__s : this.__s = $b6c7f0288a15c619$var$d({}, this.state), "function" == typeof n && (n = n($b6c7f0288a15c619$var$d({}, u), this.props)), n && $b6c7f0288a15c619$var$d(u, n), null != n && this.__v && (l && this._sb.push(l), $b6c7f0288a15c619$var$M(this));
}, $b6c7f0288a15c619$export$16fa2f45be04daa8.prototype.forceUpdate = function(n) {
    this.__v && (this.__e = !0, n && this.__h.push(n), $b6c7f0288a15c619$var$M(this));
}, $b6c7f0288a15c619$export$16fa2f45be04daa8.prototype.render = $b6c7f0288a15c619$export$ffb0004e005737fa, $b6c7f0288a15c619$var$i = [], $b6c7f0288a15c619$var$o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, $b6c7f0288a15c619$var$e = function(n, l) {
    return n.__v.__b - l.__v.__b;
}, $b6c7f0288a15c619$var$$.__r = 0, $b6c7f0288a15c619$var$f = /(PointerCapture)$|Capture$/i, $b6c7f0288a15c619$var$c = 0, $b6c7f0288a15c619$var$s = $b6c7f0288a15c619$var$F(!1), $b6c7f0288a15c619$var$a = $b6c7f0288a15c619$var$F(!0), $b6c7f0288a15c619$var$h = 0;
var $23b7c1cb98b19658$var$t = /["&<]/;
function $23b7c1cb98b19658$var$n(r) {
    if (0 === r.length || !1 === $23b7c1cb98b19658$var$t.test(r)) return r;
    for(var e = 0, n = 0, o = "", f = ""; n < r.length; n++){
        switch(r.charCodeAt(n)){
            case 34:
                f = "&quot;";
                break;
            case 38:
                f = "&amp;";
                break;
            case 60:
                f = "&lt;";
                break;
            default:
                continue;
        }
        n !== e && (o += r.slice(e, n)), o += f, e = n + 1;
    }
    return n !== e && (o += r.slice(e, n)), o;
}
var $23b7c1cb98b19658$var$o = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i, $23b7c1cb98b19658$var$f = 0, $23b7c1cb98b19658$var$i = Array.isArray;
function $23b7c1cb98b19658$export$34b9dba7ce09269b(e, t, n, o, i, u) {
    t || (t = {});
    var a, c, p = t;
    if ("ref" in p) for(c in p = {}, t)"ref" == c ? a = t[c] : p[c] = t[c];
    var l = {
        type: e,
        props: p,
        key: n,
        ref: a,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __c: null,
        constructor: void 0,
        __v: --$23b7c1cb98b19658$var$f,
        __i: -1,
        __u: 0,
        __source: i,
        __self: u
    };
    if ("function" == typeof e && (a = e.defaultProps)) for(c in a)void 0 === p[c] && (p[c] = a[c]);
    return $b6c7f0288a15c619$export$41c562ebe57d11e2.vnode && $b6c7f0288a15c619$export$41c562ebe57d11e2.vnode(l), l;
}
function $23b7c1cb98b19658$export$45700d561b2268ac(r) {
    var t = $23b7c1cb98b19658$export$34b9dba7ce09269b($b6c7f0288a15c619$export$ffb0004e005737fa, {
        tpl: r,
        exprs: [].slice.call(arguments, 1)
    });
    return t.key = t.__v, t;
}
var $23b7c1cb98b19658$var$c = {}, $23b7c1cb98b19658$var$p = /[A-Z]/g;
function $23b7c1cb98b19658$export$991f6ffe102e5bac(e, t) {
    if ($b6c7f0288a15c619$export$41c562ebe57d11e2.attr) {
        var f = $b6c7f0288a15c619$export$41c562ebe57d11e2.attr(e, t);
        if ("string" == typeof f) return f;
    }
    if ("ref" === e || "key" === e) return "";
    if ("style" === e && "object" == typeof t) {
        var i = "";
        for(var u in t){
            var a = t[u];
            if (null != a && "" !== a) {
                var l = "-" == u[0] ? u : $23b7c1cb98b19658$var$c[u] || ($23b7c1cb98b19658$var$c[u] = u.replace($23b7c1cb98b19658$var$p, "-$&").toLowerCase()), s = ";";
                "number" != typeof a || l.startsWith("--") || $23b7c1cb98b19658$var$o.test(l) || (s = "px;"), i = i + l + ":" + a + s;
            }
        }
        return e + '="' + i + '"';
    }
    return null == t || !1 === t || "function" == typeof t || "object" == typeof t ? "" : !0 === t ? e : e + '="' + $23b7c1cb98b19658$var$n(t) + '"';
}
function $23b7c1cb98b19658$export$40e96e718441efeb(r) {
    if (null == r || "boolean" == typeof r || "function" == typeof r) return null;
    if ("object" == typeof r) {
        if (void 0 === r.constructor) return r;
        if ($23b7c1cb98b19658$var$i(r)) {
            for(var e = 0; e < r.length; e++)r[e] = $23b7c1cb98b19658$export$40e96e718441efeb(r[e]);
            return r;
        }
    }
    return $23b7c1cb98b19658$var$n("" + r);
}
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /* eslint-env browser */ /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ let $883a43040cbd0629$var$boundErrorHandler = null;
function $883a43040cbd0629$var$errorHandler(callback, e) {
    // $FlowFixMe
    if (!e.error) return;
    // $FlowFixMe
    const { error: error } = e;
    if (error instanceof Error) callback(error);
    else // Look in your browser's devtools for more information
    callback(new Error(error));
}
function $883a43040cbd0629$export$6503ec6e8aabbaf(target, callback) {
    if ($883a43040cbd0629$var$boundErrorHandler !== null) return;
    $883a43040cbd0629$var$boundErrorHandler = $883a43040cbd0629$var$errorHandler.bind(undefined, callback);
    target.addEventListener('error', $883a43040cbd0629$var$boundErrorHandler);
}
function $883a43040cbd0629$export$d07f55d4c15c0440(target) {
    if ($883a43040cbd0629$var$boundErrorHandler === null) return;
    target.removeEventListener('error', $883a43040cbd0629$var$boundErrorHandler);
    $883a43040cbd0629$var$boundErrorHandler = null;
}
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ let $900f8c32b7484e20$var$boundRejectionHandler = null;
function $900f8c32b7484e20$var$rejectionHandler(callback, e) {
    if (e == null || e.reason == null) return callback(new Error('Unknown'));
    let { reason: reason } = e;
    if (reason instanceof Error) return callback(reason);
    // A non-error was rejected, we don't have a trace :(
    // Look in your browser's devtools for more information
    return callback(new Error(reason));
}
function $900f8c32b7484e20$export$6503ec6e8aabbaf(target, callback) {
    if ($900f8c32b7484e20$var$boundRejectionHandler !== null) return;
    $900f8c32b7484e20$var$boundRejectionHandler = $900f8c32b7484e20$var$rejectionHandler.bind(undefined, callback);
    // $FlowFixMe
    target.addEventListener('unhandledrejection', $900f8c32b7484e20$var$boundRejectionHandler);
}
function $900f8c32b7484e20$export$d07f55d4c15c0440(target) {
    if ($900f8c32b7484e20$var$boundRejectionHandler === null) return;
    // $FlowFixMe
    target.removeEventListener('unhandledrejection', $900f8c32b7484e20$var$boundRejectionHandler);
    $900f8c32b7484e20$var$boundRejectionHandler = null;
}
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ let $5f72ade198404e99$var$stackTraceRegistered = false;
// Default: https://docs.microsoft.com/en-us/scripting/javascript/reference/stacktracelimit-property-error-javascript
let $5f72ade198404e99$var$restoreStackTraceValue = 10;
const $5f72ade198404e99$var$MAX_STACK_LENGTH = 50;
function $5f72ade198404e99$export$6503ec6e8aabbaf(limit = $5f72ade198404e99$var$MAX_STACK_LENGTH) {
    if ($5f72ade198404e99$var$stackTraceRegistered) return;
    try {
        $5f72ade198404e99$var$restoreStackTraceValue = Error.stackTraceLimit;
        Error.stackTraceLimit = limit;
        $5f72ade198404e99$var$stackTraceRegistered = true;
    } catch (e) {
    // Not all browsers support this so we don't care if it errors
    }
}
function $5f72ade198404e99$export$d07f55d4c15c0440() {
    if (!$5f72ade198404e99$var$stackTraceRegistered) return;
    try {
        Error.stackTraceLimit = $5f72ade198404e99$var$restoreStackTraceValue;
        $5f72ade198404e99$var$stackTraceRegistered = false;
    } catch (e) {
    // Not all browsers support this so we don't care if it errors
    }
}
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /**
 * A representation of a stack frame.
 */ class $d35756f426c25812$export$8949fddf10447898 {
    constructor(functionName = null, fileName = null, lineNumber = null, columnNumber = null, scriptCode = null, sourceFunctionName = null, sourceFileName = null, sourceLineNumber = null, sourceColumnNumber = null, sourceScriptCode = null){
        if (functionName && functionName.indexOf('Object.') === 0) functionName = functionName.slice(7);
        if (// https://github.com/facebook/create-react-app/issues/2097
        // Let's ignore a meaningless name we get for top-level modules.
        functionName === 'friendlySyntaxErrorLabel' || functionName === 'exports.__esModule' || functionName === '<anonymous>' || !functionName) functionName = null;
        this.functionName = functionName;
        this.fileName = fileName;
        this.lineNumber = lineNumber;
        this.columnNumber = columnNumber;
        this._originalFunctionName = sourceFunctionName;
        this._originalFileName = sourceFileName;
        this._originalLineNumber = sourceLineNumber;
        this._originalColumnNumber = sourceColumnNumber;
        this._scriptCode = scriptCode;
        this._originalScriptCode = sourceScriptCode;
    }
    /**
   * Returns the name of this function.
   */ getFunctionName() {
        return this.functionName || '(anonymous function)';
    }
    /**
   * Returns the source of the frame.
   * This contains the file name, line number, and column number when available.
   */ getSource() {
        let str = '';
        if (this.fileName != null) str += this.fileName + ':';
        if (this.lineNumber != null) str += this.lineNumber + ':';
        if (this.columnNumber != null) str += this.columnNumber + ':';
        return str.slice(0, -1);
    }
    /**
   * Returns a pretty version of this stack frame.
   */ toString() {
        const functionName = this.getFunctionName();
        const source = this.getSource();
        return `${functionName}${source ? ` (${source})` : ``}`;
    }
}
var $d35756f426c25812$export$2e2bcd8739ae039 = $d35756f426c25812$export$8949fddf10447898;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ const $865b9ffc545cb441$var$regexExtractLocation = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;
function $865b9ffc545cb441$var$extractLocation(token) {
    return $865b9ffc545cb441$var$regexExtractLocation.exec(token) // $FlowFixMe
    .slice(1).map((v)=>{
        const p = Number(v);
        if (!isNaN(p)) return p;
        return v;
    });
}
const $865b9ffc545cb441$var$regexValidFrame_Chrome = /^\s*(at|in)\s.+(:\d+)/;
const $865b9ffc545cb441$var$regexValidFrame_FireFox = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;
function $865b9ffc545cb441$var$parseStack(stack) {
    let frames = stack.filter((e)=>$865b9ffc545cb441$var$regexValidFrame_Chrome.test(e) || $865b9ffc545cb441$var$regexValidFrame_FireFox.test(e)).map((e)=>{
        if ($865b9ffc545cb441$var$regexValidFrame_FireFox.test(e)) {
            // Strip eval, we don't care about it
            let isEval = false;
            if (/ > (eval|Function)/.test(e)) {
                e = e.replace(/ line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g, ':$1');
                isEval = true;
            }
            const data = e.split(/[@]/g);
            const last = data.pop();
            return new $d35756f426c25812$export$2e2bcd8739ae039(data.join('@') || (isEval ? 'eval' : null), ...$865b9ffc545cb441$var$extractLocation(last));
        } else {
            // Strip eval, we don't care about it
            if (e.indexOf('(eval ') !== -1) e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, '');
            if (e.indexOf('(at ') !== -1) e = e.replace(/\(at /, '(');
            const data = e.trim().split(/\s+/g).slice(1);
            const last = data.pop();
            return new $d35756f426c25812$export$2e2bcd8739ae039(data.join(' ') || null, ...$865b9ffc545cb441$var$extractLocation(last));
        }
    });
    let index = frames.findIndex((frame)=>frame.getFunctionName().includes('react-stack-bottom-frame'));
    if (index >= 0) frames = frames.slice(0, index);
    return frames;
}
/**
 * Turns an <code>Error</code>, or similar object, into a set of <code>StackFrame</code>s.
 * @alias parse
 */ function $865b9ffc545cb441$export$98e6a39c04603d36(error) {
    if (error == null) throw new Error('You cannot pass a null object.');
    if (typeof error === 'string') return $865b9ffc545cb441$var$parseStack(error.split('\n'));
    if (Array.isArray(error)) return $865b9ffc545cb441$var$parseStack(error);
    if (typeof error.stack === 'string') return $865b9ffc545cb441$var$parseStack(error.stack.split('\n'));
    throw new Error('The error you provided does not contain a stack trace.');
}
var $865b9ffc545cb441$export$2e2bcd8739ae039 = $865b9ffc545cb441$export$98e6a39c04603d36;
/**
 * Enhances a set of <code>StackFrame</code>s with their original positions and code (when available).
 * @param {StackFrame[]} frames A set of <code>StackFrame</code>s which contain (generated) code positions.
 * @param {number} [contextLines=3] The number of lines to provide before and after the line specified in the <code>StackFrame</code>.
 */ async function $df495b51087c401c$export$35b6448019ed80b8(error, contextLines = 3) {
    const frames = $865b9ffc545cb441$export$98e6a39c04603d36(error);
    // $FlowFixMe
    let res = await fetch(module.bundle.devServer + '/__parcel_code_frame', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            contextLines: contextLines,
            frames: frames.map((f)=>({
                    fileName: f.fileName,
                    lineNumber: f.lineNumber,
                    columnNumber: f.columnNumber
                }))
        })
    });
    let json = await res.json();
    return json.map((f, i)=>new $d35756f426c25812$export$8949fddf10447898(frames[i].functionName, f.fileName, f.lineNumber, f.columnNumber, f.compiledLines, frames[i].functionName, f.sourceFileName, f.sourceLineNumber, f.sourceColumnNumber, f.sourceLines));
}
var $df495b51087c401c$export$2e2bcd8739ae039 = $df495b51087c401c$export$35b6448019ed80b8;
const $6d40ebe8356580e0$var$CONTEXT_SIZE = 3;
function $6d40ebe8356580e0$export$9123e6c9c0ac21ed(crash) {
    return (error, unhandledRejection = false)=>{
        $df495b51087c401c$export$2e2bcd8739ae039(error, $6d40ebe8356580e0$var$CONTEXT_SIZE).then((stackFrames)=>{
            if (stackFrames == null) return;
            crash({
                error: error,
                unhandledRejection: unhandledRejection,
                contextSize: $6d40ebe8356580e0$var$CONTEXT_SIZE,
                stackFrames: stackFrames
            });
        }).catch((e)=>{
            // eslint-disable-next-line no-console
            console.log('Could not get the stack frames of error:', e);
        });
    };
}
function $6d40ebe8356580e0$var$patchConsole(method, onError) {
    /* eslint-disable no-console */ let original = console[method];
    console[method] = (...args)=>{
        let error = null;
        if (typeof args[0] === 'string') {
            let format = args[0].match(/%[oOdisfc]/g);
            if (format) {
                let errorIndex = format.findIndex((match)=>match === '%o' || match === '%O');
                if (errorIndex < 0) errorIndex = format.findIndex((match)=>match === '%s');
                if (errorIndex >= 0) error = args[errorIndex + 1];
                else error = args[1];
                if (!(error instanceof Error)) {
                    let index = 1;
                    let message = args[0].replace(/%[oOdisfc]/g, (match)=>{
                        switch(match){
                            case '%s':
                                return String(args[index++]);
                            case '%f':
                                return parseFloat(args[index++]);
                            case '%d':
                            case '%i':
                                return parseInt(args[index++], 10);
                            case '%o':
                            case '%O':
                                if (args[index] instanceof Error) return String(args[index++]);
                                else return JSON.stringify(args[index++]);
                            case '%c':
                                index++;
                                return '';
                        }
                    });
                    error = new Error(message);
                }
            } else error = new Error(args[0]);
        } else error = args.find((arg)=>arg instanceof Error);
        if (error && !error.message.includes('[parcel]') && typeof window !== 'undefined' && window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
            // Attempt to append the React component stack
            // TODO: use React.captureOwnerStack once stable.
            let hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.renderers instanceof Map) {
                for (let renderer of hook.renderers.values())if (typeof renderer?.currentDispatcherRef?.getCurrentStack === 'function') {
                    let stack = renderer.currentDispatcherRef.getCurrentStack();
                    if (stack) {
                        error.stack += stack;
                        break;
                    }
                }
            }
            onError(error);
        }
        original.apply(console, args);
    };
/* eslint-enable no-console */ }
function $6d40ebe8356580e0$export$38ec23daa6e8dcdf(crash) {
    const crashWithFramesRunTime = $6d40ebe8356580e0$export$9123e6c9c0ac21ed(crash);
    $883a43040cbd0629$export$6503ec6e8aabbaf(window, (error)=>crashWithFramesRunTime(error, false));
    $900f8c32b7484e20$export$6503ec6e8aabbaf(window, (error)=>crashWithFramesRunTime(error, true));
    $5f72ade198404e99$export$6503ec6e8aabbaf();
    $6d40ebe8356580e0$var$patchConsole('error', (error)=>crashWithFramesRunTime(error, false));
    return function() {
        $5f72ade198404e99$export$d07f55d4c15c0440();
        $900f8c32b7484e20$export$d07f55d4c15c0440(window);
        $883a43040cbd0629$export$d07f55d4c15c0440(window);
    };
}
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /* eslint-env browser */ var $10ecac3e4062713a$var$t, $10ecac3e4062713a$var$r, $10ecac3e4062713a$var$u, $10ecac3e4062713a$var$i, $10ecac3e4062713a$var$o = 0, $10ecac3e4062713a$var$f = [], $10ecac3e4062713a$var$c = $b6c7f0288a15c619$export$41c562ebe57d11e2, $10ecac3e4062713a$var$e = $10ecac3e4062713a$var$c.__b, $10ecac3e4062713a$var$a = $10ecac3e4062713a$var$c.__r, $10ecac3e4062713a$var$v = $10ecac3e4062713a$var$c.diffed, $10ecac3e4062713a$var$l = $10ecac3e4062713a$var$c.__c, $10ecac3e4062713a$var$m = $10ecac3e4062713a$var$c.unmount, $10ecac3e4062713a$var$s = $10ecac3e4062713a$var$c.__;
function $10ecac3e4062713a$var$p(n, t) {
    $10ecac3e4062713a$var$c.__h && $10ecac3e4062713a$var$c.__h($10ecac3e4062713a$var$r, n, $10ecac3e4062713a$var$o || t), $10ecac3e4062713a$var$o = 0;
    var u = $10ecac3e4062713a$var$r.__H || ($10ecac3e4062713a$var$r.__H = {
        __: [],
        __h: []
    });
    return n >= u.__.length && u.__.push({}), u.__[n];
}
function $10ecac3e4062713a$export$60241385465d0a34(n) {
    return $10ecac3e4062713a$var$o = 1, $10ecac3e4062713a$export$13e3392192263954($10ecac3e4062713a$var$D, n);
}
function $10ecac3e4062713a$export$13e3392192263954(n, u, i) {
    var o = $10ecac3e4062713a$var$p($10ecac3e4062713a$var$t++, 2);
    if (o.t = n, !o.__c && (o.__ = [
        i ? i(u) : $10ecac3e4062713a$var$D(void 0, u),
        function(n) {
            var t = o.__N ? o.__N[0] : o.__[0], r = o.t(t, n);
            t !== r && (o.__N = [
                r,
                o.__[1]
            ], o.__c.setState({}));
        }
    ], o.__c = $10ecac3e4062713a$var$r, !$10ecac3e4062713a$var$r.__f)) {
        var f = function(n, t, r) {
            if (!o.__c.__H) return !0;
            var u = o.__c.__H.__.filter(function(n) {
                return !!n.__c;
            });
            if (u.every(function(n) {
                return !n.__N;
            })) return !c || c.call(this, n, t, r);
            var i = o.__c.props !== n;
            return u.forEach(function(n) {
                if (n.__N) {
                    var t = n.__[0];
                    n.__ = n.__N, n.__N = void 0, t !== n.__[0] && (i = !0);
                }
            }), c && c.call(this, n, t, r) || i;
        };
        $10ecac3e4062713a$var$r.__f = !0;
        var c = $10ecac3e4062713a$var$r.shouldComponentUpdate, e = $10ecac3e4062713a$var$r.componentWillUpdate;
        $10ecac3e4062713a$var$r.componentWillUpdate = function(n, t, r) {
            if (this.__e) {
                var u = c;
                c = void 0, f(n, t, r), c = u;
            }
            e && e.call(this, n, t, r);
        }, $10ecac3e4062713a$var$r.shouldComponentUpdate = f;
    }
    return o.__N || o.__;
}
function $10ecac3e4062713a$export$6d9c69b0de29b591(n, u) {
    var i = $10ecac3e4062713a$var$p($10ecac3e4062713a$var$t++, 3);
    !$10ecac3e4062713a$var$c.__s && $10ecac3e4062713a$var$C(i.__H, u) && (i.__ = n, i.u = u, $10ecac3e4062713a$var$r.__H.__h.push(i));
}
function $10ecac3e4062713a$export$e5c5a5f917a5871c(n, u) {
    var i = $10ecac3e4062713a$var$p($10ecac3e4062713a$var$t++, 4);
    !$10ecac3e4062713a$var$c.__s && $10ecac3e4062713a$var$C(i.__H, u) && (i.__ = n, i.u = u, $10ecac3e4062713a$var$r.__h.push(i));
}
function $10ecac3e4062713a$export$b8f5890fc79d6aca(n) {
    return $10ecac3e4062713a$var$o = 5, $10ecac3e4062713a$export$1538c33de8887b59(function() {
        return {
            current: n
        };
    }, []);
}
function $10ecac3e4062713a$export$d5a552a76deda3c2(n, t, r) {
    $10ecac3e4062713a$var$o = 6, $10ecac3e4062713a$export$e5c5a5f917a5871c(function() {
        if ("function" == typeof n) {
            var r = n(t());
            return function() {
                n(null), r && "function" == typeof r && r();
            };
        }
        if (n) return n.current = t(), function() {
            return n.current = null;
        };
    }, null == r ? r : r.concat(n));
}
function $10ecac3e4062713a$export$1538c33de8887b59(n, r) {
    var u = $10ecac3e4062713a$var$p($10ecac3e4062713a$var$t++, 7);
    return $10ecac3e4062713a$var$C(u.__H, r) && (u.__ = n(), u.__H = r, u.__h = n), u.__;
}
function $10ecac3e4062713a$export$35808ee640e87ca7(n, t) {
    return $10ecac3e4062713a$var$o = 8, $10ecac3e4062713a$export$1538c33de8887b59(function() {
        return n;
    }, t);
}
function $10ecac3e4062713a$export$fae74005e78b1a27(n) {
    var u = $10ecac3e4062713a$var$r.context[n.__c], i = $10ecac3e4062713a$var$p($10ecac3e4062713a$var$t++, 9);
    return i.c = n, u ? (null == i.__ && (i.__ = !0, u.sub($10ecac3e4062713a$var$r)), u.props.value) : n.__;
}
function $10ecac3e4062713a$export$dc8fbce3eb94dc1e(n, t) {
    $10ecac3e4062713a$var$c.useDebugValue && $10ecac3e4062713a$var$c.useDebugValue(t ? t(n) : n);
}
function $10ecac3e4062713a$export$c052f6604b7d51fe(n) {
    var u = $10ecac3e4062713a$var$p($10ecac3e4062713a$var$t++, 10), i = $10ecac3e4062713a$export$60241385465d0a34();
    return u.__ = n, $10ecac3e4062713a$var$r.componentDidCatch || ($10ecac3e4062713a$var$r.componentDidCatch = function(n, t) {
        u.__ && u.__(n, t), i[1](n);
    }), [
        i[0],
        function() {
            i[1](void 0);
        }
    ];
}
function $10ecac3e4062713a$export$f680877a34711e37() {
    var n = $10ecac3e4062713a$var$p($10ecac3e4062713a$var$t++, 11);
    if (!n.__) {
        for(var u = $10ecac3e4062713a$var$r.__v; null !== u && !u.__m && null !== u.__;)u = u.__;
        var i = u.__m || (u.__m = [
            0,
            0
        ]);
        n.__ = "P" + i[0] + "-" + i[1]++;
    }
    return n.__;
}
function $10ecac3e4062713a$var$j() {
    for(var n; n = $10ecac3e4062713a$var$f.shift();)if (n.__P && n.__H) try {
        n.__H.__h.forEach($10ecac3e4062713a$var$z), n.__H.__h.forEach($10ecac3e4062713a$var$B), n.__H.__h = [];
    } catch (t) {
        n.__H.__h = [], $10ecac3e4062713a$var$c.__e(t, n.__v);
    }
}
$10ecac3e4062713a$var$c.__b = function(n) {
    $10ecac3e4062713a$var$r = null, $10ecac3e4062713a$var$e && $10ecac3e4062713a$var$e(n);
}, $10ecac3e4062713a$var$c.__ = function(n, t) {
    n && t.__k && t.__k.__m && (n.__m = t.__k.__m), $10ecac3e4062713a$var$s && $10ecac3e4062713a$var$s(n, t);
}, $10ecac3e4062713a$var$c.__r = function(n) {
    $10ecac3e4062713a$var$a && $10ecac3e4062713a$var$a(n), $10ecac3e4062713a$var$t = 0;
    var i = ($10ecac3e4062713a$var$r = n.__c).__H;
    i && ($10ecac3e4062713a$var$u === $10ecac3e4062713a$var$r ? (i.__h = [], $10ecac3e4062713a$var$r.__h = [], i.__.forEach(function(n) {
        n.__N && (n.__ = n.__N), n.u = n.__N = void 0;
    })) : (i.__h.forEach($10ecac3e4062713a$var$z), i.__h.forEach($10ecac3e4062713a$var$B), i.__h = [], $10ecac3e4062713a$var$t = 0)), $10ecac3e4062713a$var$u = $10ecac3e4062713a$var$r;
}, $10ecac3e4062713a$var$c.diffed = function(n) {
    $10ecac3e4062713a$var$v && $10ecac3e4062713a$var$v(n);
    var t = n.__c;
    t && t.__H && (t.__H.__h.length && (1 !== $10ecac3e4062713a$var$f.push(t) && $10ecac3e4062713a$var$i === $10ecac3e4062713a$var$c.requestAnimationFrame || (($10ecac3e4062713a$var$i = $10ecac3e4062713a$var$c.requestAnimationFrame) || $10ecac3e4062713a$var$w)($10ecac3e4062713a$var$j)), t.__H.__.forEach(function(n) {
        n.u && (n.__H = n.u), n.u = void 0;
    })), $10ecac3e4062713a$var$u = $10ecac3e4062713a$var$r = null;
}, $10ecac3e4062713a$var$c.__c = function(n, t) {
    t.some(function(n) {
        try {
            n.__h.forEach($10ecac3e4062713a$var$z), n.__h = n.__h.filter(function(n) {
                return !n.__ || $10ecac3e4062713a$var$B(n);
            });
        } catch (r) {
            t.some(function(n) {
                n.__h && (n.__h = []);
            }), t = [], $10ecac3e4062713a$var$c.__e(r, n.__v);
        }
    }), $10ecac3e4062713a$var$l && $10ecac3e4062713a$var$l(n, t);
}, $10ecac3e4062713a$var$c.unmount = function(n) {
    $10ecac3e4062713a$var$m && $10ecac3e4062713a$var$m(n);
    var t, r = n.__c;
    r && r.__H && (r.__H.__.forEach(function(n) {
        try {
            $10ecac3e4062713a$var$z(n);
        } catch (n) {
            t = n;
        }
    }), r.__H = void 0, t && $10ecac3e4062713a$var$c.__e(t, r.__v));
};
var $10ecac3e4062713a$var$k = "function" == typeof requestAnimationFrame;
function $10ecac3e4062713a$var$w(n) {
    var t, r = function() {
        clearTimeout(u), $10ecac3e4062713a$var$k && cancelAnimationFrame(t), setTimeout(n);
    }, u = setTimeout(r, 100);
    $10ecac3e4062713a$var$k && (t = requestAnimationFrame(r));
}
function $10ecac3e4062713a$var$z(n) {
    var t = $10ecac3e4062713a$var$r, u = n.__c;
    "function" == typeof u && (n.__c = void 0, u()), $10ecac3e4062713a$var$r = t;
}
function $10ecac3e4062713a$var$B(n) {
    var t = $10ecac3e4062713a$var$r;
    n.__c = n.__(), $10ecac3e4062713a$var$r = t;
}
function $10ecac3e4062713a$var$C(n, t) {
    return !n || n.length !== t.length || t.some(function(t, r) {
        return t !== n[r];
    });
}
function $10ecac3e4062713a$var$D(n, t) {
    return "function" == typeof t ? t(n) : t;
}
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ const $74bb4be6e9b78681$export$f30cb9bc4f736419 = {
    // Colors for components styles
    background: 'white',
    color: 'black',
    headerColor: '#ce1126',
    primaryPreBackground: 'rgba(206, 17, 38, 0.05)',
    primaryPreColor: 'inherit',
    secondaryPreBackground: 'rgba(251, 245, 180, 0.3)',
    secondaryPreColor: 'inherit',
    footer: '#878e91',
    anchorColor: '#878e91',
    toggleBackground: 'transparent',
    toggleColor: '#878e91',
    closeColor: '#293238',
    navBackground: 'rgba(206, 17, 38, 0.05)',
    navArrow: '#ce1126',
    diffAdded: 'green',
    diffRemoved: '#ce1126',
    // Light color scheme inspired by https://chriskempson.github.io/base16/css/base16-github.css
    // base00: '#ffffff',
    base01: '#f5f5f5',
    // base02: '#c8c8fa',
    base03: '#6e6e6e',
    // base04: '#e8e8e8',
    base05: '#333333',
    // base06: '#ffffff',
    // base07: '#ffffff',
    base08: '#881280',
    // base09: '#0086b3',
    // base0A: '#795da3',
    base0B: '#1155cc',
    base0C: '#994500',
    // base0D: '#795da3',
    base0E: '#c80000'
};
const $74bb4be6e9b78681$export$3e936a8db52a10a0 = {
    // Colors for components styles
    background: '#353535',
    color: 'white',
    headerColor: '#e83b46',
    primaryPreBackground: 'rgba(206, 17, 38, 0.1)',
    primaryPreColor: '#fccfcf',
    secondaryPreBackground: 'rgba(251, 245, 180, 0.1)',
    secondaryPreColor: '#fbf5b4',
    footer: '#878e91',
    anchorColor: '#878e91',
    toggleBackground: 'transparent',
    toggleColor: '#878e91',
    closeColor: '#ffffff',
    navBackground: 'rgba(206, 17, 38, 0.2)',
    navArrow: '#ce1126',
    diffAdded: '#85e285',
    diffRemoved: '#ff5459',
    // Dark color scheme inspired by https://github.com/atom/base16-tomorrow-dark-theme/blob/master/styles/colors.less
    // base00: '#1d1f21',
    base01: '#282a2e',
    // base02: '#373b41',
    base03: '#969896',
    // base04: '#b4b7b4',
    base05: '#c5c8c6',
    // base06: '#e0e0e0',
    // base07: '#ffffff',
    base08: '#cc6666',
    // base09: '#de935f',
    // base0A: '#f0c674',
    base0B: '#b5bd68',
    base0C: '#8abeb7',
    // base0D: '#81a2be',
    base0E: '#b294bb'
};
const $74bb4be6e9b78681$export$bca14c5b3b88a9c9 = Object.fromEntries(Object.keys($74bb4be6e9b78681$export$f30cb9bc4f736419).map((key)=>[
        key,
        `light-dark(${$74bb4be6e9b78681$export$f30cb9bc4f736419[key]}, ${$74bb4be6e9b78681$export$3e936a8db52a10a0[key]})`
    ]));
const $74bb4be6e9b78681$export$7ef984671d1853d7 = {
    width: '100vw',
    height: '100vh',
    maxWidth: 'none',
    maxHeight: 'none',
    border: 0,
    margin: 0,
    padding: 0,
    boxSizing: 'border-box',
    textAlign: 'center',
    backgroundColor: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.background,
    outline: 'none',
    colorScheme: 'light dark'
};
const $20d888b381d18c6c$var$overlayStyle = {
    position: 'relative',
    display: 'inline-flex',
    flexDirection: 'column',
    height: '100%',
    width: '1024px',
    maxWidth: '100%',
    overflowX: 'hidden',
    overflowY: 'auto',
    padding: '0.5rem',
    boxSizing: 'border-box',
    textAlign: 'left',
    fontFamily: 'Consolas, Menlo, monospace',
    fontSize: '11px',
    whiteSpace: 'pre-wrap',
    wordBreak: 'break-word',
    lineHeight: 1.5,
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.color
};
function $20d888b381d18c6c$var$ErrorOverlay(props) {
    const { shortcutHandler: shortcutHandler } = props;
    $10ecac3e4062713a$export$6d9c69b0de29b591(()=>{
        const onKeyDown = (e)=>{
            if (shortcutHandler) shortcutHandler(e.key);
        };
        window.addEventListener('keydown', onKeyDown);
        return ()=>{
            window.removeEventListener('keydown', onKeyDown);
        };
    }, [
        shortcutHandler
    ]);
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
        style: $20d888b381d18c6c$var$overlayStyle,
        children: props.children
    });
}
var $20d888b381d18c6c$export$2e2bcd8739ae039 = $20d888b381d18c6c$var$ErrorOverlay;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ const $7aae0c9ea64fc08c$var$closeButtonStyle = {
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.closeColor,
    lineHeight: '1rem',
    fontSize: '1.5rem',
    padding: '1rem',
    cursor: 'pointer',
    position: 'absolute',
    right: 0,
    top: 0
};
function $7aae0c9ea64fc08c$var$CloseButton({ close: close }) {
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("span", {
        title: "Click or press Escape to dismiss.",
        onClick: close,
        style: $7aae0c9ea64fc08c$var$closeButtonStyle,
        children: "\xd7"
    });
}
var $7aae0c9ea64fc08c$export$2e2bcd8739ae039 = $7aae0c9ea64fc08c$var$CloseButton;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ const $1adc179a826c5dd2$var$navigationBarStyle = {
    marginBottom: '0.5rem'
};
const $1adc179a826c5dd2$var$buttonContainerStyle = {
    marginRight: '1em'
};
const $1adc179a826c5dd2$var$_navButtonStyle = {
    border: 'none',
    borderRadius: '4px',
    padding: '3px 6px',
    cursor: 'pointer'
};
const $1adc179a826c5dd2$var$leftButtonStyle = {
    ...$1adc179a826c5dd2$var$_navButtonStyle,
    backgroundColor: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.navBackground,
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.navArrow,
    borderTopRightRadius: '0px',
    borderBottomRightRadius: '0px',
    marginRight: '1px'
};
const $1adc179a826c5dd2$var$rightButtonStyle = {
    ...$1adc179a826c5dd2$var$_navButtonStyle,
    backgroundColor: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.navBackground,
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.navArrow,
    borderTopLeftRadius: '0px',
    borderBottomLeftRadius: '0px'
};
function $1adc179a826c5dd2$var$NavigationBar(props) {
    const { currentError: currentError, totalErrors: totalErrors, previous: previous, next: next } = props;
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
        style: $1adc179a826c5dd2$var$navigationBarStyle,
        children: [
            $23b7c1cb98b19658$export$34b9dba7ce09269b("span", {
                style: $1adc179a826c5dd2$var$buttonContainerStyle,
                children: [
                    $23b7c1cb98b19658$export$34b9dba7ce09269b("button", {
                        onClick: previous,
                        style: $1adc179a826c5dd2$var$leftButtonStyle,
                        children: "\u2190"
                    }),
                    $23b7c1cb98b19658$export$34b9dba7ce09269b("button", {
                        onClick: next,
                        style: $1adc179a826c5dd2$var$rightButtonStyle,
                        children: "\u2192"
                    })
                ]
            }),
            `${currentError} of ${totalErrors} errors on the page`
        ]
    });
}
var $1adc179a826c5dd2$export$2e2bcd8739ae039 = $1adc179a826c5dd2$var$NavigationBar;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ const $c306e3a42547c8c2$var$headerStyle = {
    fontSize: '2em',
    fontFamily: 'sans-serif',
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.headerColor,
    whiteSpace: 'pre-wrap',
    // Top bottom margin spaces header
    // Right margin revents overlap with close button
    margin: '0 2rem 0.75rem 0',
    flex: '0 0 auto'
};
function $c306e3a42547c8c2$var$Header(props) {
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
        style: $c306e3a42547c8c2$var$headerStyle,
        children: props.headerText
    });
}
var $c306e3a42547c8c2$export$2e2bcd8739ae039 = $c306e3a42547c8c2$var$Header;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ const $97c30df7f5c364f7$var$_preStyle = {
    position: 'relative',
    display: 'block',
    padding: '0.5em',
    marginTop: '0.5em',
    marginBottom: '0.5em',
    overflowX: 'auto',
    whiteSpace: 'pre-wrap',
    borderRadius: '0.25rem'
};
const $97c30df7f5c364f7$var$codeStyle = {
    fontFamily: 'Consolas, Menlo, monospace'
};
function $97c30df7f5c364f7$var$CodeBlock({ main: main, codeHTML: codeHTML }) {
    const primaryPreStyle = {
        ...$97c30df7f5c364f7$var$_preStyle,
        backgroundColor: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.primaryPreBackground,
        color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.primaryPreColor
    };
    const secondaryPreStyle = {
        ...$97c30df7f5c364f7$var$_preStyle,
        backgroundColor: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.secondaryPreBackground,
        color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.secondaryPreColor
    };
    const preStyle = main ? primaryPreStyle : secondaryPreStyle;
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("pre", {
        style: preStyle,
        children: $23b7c1cb98b19658$export$34b9dba7ce09269b("code", {
            style: $97c30df7f5c364f7$var$codeStyle,
            dangerouslySetInnerHTML: {
                __html: codeHTML
            }
        })
    });
}
var $97c30df7f5c364f7$export$2e2bcd8739ae039 = $97c30df7f5c364f7$var$CodeBlock;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function $f78f50d61026cdc5$export$44b1e5ee7f53eae1(sourceFileName, sourceLineNumber, sourceColumnNumber, fileName, lineNumber, columnNumber, compiled) {
    let prettyURL;
    if (!compiled && sourceFileName && typeof sourceLineNumber === 'number') {
        // Remove everything up to the first /src/ or /node_modules/
        const trimMatch = /^[/|\\].*?[/|\\]((src|node_modules)[/|\\].*)/.exec(sourceFileName);
        if (trimMatch && trimMatch[1]) prettyURL = trimMatch[1];
        else prettyURL = sourceFileName;
        prettyURL += ':' + sourceLineNumber;
        // Note: we intentionally skip 0's because they're produced by cheap webpack maps
        if (sourceColumnNumber) prettyURL += ':' + sourceColumnNumber;
    } else if (fileName && typeof lineNumber === 'number') {
        prettyURL = fileName + ':' + lineNumber;
        // Note: we intentionally skip 0's because they're produced by cheap webpack maps
        if (columnNumber) prettyURL += ':' + columnNumber;
    } else prettyURL = 'unknown';
    return prettyURL.replace('webpack://', '.');
}
var $f78f50d61026cdc5$export$2e2bcd8739ae039 = $f78f50d61026cdc5$export$44b1e5ee7f53eae1;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $cdea3ae92bef6910$exports = {};
'use strict';
$cdea3ae92bef6910$exports = $cdea3ae92bef6910$var$ansiHTML;
// Reference to https://github.com/sindresorhus/ansi-regex
var $cdea3ae92bef6910$var$_regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/;
var $cdea3ae92bef6910$var$_defColors = {
    reset: [
        'fff',
        '000'
    ],
    black: '000',
    red: 'ff0000',
    green: '209805',
    yellow: 'e8bf03',
    blue: '0000ff',
    magenta: 'ff00ff',
    cyan: '00ffee',
    lightgrey: 'f0f0f0',
    darkgrey: '888'
};
var $cdea3ae92bef6910$var$_styles = {
    30: 'black',
    31: 'red',
    32: 'green',
    33: 'yellow',
    34: 'blue',
    35: 'magenta',
    36: 'cyan',
    37: 'lightgrey'
};
var $cdea3ae92bef6910$var$_openTags = {
    '1': 'font-weight:bold',
    '2': 'opacity:0.5',
    '3': '<i>',
    '4': '<u>',
    '8': 'display:none',
    '9': '<del>' // delete
};
var $cdea3ae92bef6910$var$_closeTags = {
    '23': '</i>',
    '24': '</u>',
    '29': '</del>' // reset delete
};
[
    0,
    21,
    22,
    27,
    28,
    39,
    49
].forEach(function(n) {
    $cdea3ae92bef6910$var$_closeTags[n] = '</span>';
});
/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */ function $cdea3ae92bef6910$var$ansiHTML(text) {
    // Returns the text if the string has no ANSI escape code.
    if (!$cdea3ae92bef6910$var$_regANSI.test(text)) return text;
    // Cache opened sequence.
    var ansiCodes = [];
    // Replace with markup.
    var ret = text.replace(/\033\[(\d+)m/g, function(match, seq) {
        var ot = $cdea3ae92bef6910$var$_openTags[seq];
        if (ot) {
            // If current sequence has been opened, close it.
            if (!!~ansiCodes.indexOf(seq)) {
                ansiCodes.pop();
                return '</span>';
            }
            // Open tag.
            ansiCodes.push(seq);
            return ot[0] === '<' ? ot : '<span style="' + ot + ';">';
        }
        var ct = $cdea3ae92bef6910$var$_closeTags[seq];
        if (ct) {
            // Pop sequence
            ansiCodes.pop();
            return ct;
        }
        return '';
    });
    // Make sure tags are closed.
    var l = ansiCodes.length;
    l > 0 && (ret += Array(l + 1).join('</span>'));
    return ret;
}
/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */ $cdea3ae92bef6910$var$ansiHTML.setColors = function(colors) {
    if (typeof colors !== 'object') throw new Error('`colors` parameter must be an Object.');
    var _finalColors = {};
    for(var key in $cdea3ae92bef6910$var$_defColors){
        var hex = colors.hasOwnProperty(key) ? colors[key] : null;
        if (!hex) {
            _finalColors[key] = $cdea3ae92bef6910$var$_defColors[key];
            continue;
        }
        if ('reset' === key) {
            if (typeof hex === 'string') hex = [
                hex
            ];
            if (!Array.isArray(hex) || hex.length === 0 || hex.some(function(h) {
                return typeof h !== 'string';
            })) throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000');
            var defHexColor = $cdea3ae92bef6910$var$_defColors[key];
            if (!hex[0]) hex[0] = defHexColor[0];
            if (hex.length === 1 || !hex[1]) {
                hex = [
                    hex[0]
                ];
                hex.push(defHexColor[1]);
            }
            hex = hex.slice(0, 2);
        } else if (typeof hex !== 'string') throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000');
        _finalColors[key] = hex;
    }
    $cdea3ae92bef6910$var$_setTags(_finalColors);
};
/**
 * Reset colors.
 */ $cdea3ae92bef6910$var$ansiHTML.reset = function() {
    $cdea3ae92bef6910$var$_setTags($cdea3ae92bef6910$var$_defColors);
};
/**
 * Expose tags, including open and close.
 * @type {Object}
 */ $cdea3ae92bef6910$var$ansiHTML.tags = {};
if (Object.defineProperty) {
    Object.defineProperty($cdea3ae92bef6910$var$ansiHTML.tags, 'open', {
        get: function() {
            return $cdea3ae92bef6910$var$_openTags;
        }
    });
    Object.defineProperty($cdea3ae92bef6910$var$ansiHTML.tags, 'close', {
        get: function() {
            return $cdea3ae92bef6910$var$_closeTags;
        }
    });
} else {
    $cdea3ae92bef6910$var$ansiHTML.tags.open = $cdea3ae92bef6910$var$_openTags;
    $cdea3ae92bef6910$var$ansiHTML.tags.close = $cdea3ae92bef6910$var$_closeTags;
}
function $cdea3ae92bef6910$var$_setTags(colors) {
    // reset all
    $cdea3ae92bef6910$var$_openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1];
    // inverse
    $cdea3ae92bef6910$var$_openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0];
    // dark grey
    $cdea3ae92bef6910$var$_openTags['90'] = 'color:#' + colors.darkgrey;
    for(var code in $cdea3ae92bef6910$var$_styles){
        var color = $cdea3ae92bef6910$var$_styles[code];
        var oriColor = colors[color] || '000';
        $cdea3ae92bef6910$var$_openTags[code] = 'color:#' + oriColor;
        code = parseInt(code);
        $cdea3ae92bef6910$var$_openTags[(code + 10).toString()] = 'background:#' + oriColor;
    }
}
$cdea3ae92bef6910$var$ansiHTML.reset();
// Map ANSI colors from what babel-code-frame uses to base16-github
// See: https://github.com/babel/babel/blob/e86f62b304d280d0bab52c38d61842b853848ba6/packages/babel-code-frame/src/index.js#L9-L22
const $b67e2a05a9c13039$var$colors = {
    reset: [
        $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base05,
        'transparent'
    ],
    black: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base05,
    red: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base08 /* marker, bg-invalid */ ,
    green: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base0B /* string */ ,
    yellow: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base08 /* capitalized, jsx_tag, punctuator */ ,
    blue: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base0C,
    magenta: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base0C /* regex */ ,
    cyan: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base0E /* keyword */ ,
    gray: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base03 /* comment, gutter */ ,
    lightgrey: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base01,
    darkgrey: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.base03
};
/*@__PURE__*/ $parcel$interopDefault($cdea3ae92bef6910$exports).setColors($b67e2a05a9c13039$var$colors);
// $FlowFixMe
for(let tag in /*@__PURE__*/ $parcel$interopDefault($cdea3ae92bef6910$exports).tags.open)/*@__PURE__*/ $parcel$interopDefault($cdea3ae92bef6910$exports).tags.open[tag] = /*@__PURE__*/ $parcel$interopDefault($cdea3ae92bef6910$exports).tags.open[tag].replace(/#light-dark/g, 'light-dark');
function $b67e2a05a9c13039$var$generateAnsiHTML(txt) {
    return /*@__PURE__*/ $parcel$interopDefault($cdea3ae92bef6910$exports)(txt.replace(/[&<>"']/g, (c)=>{
        switch(c){
            case '&':
                return '&amp';
            case '<':
                return '&lt;';
            case '>':
                return '&gt';
            case '"':
                return '&quot;';
            case "'":
                return '&#39;';
            default:
                return c;
        }
    }));
}
var $b67e2a05a9c13039$export$2e2bcd8739ae039 = $b67e2a05a9c13039$var$generateAnsiHTML;
const $e0e0fa52b83f95a9$var$linkStyle = {
    fontSize: '0.9em',
    marginBottom: '0.9em'
};
const $e0e0fa52b83f95a9$var$anchorStyle = {
    textDecoration: 'none',
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.anchorColor,
    cursor: 'pointer'
};
const $e0e0fa52b83f95a9$var$codeAnchorStyle = {
    cursor: 'pointer'
};
const $e0e0fa52b83f95a9$var$toggleStyle = {
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.toggleColor,
    cursor: 'pointer',
    border: 'none',
    display: 'block',
    width: '100%',
    textAlign: 'left',
    background: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.toggleBackground,
    fontFamily: 'Consolas, Menlo, monospace',
    fontSize: '1em',
    padding: '0px',
    lineHeight: '1.5'
};
function $e0e0fa52b83f95a9$var$StackFrame(props) {
    const { frame: frame, critical: critical, showCode: showCode } = props;
    const { fileName: fileName, lineNumber: lineNumber, columnNumber: columnNumber, _scriptCode: scriptLines, _originalFileName: sourceFileName, _originalLineNumber: sourceLineNumber, _originalColumnNumber: sourceColumnNumber, _originalScriptCode: sourceLines } = frame;
    const functionName = frame.getFunctionName();
    const [compiled, setCompiled] = $10ecac3e4062713a$export$60241385465d0a34(!sourceLines);
    const getErrorLocation = ()=>{
        const { _originalFileName: fileName, _originalLineNumber: lineNumber } = props.frame;
        // Unknown file
        if (!fileName) return null;
        // e.g. "/path-to-my-app/webpack/bootstrap eaddeb46b67d75e4dfc1"
        const isInternalWebpackBootstrapCode = fileName.trim().indexOf(' ') !== -1;
        if (isInternalWebpackBootstrapCode) return null;
        // Code is in a real file
        return {
            fileName: fileName,
            lineNumber: lineNumber || 1
        };
    };
    const editorHandler = ()=>{
        const errorLoc = getErrorLocation();
        if (!errorLoc) return;
        props.editorHandler?.(errorLoc);
    };
    const url = $f78f50d61026cdc5$export$44b1e5ee7f53eae1(sourceFileName, sourceLineNumber, sourceColumnNumber, fileName, lineNumber, columnNumber, compiled);
    let codeBlockProps = null;
    if (showCode) {
        if (compiled && scriptLines && scriptLines.length !== 0 && lineNumber != null) codeBlockProps = {
            codeHTML: $b67e2a05a9c13039$export$2e2bcd8739ae039(scriptLines),
            main: critical
        };
        else if (!compiled && sourceLines && sourceLines.length !== 0 && sourceLineNumber != null) codeBlockProps = {
            codeHTML: $b67e2a05a9c13039$export$2e2bcd8739ae039(sourceLines),
            main: critical
        };
    }
    const canOpenInEditor = getErrorLocation() !== null && props.editorHandler !== null;
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
        children: [
            $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
                children: functionName
            }),
            $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
                style: $e0e0fa52b83f95a9$var$linkStyle,
                children: $23b7c1cb98b19658$export$34b9dba7ce09269b("span", {
                    role: "link",
                    style: canOpenInEditor ? $e0e0fa52b83f95a9$var$anchorStyle : null,
                    onClick: canOpenInEditor ? editorHandler : null,
                    onKeyDown: canOpenInEditor ? (e)=>{
                        if (e.key === 'Enter') editorHandler();
                    } : null,
                    tabIndex: canOpenInEditor ? '0' : null,
                    children: url
                })
            }),
            codeBlockProps && $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
                style: {
                    marginBottom: '1.5em'
                },
                children: [
                    $23b7c1cb98b19658$export$34b9dba7ce09269b("span", {
                        onClick: canOpenInEditor ? editorHandler : null,
                        style: canOpenInEditor ? $e0e0fa52b83f95a9$var$codeAnchorStyle : null,
                        children: $23b7c1cb98b19658$export$34b9dba7ce09269b($97c30df7f5c364f7$export$2e2bcd8739ae039, {
                            ...codeBlockProps
                        })
                    }),
                    scriptLines && sourceLines && $23b7c1cb98b19658$export$34b9dba7ce09269b("button", {
                        style: $e0e0fa52b83f95a9$var$toggleStyle,
                        onClick: ()=>{
                            setCompiled(!compiled);
                        },
                        children: 'View ' + (compiled ? 'source' : 'compiled')
                    })
                ]
            })
        ]
    });
}
var $e0e0fa52b83f95a9$export$2e2bcd8739ae039 = $e0e0fa52b83f95a9$var$StackFrame;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ const $9a1abb59f5d10ec8$var$_collapsibleStyle = {
    cursor: 'pointer',
    border: 'none',
    display: 'block',
    width: '100%',
    textAlign: 'left',
    fontFamily: 'Consolas, Menlo, monospace',
    fontSize: '1em',
    padding: '0px',
    lineHeight: '1.5'
};
const $9a1abb59f5d10ec8$var$collapsibleCollapsedStyle = {
    ...$9a1abb59f5d10ec8$var$_collapsibleStyle,
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.color,
    background: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.background,
    marginBottom: '1.5em'
};
const $9a1abb59f5d10ec8$var$collapsibleExpandedStyle = {
    ...$9a1abb59f5d10ec8$var$_collapsibleStyle,
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.color,
    background: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.background,
    marginBottom: '0.6em'
};
function $9a1abb59f5d10ec8$var$Collapsible(props) {
    const [collapsed, setCollapsed] = $10ecac3e4062713a$export$60241385465d0a34(true);
    const toggleCollapsed = ()=>{
        setCollapsed(!collapsed);
    };
    const count = props.children.length;
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("details", {
        open: !collapsed,
        onToggle: toggleCollapsed,
        children: [
            $23b7c1cb98b19658$export$34b9dba7ce09269b("summary", {
                style: collapsed ? $9a1abb59f5d10ec8$var$collapsibleCollapsedStyle : $9a1abb59f5d10ec8$var$collapsibleExpandedStyle,
                children: (collapsed ? "\u25B6" : "\u25BC") + ` ${count} stack frames were ` + (collapsed ? 'collapsed.' : 'expanded.')
            }),
            $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
                children: [
                    props.children,
                    $23b7c1cb98b19658$export$34b9dba7ce09269b("button", {
                        onClick: toggleCollapsed,
                        style: $9a1abb59f5d10ec8$var$collapsibleExpandedStyle,
                        children: `\u{25B2} ${count} stack frames were expanded.`
                    })
                ]
            })
        ]
    });
}
var $9a1abb59f5d10ec8$export$2e2bcd8739ae039 = $9a1abb59f5d10ec8$var$Collapsible;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function $e95d7084caaf4e6d$export$723fa77eef12dd9f(sourceFileName, fileName) {
    return sourceFileName == null || sourceFileName === '' || sourceFileName.indexOf('~/') !== -1 || sourceFileName.indexOf('node_modules/') !== -1 || sourceFileName.indexOf('error-overlay') !== -1 || sourceFileName.trim().indexOf(' ') !== -1 || fileName == null || fileName === '';
}
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function $a5027556d7003a42$export$64794fcb05cf0bcf(errorName) {
    switch(errorName){
        case 'EvalError':
        case 'InternalError':
        case 'RangeError':
        case 'ReferenceError':
        case 'SyntaxError':
        case 'TypeError':
        case 'URIError':
            return true;
        default:
            return false;
    }
}
var $a5027556d7003a42$export$2e2bcd8739ae039 = $a5027556d7003a42$export$64794fcb05cf0bcf;
const $5ee7d2edb790dd06$var$traceStyle = {
    fontSize: '1em',
    flex: '0 1 auto',
    minHeight: '0px',
    overflow: 'auto'
};
function $5ee7d2edb790dd06$var$StackTrace(props) {
    const { stackFrames: stackFrames, errorName: errorName, contextSize: contextSize, editorHandler: editorHandler } = props;
    const renderedFrames = [];
    let hasReachedAppCode = false, currentBundle = [], bundleCount = 0;
    stackFrames.forEach((frame, index)=>{
        const { fileName: fileName, _originalFileName: sourceFileName } = frame;
        const isInternalUrl = $e95d7084caaf4e6d$export$723fa77eef12dd9f(sourceFileName, fileName);
        const isThrownIntentionally = !$a5027556d7003a42$export$64794fcb05cf0bcf(errorName);
        const shouldCollapse = isInternalUrl && (isThrownIntentionally || hasReachedAppCode);
        if (!isInternalUrl) hasReachedAppCode = true;
        const frameEle = $23b7c1cb98b19658$export$34b9dba7ce09269b($e0e0fa52b83f95a9$export$2e2bcd8739ae039, {
            frame: frame,
            contextSize: contextSize,
            critical: index === 0,
            showCode: !shouldCollapse,
            editorHandler: editorHandler
        }, 'frame-' + index);
        const lastElement = index === stackFrames.length - 1;
        if (shouldCollapse) currentBundle.push(frameEle);
        if (!shouldCollapse || lastElement) {
            if (currentBundle.length === 1) renderedFrames.push(currentBundle[0]);
            else if (currentBundle.length > 1) {
                bundleCount++;
                renderedFrames.push($23b7c1cb98b19658$export$34b9dba7ce09269b($9a1abb59f5d10ec8$export$2e2bcd8739ae039, {
                    children: currentBundle
                }, 'bundle-' + bundleCount));
            }
            currentBundle = [];
        }
        if (!shouldCollapse) renderedFrames.push(frameEle);
    });
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
        style: $5ee7d2edb790dd06$var$traceStyle,
        children: renderedFrames
    });
}
var $5ee7d2edb790dd06$export$2e2bcd8739ae039 = $5ee7d2edb790dd06$var$StackTrace;
const $2eeadf2892cff4e4$var$diffStyle = {
    backgroundColor: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.primaryPreBackground,
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.primaryPreColor,
    padding: '0.5em',
    overflowX: 'auto',
    whiteSpace: 'pre-wrap',
    borderRadius: '0.25rem'
};
function $2eeadf2892cff4e4$export$2e2bcd8739ae039({ diff: diff }) {
    let lines = diff.split('\n').flatMap((line, i)=>[
            $2eeadf2892cff4e4$var$formatLine(line, i),
            '\n'
        ]).slice(0, -1);
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("pre", {
        style: $2eeadf2892cff4e4$var$diffStyle,
        children: lines
    });
}
function $2eeadf2892cff4e4$var$formatLine(line, index) {
    if (line.startsWith('+')) return $23b7c1cb98b19658$export$34b9dba7ce09269b("span", {
        style: {
            color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.diffAdded,
            fontWeight: 'bold'
        },
        children: line
    }, index);
    else if (line.startsWith('-') || line.startsWith('>')) return $23b7c1cb98b19658$export$34b9dba7ce09269b("span", {
        style: {
            color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.diffRemoved,
            fontWeight: 'bold'
        },
        children: line
    }, index);
    else return line;
}
const $4baa71cb4cecc0ea$var$wrapperStyle = {
    display: 'flex',
    flexDirection: 'column'
};
function $4baa71cb4cecc0ea$var$RuntimeError({ errorRecord: errorRecord, editorHandler: editorHandler }) {
    const { error: error, unhandledRejection: unhandledRejection, contextSize: contextSize, stackFrames: stackFrames } = errorRecord;
    const errorName = unhandledRejection ? 'Unhandled Rejection (' + error.name + ')' : error.name;
    // Make header prettier
    const message = error.message;
    let headerText = message.match(/^\w*:/) || !errorName ? message : errorName + ': ' + message;
    headerText = headerText // TODO: maybe remove this prefix from fbjs?
    // It's just scaring people
    .replace(/^Invariant Violation:\s*/, '') // This is not helpful either:
    .replace(/^Warning:\s*/, '') // Break the actionable part to the next line.
    // AFAIK React 16+ should already do this.
    .replace(' Check the render method', '\n\nCheck the render method').replace(' Check your code at', '\n\nCheck your code at');
    let link, diff;
    if (headerText.includes('https://react.dev/link/hydration-mismatch')) {
        [headerText, diff] = headerText.split('https://react.dev/link/hydration-mismatch');
        link = 'https://react.dev/link/hydration-mismatch';
    } else if (headerText.includes('This will cause a hydration error.')) {
        [headerText, diff] = headerText.split('This will cause a hydration error.');
        headerText += 'This will cause a hydration error.';
    }
    let lines = headerText.split('\n');
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
        style: $4baa71cb4cecc0ea$var$wrapperStyle,
        children: [
            $23b7c1cb98b19658$export$34b9dba7ce09269b($c306e3a42547c8c2$export$2e2bcd8739ae039, {
                headerText: lines[0]
            }),
            $23b7c1cb98b19658$export$34b9dba7ce09269b("pre", {
                children: lines.slice(1).join('\n').trim()
            }),
            link && $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
                children: $23b7c1cb98b19658$export$34b9dba7ce09269b("a", {
                    href: link,
                    target: "_blank",
                    rel: "noreferrer",
                    children: link
                })
            }),
            diff && $23b7c1cb98b19658$export$34b9dba7ce09269b($2eeadf2892cff4e4$export$2e2bcd8739ae039, {
                diff: diff.trim()
            }),
            $23b7c1cb98b19658$export$34b9dba7ce09269b($5ee7d2edb790dd06$export$2e2bcd8739ae039, {
                stackFrames: stackFrames,
                errorName: errorName,
                contextSize: contextSize,
                editorHandler: editorHandler
            })
        ]
    });
}
var $4baa71cb4cecc0ea$export$2e2bcd8739ae039 = $4baa71cb4cecc0ea$var$RuntimeError;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ const $7606db210182b733$var$footerStyle = {
    fontFamily: 'sans-serif',
    color: $74bb4be6e9b78681$export$bca14c5b3b88a9c9.footer,
    marginTop: '0.5rem',
    flex: '0 0 auto'
};
function $7606db210182b733$var$Footer(props) {
    return $23b7c1cb98b19658$export$34b9dba7ce09269b("div", {
        style: $7606db210182b733$var$footerStyle,
        children: [
            props.line1,
            $23b7c1cb98b19658$export$34b9dba7ce09269b("br", {}),
            props.line2
        ]
    });
}
var $7606db210182b733$export$2e2bcd8739ae039 = $7606db210182b733$var$Footer;
function $d0eac8b125ed15e2$var$RuntimeErrorContainer(props) {
    const { errorRecords: errorRecords, close: close } = props;
    const totalErrors = errorRecords.length;
    let [currentIndex, setCurrentIndex] = $10ecac3e4062713a$export$60241385465d0a34(0);
    let previous = ()=>{
        setCurrentIndex(currentIndex > 0 ? currentIndex - 1 : totalErrors - 1);
    };
    let next = ()=>{
        setCurrentIndex(currentIndex < totalErrors - 1 ? currentIndex + 1 : 0);
    };
    return $23b7c1cb98b19658$export$34b9dba7ce09269b($20d888b381d18c6c$export$2e2bcd8739ae039, {
        shortcutHandler: (key)=>{
            if (key === 'Escape') props.close();
            else if (key === 'ArrowLeft') previous();
            else if (key === 'ArrowRight') next();
        },
        children: [
            $23b7c1cb98b19658$export$34b9dba7ce09269b($7aae0c9ea64fc08c$export$2e2bcd8739ae039, {
                close: close
            }),
            totalErrors > 1 && $23b7c1cb98b19658$export$34b9dba7ce09269b($1adc179a826c5dd2$export$2e2bcd8739ae039, {
                currentError: currentIndex + 1,
                totalErrors: totalErrors,
                previous: previous,
                next: next
            }),
            $23b7c1cb98b19658$export$34b9dba7ce09269b($4baa71cb4cecc0ea$export$2e2bcd8739ae039, {
                errorRecord: errorRecords[currentIndex],
                editorHandler: props.editorHandler
            }),
            $23b7c1cb98b19658$export$34b9dba7ce09269b($7606db210182b733$export$2e2bcd8739ae039, {
                line1: "This screen is visible only in development. It will not appear if the app crashes in production.",
                line2: "Open your browser\u2019s developer console to further inspect this error.  Click the 'X' or hit ESC to dismiss this message."
            })
        ]
    });
}
var $d0eac8b125ed15e2$export$2e2bcd8739ae039 = $d0eac8b125ed15e2$var$RuntimeErrorContainer;
let $da9882e673ac146b$var$iframe = null;
let $da9882e673ac146b$var$editorHandler = null;
let $da9882e673ac146b$var$currentRuntimeErrorRecords = [];
let $da9882e673ac146b$var$stopListeningToRuntimeErrors = null;
function $da9882e673ac146b$export$25a22ac46f1bd016(handler) {
    $da9882e673ac146b$var$editorHandler = handler;
    if ($da9882e673ac146b$var$iframe) $da9882e673ac146b$var$update();
}
function $da9882e673ac146b$export$74e9101ce4078c0(error, options) {
    $6d40ebe8356580e0$export$9123e6c9c0ac21ed($da9882e673ac146b$var$handleRuntimeError(options))(error, false);
}
function $da9882e673ac146b$export$cda2c88a41631c16(options) {
    if ($da9882e673ac146b$var$stopListeningToRuntimeErrors !== null) throw new Error('Already listening');
    $da9882e673ac146b$var$stopListeningToRuntimeErrors = $6d40ebe8356580e0$export$38ec23daa6e8dcdf($da9882e673ac146b$var$handleRuntimeError(options));
}
const $da9882e673ac146b$var$handleRuntimeError = (options)=>(errorRecord)=>{
        try {
            if (typeof options.onError === 'function') options.onError.call(null);
        } finally{
            if ($da9882e673ac146b$var$currentRuntimeErrorRecords.some(({ error: error })=>error === errorRecord.error)) // This fixes https://github.com/facebook/create-react-app/issues/3011.
            // eslint-disable-next-line no-unsafe-finally
            return;
            $da9882e673ac146b$var$currentRuntimeErrorRecords = $da9882e673ac146b$var$currentRuntimeErrorRecords.concat([
                errorRecord
            ]);
            $da9882e673ac146b$var$update();
        }
    };
function $da9882e673ac146b$export$1cfa6d161ca81bd9() {
    $da9882e673ac146b$var$currentRuntimeErrorRecords = [];
    $da9882e673ac146b$var$update();
}
function $da9882e673ac146b$export$25ba7d9a816639e7() {
    if ($da9882e673ac146b$var$stopListeningToRuntimeErrors === null) throw new Error('Not currently listening');
    try {
        $da9882e673ac146b$var$stopListeningToRuntimeErrors();
    } finally{
        $da9882e673ac146b$var$stopListeningToRuntimeErrors = null;
    }
}
let $da9882e673ac146b$var$rootNode, $da9882e673ac146b$var$shadow;
function $da9882e673ac146b$var$update() {
    if (!$da9882e673ac146b$var$rootNode) {
        $da9882e673ac146b$var$rootNode = document.createElement('parcel-error-overlay');
        $da9882e673ac146b$var$shadow = $da9882e673ac146b$var$rootNode.attachShadow({
            mode: 'open'
        });
        if ($da9882e673ac146b$var$rootNode) document.body?.appendChild($da9882e673ac146b$var$rootNode);
    }
    if ($da9882e673ac146b$var$currentRuntimeErrorRecords.length > 0 && $da9882e673ac146b$var$shadow) $b6c7f0288a15c619$export$b3890eb0ae9dca99($23b7c1cb98b19658$export$34b9dba7ce09269b("dialog", {
        ref: (d)=>d?.showModal(),
        style: $74bb4be6e9b78681$export$7ef984671d1853d7,
        onClose: $da9882e673ac146b$export$1cfa6d161ca81bd9,
        children: $23b7c1cb98b19658$export$34b9dba7ce09269b($da9882e673ac146b$var$ErrorOverlay, {})
    }), $da9882e673ac146b$var$shadow);
    else {
        $da9882e673ac146b$var$rootNode?.remove();
        $da9882e673ac146b$var$rootNode = null;
    }
}
function $da9882e673ac146b$var$ErrorOverlay() {
    if ($da9882e673ac146b$var$currentRuntimeErrorRecords.length > 0) return $23b7c1cb98b19658$export$34b9dba7ce09269b($d0eac8b125ed15e2$export$2e2bcd8739ae039, {
        errorRecords: $da9882e673ac146b$var$currentRuntimeErrorRecords,
        close: $da9882e673ac146b$export$1cfa6d161ca81bd9,
        editorHandler: $da9882e673ac146b$var$editorHandler
    });
    return null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"bYT6T"}]},["3wBHn","eM1fv"], "eM1fv", "parcelRequire09a6", {}, null, null, "http://localhost:1234")

//# sourceMappingURL=GDV_Projekt.64b87d6c.js.map
